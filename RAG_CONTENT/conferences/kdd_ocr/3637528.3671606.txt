An Offline Meta Black-box Optimization Framework for Adaptive
Design of Urban Traffic Light Management Systems
Taeyoung Yun∗
KAIST
Daejeon, Republic of Korea
99yty@kaist.ac.krKanghoon Lee∗
KAIST
Daejeon, Republic of Korea
leehoon@kaist.ac.krSujin Yun
KAIST
Daejeon, Republic of Korea
yunsj0625@kaist.ac.kr
Ilmyung Kim
Korea Telecom
Seoul, Republic of Korea
kim.ilmyung@kt.comWon-Woo Jung
Korea Telecom
Seoul, Republic of Korea
jung.wonwoo@kt.comMin-Cheol Kwon
Korea Telecom
Seoul, Republic of Korea
tony.kwon@kt.com
Kyujin Choi
Korea Telecom
Seoul, Republic of Korea
kyujin.choi@kt.comYoohyeon Lee
Korea Telecom
Seoul, Republic of Korea
yoohyeon.lee@kt.comJinkyoo Park†
KAIST
Daejeon, Republic of Korea
jinkyoo.park@kaist.ac.kr
Abstract
Complex urban road networks with high vehicle occupancy fre-
quently face severe traffic congestion. Designing an effective strat-
egy for managing multiple traffic lights plays a crucial role in man-
aging congestion. However, most current traffic light management
systems rely on human-crafted decisions, which may not adapt well
to diverse traffic patterns. In this paper, we delve into two pivotal
design components of the traffic light management system that
can be dynamically adjusted to various traffic conditions: phase
combination and phase time allocation. While numerous studies
have sought an efficient strategy for managing traffic lights, most
of these approaches consider a fixed traffic pattern and are limited
to relatively small road networks. To overcome these limitations,
we introduce a novel and practical framework to formulate the opti-
mization of such design components using an offline meta black-box
optimization. We then present a simple yet effective method to ef-
ficiently find a solution for the aforementioned problem. In our
framework, we first collect an offline meta dataset consisting of
pairs of design choices and corresponding congestion measures
from various traffic patterns. After collecting the dataset, we em-
ploy the Attentive Neural Process (ANP) to predict the impact of
the proposed design on congestion across various traffic patterns
with well-calibrated uncertainty. Finally, Bayesian optimization,
with ANP as a surrogate model, is utilized to find an optimal design
for unseen traffic patterns through limited online simulations. Our
experiment results show that our method outperforms state-of-the-
art baselines on complex road networks in terms of the number of
∗Both authors contributed equally to this research.
†Corresponding author.
This work is licensed under a Creative Commons Attribution
International 4.0 License.
KDD ’24, August 25–29, 2024, Barcelona, Spain
©2024 Copyright held by the owner/author(s).
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671606waiting vehicles. Surprisingly, the deployment of our method into
a real-world traffic system was able to improve traffic throughput
by 4.80% compared to the original strategy.
CCS Concepts
•Computing methodologies →Search methodologies; •Ap-
plied computing →Transportation.
Keywords
Traffic Lights, Meta-Learning, Black-box Optimization
ACM Reference Format:
Taeyoung Yun, Kanghoon Lee, Sujin Yun, Ilmyung Kim, Won-Woo Jung,
Min-Cheol Kwon, Kyujin Choi, Yoohyeon Lee, and Jinkyoo Park. 2024. An
Offline Meta Black-box Optimization Framework for Adaptive Design of
Urban Traffic Light Management Systems. In Proceedings of the 30th ACM
SIGKDD Conference on Knowledge Discovery and Data Mining (KDD ’24),
August 25–29, 2024, Barcelona, Spain. ACM, New York, NY, USA, 12 pages.
https://doi.org/10.1145/3637528.3671606
1 Introduction
Traffic congestion is a growing problem caused by the rise in the
number of vehicles and the complexity of urban road networks,
leading to wasted time and harmful emissions [ 2]. In highly de-
veloped cities with intricate road networks, solving congestion by
modifying or extending the existing traffic infrastructure is expen-
sive and time-consuming. In this context, an intelligent traffic light
management system emerges as a promising method to alleviate
congestion in urban areas [23].
Several components of the traffic light management system can
be adjusted to significantly mitigate overall road network conges-
tion. Figure 1 illustrates the two primary components of a traffic
light management system that can be optimally designed consid-
ering diverse traffic patterns. First, we can determine which com-
bination of phases should be assigned to each traffic light. After
selecting the combination, we decide the proportion allocated to
6202
KDD ’24, August 25–29, 2024, Barcelona, Spain Taeyoung Yun et al.
Figure 1: Design components of traffic light scheme.
each phase (also known as the green split). Both components are
crucial for coordinating multiple traffic lights to reduce congestion.
Many traffic engineering methods have been proposed to de-
rive an efficient strategy for managing traffic lights on urban road
networks. Classical methods attempt to formulate the green split
optimization as mathematical programming, like mixed integer
programming. They often rely on strong assumptions such as uni-
form vehicle arrival rates and fixed right-turn ratios [ 31,42,49,52].
While these methods have shown promising results [ 32], they focus
only on single or axis-aligned intersections, and their assumptions
may not match well with complex traffic networks. Recent ap-
proaches formulate the problem as a black-box optimization and
apply various algorithms, including genetic algorithms [ 30,58], par-
ticle swarm optimization [ 6,7], and Bayesian optimization [ 22,46].
However, these methods typically solve the problem under a fixed
traffic pattern, necessitating an optimization from scratch when a
new traffic pattern emerges.
To overcome the aforementioned limitations, we present a novel
and practical framework that can adaptively find an optimal design
of phase combination and time allocation for diverse traffic patterns.
We treat the optimization of such design components as an offline
meta black-box optimization. Within this framework, our aim is to
find an optimal design for an unseen traffic pattern with a limited
number of online simulations while leveraging prior knowledge
from a previously collected offline meta dataset.
We propose a simple yet effective method to solve the formulated
problem. Our key idea is a novel combination of Attentive Neural
Process (ANP) and Bayesian optimization (BO). Initially, we gather
an offline meta dataset comprising pairs of design choices and their
corresponding traffic measures from various traffic patterns. After
collecting the dataset, we train ANP to predict the performance of
the proposed design on different traffic patterns with well-calibrated
uncertainty, which is crucial in the offline meta-training process.
Subsequently, we integrate the trained ANP model with BO as a
means of surrogate model. This integration allows us to effectively
utilize the capability of performance prediction on various traffic
patterns with well-calibrated uncertainty of the ANP model, en-
abling us to find an optimal design for unseen traffic patterns with
limited online evaluations.
Our method exhibits superior performance across diverse road
networks with realistic traffic patterns. Moreover, we also deploy
our method into real-world traffic light management systems on
urban road networks and demonstrate that our method improves
traffic flow compared to the original strategy.2 Preliminaries
2.1 Traffic Terminology
In this section, we define some terminologies regarding traffic lights
and road network systems.
Definition 2.1.1 (Traffic Network and Traffic Lights). Traffic net-
work can be defined as a graph G=(V,E), whereVis a set of
intersections andEis a set of lanes that connect adjacent inter-
sections. Each intersection is equipped with a traffic light device
that determines the order and direction of vehicle movements in
all lanes at the intersection.
Definition 2.1.2 (Traffic Pattern) : Traffic pattern 𝑝can be defined as
a set of vehicle movements, {(𝑜1,𝑑1,𝑡1),(𝑜2,𝑑2,𝑡2),···,(𝑜𝑉,𝑑𝑉,𝑡𝑉)},
where(𝑜𝑣,𝑑𝑣)represents an origin-destination (OD) pair and 𝑡𝑣
denotes the departure time of the 𝑣th vehicle.
Definition 2.1.3 (Traffic Light Phase). Traffic light phase refers to a
specific set of traffic movements that are allowed. During a specific
phase, only certain vehicular or pedestrian actions are permitted.
Common movements include going straight, turning left, and valid
combinations of various movements.
Definition 2.1.4 (Traffic Light Phase Combination). Traffic signal
phase combination comprises a set of traffic signal phases. Most real-
world traffic lights determine phase combination as 4 ∼5 number of
signal phases and execute them in an iterative manner.
Definition 2.1.5 (Traffic Light Phase Time Allocation). Once the
traffic light determines the phase combination to circle, we can
decide the proportion of time allocated to each phase given a fixed
cycle time. Phase time allocation refers to such ratio, and it is also
often called a green split in transportation literature [9].
2.2 Black-box Optimization
Black-box optimization (BBO) has become a de-facto framework
to formulate the optimization problem where the oracle function
is non-convex and non-differentiable. Given a black-box function
𝑓:R𝑑→R, we can formulate the problem as follows:
find x∗=arg max
x∈R𝑑𝑓(x) (1)
where xis our𝑑-dimensional decision variable. Numerous methods
have been discussed to solve the black-box optimization problem,
such as evolutionary algorithms [ 19], genetic algorithms [ 45], and
Bayesian optimization [12].
In many real-world applications, we constantly encounter new
optimization problems that are different but similar to previously
seen problems. Unfortunately, naive BBO algorithms start the opti-
mization process from scratch when encountering new problems.
To mitigate this issue, researchers turn their eyes to leveraging
prior knowledge to accelerate the optimization process for the new
black-box function [ 10,39,57]. This approach is termed a meta
black-box optimization (Meta BBO), formulated as follows:
find x∗=arg max
x∈R𝑑𝑓(x), Given𝑓1,𝑓2.···,𝑓𝑁(2)
where𝑓1,𝑓2,···,𝑓𝑁and𝑓are i.i.d samples from the distribution
over functions 𝜌(·).
In this paper, we present a more practical framework, an offline
meta black-box optimization, where we have access only to an
offline dataset collected from different black-box functions and
6203An Offline Meta Black-box Optimization Framework for Adaptive Design of Urban Traffic Light Management Systems KDD ’24, August 25–29, 2024, Barcelona, Spain
online interactions with functions unavailable. In the next section,
we will explore our formulation in greater detail.
2.3 Neural Processes
Neural processes (NP, [ 16]) are the family of stochastic processes,
which learn a distribution over functions and have a broad range
of applications, including regression [ 25], classification [ 18], and
generation tasks [ 14]. Unlike Gaussian Processes (GP, [ 41]), which
have a pre-defined prior for modeling a target function, NP can
learn a data-driven prior, enabling them to represent a wide range
of complex distributions of functions.
Formally, NP introduces a latent variable zand uses neural net-
works to model encoder and decoder networks. Let 𝜙and𝜃be pa-
rameters of the encoder and decoder of NP, respectively. Given con-
text setDctx={(x𝑐,𝑦𝑐)}|𝐶|
𝑐=1and target setDtar={(x𝑡,𝑦𝑡)}|𝐶|+|𝑇|
𝑡=|𝐶|+1,
the NP encoder first learns a representation r𝑐=𝐸𝜙(x𝑐,𝑦𝑐)for each
context. These representations are aggregated to obtain a global
representation rctx, which is used for parameterizing the distribu-
tion of a latent variable z∼𝑞𝜙(z|rctx). Finally, given the sampled
latent variable z, the NP decoder returns the predictive distribution
of the target set as follows:
|𝐶|+|𝑇|Ö
𝑡=|𝐶|+1𝑝𝜃(𝑦𝑡|x𝑡,z)=|𝐶|+|𝑇|Ö
𝑡=|𝐶|+1N(𝑦𝑡|𝜇𝜃(x𝑡,z),𝜎2
𝜃(x𝑡,z)) (3)
We train the parameters of NP to maximize the target log-likelihood.
As it is intractable, we try to maximize the ELBO term below:
log|𝐶|+|𝑇|Ö
𝑡=|𝐶|+1𝑝(𝑦𝑡|x𝑡,Dctx)=log∫|𝐶|+|𝑇|Ö
𝑡=|𝐶|+1𝑝(𝑦𝑡|x𝑡,z)𝑝(z|Dctx)𝑑z
(4)
≥E𝑞𝜙(z|Dtar)|𝐶|+|𝑇|∑︁
𝑡=|𝐶|+1log𝑝𝜃(𝑦𝑡|x𝑡,z)−𝐷𝐾𝐿
𝑞𝜙(z|Dtar)||𝑞𝜙(z|Dctx)
(5)
A common extension of NP is an Attentive Neural Process (ANP,
[25]), which enhances the expressive power of NP. ANP introduces
a self-attention module to model higher-order interactions between
context pairs while preserving permutation invariance. To predict
the target output, ANP employs a cross-attention module instead
of mean aggregation so that the target input attends more closely
to context representations relevant to the prediction.
2.4 Bayesian Optimization
Bayesian optimization (BO) is one of the popular techniques to
solve black-box optimization. BO is mainly composed of two parts:
surrogate model and acquisition function. The surrogate model
approximates the objective function, providing a predictive output
value distribution. GP is the most commonly employed surrogate
model. Then, the acquisition function is utilized to choose the next
candidate to evaluate by balancing the predicted mean and variance
from the surrogate model. Several acquisition functions have been
proposed, including upper confidence bound (UCB, [ 44]), expected
improvement (EI, [ 35]), and probability of improvement (PI, [ 28]).
After evaluating the candidate, BO utilizes this new evaluationto update the surrogate function and repeat the process until an
optimum is achieved.
3 Proposed Framework
This section introduces a novel framework to address the adaptive
design optimization problem for deriving an efficient urban traf-
fic light management system. While we focus on the phase time
allocation optimization problem to explain our framework, it can
be easily extended to the phase combination optimization problem.
Please refer to Appendix A.3 for a more detailed task description.
3.1 Notation
We begin by defining the decision variable and objective function
utilized in our framework.
Definition 3.1.1 (Decision Variable) Given a traffic network Gwith
𝐼intersections, we can define our decision variable x=[𝑥1,𝑥2,···,𝑥𝐼]
representing our phase time allocation design, where 𝑥𝑖denotes
phase time allocation design for the 𝑖th intersection. Specifically,
𝑥𝑖can be defined as a vector, [𝑥𝑖1,···,𝑥𝑖𝐽], where𝐽is the number
of phases and 𝑥𝑖𝑗∈[0,1]is the unnormalized ratio assigned to 𝑗th
phase of the 𝑖th intersection.
Definition 3.1.2 (Objective Function). Given a traffic network G
with𝐼intersections and a proposed phase time allocation design
x, our objective function 𝑓is a mapping from the chosen design x
to the congestion measure. This measure is specified by deploying
such design into the traffic system under traffic pattern 𝑝.
Congestion measure could be a negative of the average number
of waiting vehicles or traffic throughput. As such metrics have no
analytically closed form, we can only observe the output 𝑦=𝑓(x)+𝜖
corresponding to the given input, with other intrinsic information
remaining hidden. It is a common black-box optimization setting
where we should iteratively explore the domain space through trial
and error until achieving a satisfactory solution.
3.2 Offline Meta Dataset
Now we define offline meta dataset D, which consists of input-
output pairs from various objective functions. We can readily en-
counter situations where offline meta dataset exists in various indus-
trial systems. In the context of traffic light systems, we constantly
encounter different traffic patterns every day, and we can collect
log data of vehicle movements corresponding to various designs
using loop detectors or surveillance cameras.
Definition 3.2.1 (Offline Meta Dataset). Given a traffic network G
with𝐼intersections and set of 𝑁objective functions {𝑓1,𝑓2,···,𝑓𝑁}
specified by different traffic patterns {𝑝1,𝑝2,···,𝑝𝑁}, we can col-
lect an offline meta dataset Dconsisting of 𝑀pairs of designs and
the congestion measures for 𝑁different functions.
D={D1,D2,···,D𝑁} (6)
D𝑛=(X𝑛,𝑌𝑛)={(x𝑛
𝑚,𝑦𝑛
𝑚)}𝑀
𝑚=1∀𝑛=1,2,···,𝑁 (7)
where x𝑛𝑚is the𝑚th proposed design evaluated on 𝑓𝑛and𝑦𝑛𝑚is a
corresponding congestion measure, 𝑦𝑛𝑚=𝑓𝑛(x𝑛𝑚)+𝜖.
It is natural to assume that underlying similarities exist between
different traffic patterns. We believe that exploiting the knowledge
6204KDD ’24, August 25–29, 2024, Barcelona, Spain Taeyoung Yun et al.
Figure 2: Overview of our proposed method.
from the existing offline meta dataset can help to optimize high-
dimensional design problems associated with devising efficient
traffic light schemes for large traffic networks.
3.3 Offline Meta Black-box Optimization
Finally, we formulate the adaptive design of phase time allocation
for an unseen traffic pattern as an offline meta black-box optimiza-
tion problem.
Definition 3.3.1 (Offline Meta Black-box Optimization for Adap-
tive Design of Phase Time Allocation for Unseen Traffic Patterns).
Given a traffic network Gwith𝐼intersections and offline meta
datasetDcollected fromGunder𝑁different traffic patterns, our
problem can be defined as follows:
x∗=arg maxx𝑓unseen(x), GivenDfrom Equation (6) .(8)
where𝑓unseenis the objective function specified by unseen traffic
pattern, which is not included in the offline meta dataset.
3.4 Differences with RL-based Approaches
We emphasize that our method focuses on solving design optimiza-
tion problems for discovering efficient traffic light management
systems instead of deriving a real-time feedback controller. While
reinforcement learning (RL) has been considered a promising frame-
work to control traffic lights in real-time [ 3,17,36,53–55,59], to
best of our knowledge, those methods have not been deployed
for real traffic network systems due to several challenges [ 4,40].
Firstly, most RL-based methods define an action as selecting the
next phase from a pre-defined set of phases with short decision
intervals. This approach can lead to frequent and inconsistent phase
transitions, potentially confusing drivers [ 8,37]. Moreover, they
require the frequent acquisition of accurate traffic flow data in
real-time, necessitating sophisticated and expensive sensing and
computing technologies [ 15]. Our method distinguishes itself from
those methods by framing the problem as a static optimization.4 Proposed Method
In this section, we propose a simple yet effective method to solve
the problem formulated in the previous section. Our method encom-
passes three primary stages: Offline Data Collection, Meta Training,
and Online Adaptation. We innovate each process to enhance our
method. First, we accelerate the data collection process via paral-
lelization with random sampling. Subsequently, we meta-train ANP
using the collected offline meta dataset. Lastly, we employ Bayesian
optimization for few-shot online adaptation with the trained ANP
as a surrogate model. Figure 2 provides an overview of our method.
4.1 Offline Data Collection
We construct the offline meta dataset by evaluating various designs
on different traffic functions. For sampling design x, we use random
sampling strategy. While it may be far from the optimal strategy,
it is efficient since we can parallelize the data collection process.
Conversely, collecting samples via optimization strategies must
be done sequentially as they make decisions based on previous
evaluations, which is computationally expensive.
4.2 Meta-Training Neural Process with Offline
Data
We employ ANP to predict the distribution of the objective func-
tion𝑓given a context set Dctx={(x𝑐,𝑦𝑐)}|𝐶|
𝑐=1. As a type of meta-
learning, ANP can effectively infer the objective function with few
evaluations. In addition, its uncertainty quantification helps over-
come the distributional shift issue when using the offline dataset.
Figure 2 depicts the process of how we train ANP with the offline
meta dataset. For each training step, we arbitrarily choose a dataset
D𝑛from the offline meta dataset D. Then, we draw samples from
theD𝑛and split them into context and target sets.
D𝑛
ctx={(x𝑛
𝑐,𝑦𝑛
𝑐)}|𝐶|
𝑐=1,D𝑛
tar={(x𝑛
𝑡,𝑦𝑛
𝑡)}|𝐶|+|𝑇|
𝑡=|𝐶|+1(9)
D𝑛
ctx,D𝑛
tar⊂D𝑛(10)
where|𝐶|,|𝑇|represent the number of samples in the context and
target sets, respectively. We train ANP to maximize the ELBO term
defined in Equation (5) for sampled context set D𝑛
ctxand target set
6205An Offline Meta Black-box Optimization Framework for Adaptive Design of Urban Traffic Light Management Systems KDD ’24, August 25–29, 2024, Barcelona, Spain
Figure 3: Illustration of possible phases and combinations.
D𝑛
tar. Training ANP with samples from different traffic patterns
enables learning of a data-driven prior, which can be used to quickly
infer unseen traffic pattern with a small number of samples acquired
from that pattern.
4.3 Online Adaptation with Bayesian
Optimization
After meta-training ANP, we employ BO to find an optimum design
for unseen traffic patterns as shown in Figure 2. Firstly, we set Don
as an empty set and initialize a surrogate model with a meta-trained
ANP. For each evaluation step 𝑘, we approximate the target function
𝑓unseenwith the surrogate model. In other words, our model infers
a posterior distribution of the target function conditioned on Don.
ANP projectsDoninto zand implicitly captures the similarity
between the target traffic pattern and patterns that are used for
collecting offline meta dataset in the latent space.
Given posterior distribution, the acquisition function identifies
an optimal-looking candidate by balancing the predicted mean and
variance. Among various acquisition functions, we use upper confi-
dence bound (UCB) as a default setting. After selecting x𝑡+1, we eval-
uate the proposed design and get results, 𝑦𝑘+1=𝑓unseen(x𝑘+1)+𝜖.
Then we update the online dataset D𝑜𝑛←D𝑜𝑛∪{(x𝑘+1,𝑦𝑘+1)}
and repeat the process until the end of the budget 𝐾.
5 Experiments
This section presents our experiment results on adaptive design
optimization tasks, phase combination, and phase time allocation.
We validate our method on various sizes of traffic networks.
5.1 Experiment Setting
We conduct our experiments on SUMO [ 1], an open-source traffic
simulator supporting a large-scale traffic lights management system.
For all experiments, we evaluate the proposed design by aggregating
the average number of waiting vehicles from all intersections.
5.1.1 Traffic Environments. We evaluate our method on seven dif-
ferent traffic road networks, including four synthetic road networks
and three real-world road networks, Hangzhou_4 ×4, Manhattan_16×3,
and Manhattan_28 ×7. Figure 4 illustrates the real road networks
used in our experiments.
•Synthetic road networks: We create four synthetic road networks
with different sizes: 2×2, 3×3, 4×4, and 5×5 grids.
Figure 4: Illustration of road networks used for our experi-
ments: (Left) Hangzhou_4 ×4, (Right) Manhattan_28 ×7. Fig-
ures are taken from [54].
•Hangzhou_4×4: It consists of 16 intersections in Gudang Sub-
district with traffic data generated from the surveillance cameras.
•Manhattan_16×3, 28×7: Each network comprises 48 and 196
intersections in the upper east side of Manhattan with traffic
data from the open-source taxi trip data.
In case of the synthetic networks, we pre-define a set of origin-
destination pairs and sample the interval Δ𝑡between vehicles for
each pair from randomly initialized Poisson distribution to create
diverse patterns. For real-world networks, as we already have a
predetermined traffic pattern, we randomly reassign departure time
𝑡for each vehicle to create diverse traffic patterns. For further
details, please refer to Appendix A.1.
5.1.2 Design Components. We evaluate our method on two differ-
ent adaptive design optimization tasks for coordinating multiple
traffic lights on urban road networks.
•Phase combination: We choose a phase combination among pre-
defined four valid phase combinations for all intersections. Fig-
ure 3 shows possible combinations of phases. We evenly distrib-
ute cycle time into all phases.
•Phase time allocation: We choose the ratio to be assigned for
each phase at every intersection. We use the Combination 1 in
Figure 3 as a default setting. We also guarantee at least 30 seconds
for all phases. The cycle time is set to 180.
Note that we guarantee minimum green time for each phase. While
it is a practical assumption since pedestrians require adequate time
to pass crosswalks in real-world, it is frequently overlooked in
real-time phase controlling strategies.
5.1.3 Offline Data Collection. For all experiments, we prepare an
offline meta dataset from 120 different traffic patterns and split it
into a ratio of 5:1 for train and valid datasets. We evaluate 200 ran-
domly sampled designs for each traffic pattern in both datasets. In
Manhattan_28×7 network with phase combination design problem,
the search space is 428×7, where our offline meta dataset can cover
only a tiny fraction of the whole search space.
5.2 Baselines
We consider several state-of-the-art baselines suitable for design
optimization problems.
•BBO: Black-box optimization methods search an optimal design
by trial and error through iterative online evaluations. Genetic
algorithm (GA [ 45]), particle swarm optimization (PSO [ 24]), GP
6206KDD ’24, August 25–29, 2024, Barcelona, Spain Taeyoung Yun et al.
Table 1: Performance of all methods on phase combination task. Mean and one standard deviation over 3 seeds are reported.
Frame
work MethodAverage Number of Waiting Vehicles ( ↓)
Grid_2×2
Grid_3×3 Grid_4×4 Grid_5×5 Hangzhou_4×4
Manhattan_16×3 Manhattan_28×7
BBOGA
58.02 ±0.44 147.16 ±1.99 281.00 ±3.72 401.00 ±16.07 294.45 ±3.25
909.25 ±4.15 3667.06 ±7.57
PSO 60.65 ±1.79 150.16 ±0.55 281.73 ±3.72 398.50 ±18.85 296.81 ±1.55
909.02 ±6.95 3671.08 ±0.24
CMA-ES 58.98 ±0.82 147.56 ±3.09 278.59 ±8.03 376.94 ±13.15 292.85 ±1.16
906.88 ±0.82 3664.38 ±0.61
GP-UCB 61.67 ±1.19 160.07 ±3.35 283.74 ±5.03 383.03 ±7.19 295.43 ±0.00
907.53 ±9.27 3675.98 ±4.53
REINFORCE 59.69 ±1.72 151.09 ±11.96 289.56 ±7.37 381.84 ±5.57 299.80 ±5.27
916.88 ±1.15 3691.42 ±1.15
Meta
BBOLGA 59.08 ±0.11 149.47 ±3.38 282.70 ±2.34 386.08 ±19.35 298.60 ±2.17
903.42 ±4.05 3682.88 ±1.34
LES 59.97 ±2.49 154.99 ±1.45 282.38 ±4.53 412.61 ±6.10 299.97 ±3.79
918.85 ±3.82 3673.02 ±2.59
RGPE 57.53 ±0.27 148.77 ±1.84 281.06 ±4.41 379.39 ±3.81 294.78 ±2.00
910.20 ±15.87 3678.96 ±6.08
ABLR 58.52 ±1.08 149.19 ±1.21 282.53 ±2.64 393.76 ±17.34 296.04 ±1.85
907.13 ±7.60 3673.28 ±0.72
FSBO 58.50 ±0.39 146.11 ±1.69 283.38 ±2.24 396.28 ±8.63 295.13 ±1.33
900.50 ±2.60 3669.48 ±7.98
Offline
Meta BBO Ours 57.45 ±0.06 142.57 ±3.48 278.04 ±1.74 347.99 ±4.77 292.69 ±1.16 899.42 ±9.15 3657.28 ±13.72
Table 2: Performance of all methods on phase time allocation task. Mean and one standard deviation over 3 seeds are reported.
Frame
work MethodAverage Number of Waiting Vehicles ( ↓)
Grid_2×2
Grid_3×3 Grid_4×4 Grid_5×5 Hangzhou_4×4
Manhattan_16×3 Manhattan_28×7
BBOGA
53.39 ±0.60 152.19 ±0.47 261.97 ±1.56 430.13 ±1.26 403.06 ±1.04
904.68 ±5.70 3890.35 ±0.45
PSO 54.17 ±2.60 151.99 ±1.21 262.32 ±1.91 428.62 ±2.09 403.20 ±1.07
920.26 ±8.59 3903.77 ±2.98
CMA-ES 54.82 ±0.78 151.23 ±0.46 261.61 ±0.69 427.60 ±1.14 401.85 ±2.23
911.06 ±1.13 3886.70 ±3.61
GP-UCB 55.14 ±0.20 152.60 ±0.40 260.15 ±0.73 427.71 ±0.59 404.37 ±0.26
916.11 ±4.00 3891.94 ±3.01
REINFORCE 50.80 ±0.98 151.86 ±0.73 269.63 ±0.56 433.32 ±0.09 402.53 ±2.16
935.74 ±1.58 3897.91 ±3.10
Meta
BBOLGA 51.73 ±0.67 150.58 ±0.13 263.08 ±4.40 426.31 ±0.47 397.04 ±1.08
906.81 ±7.36 3869.06 ±5.41
LES 54.67 ±2.07 152.92 ±2.08 263.98 ±4.20 431.86 ±1.78 411.13 ±5.13
930.45 ±7.11 3906.57 ±12.63
RGPE 51.40 ±0.26 151.40 ±0.19 261.01 ±0.91 425.93 ±0.13 406.80 ±1.31
918.04 ±2.04 3894.00 ±2.85
ABLR 48.58 ±1.50 149.95 ±0.79 259.36 ±2.36 427.64 ±0.48 401.79 ±3.15
916.76 ±4.07 3891.27 ±3.38
FSBO 48.40 ±1.10 149.79 ±0.67 259.86 ±1.79 429.71 ±0.56 407.49 ±0.43
913.90 ±2.25 3893.21 ±1.80
Offline
Meta BBO Ours 46.47 ±0.55 146.94 ±0.97 247.05 ±2.48 421.74 ±0.51 393.66 ±0.42 850.53 ±9.63 3805.36 ±15.96
with UCB as an acquisition function (GP-UCB [ 44]), evolution-
ary algorithm (CMA-ES [ 19]), and reinforcement learning based
method (REINFORCE [56]) are included.
•Meta BBO: We also consider methods that leverage prior knowl-
edge from various tasks to solve the unseen problem more ef-
ficiently rather than starting from scratch. We consider LGA
[29] and LES [ 47], which parameterize components in genetic
and evolutionary algorithms, respectively. We also include meta
Bayesian optimization methods, RGPE [ 10], ABLR [ 39], and FSBO
[57] as state-of-the-art baselines.
5.3 Implementation
For implementing baselines, we try to strictly follow implemen-
tations from authors. To implement our method, we use publicly
available code1. We employ multi-layer perceptron (MLP) to pa-
rametrize encoder and decoder networks for all experiments. We
train the model with 10,000 epochs except for Manhattan scenarios.
Since the Manhattan scenarios have very high dimensional input
space, we increase the number of epochs to 25,000. For each training
step, we utilize a batch size of 16. The size of the context set |𝐶|
is sampled from Unif(10,190), and the size of the target set |𝑇|is
sampled from Unif(10,200−|𝐶|). Please refer to Appendix A.2 for
more details on implementations.
1https://github.com/juho-lee/bnp.git5.4 Main Results
We compare the performance of the proposed method and baselines
on different traffic networks. For testing, we sample 10 new traffic
patterns, which have never been included in the offline meta dataset.
We then perform optimization with 𝐾online trials for each traffic
pattern and report the average of best performance among trials.
For Grid_2×2, 3×3 and 4×4 networks, we set 𝐾=40,60and80
respectively. For other networks, we set 𝐾as 100.
Table 1 and Table 2 summarize the overall experiment results. As
indicated in tables, our method consistently outperforms baselines.
We find that Meta BBO baselines generally exhibit higher perfor-
mance compared to other baselines, which have no capability to
capture underlying similarities between different traffic patterns.
However, those methods do not consistently perform well across
different design components and traffic networks, especially when
the scale of network grows. The performance gap between GP-
UCB and our method also further underscores the superiority of
meta-trained ANP as a surrogate model.
Figure 5 (Left) displays the performance of our proposed method
and baselines over the course of evaluation for phase combina-
tion task on the Hangzhou network. As depicted in the figure, our
method not only achieves superior performance but also converges
more rapidly to the high-performing solution. These results sup-
port our claim that ANP can discern underlying prior distribution
over different traffic patterns even when trained on offline meta
dataset. Then BO utilizes that information from ANP to search the
6207An Offline Meta Black-box Optimization Framework for Adaptive Design of Urban Traffic Light Management Systems KDD ’24, August 25–29, 2024, Barcelona, Spain
Figure 5: Performance comparison between meta BBO meth-
ods and our method on Hangzhou Network across online
trials. Mean and one standard deviation across three random
seeds are reported.
Figure 6: The optimization process of our method for the
sub-region of the Manhattan_16 ×3. Heatmaps show the best
phase time allocation across BO iterations.
domain space efficiently, which synergistically leads to superior
performance. Figure 5 (Right) shows the performance of our method
and baselines for the phase time allocation task on Hangzhou net-
work. We also observe a similar trend on phase time allocation
task, showcasing the efficacy of our method across different design
components.
5.5 Qualitative Analysis
We analyze the efficiency of our proposed method in determining
the appropriate design for unseen traffic patterns adaptively by
comparing congestion levels in the Manhattan_16 ×3 network be-
fore and after optimization. Figure 6 represents the congestion level
of each lane in the sub-region. The lines in green, yellow, and red,
respectively, denote light, moderate, and heavy traffic conditions.
As evident from the figure, our approach significantly reduces con-
gestion. We also illustrate the evolution of the phase time allocation
using heatmap, where a deeper block indicates longer time is al-
located to the phase. As observed, after a few online adaptation
steps, our model recommends an extended green light duration
for the North↔South direction to all intersections. This strategyTable 3: Comparison with RL-based methods on phase com-
bination optimization task.
Metho
dAverage Number of Waiting Vehicles ( ↓)
Grid_2×2
Grid_3×3 Grid_4×4 Grid_5×5
DQN
60.17 ±2.24 156.58 ±0.58 295.87 ±3.87 404.38 ±0.82
PPO 59.33 ±0.98 153.17 ±1.20 290.20 ±3.86 402.02 ±0.43
IDQN 60.51 ±0.42 154.09 ±4.78 293.42 ±3.44 400.99 ±12.13
IPPO 58.96 ±1.41 154.84 ±0.17 293.71 ±1.21 397.21 ±0.79
CoLight 59.33 ±0.85 153.55 ±4.16 292.69 ±3.51 392.41 ±14.77
MAPG 58.36 ±1.33 153.90 ±1.20 290.93 ±2.52 396.63 ±5.71
Ours 57.45 ±0.06 142.57 ±3.4 278.04 ±1.74 347.99 ±4.77
Table 4: Ablation on the size of offline meta dataset. Experi-
ment is conducted on Grid_3×3 phase time allocation task.
Metho
dAverage Number of Waiting Vehicles ( ↓)
Numb
er of Tasks Number of Samples
N20-M200
N50-M200 N100-M40
N100-M100
RGPE
150.45 ±0.41 150.95 ±0.12 151.86 ±0.04
151.26 ±0.22
ABLR 150.68 ±0.94 147.76 ±0.47 150.44 ±0.32
148.07 ±0.43
FSBO 150.16 ±0.19 150.83 ±0.11 150.06 ±0.64
150.96 ±0.12
Ours 147.15 ±0.27 147.15 ±0.27 147.80 ±0.59 146.89 ±1.24
aligns well with the given traffic flow pattern, where a major traffic
volume concentrates on North↔South direction.
5.6 Comparison with RL-based Methods
In this section, we discuss the difference between our framework
with RL-based methods. To facilitate this, we compare the perfor-
mance of RL-based methods on phase combination optimization
tasks. For a fair comparison, we formulate the problem as a 1-step
MDP and provide only a single global reward at the terminal step.
This is a practical setting since on-the-fly traffic information gath-
ering and processing in real-world traffic systems is costly.
We consider several baselines, including Q-Learning based and
Actor-Critic methods. We adopt code from LibSignal [ 33], an open
library for RL-based traffic signal control. DQN [ 34,48] and PPO
[43] train single central RL policy to govern all intersections, while
independent DQN (IDQN, [ 60]) and independent PPO (IPPO) con-
sider each intersection as an independent RL agent. Finally, we also
compare the performance of recent RL-based methods tailored for
traffic light control, CoLight [ 54] and MAPG [ 5]. Both methods
utilize neighborhood information to promote the coordination of
multiple traffic lights.
Table 3 shows the performance of RL-based methods. While re-
cent RL-based methods such as CoLight and MAPG show relatively
good performance than other baselines, our method still surpasses
those methods. It seems that coordinating multiple traffic lights
using a global reward signal is notoriously difficult for RL-based
methods, especially under limited online evaluations [51].
5.7 Additional Experiments
In this section, we present further experiments to deepen our un-
derstanding of the proposed method.
6208KDD ’24, August 25–29, 2024, Barcelona, Spain Taeyoung Yun et al.
Table 5: Experiment Results on Different Evaluation Metrics.
Experiment is conducted on phase time allocation task
Metho
dAverage Traveling Time (sec, ↓)
Grid_2×2
Grid_3×3 Grid_4×4 Grid_5×5
RGPE
202.93 ±1.37 373.86 ±0.58 473.06 ±1.12 634.46 ±0.17
ABLR 194.39 ±0.45 370.56 ±0.75 466.40 ±0.08 630.39 ±0.95
FSBO 194.72 ±2.44 372.54 ±0.05 473.06 ±1.12 634.71 ±0.25
Ours 187.36 ±0.54 365.97 ±2.08 450.94 ±5.74 617.00 ±1.85
Table 6: Experiment Results on Different Evaluation Metrics.
Experiment is conducted on phase time allocation task
Metho
dCO2 Emissions (g/sec, ↓)
Grid_2×2
Grid_3×3 Grid_4×4 Grid_5×5
RGPE
205.99 ±1.41 564.22 ±0.88 978.70 ±4.20 1548.31 ±3.18
ABLR 205.49 ±0.64 561.79 ±1.35 986.09 ±1.53 1555.60 ±4.49
FSBO 204.60 ±2.27 563.54 ±2.07 972.85 ±7.68 1549.79 ±0.40
Ours 197.38 ±6.44 552.34 ±2.55 923.45 ±8.21 1519.29 ±7.66
Table 7: Ablation on different acquisition functions. Experi-
ment is conducted on phase time allocation task.
Metho
dAverage Number of Waiting Vehicles ( ↓)
Grid_2×2
Grid_3×3 Grid_4×4 Grid_5×5
Ours
(UCB) 46.47 ±0.55 146.94 ±0.97 247.05 ±2.48 421.74 ±0.51
Ours (EI) 46.99 ±0.64 147.52 ±1.04 247.89 ±3.02 422.64 ±0.51
Ours (PI) 46.33 ±0.97 146.16 ±0.83 246.47 ±2.95 426.13 ±0.53
Table 8: Ablation on different NP architectures. Experiment
is conducted on phase time allocation task.
Metho
dAverage Number of Waiting Vehicles ( ↓)
Grid_2×2
Grid_3×3 Grid_4×4 Grid_5×5
ANP 46.47 ±0.55 146.94 ±0.97 247.05 ±2.48 421.74 ±0.51
TNP-D
47.25 ±0.07 147.09 ±0.96 255.68 ±11.31 435.00 ±1.99
5.7.1 Size of the Offline Meta Dataset. It is important to check
the robustness of performance in terms of the size of the dataset
since we cannot collect infinitely large amounts of data in real-
world traffic scenarios. To address this, we conduct additional ex-
periments by varying the size of the offline meta dataset in two
ways: (1) changing the number of different traffic patterns, 𝑁, and
(2) changing the number of input-output pairs per pattern, 𝑀. We
perform experiments on Grid 3 ×3 network with phase time alloca-
tion optimization task.
We compare the performance of our method with baselines,
RGPE, ABLR, and FSBO, which utilize the offline meta dataset. The
results from these experiments are listed in Table 4. As the table
illustrates, our model outperforms other baselines regardless of
the number of traffic patterns and samples collected per pattern. It
suggests our model effectively identifies hidden similarities between
different traffic patterns even with the small size of the dataset. We
also find that the performance of our model constantly improves
as the scale of the dataset increases, showcasing its capability.Table 9: Comparison of the average number of passing vehi-
cles on District A before and after applying our method.
Metho
dAvg. Number of Passing Vehicles ( ↑)
T
ue Wed Thu Overall
Original
Strategy 16775 16072 19185 17344
Pr
oposed Method 17672 17735 19120 18176
Impr
ovement (%) 5.35 10.35 -0.34 4.80
5.7.2 Evaluation on Different Metrics. There are several differ-
ent evaluation metrics to validate the efficiency of the proposed de-
sign on traffic system. We prepare two additional evaluation metrics:
average traveling time and CO2 emissions. To compute both met-
rics, we use getTravelingtime() andgetCO2Emission() method
implemented by SUMO [1].
We conduct experiments on synthetic grid environments with
phase time allocation optimization task. As shown in the Tables 5
and 6, our method consistently outperforms other state-of-the-art
baselines even when we change the evaluation metrics.
5.7.3 Acquisition Function Choices. We investigate the depen-
dency of our method in different acquisition functions during online
adaption with Bayesian optimization. To validate this, we prepare
two additional acquisition functions, expected improvement (EI)
and probability of improvement (PI). As shown in the Table 7, our
method demonstrates robust performance across various acquisi-
tion functions.
5.7.4 Model Architecture Choices. We choose ANP as a meta-
surrogate model for our method due to its simplicity and expres-
sivity. We notice that Transformer Neural Processes (TNP, [ 38])
have recently been proposed, which exhibit state-of-the-art perfor-
mance in various benchmark problems. To this end, we compare
our method with TNP-D as a meta-surrogate model.
We perform our experiments on Grid 2 ×2, 3×3, 4×4, and 5×5
networks with phase time allocation task. We present the experi-
ment results in the Table 8. Unlike experiment results in synthetic
benchmark problems reported in recent papers, ANP shows bet-
ter performance compared to TNP-D in our experiment setting.
We speculate that this discrepancy occurs due to the size of the
dataset. Unlike benchmark problems, we have a limited offline
dataset that covers only a small manifold of the whole space. In
these circumstances, expressive methods such as TNP-D might
suffer from severe overfitting issues and lead to poor performance.
Note that our contribution is not developing a novel NP archi-
tecture but introducing a practical framework and method to solve
real-world traffic problems. We hope that our research can raise the
question of whether highly developing NP variants tested in specific
benchmark problems are truly beneficial in real-world problems.
6 Real-World Deployment
We implement the optimized phase time allocation design for the
26 actual traffic lights. Due to privacy issues, we anonymize the
deployment site as District A. Please refer to Appendix D for more
information about the deployment.
6209An Offline Meta Black-box Optimization Framework for Adaptive Design of Urban Traffic Light Management Systems KDD ’24, August 25–29, 2024, Barcelona, Spain
Figure 7: Performance of proposed method in real-world deployment.
For deployment, we initiate by collecting real traffic data using
surveillance cameras, spanning from 6 AM to 10 PM for five weeks.
We assume that the traffic pattern differs per hour. Subsequently,
we train the ANP model using data from the first four weeks and
find an optimal phase time allocation design for each hour of the
last week. Finally, we apply the derived phase time allocation for
the last week of the offline data right into the real-world traffic
system. Note that because we cannot compare different operating
systems in the completely same environment, we choose the week
from the same month that has the most similar traffic pattern.
Table 9 compares the performance of the proposed method with
the original fixed-time strategy used in practice. As shown in the
table, our method improves the overall throughput by an average
of 4.80% compared with the original fixed-time strategy. Figure 7
shows the overall performance of our method compared to the
original fixed-time strategy across three days. Our method improves
the traffic flow most of the time except few hours. It should be noted
that our method has manifested substantial improvement in the
real traffic system despite its low implementation cost.
7 Related Works
7.1 Traffic Light Optimization
Optimizing multiple traffic lights in urban road networks to alleviate
traffic congestion has been widely studied. Li and Sun [30], Zhang
et al. [58] apply genetic algorithm to determine the optimal phase
time allocation while Dabiri and Abbas [6], Dong et al . [7] intro-
duce particle swarm optimization to optimize the phase time al-
location for the overall traffic network. Recently, Tay and Osorio
[46] propose a Bayesian optimization-based approach tailored for
large-scale traffic networks. These methods effectively find appro-
priate traffic light designs but possess limitations. They require
extensive simulation-based evaluations, initiating the optimization
process from scratch for distinct traffic patterns. While our method
aligns with the literature by formulating the design optimization as
a black-box optimization, it distinguishes itself by leveraging prior
knowledge from previously collected offline meta dataset for fast
adaptation to unseen traffic patterns.
7.2 Meta Black-box Optimization
To overcome the aforementioned limitations, meta-learning based
black-box optimization has been proposed. Tjarko Lange et al . [47]meta-learn to recombine solution candidates in CMA-ES via dot-
product self-attention. Similarly, Lange et al . [29] parameterize
selection and mutation rate in genetic algorithms as cross- and
self-attention modules and train them on various tasks.
There is also a line of research that tries to make extensions of
GP to facilitate meta black-box optimization. Feurer et al . [10] uti-
lize a weighted combination of independent GP models and adjust
weight during online adaptation. Perrone et al . [39] utilize a shared
feature map coupled with an adaptive Bayesian linear regression
layer for each task. Wistuba and Grabocka [57] cast meta Bayesian
optimization as a few-shot learning problem and train initial deep
kernel parameters via model-agnostic meta-learning [ 11]. However,
a majority of the meta-learning based black-box optimization meth-
ods actively utilize online evaluations for various tasks, which is
not practical for real-world systems. Contrasting with prior meth-
ods, our approach harnesses an offline meta dataset for training a
meta prediction model with well-calibrated uncertainty to prevent
distributional shift issue during online adaptation process [ 13,27].
8 Conclusion
In this study, we aim to derive an efficient urban traffic light man-
agement system by solving offline meta black-box optimization
problems on two pivotal design components: phase combination
and phase time allocation. We propose a novel combination of ANP
and BO which can identify underlying similarities between traffic
patterns and transfer the knowledge effectively from the offline
meta dataset to the online adaptation process. We demonstrate the
superiority of our novel combination not only on simulation-based
various urban road networks with diverse traffic patterns but also
on real-world deployment.
Acknowledgments
This work was supported by Institute of Information & commu-
nications Technology Planning & Evaluation (IITP) grant funded
by the Korea government(MSIT) (2022-0-01032, Development of
Collective Collaboration Intelligence Framework for Internet of
Autonomous Things)
6210KDD ’24, August 25–29, 2024, Barcelona, Spain Taeyoung Yun et al.
References
[1]Michael Behrisch, Laura Bieker, Jakob Erdmann, and Daniel Krajzewicz. 2011.
SUMO–simulation of urban mobility: an overview. In Proceedings of SIMUL 2011,
The Third International Conference on Advances in System Simulation. ThinkMind.
[2]Shashank Bharadwaj, Sudheer Ballare, Munish K Chandel, et al .2017. Impact of
congestion on greenhouse gas emissions for road transport in Mumbai metropol-
itan region. Transportation Research Procedia 25 (2017), 3538–3551.
[3]Chacha Chen, Hua Wei, Nan Xu, Guanjie Zheng, Ming Yang, Yuanhao Xiong,
Kai Xu, and Zhenhui Li. 2020. Toward a thousand lights: Decentralized deep
reinforcement learning for large-scale traffic signal control. In Proceedings of the
AAAI Conference on Artificial Intelligence, Vol. 34. 3414–3421.
[4]Rex Chen, Fei Fang, and Norman Sadeh. 2022. The Real Deal: A Review of
Challenges and Opportunities in Moving Reinforcement Learning-Based Traffic
Signal Control Systems Towards Reality. arXiv preprint arXiv:2206.11996 (2022).
[5]Tianshu Chu, Jie Wang, Lara Codecà, and Zhaojian Li. 2019. Multi-agent deep
reinforcement learning for large-scale traffic signal control. IEEE Transactions on
Intelligent Transportation Systems 21, 3 (2019), 1086–1095.
[6]Sina Dabiri and Montasir Abbas. 2016. Arterial traffic signal optimization using
Particle Swarm Optimization in an integrated VISSIM-MATLAB simulation envi-
ronment. In 2016 IEEE 19th international conference on intelligent transportation
systems (ITSC). IEEE, 766–771.
[7]Chaojun Dong, Shiqing Huang, and Xiankun Liu. 2010. Urban area traffic signal
timing optimization based on Sa-PSO. In 2010 International Conference on Artificial
Intelligence and Computational Intelligence, Vol. 3. IEEE, 80–84.
[8]Wenlu Du, Junyi Ye, Jingyi Gu, Jing Li, Hua Wei, and Guiling Wang. 2023. Safelight:
A reinforcement learning method toward collision-free traffic signal control. In
Proceedings of the AAAI Conference on Artificial Intelligence, Vol. 37. 14801–14810.
[9]Michel Ferreira and Pedro M d’Orey. 2011. On the impact of virtual traffic lights
on carbon emissions mitigation. IEEE transactions on intelligent transportation
systems 13, 1 (2011), 284–295.
[10] Matthias Feurer, Benjamin Letham, and Eytan Bakshy. 2018. Scalable meta-
learning for bayesian optimization using ranking-weighted gaussian process
ensembles. In AutoML Workshop at ICML, Vol. 7.
[11] Chelsea Finn, Pieter Abbeel, and Sergey Levine. 2017. Model-agnostic meta-
learning for fast adaptation of deep networks. In International conference on
machine learning. PMLR, 1126–1135.
[12] Peter I Frazier. 2018. A tutorial on Bayesian optimization. arXiv preprint
arXiv:1807.02811 (2018).
[13] Scott Fujimoto, David Meger, and Doina Precup. 2019. Off-policy deep rein-
forcement learning without exploration. In International conference on machine
learning. PMLR, 2052–2062.
[14] Miguel Garcia-Ortegon, Andreas Bender, and Sergio Bacallado. 2022. Conditional
Neural Processes for Molecules. arXiv preprint arXiv:2210.09211 (2022).
[15] Deepeka Garg, Maria Chli, and George Vogiatzis. 2022. Fully-autonomous, vision-
based traffic signal control: from simulation to reality. (2022).
[16] Marta Garnelo, Jonathan Schwarz, Dan Rosenbaum, Fabio Viola, Danilo J
Rezende, SM Eslami, and Yee Whye Teh. 2018. Neural processes. arXiv preprint
arXiv:1807.01622 (2018).
[17] Wade Genders and Saiedeh Razavi. 2016. Using a deep reinforcement learning
agent for traffic signal control. arXiv preprint arXiv:1611.01142 (2016).
[18] Jonathan Gordon, Wessel P Bruinsma, Andrew YK Foong, James Requeima, Yann
Dubois, and Richard E Turner. 2019. Convolutional conditional neural processes.
arXiv preprint arXiv:1910.13556 (2019).
[19] Nikolaus Hansen. 2006. The CMA evolution strategy: a comparing review. To-
wards a new evolutionary computation (2006), 75–102.
[20] Philipp Hennig and Christian J Schuler. 2012. Entropy Search for Information-
Efficient Global Optimization. Journal of Machine Learning Research 13, 6 (2012).
[21] José Miguel Hernández-Lobato, Matthew W Hoffman, and Zoubin Ghahramani.
2014. Predictive entropy search for efficient global optimization of black-box
functions. Advances in neural information processing systems 27 (2014).
[22] Hidetaka Ito, Kyota Tsutsumida, Tatsushi Matsubayashi, Takeshi Kurashima, and
Hiroyuki Toda. 2019. Coordinated traffic signal control via bayesian optimization
for hierarchical conditional spaces. In 2019 Winter Simulation Conference (WSC).
IEEE, 3645–3656.
[23] Somavarapu Jahnavi, G Prasanth, D Priyanka, A Sneheth, and M Navya. 2021.
Intelligent traffic light management system. In Proceedings of International Confer-
ence on Advances in Computer Engineering and Communication Systems: ICACECS
2020. Springer, 489–498.
[24] James Kennedy and Russell Eberhart. 1995. Particle swarm optimization. In
Proceedings of ICNN’95-international conference on neural networks, Vol. 4. IEEE,
1942–1948.
[25] Hyunjik Kim, Andriy Mnih, Jonathan Schwarz, Marta Garnelo, Ali Eslami, Dan
Rosenbaum, Oriol Vinyals, and Yee Whye Teh. 2019. Attentive neural processes.
arXiv preprint arXiv:1901.05761 (2019).
[26] Diederik P Kingma and Jimmy Ba. 2014. Adam: A method for stochastic opti-
mization. arXiv preprint arXiv:1412.6980 (2014).[27] Aviral Kumar, Justin Fu, Matthew Soh, George Tucker, and Sergey Levine. 2019.
Stabilizing off-policy q-learning via bootstrapping error reduction. Advances in
Neural Information Processing Systems 32 (2019).
[28] Harold J Kushner. 1964. A new method of locating the maximum point of an
arbitrary multipeak curve in the presence of noise. (1964).
[29] Robert Lange, Tom Schaul, Yutian Chen, Chris Lu, Tom Zahavy, Valentin Dalibard,
and Sebastian Flennerhag. 2023. Discovering Attention-Based Genetic Algorithms
via Meta-Black-Box Optimization. In Proceedings of the Genetic and Evolutionary
Computation Conference. 929–937.
[30] Xiang Li and Jian-Qiao Sun. 2018. Signal multiobjective optimization for urban
traffic network. IEEE Transactions on Intelligent Transportation Systems 19, 11
(2018), 3529–3537.
[31] John DC Little, Mark D Kelson, and Nathan H Gartner. 1981. MAXBAND: A
versatile program for setting signals on arteries and triangular networks. (1981).
[32] P Lowrie. 1990. Scats-a traffic responsive method of controlling urban traffic. Sales
information brochure published by Roads & Traffic Authority, Sydney, Australia
(1990).
[33] Hao Mei, Xiaoliang Lei, Longchao Da, Bin Shi, and Hua Wei. 2022. LibSignal: An
Open Library for Traffic Signal Control. arXiv preprint arXiv:2211.10649 (2022).
[34] Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A Rusu, Joel Veness,
Marc G Bellemare, Alex Graves, Martin Riedmiller, Andreas K Fidjeland, Georg
Ostrovski, et al .2015. Human-level control through deep reinforcement learning.
nature 518, 7540 (2015), 529–533.
[35] Jonas Močkus. 1975. On Bayesian methods for seeking the extremum. In Optimiza-
tion Techniques IFIP Technical Conference: Novosibirsk, July 1–7, 1974. Springer,
400–404.
[36] Seyed Sajad Mousavi, Michael Schukat, and Enda Howley. 2017. Traffic light con-
trol using deep policy-gradient and value-function-based reinforcement learning.
IET Intelligent Transport Systems 11, 7 (2017), 417–423.
[37] Arthur Müller and Matthia Sabatelli. 2022. Safe and Psychologically Pleasant
Traffic Signal Control with Reinforcement Learning using Action Masking. In
2022 IEEE 25th International Conference on Intelligent Transportation Systems
(ITSC). IEEE, 951–958.
[38] Tung Nguyen and Aditya Grover. 2022. Transformer neural processes:
Uncertainty-aware meta learning via sequence modeling. arXiv preprint
arXiv:2207.04179 (2022).
[39] Valerio Perrone, Rodolphe Jenatton, Matthias W Seeger, and Cédric Archambeau.
2018. Scalable hyperparameter transfer learning. Advances in neural information
processing systems 31 (2018).
[40] Syed Shah Sultan Mohiuddin Qadri, Mahmut Ali Gökçe, and Erdinç Öner. 2020.
State-of-art review of traffic signal control methods: challenges and opportunities.
European transport research review 12 (2020), 1–23.
[41] Carl Edward Rasmussen, Christopher KI Williams, et al .2006. Gaussian processes
for machine learning. Vol. 1. Springer.
[42] Roger P Roess, Elena S Prassas, and William R McShane. 2004. Traffic engineering.
Pearson/Prentice Hall.
[43] John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov.
2017. Proximal policy optimization algorithms. arXiv preprint arXiv:1707.06347
(2017).
[44] Niranjan Srinivas, Andreas Krause, Sham M Kakade, and Matthias Seeger. 2009.
Gaussian process optimization in the bandit setting: No regret and experimental
design. arXiv preprint arXiv:0912.3995 (2009).
[45] Felipe Petroski Such, Vashisht Madhavan, Edoardo Conti, Joel Lehman, Kenneth O
Stanley, and Jeff Clune. 2017. Deep neuroevolution: Genetic algorithms are a
competitive alternative for training deep neural networks for reinforcement
learning. arXiv preprint arXiv:1712.06567 (2017).
[46] Timothy Tay and Carolina Osorio. 2022. Bayesian optimization techniques for
high-dimensional simulation-based transportation problems. Transportation
Research Part B: Methodological 164 (2022), 210–243.
[47] Robert Tjarko Lange, Tom Schaul, Yutian Chen, Tom Zahavy, Valenti Dallibard,
Chris Lu, Satinder Singh, and Sebastian Flennerhag. 2022. Discovering Evolution
Strategies via Meta-Black-Box Optimization. arXiv e-prints (2022), arXiv–2211.
[48] Elise Van der Pol and Frans A Oliehoek. 2016. Coordinated deep reinforcement
learners for traffic light control. Proceedings of learning, inference and control of
multi-agent systems (at NIPS 2016) 1 (2016).
[49] Pravin Varaiya. 2013. The max-pressure controller for arbitrary networks of
signalized intersections. In Advances in dynamic network modeling in complex
transportation systems. Springer, 27–66.
[50] Hongyan Wang, Hua Xu, and Zeqiu Zhang. 2023. High-Dimensional Multi-
Objective Bayesian Optimization With Block Coordinate Updates: Case Studies in
Intelligent Transportation System. IEEE Transactions on Intelligent Transportation
Systems (2023).
[51] Tonghan Wang, Jianhao Wang, Yi Wu, and Chongjie Zhang. 2019. Influence-based
multi-agent exploration. arXiv preprint arXiv:1910.05512 (2019).
[52] Fo Vo Webster. 1958. Traffic signal settings. Technical Report.
[53] Hua Wei, Chacha Chen, Guanjie Zheng, Kan Wu, Vikash Gayah, Kai Xu, and
Zhenhui Li. 2019. Presslight: Learning max pressure control to coordinate traffic
signals in arterial network. In Proceedings of the 25th ACM SIGKDD International
6211An Offline Meta Black-box Optimization Framework for Adaptive Design of Urban Traffic Light Management Systems KDD ’24, August 25–29, 2024, Barcelona, Spain
Conference on Knowledge Discovery & Data Mining. 1290–1298.
[54] Hua Wei, Nan Xu, Huichu Zhang, Guanjie Zheng, Xinshi Zang, Chacha Chen,
Weinan Zhang, Yanmin Zhu, Kai Xu, and Zhenhui Li. 2019. Colight: Learning
network-level cooperation for traffic signal control. In Proceedings of the 28th ACM
International Conference on Information and Knowledge Management. 1913–1922.
[55] Hua Wei, Guanjie Zheng, Huaxiu Yao, and Zhenhui Li. 2018. Intellilight: A
reinforcement learning approach for intelligent traffic light control. In Proceedings
of the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data
Mining. 2496–2505.
[56] Ronald J Williams. 1992. Simple statistical gradient-following algorithms for
connectionist reinforcement learning. Machine learning 8 (1992), 229–256.
[57] Martin Wistuba and Josif Grabocka. 2021. Few-shot Bayesian optimization with
deep kernel surrogates. arXiv preprint arXiv:2101.07667 (2021).
[58] Ben Zhang, Lei Shang, and Dan Chen. 2010. Traffic intersection signal-planning
multi-object optimization based on genetic algorithm. In 2010 2nd International
Workshop on Intelligent Systems and Applications. IEEE, 1–4.
[59] Huichu Zhang, Chang Liu, Weinan Zhang, Guanjie Zheng, and Yong Yu. 2020.
Generalight: Improving environment generalization of traffic signal control via
meta reinforcement learning. In Proceedings of the 29th ACM International Con-
ference on Information & Knowledge Management. 1783–1792.
[60] Guanjie Zheng, Xinshi Zang, Nan Xu, Hua Wei, Zhengyao Yu, Vikash Gayah, Kai
Xu, and Zhenhui Li. 2019. Diagnosing reinforcement learning for traffic signal
control. arXiv preprint arXiv:1905.04716 (2019).
A Experiment Details
A.1 Environment Setup
In this subsection, we provide more details of our experiment
setup. Note that we provide our code for experiments in https:
//anonymous.4open.science/r/offline_meta_bbo-4DE4/.
A.1.1 Traffic Networks. For all networks, each road consists of
three lanes. Each lane is designated for a specific direction of ve-
hicle movement: vehicles can choose lane among turning left, go-
ing straight and turning right. For synthetic grid networks, each
intersection is separated by a distance of 300m. Real-world road
networks are imported from OpenStreetMap2.
A.1.2 Traffic Flow. For synthetic road networks, we pre-define
origin-destination (OD) pairs which are mainly composed of four
directions (North↔South, East↔West). To create diverse patterns,
we randomly assign the arrival rate for each OD pair. Concretely, we
use the Poisson Process with the parameter 𝜆, where𝜆represents
the expected value of generated vehicles per second (arrival rate).
Then the time interval between the generation of vehicles, denoted
byΔ𝑡, follows the exponential distribution with 𝜆. For each task, we
randomly generate parameters to satisfy 𝜆𝑁𝑆+𝜆𝑆𝑁+𝜆𝐸𝑊+𝜆𝑊𝐸=
0.1and0.01≤𝜆𝑁𝑆,𝜆𝑆𝑁,𝜆𝐸𝑊,𝜆𝑊𝐸≤0.1, where𝜆𝑁𝑆represents
the Poisson parameters from North to South, and 𝜆𝑆𝑁,𝜆𝐸𝑊, and
𝜆𝑊𝐸are defined in the same manner. By sampling parameters in
this way, we make the number of total vehicles appeared in the
traffic network similar across different traffic patterns.
For real-world networks, we already have data collected from the
real-world traffic. To create diverse traffic patterns with this data,
we do the following procedure. First, we sort vehicle movements
by departure time. Then, we randomly shuffle the departure time
of vehicle movements so that the total number of vehicles that
appeared during the simulation is preserved as follows:
Original Traffic Pattern: {(𝑜1,𝑑1,𝑡1),···,(𝑜𝑉,𝑑𝑉,𝑡𝑉)} (11)
New Traffic Pattern: {(𝑜1,𝑑1,𝑡𝜎(1)),···,(𝑜𝑉,𝑑𝑉,𝑡𝜎(𝑉))} (12)
where𝜎(·)is a permutation operator.
2https://www.openstreetmap.org/A.1.3 Congestion Measure. For all experiments, we simulate the
proposed design of traffic lights under a specific traffic pattern and
network for 30 minutes in simulation time. To compute the average
number of waiting vehicles, we monitor the overall traffic network
every 60 seconds and compute the sum of the number of waiting
vehicles for all intersections at that time. Then, we report the mean
of the sum collected from every interval.
A.2 Model Hyperparameters
For all experiments, we fix the learning rate as 0.005 and use Adam
[26] optimizer for updating parameters. We checkpoint the model
every 200 training epochs and save the model with the highest
target log-likelihood on the validation dataset. Table 10 shows the
hyperparameters we used for various tasks.
A.3 Task Details
A.3.1 Phase Combination. For the phase combination task, our
decision variable x=[𝑥1,𝑥2,···,𝑥𝐼]depicts the phase combination
of all intersections in a traffic network, where 𝑥𝑖indicates the phase
combination of 𝑖th intersection. Specifically, 𝑥𝑖can be defined as
a vector,[𝑥𝑖1,···,𝑥𝑖𝐽], where𝐽is the number of possible phase
combinations and 𝑥𝑖𝑗∈[0,1]is the unnormalized probability to
choose𝑗th phase combination for 𝑖th intersection. We select the
phase combination for 𝑖th intersection among 𝐽combinations by
choosing the index with maximum value from the decision variable
as follows:
arg max
𝑗exp(𝑥𝑖𝑗)
Í𝐽
𝑘=1exp(𝑥𝑖𝑘)∀𝑖=1,···,𝐼 (13)
A.3.2 Phase Time Allocation. For the phase time allocation task,
our decision variable x=[𝑥1,𝑥2,···,𝑥𝐼]depicts the phase allo-
cation of all intersections in a traffic network, where 𝑥𝑖indicates
the phase allocation plan of 𝑖th intersection. Specifically, 𝑥𝑖can be
defined as a vector, [𝑥𝑖1,···,𝑥𝑖𝐽], where𝐽is the number of phases
in phase combination selected by 𝑖th intersection and 𝑥𝑖𝑗∈[0,1]
is the unnormalized ratio assigned to 𝑗th phase of𝑖th intersection
for all𝑗=1,···,𝐽. Given cycle time 𝑐and minimum green time for
each phase𝑔min, we compute the real allocation time for 𝑗th phase
of𝑖th intersection from the decision variable as follows:
𝑔min+(𝑐−𝑔min·𝐽)·exp(𝑥𝑖𝑗)
Í𝐽
𝑘=1exp(𝑥𝑖𝑘)∀𝑖=1,···,𝐼 𝑗=1,···,𝐽
(14)
B Bayesian Optimization Details
In this section, we describe details on Bayesian optimization, es-
pecially on acquisition functions that we use in our experiments.
Acquisition functions are used to balance predicted mean 𝜇(x)and
variance𝜎2(x)from the surrogate model of BO to find an optimal-
looking candidate.
Upper Confidence Bound. The upper confidence bound (UCB)
acquisition function is defined as:
UCB(x)=𝜇(x)+𝛽·𝜎(x) (15)
where𝛽>0is a tunable parameter that controls the trade-off
between exploration and exploitation. For all experiments, we set
𝛽as 2.0.
6212KDD ’24, August 25–29, 2024, Barcelona, Spain Taeyoung Yun et al.
Table 10: Model hyperparameters
Grid_2×2
Grid_3×3 Grid_4×4 Grid_5×5 Hangzhou_4×4 Manhattan_16×3 Manhattan_28×7
Numb
er of Encoder Layers 2 2 2 2 2 3 3
Number of Decoder Layers 2 2 2 2 2 3 3
Hidden Units 32 32 32 32 32 64 64
Training Steps 10K 10K 10K 10K 10K 25K 25K
Expected Improvement. The expected improvement is defined
over the current best-observed value 𝑓(x+)as follows:
EI(x)=(𝜇(x)−𝑓(x+))·Φ(Z)+𝜎(x)·𝜙(𝑍) (16)
where Φ(𝑍)and𝜙(Z)are cumulative and probability density func-
tion of standard normal distribution, respectively.
Probability of Improvement. The probability of improvement (PI)
is defined over the current best-observed value 𝑓(x+)as follows:
PI(x)=Φ𝜇(x)−𝑓(x+)
𝜎(x)
(17)
where Φ(·)is a cumulative density function of standard normal
distribution.
While there are other acquisition functions such as Thompson
Sampling, Entropy Search [ 20] and Predictive Entropy Search [ 21],
we experiment with the above three most widely used acquisition
functions for our experiments. For more details on acquisition
functions, please refer to this paper [12].
C Pseudocode for our proposed method
The pseudocode of our algorithm is described in Algorithm 1.
D Real-world Deployment
We control 26 heterogeneous intersections in district A to evaluate
our method. Each intersection has a different number of phases,
cycle time, and minimum green time for each phase.
We collect real-world traffic data from smart surveillance cam-
eras, similar to the Hangzhou dataset. The main difference from
the public dataset is that we have traffic data with various traffic
patterns. We create different sets of vehicle movements using traf-
fic data gathered from different timezones. Due to confidentiality
agreements with the company that provides the data, we are afraid
that the dataset and simulator used in this study cannot be made
publicly available.
E Discussion and Future Work
We are interested in extending our method. One can consider multi-
objective optimization methods [ 50] to achieve improvements on
various evaluation metrics. Furthermore, there is still room for
additional variables affecting the efficiency of traffic lights, such
as offset and cycle time length. While our method can be directly
applied to those variables, methods that carefully consider the
properties of different variables seem more promising.Algorithm 1 Proposed Method
Require:
M𝜃- Neural Process model
A- Acquisition function
𝑓1,𝑓2,...,𝑓𝑁- Similar traffic patterns
𝑓unseen- Unseen traffic pattern
𝐾- Maximum number of trials for Bayesian Optimization
// Phase 1: Data Collection
Initialize the meta dataset D={}
for𝑛=1,···,𝑁do
Initialize the dataset D𝑛={}
for𝑚=1,···,𝑀do
Random sample the candidate x𝑛𝑚∈X
Evaluate target function 𝑦𝑛𝑚=𝑓𝑛(x𝑛𝑚)
UpdateD𝑛←D𝑛∪{(x𝑛𝑚,𝑦𝑛𝑚)}
end for
UpdateD←D∪{D𝑛}
end for
// Phase 2: Meta-train M𝜃
while𝜃converges do
Sample a task: 𝑛∈{1,···,𝑁}
Sample context and target set: D𝑛
ctx,D𝑛
tar∼D𝑛
Update parameters 𝜃to maximize Equation 5
end while
// Phase 3: Perform Bayesian Optimization
Initialize the online dataset Don={}
fort=1,···,𝑇do
UseDonas a context set for M𝜃
Find x𝑘that maximizesA(x;M𝜃)
Evaluate𝑦𝑘=𝑓unseen(x𝑘)
UpdateDon←Don∪{(x𝑘,𝑦𝑘)}
end for
return arg max x∈Don𝑓unseen(x)
6213