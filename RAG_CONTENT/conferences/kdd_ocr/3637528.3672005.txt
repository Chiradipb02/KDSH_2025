Fair Column Subset Selection
Antonis Matakos
antonis.matakos@aalto.fi
Aalto University
Espoo, FinlandBruno Ordozgoiti
bruno.ordozgoiti@gmail.com
Unaffiliated
London, UKSuhas Thejaswi‚àó
thejaswi@mpi-sws.org
Max Planck Institute for Software
Systems
Kaiserslautern, Germany
ABSTRACT
The problem of column subset selection asks for a subset of columns
from an input matrix such that the matrix can be reconstructed as
accurately as possible within the span of the selected columns. A
natural extension is to consider a setting where the matrix rows
are partitioned into two groups, and the goal is to choose a subset
of columns that minimizes the maximum reconstruction error of
both groups, relative to their respective best rank- ùëòapproxima-
tion. Extending the known results of column subset selection to
this fair setting is not straightforward: in certain scenarios it is
unavoidable to choose columns separately for each group, resulting
in double the expected column count. We propose a deterministic
leverage-score sampling strategy for the fair setting and show that
sampling a column subset of minimum size becomes NP-hard in
the presence of two groups. Despite these negative results, we give
an approximation algorithm that guarantees a solution within 1.5
times the optimal solution size. We also present practical heuristic
algorithms based on rank-revealing QR factorization. Finally, we
validate our methods through an extensive set of experiments using
real-world data.
CCS CONCEPTS
‚Ä¢Theory of computation ‚ÜíUnsupervised learning and clus-
tering; ‚Ä¢Computing methodologies ‚ÜíFeature selection; ‚Ä¢
Mathematics of computing ‚ÜíDimensionality reduction.
KEYWORDS
Column Subset Selection, Dimensionality Reduction, Algorithmic
Fairness, Matrix Factorization, Low Rank Approximation
ACM Reference Format:
Antonis Matakos, Bruno Ordozgoiti, and Suhas Thejaswi. 2024. Fair Col-
umn Subset Selection. In Proceedings of the 30th ACM SIGKDD Conference
on Knowledge Discovery and Data Mining (KDD ‚Äô24), August 25‚Äì29, 2024,
Barcelona, Spain. ACM, New York, NY, USA, 11 pages. https://doi.org/10.
1145/3637528.3672005
‚àóPart of this research was conducted when the author was employed at Aalto University,
Finland.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
¬©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.36720051 INTRODUCTION
Dimensionality reduction techniques such as principal component
analysis (PCA) and non-negative matrix factorization have proven
useful for machine learning and data analysis tasks [ 26,32]. Such
tasks include feature selection, feature extraction, noise removal
and data visualization, among others. These techniques are also
commonly employed as components of larger machine learning
(ML) pipelines to simplify data through lower-dimensional rep-
resentations. However, when the data is divided into subsets (or
groups), an inaccurate low-dimensional representation of any sub-
set can perpetuate inaccuracies in subsequent downstream tasks.
Therefore, there is increasing emphasis on developing techniques
that produce accurate representations for all the different groups.
Notably, Samadi et al . [38] showed that a well-known dimen-
sionality reduction technique, PCA, may incur higher average re-
construction error for a subset of the population than the rest, even
when the groups are of similar size. They proposed fair variants
of PCA, where the objective is to minimize the maximum recon-
struction error for any group. However, a drawback of PCA is that
the results are often hard to interpret, since its output consists of
abstract attributes that might not necessarily be part of the input
data. As an alternative to PCA, one may ask for algorithms that
choose a (small) subset of the original attributes of the dataset to
act as a low dimensional representation.
In the column subset selection problem (CSS), we are given a
data matrix and seek a representative subset of its columns. The
quality of the solution is measured by the residual norm when
the input matrix is projected onto the subspace spanned by the
chosen columns. CSShas been extensively studied, and polynomial-
time approximation algorithms are known for different quality
criteria [1, 4, 6, 13, 14, 31].
In this work, we study the fair column subset selection problem
(FairCSS), where the rows of the data matrix are partitioned into
two groups. The goal is to choose a subset of columns that minimize
the maximum reconstruction error of both groups, through a min-
max objective. This distinguishes our problem from conventional
CSS methods that aim to minimize the reconstruction error of
the entire data matrix and may neglect either group. Here, we
focus on the two-group setting. Generalizing our results to an
arbitrary number of groups is a non-trivial technical leap and thus
left as future work. Nevertheless, binary protected attributes are
encountered often in practice and are commonly the focus of works
on algorithmic fairness [11, 38].
To further motivate the study of FairCSS, consider its application
in drug discovery. Suppose we are given a large dataset of medical
records, where each row represents a patient and the columns
contain genetic information indicating presence (absence) of a gene
expression with binary value 1(0). Due to the size of the genetic
 
2189
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Antonis Matakos, Bruno Ordozgoiti, and Suhas Thejaswi
data, it is reasonable to ask for a succint representation of the
dataset. Using PCA would yield an arbitrary subspace of the data
that is hard to interpret. On the other hand, classical CSS would
return a representative set of columns (genes), however, if there
is bias in the medical records then the reconstruction error could
skew favouring a (majority) group. Thus, any subsequent insights
derived from the biased (succint) data could also perpetuate these
biases. It is possible that, a drug discovered using this biased data is
more (less) effective for men (women), based on the data majority.
Our proposed method, however, returns a subset of columns that
are representative of both groups, thus mitigating potential biases
and ensuring fair representation in subsequent analysis.
The two-group setting of CSSintroduces significant challenges,
making it necessary to view the problem through a new lens. In
CSS, finding the optimal ùëò-column subset is NP-hard [ 39] and thus,
polynomial-time approximation algorithms are usually sought. A
factor ofùëÇ(ùëò)with respect to the best rank- ùëòapproximation is
possible if we are allowed to choose at most ùëòcolumns [ 13], and
better results can be obtained if we allow ùëê‚â•ùëòcolumns [ 5]. In
the two-group fair setting, similar approximation bounds can be
reproduced if we allow twice as many columns in the solution;
by optimizing for each group separately. However, addressing the
two groups separately can raise ethical and legal concerns [ 27,38],
potentially conflicting with the principles of demographic parity
and equal treatment [ 3]. Further, this approach may inadvertently
contribute to segregation and stereotyping. Therefore, our focus is
to find a common subset of representative columns for both groups.
Unfortunately, as we show with an example (see ¬ß 3), in certain
scenarios it may not be possible to do better than choosing twice
as many columns. Can we hope to obtain guarantees of any kind in
this fair setting? We answer this question affirmatively. To achieve
this, we adapt leverage score sampling to our fair setting. Leverage
scores are obtained using the SVD of the matrix, and they are used
to find provably good column subsets for CSS. In particular, Papail-
iopoulos et al . [31] showed that by choosing columns with highest
leverage scores such that their sum adds to a predefined threshold ùúÉ,
a relative-error approximation is possible. In standard CSS, finding
a column subset of minimum size satisfying threshold ùúÉis trivial,
by sorting the leverage scores. In the fair setting however, finding
a subset of leverage scores of minimum size satisfying threshold
ùúÉfor both groups is NP-hard. While the original result can be ex-
tended to the fair setting by solving for both groups independently
and doubling the column count, we present an efficient algorithm
that achieves this with essentially 1.5as many columns. Whether
this factor can be improved is left as an open question. Finally, we
introduce efficient heuristics for the problem based on QR factoriza-
tions with pivoting, and assess their performance in our empirical
evaluation. Our contributions are summarized as follows:
‚Ä¢We introduce the novel problem of fair column subset selection,
where two groups are present in the data and the maximum
reconstruction error of the two groups must be minimized.
‚Ä¢We extend the approach of deterministic leverage score sam-
pling to the two-group fair setting. We show that the smallest
column subset that achieves the desired guarantees is NP-hard
to find, and give a polynomial-time algorithm wih relative-
error guarantees with a column subset of essentially 1.5times
the minimum possible size.‚Ä¢We present efficient heuristics based on QR factorizations with
column pivoting.
‚Ä¢We empirically evaluate our algorithms on real-world data and
show they are able to select fair columns with high accuracy.
Further, we analyse the price of fairness for our formulation.
The paper is organised as follows: Section 2 covers related work.
Section 3 outlines our problem. We adapt deterministic leverage
score sampling to the fair setting in Section 4. Algorithms based on
QR decomposition are given in Section 5. Experimental results are
presented in Section 6. Finally, we conclude in Section 7.
2 RELATED WORK
Our work builds upon related work in the areas of algorithmic
fairness and column subset selection.
Algorithmic fairness. The influential work of Dwork et al .
[16] established a formal notion of fairness in algorithmic decision-
making, which has served as a foundation for subsequent research
in the field. Pedreschi et al . [33] addressed discrimination in data
mining, while [ 23,24] proposed a framework for mitigating dis-
crimination in classification. Since then, there has been extensive
research on algorithmic fairness from various disciplines, includ-
ing economics, game theory, statistics, ethics, and computer sci-
ence [ 7,35‚Äì37]. Fair objectives have been introduced into many
classical computer science problems [ 2,11,18,20,38,42‚Äì44]. Fair
clustering share similarities to fair CSS, with a key distinction: the
former asks for a subset of fair representative data points (rows),
while the later focuses on finding a fair representative column
subset (attributes) [10, 11, 20]. For further reading see [25, 29, 34].
Column Subset Selection. CSScan be viewed as a method for
feature selection. Early work in CSS traces back to the numerical
linear algebra community, and the seminal works of Golub [21]
on pivoted QR factorizations, which was followed by works by
Chan and Hansen [8], Chan [9], Hong and Pan [22] addressing
the problem of finding efficient rank revealing QR factorizations
(RRQR). Recently, CSShas attracted interest in the computer science
community, with approaches that combine sampling with RRQR [ 6,
31], while greedy methods have proved highly effective [1, 17].
Fair PCA. Closest to our work is fair principal component anal-
ysis (FairPCA) by Samadi et al . [38] , where the goal is to find a low-
dimensional projection of the data to optimize a min-max objective
that ensures fairness with respect to two groups. Tantipongpipat
et al. [40] extended FairPCA to a multi-objective setting. Olfat and
Aswani [30] presented a polynomial-time algorithm using convex
programming for the general case with multiple groups. Similar to
FairPCA, we employ a min-max objective, but in contrast, we want
to find a subset of actual columns to approximate the reconstruction
error of both groups. In fact, we show that the problem we define,
fairCSS, is NP-hard for any number of groups (see ¬ß 3).
3 PROBLEM STATEMENT
In this section, we describe relevant terminology and formally
define CSSbefore introducing fair CSS. For a positive integer ùëõwe
denote[ùëõ]={1,...,ùëõ}. For any matrix ùê∂,ùëÉùê∂denotes the projection
operator onto the subspace spanned by the columns of ùê∂.
Problem 1 (Column Subset Selection (CSS)). Given a matrix
ùëÄ‚ààRùëö√óùëõand a positive integer ùëò. The goal is to choose ùëòcolumns
 
2190Fair Column Subset Selection KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
ofùëÄto form a matrix ùê∂‚ààRùëö√óùëòsuch that the reconstruction error
ùëôùëúùë†ùë†(ùëÄ,ùê∂)=‚à•ùëÄ‚àíùëÉùê∂ùëÄ‚à•ùêπ
is minimized, where ‚à•¬∑‚à•ùêπdenotes the Frobenius norm.
Fairness. A solution to CSSgives the best possible column ap-
proximation for the matrix ùëÄoverall. However, if the matrix rows
are partitioned into two groups, it is possible that the reconstruction
error shows significant disparity when measured on each group
separately, for instance, if one of the groups is a minority. In the fair
setting, our goal is to choose a subset of columns that achieves good
reconstruction error for both groups. To formalize this, assume that
the rows of matrix ùëÄare partitioned into two subsets ùê¥andùêµ.
Subscripting a matrix by ùê¥orùêµdenotes the rows corresponding to
ùê¥orùêµ. For ease of notation, we override ùëÄùê¥=ùê¥andùëÄùêµ=ùêµ.
Before presenting our fair CSS formulation, we make two con-
siderations. In CSS, the optimal projection is obtained as ùëÉùê∂=ùê∂ùê∂+,
whereùê∂+is the pseudoinverse of ùê∂. In our setting, even though
we choose a common column subset for both groups, the optimal
reconstruction error for each group is attained by a different projec-
tion operator, that is, ùê∂ùê¥ùê∂+
ùê¥ùê¥andùê∂ùêµùê∂+
ùêµùêµ. Second, we are interested
in minimising the relative loss of each group, with respect to the
optimal reconstruction error, which can be obtained using the best
rank-ùëòapproximation. This is to avoid excessively penalizing ei-
ther of the two groups, when the other group does not have a good
low-rank representation. Note that measuring the reconstruction
error relatively to the best rank- ùëòapproximation is common in CSS
literature. See Boutsidis et al. [5], Papailiopoulos et al. [31].
Definition 1 (Relative group-wise reconstruction error).
Given a matrix ùëÄ‚ààRùëö√óùëõ, a row subset ùê¥‚ààRùëé√óùëõ, withùê¥ùëòits best
rank-ùëòapproximation, and a matrix ùê∂‚ààRùëö√óùëòformed by choosing
ùëòcolumns ofùëÄ. The relative reconstruction error of ùê¥is:
ùëÅùëôùëúùë†ùë†ùê¥(ùëÄ,ùê∂)=‚à•ùê¥‚àíùê∂ùê¥ùê∂+
ùê¥ùê¥‚à•ùêπ
‚à•ùê¥‚àíùê¥ùëò‚à•ùêπ.
Now we formally define our problem.
Problem 2 (FairCSS-MinMax). Given a matrix ùëÄ‚ààRùëö√óùëõwith
row partition ùê¥,ùêµ, and a positive integer ùëò. The goal is to choose ùëò
columns ofùëÄto form a matrix ùê∂‚ààRùëö√óùëòthat optimizes the objective:
min
ùê∂‚ààRùëö√óùëò,
ùê∂‚äÇùëÄmax‚à•ùê¥‚àíùê∂ùê¥ùê∂+
ùê¥ùê¥‚à•ùêπ
‚à•ùê¥‚àíùê¥ùëò‚à•ùêπ,‚à•ùêµ‚àíùê∂ùêµùê∂+
ùêµùêµ‚à•ùêπ
‚à•ùêµ‚àíùêµùëò‚à•ùêπ
.
Thus, we search for a subset of columns that minimizes the
maximum error of either groups. Observe that when groups ùê¥and
ùêµare identical, FairCSS-MinMax is equivalent to CSS, which is
known to be NP-hard [ 39][Theoreom 2.2]. The hardness results
extend to FairCSS-MinMax. In line with preceding arguments,
FairCSS-MinMax isNP-hard for any number of groups.
Observation 1. FairCSS-MinMax isNP-hard.
Limitations. We show that, in some scenarios it is not possible
to do better than solving for two groups separately. In particular,
any algorithm that attempts to solve CSSfor more than one group,
i.e., to achieve errors smaller than ‚à•ùê¥‚à•2
ùêπand‚à•ùêµ‚à•2
ùêπforùê¥andùêµ,
respectively, cannot achieve meaningful bounds on the relative-
error with respect to both ‚à•(ùê¥)ùëò‚à•2
ùêπand‚à•(ùêµ)ùëò‚à•2
ùêπ. Consider thefollowing example:ùëãùê¥0ùê¥
0ùêµùëãùêµ
,
whereùëãùê¥,ùëãùêµare matrices of rank ùëõ>ùëò. If we pick less than
2ùëòcolumns, the error is at least min√çùëõ
ùëñ=ùëòùúé2
ùëñ(ùê¥)√çùëõ
ùëñ=ùëò+1ùúé2
ùëñ(ùê¥),√çùëõ
ùëñ=ùëòùúé2
ùëñ(ùêµ)√çùëõ
ùëñ=ùëò+1ùúé2
ùëñ(ùêµ)
,
where{ùúé1,...,ùúéùëõ}are the singular values with ùúéùëñ‚â•ùúéùëñ+1. Thus,
the relative error can be unbounded if the rank of either submatrix
is numerically close to ùëò, i.e., ifùúéùëò(ùê¥) ‚â´ùúéùëò+1(ùê¥)orùúéùëò(ùêµ) ‚â´
ùúéùëò+1(ùêµ). Clearly, the only way to prevent this is to pick 2ùëòcolumns.
A similar result is yielded by matrices where the blocks of zeroes
are replaced by small values. Despite this, in the following section
we present an algorithm with a bounded-error relative to the best
rank-ùëòapproximation, by relaxing the requirement on the number
of selected columns.
4 PAIRS OF LEVERAGE SCORES
In this section, we discuss leverage scores in the context of the
two-group fair setting. Leverage scores are a pivotal concept that
is extensively studied in CSS literature, as they provide valuable
insights for selecting column subsets with provable approximation
guarantees. We begin by discussing the results of [ 31] on leverage
score sampling. Next, we show that sampling a subset of columns of
minimum size in the two-group fair setting is NP-hard. Finally, we
present an approximation algorithm that samples 1.5times the size
of an optimal solution. An useful concept that is extensively studied
inCSSliterature is leverage scores, which is defined as follows:
Definition 2 (Leverage scores). Letùëâ(ùëò)‚ààRùëõ√óùëòdenote the
top-ùëòright singular vectors of a ùëö√óùëõmatrixùëÄwith rankùúå=
ùëüùëéùëõùëò(ùëÄ)‚â•ùëò. Then, the rank- ùëòleverage score of the ùëñ-th column of
ùëÄis defined as:
‚Ñì(ùëò)
ùëñ(ùëÄ)=‚à•[ùëâ(ùëò)]ùëñ,:‚à•2
2for allùëñ‚àà[ùëõ].
Here,[ùëâ(ùëò)]ùëñ,:denotes theùëñ-th row ofùëâ(ùëò).
Leverage scores are used to find a solution with approximation
guarantees for CSS. In particular, we focus on the following result
by Papailiopoulos et al. [31].
Theorem 1 ([ 31]).Given a matrix ùëÄ‚ààRùëö√óùëõand an integer
ùëò<rank(ùëÄ). LetùúÉ=ùëò‚àíùúñfor someùúñ‚àà(0,1)andùëÜbe a subset
of column indices such that√ç
ùëñ‚ààùëÜ‚Ñì(ùëò)
ùëñ‚â•ùúÉ, andùê∂‚ààRùëö√óùëòbe the
matrix ofùëÄformed by choosing the columns with indices in ùëÜ. Then
we have that
‚à•ùëÄ‚àíùê∂ùê∂+ùëÄ‚à•2
ùêπ‚â§(1‚àíùúñ)‚àí1‚à•ùëÄ‚àíùëÄùëò‚à•2
ùêπ.
In essence, the above result implies that by selecting a column
subset whose leverage scores sum to at least threshold ùúÉ, we obtain
a relative error guarantee with respect to the best rank- ùëòapproxi-
mation. They proposed a deterministic algorithm that picks ùëê‚â•ùëò
columns with the largest leverage scores that sum to at least thresh-
oldùúÉ. The algorithm runs in time ùëÇ(min{ùëö,ùëõ}ùëöùëõ).
Depending on the leverage score distribution, sometimes it may
be necessary to pick more than ùëòcolumns to satisfy the threshold ùúÉ,
andŒ©(ùëõ)in the worst case. Nevertheless, when the leverage scores
follow power-law decay, a small factor of ùëòsuffices [ 31][Theorem 3].
 
2191KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Antonis Matakos, Bruno Ordozgoiti, and Suhas Thejaswi
Fair deterministic leverage-score sampling. In order to achieve
approximation guarantees for both groups, the leverage scores of
bothùê¥andùêµmust sum to at least ùúÉ, individually. While seeking
the minimum number of columns to satisfy the threshold is trivial
in the single-group setting, it becomes NP-hard in the presence
of two groups. Let us formally define the problem and analyse its
complexity.
Problem 3 (Min-FairnessScores). Given matrices ùê¥‚ààRùëöùê¥√óùëõ
andùêµ‚ààRùëöùêµ√óùëõ,ùëò‚ààN: 0<ùëò<rank(ùê¥),rank(ùêµ)and a threshold
ùúÉ=ùëò‚àíùúñfor someùúñ‚àà(0,1), find the smallest set of indices ùëÜ‚äÜ[ùëõ]
such that:‚àëÔ∏Å
ùëñ‚ààùëÜ‚Ñì(ùëò)
ùëñ(ùê¥)‚â•ùúÉand‚àëÔ∏Å
ùëñ‚ààùëÜ‚Ñì(ùëò)
ùëñ(ùêµ)‚â•ùúÉ.
If we find a subset of columns that satisfy both inequalities above,
then due to Theorem 1, we have that,
‚à•ùê¥‚àíùê∂ùê¥ùê∂+
ùê¥ùê¥‚à•ùêπ‚â§(1‚àíùúñ)‚àí1/2‚à•ùê¥‚àíùê¥ùëò‚à•ùêπ=‚áí
ùëÅùëôùëúùë†ùë†ùê¥(ùëÄ,ùê∂)‚â§( 1‚àíùúñ)‚àí1/2.
and similarly, ùëÅùëôùëúùë†ùë†ùêµ(ùëÄ,ùê∂)‚â§( 1‚àíùúñ)‚àí1/2.
A solution to Problem 3 gives us an upper bound on the recon-
struction error. Unfortunately, MinFairnessScores isNP-hard.
Theorem 2. MinFairnessScores isNP-hard.
Proof. To establish hardness we reduce the equal cardinality
partition problem (EqCardPartition) to a decision version of
MinFairnessScores, called ùëê-FairnessScores. The decision ver-
sion asks to find exactlyùëêindices i.e., ùëÜ‚äÜ [ùëõ],|ùëÜ|=ùëêsuch
that√ç
ùëñ‚ààùëÜ‚Ñì(ùëò)
ùëñ(ùê¥) ‚â•ùúÉand√ç
ùëñ‚ààùëÜ‚Ñì(ùëò)
ùëñ(ùêµ) ‚â•ùúÉ. Given a set ùëç=
{ùëù1,...,ùëùùëõ}ofùëõpositive integers, EqCardPartition asks to parti-
tionùëçinto two disjoint subsets ùëã,ùëå such thatùëã‚à™ùëå=ùëç,|ùëã|=|ùëå|
and√ç
ùëùùëñ‚ààùëãùëùùëñ=√ç
ùëùùëó‚ààùëåùëùùëó.EqCardPartition is known to be NP-
complete [19, SP12].
Given an instance of EqCardPartition (ùëç,ùëõ), we reduce it to a
ùëê-FairnessScores instance(ùê¥,ùêµ,ùúÉ,ùëê)as follows. Let ùë†=√ç
ùëùùëñ‚ààùëçùëùùëñ
andùëÄ‚â´ùë†be some constant. Let ùê¥=[‚àöùëù1,...,‚àöùëùùëõ]andùêµ=
‚àöÔ∏É
ùëÄ‚àíùëù1
ùë†,...,‚àöÔ∏É
ùëÄ‚àíùëùùëõ
ùë†be input matrices such that ùê¥‚ààRùëõ√ó1,
ùêµ‚ààRùëõ√ó1. Finally, we set ùúÉ=1/2andùëê=ùëõ/2. We claim that
EqCardPartition is ayesinstance if and only if ùëê-FairnessScores
is ayesinstance. The reduction is polynomial in the input size.
To make the reduction work, we need a way to map the values
in the instance EqCardPartition to leverage scores, which are
obtained from SVD. The most straightforward way is to compute
the rank-1 leverage scores. For all ùëñ‚àà[ùëõ]we can get,
 ‚Ñì(1)
ùëñ(ùê¥),‚Ñì(1)
ùëñ(ùêµ)=ùëùùëñ
ùë†,ùëÄ‚àíùëùùëñ
ùë†
ùëõùëÄ‚àí1
.
For ease of notation, let ùõºùëñ=‚Ñì(ùëò)
ùëñ(ùê¥)andùõΩùëñ=‚Ñì(ùëò)
ùëñ(ùêµ).
Letùëê-FairnessScores be ayesinstance. Then we have a subset
ùëÜ‚äÜ[ùëõ]such that|ùëÜ|=ùëõ/2,
‚àëÔ∏Å
ùëñ‚ààùëÜùõºùëñ=√ç
ùëñ‚ààùëÜùëùùëñ
ùë†‚â•1
2which implies‚àëÔ∏Å
ùëñ‚ààùëÜùëùùëñ‚â•ùë†
2,
‚àëÔ∏Å
ùëñ‚ààùëÜùõΩùëñ=√ç
ùëñ‚ààùëÜ(ùëÄ‚àíùëùùëñ
ùë†)
ùëõùëÄ‚àí1‚â•1
2which implies‚àëÔ∏Å
ùëñ‚ààùëÜùëùùëñ‚â§ùë†
2.For both of the above inequalities to hold simultaneously, we must
have√ç
ùëñ‚ààùëÜùëùùëñ=ùë†/2. Thus,ùëã={ùëùùëñ:ùëñ‚ààùëÜ},ùëå={ùëùùëñ:ùëñ‚àà[ùëõ]\ùëÜ}is
a solution to EqCardPartition.
For the sake of contradiction, assume that ùëê-FairnessScores is
anoinstance and ùëã,ùëå are a solution to EqCardPartition. Let ùëÜ
be the set of indices of elements in ùëã. We can choose ùëÜas solution
forùëê-FairnessScores since|ùëÜ|=ùëõ/2,
‚àëÔ∏Å
ùëñ‚ààùëÜùõºùëñ=‚àëÔ∏Å
ùëñ‚ààùëÜùëùùëñ/ùë†=1
2,and‚àëÔ∏Å
ùëñ‚ààùëÜùõΩùëñ=√ç
ùëñ‚ààùëÜ(ùëÄ‚àíùëùùëñ
ùë†)
ùëõùëÄ‚àí1=1
2,
which is a contradiction. Thus, EqCardPartition must be a no
instance.
Given a solution ùëÜ‚äÜ [ùëõ]forùëê-FairnessScores, we can ver-
ify in polynomial time if |ùëÜ|=ùëê, compute SVD as well as check
if√ç
ùëñ‚ààùëÜùõºùëñ‚â•ùúÉand√ç
ùëñ‚ààùëÜùõΩùëñ‚â•ùúÉ. Thus,ùëê-FairnessScores isNP-
complete. Naturally, ùëê-FairnessScores reduces to MinFairnessS-
cores, as the latter finds the smallest ùëêsuch that a solution to ùëê-
FairnessScores exists. Thus, MinFairnessScores isNP-hard. ‚ñ°
Even though MinFairnessScores isNP-hard, a 2-factor approx-
imation is trivial: sort ‚Ñì(ùëò)
ùëñ(ùê¥)‚Äôs in decreasing order and choose
indices with highest leverage scores until they sum to ùúÉ. Repeat the
same for‚Ñì(ùëò)
ùëñ(ùêµ)‚Äôs. This results in at most 2ùëêcolumns, where ùëêis
the optimal number of columns to satisfy ùúÉ.
Algorithm 1: FairScoresSampler
Input:ùëÉ={(ùõº1,ùõΩ1),...,(ùõºùëõ,ùõΩùëõ)},ùúÉ
Output:ùëÜ‚äÜùëÉ
1ùëÜ‚Üê‚àÖ ,ùëÑ‚Üê‚àÖ
// add(ùõºùëó,ùõΩùëó)toùëÜuntil either of the thresholds is
satisfied
2while√ç
(ùõºùëñ,ùõΩùëñ)‚ààùëÜùõºùëñ<ùúÉand√ç
(ùõºùëñ,ùõΩùëñ)‚ààùëÜùõΩùëñ<ùúÉdo
3(ùõºùëó,ùõΩùëó)‚Üê max(ùõºùëó,ùõΩùëó)‚ààùëÉ\ùëÜ(ùõºùëó+ùõΩùëó)
4ùëÜ‚ÜêùëÜ‚à™(ùõºùëó,ùõΩùëó)
// findùëÑ‚ààùëÉ\ùëÜsuch that the other threshold is
satisfied
5if√ç
(ùõºùëñ,ùõΩùëñ)‚ààùëÜùõºùëñ‚â•ùúÉthen
6ùëÑ‚Üêargmin|ùëÑ|√ç
ùëó‚ààùëÑùõΩùëó‚â•ùúÉ
7else
8ùëÑ‚Üêargmin|ùëÑ|√ç
ùëó‚ààùëÑùõºùëó‚â•ùúÉ
9ùëÜ‚ÜêùëÜ‚à™ùëÑ
10returnùëÜ
Next, we present an algorithm for MinFairnessScores that
returns at most‚åà3ùëê/2‚åâ+1columns (‚âà1.5-approximation).1The
pseudocode is in Algorithm 1. For ease of notation, we denote
ùõºùëñ=‚Ñì(ùëò)
ùëñ(ùê¥)andùõΩùëñ=‚Ñì(ùëò)
ùëñ(ùêµ). The algorithm proceeds in two
stages. In the first stage, at each iteration add to ùëÜthe indexùëñ
such that the cumulative gain ùõºùëñ+ùõΩùëñis maximized until a step
ùë°‚â§ùëõ, where at least one of the inequalities is satisfied, i.e., either√ç
ùëñ‚ààùëÜùõºùëñ‚â•ùúÉor√ç
ùëñ‚ààùëÜùõΩùëñ‚â•ùúÉ. In the second step, sort the tuples
of leverage scores in [ùëõ]\ùëÜbased on their contribution to the
unsatisfied inequality, in descending order. Finally, pick the rest of
1An additional column (+1) is required in case ùëêis odd.
 
2192Fair Column Subset Selection KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
the tuples based on this order, until the threshold ùúÉis satisfied. The
following theorem establishes our approximation result. Note that
the approximation is in terms of the number of columns ùëêin the
optimal solution, and we have already established an (1‚àíùúñ)‚àí1/2
approximation in terms of our objective function.
Theorem 3. Algorithm 1 returns a solution of at most ‚åà3
2ùëê‚åâ+1
columns for MinFairnessScores, where ùëêis the number of columns
in the optimal solution.
Proof. GivenùëÉ={(ùõº1,ùõΩ1),...,(ùõºùëõ,ùõΩùëõ)}, the task is to find the
smallest subset ùëÜ‚äÜùëÉsuch that√ç
ùëñ‚ààùëÜùõºùëñ‚â•ùúÉand√ç
ùëñ‚ààùëÜùõΩùëñ‚â•ùúÉ. At
each iteration we select a tuple with the maximum contribution, i.e.,
ùõºùëó+ùõΩùëóuntil some step ùë°, where either√ç
ùëñ‚ààùëÜùõºùëñ‚â•ùúÉor√ç
ùëñ‚ààùëÜùõΩùëñ‚â•ùúÉ
is satisfied. Without loss of generality, at step ùë°we assume that√ç
(ùõºùëñ,ùõΩùëñ)‚ààùëÜùõºùëñ‚â•ùúÉ. LetùëÜ‚àóbe the optimal solution and (ùõº‚àó
ùëñ,ùõΩ‚àó
ùëñ)de-
note the contribution of ùëñ-th tuple inùëÜ‚àó. We assume ùëÜ‚àóis sorted in
decreasing order according to ùõº‚àó
ùëñ+ùõΩ‚àó
ùëñ. We note that this assumption
makes our analysis easier without losing generality.
First we establish that ùë°‚â§ùëê. Assume for contradiction that ùë°>ùëê
and that√çùë°
ùëñ=1ùõºùëñ<ùúÉand that√çùë°
ùëñ=1ùõΩùëñ<ùúÉ. Thus the algorithm has
not terminated. From the optimality of ùõºùëñ+ùõΩùëñat stepùë°it holds that,
ùë°‚àëÔ∏Å
ùëñ=1ùõºùëñ+ùë°‚àëÔ∏Å
ùëñ=1ùõΩùëñ‚â•ùë°‚àëÔ∏Å
ùëñ=1ùõº‚àó
ùëñ+ùë°‚àëÔ∏Å
ùëñ=1ùõΩ‚àó
ùëñ,
ùë°‚àëÔ∏Å
ùëñ=1ùõºùëñ‚â•ùëê‚àëÔ∏Å
ùëñ=1ùõº‚àó
ùëñ+ùëê‚àëÔ∏Å
ùëñ=1ùõΩ‚àó
ùëñ‚àíùë°‚àëÔ∏Å
ùëñ=1ùõΩùëñ‚â•2ùúÉ‚àíùëê‚àëÔ∏Å
ùëñ=1ùõΩùëñ‚â•ùúÉ,
which is a contradiction, since we assumed√çùë°
ùëñ=1ùõºùëñ<ùúÉ. Thus if√çùë°
ùëñ=1ùõºùëñ‚â•ùúÉthen 1‚â§ùë°‚â§ùëê. We now discern two cases for the value
ofùë°.
Caseùë°‚â§‚åàùëê
2‚åâ+1:We have√çùë°
ùëñ=1ùõºùëñ‚â•ùúÉ. To satisfy the second
inequality we choose tuples in ùëÉ\ùëÜin decreasing order according
toùõΩùëñ, which is at most ùëêcolumns, since the optimal solution has ùëê
columns. So, we have a solution with size |ùëÜ|‚â§ùë°+ùëê=‚åà3
2ùëê‚åâ+1.
Case‚åàùëê
2‚åâ+1<ùë°‚â§ùëê:Again, from the optimality of ùõºùëñ+ùõΩùëñat
each step in 1‚â§ùë°‚â§ùëêwe have,
ùë°‚àí1‚àëÔ∏Å
ùëñ=1ùõºùëñ+ùë°‚àí1‚àëÔ∏Å
ùëñ=1ùõΩùëñ‚â•ùë°‚àí1‚àëÔ∏Å
ùëñ=1ùõº‚àó
ùëñ+ùë°‚àí1‚àëÔ∏Å
ùëñ=1ùõΩ‚àó
ùëñ
‚â•‚åàùëê
2‚åâ‚àëÔ∏Å
ùëñ=1ùõº‚àó
ùëñ+ùë°‚àí1‚àëÔ∏Å
ùëñ=‚åàùëê
2‚åâ+1ùõº‚àó
ùëñ+‚åàùëê
2‚åâ‚àëÔ∏Å
ùëñ=1ùõΩ‚àó
ùëñ+ùë°‚àí1‚àëÔ∏Å
ùëñ=‚åàùëê
2‚åâ+1ùõΩ‚àó
ùëñ
‚â•ùúÉ+ùë°‚àí1‚àëÔ∏Å
ùëñ=‚åàùëê
2‚åâ+1ùõº‚àó
ùëñ+ùë°‚àí1‚àëÔ∏Å
ùëñ=‚åàùëê
2‚åâ+1ùõΩ‚àó
ùëñ
The third step follows from the assumption that the optimal solution
ùëÜ‚àóhas tuples sorted in decreasing order according to ùõº‚àó
ùëñ+ùõΩ‚àó
ùëñ. We
also observe that√çùë°‚àí1
ùëñ=1ùõºùëñ=ùúÉ‚àíùõºùë°. Therefore we have
ùë°‚àí1‚àëÔ∏Å
ùëñ=1ùõΩùëñ‚â•ùë°‚àí1‚àëÔ∏Å
ùëñ=ùëê
2+1ùõº‚àó
ùëñ+ùë°‚àí1‚àëÔ∏Å
ùëñ=ùëê
2+1ùõΩ‚àó
ùëñ+ùõºùë°
Supposeùë°=‚åàùëê
2‚åâ+1+ùëû. This means we can afford to add at most
ùëê‚àíùëûcolumns to our solution if we want to satisfy our bound on
the cardinality of ùëÜ.At this stage, the algorithm picks the columns with the largest
values ofùõΩ‚àó
ùëñ. This means that from those in the optimal solution,
we miss at most ùëûùõΩ‚àó
ùëñ‚Äôs from among the bottom ones. From above,
we have
ùë°‚àí1‚àëÔ∏Å
ùëñ=1ùõΩùëñ‚â•ùë°‚àí1‚àëÔ∏Å
ùëñ=ùëê
2+1ùõº‚àó
ùëñ+ùë°‚àí1‚àëÔ∏Å
ùëñ=ùëê
2+1ùõΩ‚àó
ùëñ‚â•ùëê‚àëÔ∏Å
ùëñ=ùëê‚àíùëûùõº‚àó
ùëñ+ùëê‚àëÔ∏Å
ùëñ=ùëê‚àíùëûùõΩ‚àó
ùëñ‚â•ùëê‚àëÔ∏Å
ùëñ=ùëê‚àíùëûùõΩ‚àó
ùëñ.
This holds since tuples of the optimal solution are sorted in decreas-
ing order of the value of the pair sums, which implies that the value
we miss from not adding the last ùëûùõΩ‚àó
ùëñ‚Äôs is already covered by what
we had,√çùë°‚àí1
ùëñ=1ùõΩùëñ, so|ùëÜ|‚àëÔ∏Å
ùëñ=1ùõΩùëñ‚â•ùë°‚àí1‚àëÔ∏Å
ùëñ=1ùõΩùëñ+ùëê‚àíùëû‚àëÔ∏Å
ùëñ=1ùõΩ‚àó
ùëñ‚â•ùúÉ.So the solution
has at most ùë°‚àí1+ùëê‚àíùëû=‚åàùëê
2‚åâ+ùëû+ùëê‚àíùëû=‚åà3
2‚åâùëê+1columns and
satisfies the threshold. ‚ñ°
Even though Algorithm 1 offers an upper bound on the number of
columns in the optimal solution ùëê, depending on the task at hand, it
may be undesirable to obtain more than ùëòcolumns. CSSwith exactly
ùëòcolumns (the definition of Problem 1) is a well-studied problem
and a wide range of algorithms have been developed for it. These
algorithms are typically based on QR-decomposition. Motivated by
this, in the following section we propose two QR-decomposition-
related algorithms for FairCSS.
Recall the impossibility results from Section 3: unless we pick
2ùëòcolumns it may be impossible to achieve a relative-error ap-
proximation in terms of the rank- ùëòreconstruction error. Thus, the
following algorithms are heuristics. They can be used either di-
rectly for FairCSS-MinMax or part of a two-stage approach, that
we describe in detail in Section 6.
5 FAIR QRDECOMPOSITIONS
Numerous practical algorithms for CSS originate from numerical
linear algebra, often relying on QRdecomposition with column
pivoting.
Definition 3 (QR decomposition with column pivoting).
Given a matrix ùëÄ‚ààRùëö√óùëõwithùëö‚â•ùëõand an integer ùëò‚â§ùëõ.
MatrixùëÄcan be expressed as the product of an orthonormal matrix
ùëÑ‚ààRùëö√óùëöand an upper triangular matrix ùëÖ‚ààRùëõ√óùëõ. More precisely,
ùëÄŒ†=ùëÑùëÖ=ùëÑùëÖ11ùëÖ12
0ùëÖ22
,
whereùëÖ11‚ààRùëò√óùëò,ùëÖ12‚ààRùëò√ó(ùëõ‚àíùëò),ùëÖ22‚ààR(ùëõ‚àíùëò)√ó(ùëõ‚àíùëò)and
Œ†‚ààRùëõ√óùëõis a permutation matrix.
Column pivoting involves finding a permutation matrix Œ†for a
given matrix ùëÄ, such that‚à•ùëÖ22‚à•ùêπis minimised. When this comes
with certain guarantees, it leads to a rank revealing QR decompo-
sition (RRQR), which forms the basis for various algorithms with
approximation guarantees in CSS. Specifically, if we denote the first
ùëòcolumns of the permutation matrix Œ†asŒ†ùëò, then choosing the
column subset ùê∂=ùëÄŒ†ùëòguarantees that ùëôùëúùë†ùë†(ùëÄ,ùê∂)is bounded
i.e.,‚à•ùëÄ‚àíùëÉùê∂ùëÄ‚à•ùêπ=‚à•ùëÖ22‚à•ùêπ[6]. We tailor Low-RRQR (L-RRQR),
originally introduced by [ 8], to accommodate the two-group fair
setting.
We present a brief description of L-RRQR. We start with the QR-
decomposition of matrix ùëÄto obtain matrices ùëÑandùëÖ. We initialise
 
2193KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Antonis Matakos, Bruno Ordozgoiti, and Suhas Thejaswi
ùëÖ11=0,ùëÖ22=ùëÖand buildùëÖ11incrementally through column
pivoting: at each iteration we permute a column of ùëÖ22to the first
position, through Œ†. Then, we compute the QR-decomposition
again, drop the first row and column of the resulting ùëÖ, and proceed
recursively on it. The SVD serves in finding the pivot column: if
ùë£‚ààRùëõis the right singular vector corresponding to the largest
singular value, then successive permutations such that |(Œ†ùëáùë£)|1=
‚à•ùë£‚à•‚àûlead to a provably small ‚à•ùëÖ22‚à•ùêπ.
Fair pivoting. Note that L-RRQR may introduce unfairness,
since we factorize the matrix ùëÄ, without considering the error
of the two groups, ùê¥andùêµseparately. So the pivoted columns
may benefit only one group. To address this, we adapt the pivoting
strategy of L-RRQR to benefit the group that suffers the worse
reconstruction error. Thus, we perform simultaneous RRQR on
ùê¥andùêµand at step- ùëñobtain the corresponding ùëÑùê¥(ùëñ),ùëÖùê¥(ùëñ)and
ùëÑùêµ(ùëñ),ùëÖùêµ(ùëñ). We inspect the spectra of both ùëÖùê¥(ùëñ)andùëÖùêµ(ùëñ)and
choose the pivot based on the following strategy: we choose the
right singular vector ùë£of eitherùëÖùê¥(ùëñ)orùëÖùêµ(ùëñ)corresponding to
max{ùúé1(ùëÖùê¥
22(ùëñ)),ùúé1(ùëÖùêµ
22(ùëñ))}, and select Œ†such that|(Œ†ùëáùë£)|1=
‚à•ùë£‚à•‚àû. The algorithm pseudocode can be seen in Algorithm 2.
Algorithm 2: Fair L-RRQR
1Input: QR factorizations ùê¥Œ†ùê¥=ùëÑùê¥ùëÖùê¥,ùêµŒ†ùêµ=ùëÑùêµùëÖùêµ,ùëò
2Output: permutation Œ†ùëò
1:fori=1,. . . ,k do
2:ùëÖùê¥
22‚ÜêùëÖùê¥[ùëñ:,ùëñ:],ùëÖùêµ
22‚ÜêùëÖùêµ[ùëñ:,ùëñ:]
3:ùë£‚Üêmax{ùúé1(ùëÖùê¥
22(ùëñ)),ùúé1(ùëÖùêµ
22(ùëñ))}
4: Compute permutation ùëÉsuch that|(ùëÉùëáùë£)1|=‚à•ùëÉùëáùë£‚à•‚àû
5: Compute QR fact. ùëÖùê¥
22ùëÉ=ùëÑùê¥
1ÀúùëÖùê¥
22andùëÖùêµ
22ùëÉ=ùëÑùêµ
1ÀúùëÖùêµ
22
6:Œ†‚ÜêŒ†ùêº0
0ùëÉ
7:ùëÖùê¥‚Üê 
ùëÖùê¥
11ùëÑùê¥
1ùëáùëÖùê¥
12
0 ÀúùëÖùê¥
22!
andùëÖùêµ‚Üê 
ùëÖùêµ
11ùëÑùêµ
1ùëáùëÖùêµ
12
0 ÀúùëÖùêµ
22!
8:end for
returnùëÜ
6 EXPERIMENTS
This section describes the experimental setup, datasets used, and
presents the experimental evaluation results.
Experimental setup. Our implementation is written in python .
We use numpy, scipy andscikit-learn for preprocessing, linear
algebra operations as well as parallelization. Experiments are exe-
cuted on a compute node with 32 cores and 256GB of RAM. Our
implementations are available as open source [28].
Datasets. We use juvenile recidivism data (recidivism) from Cata-
lunya [ 41] and medical expenditure survey data 2015 (meps) [ 12],
as well as various datasets from the UCI-ML repository [ 15]:‚Äúheart-
cleveland" (heart), ‚Äúadult" (adult), ‚Äúgerman-credit" (german), ‚Äúcredit-
card" (credit), ‚Äústudent performance" (student), ‚Äúcompas-recidivism"
(compas), ‚Äúcommunities" (communities). Data is processed by remov-
ing protected attributes, converting categorical variables to one-hot
encoding and normalizing each column to unit ùêø2-norm. Group
membership is based on Sex, except for communities where group
membership is majority white or a non-white community. Dataset
statistics are reported in Table 1.Table 1: Dataset statistics. ùëöùê¥andùëöùêµare the number of in-
stances in groups ùê¥andùêµ, respectively. ùëõis the number of
columns.ùõæ(ùê¥),ùõæ(ùêµ) is rank of ùê¥,ùêµ.
Dataset ùëõ ùëöùê¥ùëöùêµùõæ(ùê¥)ùõæ(ùêµ)
heart 14 201 96 13 13
german 63 690 310 49 47
credit 25 18 112 11 888 24 24
student 58 383 266 42 42
adult 109 21 790 10 771 98 98
compas 189 9 336 2 421 167 73
communities 104 1 685 309 101 101
recidivism 227 1 923 310 175 113
meps 1 247 18 414 17 013 1 217 1 200
Experimental evaluation. Our experiments are in threefold.
First, we assess the efficacy of the proposed algorithms in addressing
the problem of FairCSS-MinMax. This evaluation involves com-
paring the performance of the proposed algorithms, considering
various experimental setups. Second, we evaluate the effectiveness
of the FairCSS-MinMax objective in selecting column subsets that
result in fair reconstruction errors. Specifically, we compare the re-
construction errors of each group in the optimal solutions obtained
using the vanilla CSSobjective versus the FairCSS-MinMax objec-
tive. Last, we investigate the price of fairness. This entails verifying
potential trade-offs or costs associated to attain fairness according
toFairCSS-MinMax.
6.1 Algorithms Evaluation
Algorithms. We refer Algorithm 1 as FairScoresSampler and
fairL-RRQR asLow QR. We also consider the fair version of a
variant of L-RRQR, called H-RRQR [9], (High QR). For details on
this algorithm see Supplementary A. The complexity of our al-
gorithms is dominated by SVD. At each step, Low QR andHigh
QRrequireùëÇ(ùëò)andùëÇ(ùëõ‚àíùëò)time, respectively. On the other
hand, FairScoresSampler computes SVD once for each group, and
requiresùëÇ(ùëõlogùëõ)for sorting tuples.
We complement our algorithms with a Greedy algorithm: at
each step it picks the column with the highest direct gain according
toMinMaxLoss. The complexity is dominated by matrix multipli-
cationùëÇ(ùëõŒ©). Finally, in Random, we randomly sample ùëò-column
set for 100repetitions and choose a set with best score.
Pickingùëê‚â•ùëòcolumns. Recall that FairScoresSampler chooses
columns based on threshold ùúÉ, and it can choose ùëê‚â•ùëòcolumns.
In the first experiment, we evaluate the algorithms performance
with respect to a specific low-rank subspace of ùê¥andùêµover dif-
ferent values of ùëê. Thus, we evaluate the performance according to
MinMaxLoss while keeping‚à•ùê¥‚àíùê¥ùëò‚à•ùêπand‚à•ùêµ‚àíùêµùëò‚à•ùêπfixed. We
perform this for six largest datasets for ùëò=20(for meps,ùëò=50).
Figure 1 shows the results. Note that Low QR andHigh QR can only
sample at most min(ùëüùëéùëõùëò(ùê¥),ùëüùëéùëõùëò(ùêµ))columns. Low QR shows
relatively good performance compared to Greedy, which has the
best performance. In meps, Greedy andHigh QR, due to their higher
complexity did not terminate within 24 hours. Note that in meps,
FairScoresSampler performs worse than Random forùëê<300,
which implies the rank 50leverage scores do not decay quickly for
 
2194Fair Column Subset Selection KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
30 40 50 60 70 80 90 100 110
c0.00.20.40.60.81.0MinMaxLoss
adult
Low QR
High QR
Greedy
FairScoresSampler
Random
24 28 32 36 40 44 48 52 56
c0.000.250.500.751.001.251.501.752.00
student
Low QR
High QR
Greedy
FairScoresSampler
Random
30 40 50 60 70 80 90 100
c0.000.250.500.751.001.251.501.75
communities
Low QR
High QR
Greedy
FairScoresSampler
Random
20 40 60 80 100 120 140 160 180
c0.00.20.40.60.81.01.21.4MinMaxLoss
compas
Low QR
High QR
Greedy
FairScoresSampler
Random
25 50 75 100 125 150 175 200 225
c0.00.20.40.60.81.01.2
recidivism
Low QR
High QR
Greedy
FairScoresSampler
Random
0 150 300 450 600 750 900 1050 1200
c0.00.51.01.52.0
meps
Low QR
FairScoresSampler
Random
Figure 1: MinMaxLoss for different values of ùëêand fixed target rank ùëò
ùëê<300, and thus are not very informative. In Supplementary B,
we plot the rank- ùëòleverage scores for datasets for different values
ofùëò.
Two-stage sampling. Recall that, FairCSS-MinMax asks for
exactlyùëòcolumns. To combine the efficiency of FairScoresSam-
pler and effectiveness of algorithms such as Greedy, we introduce
and evaluate a two-stage sampling approach that returns exactly
ùëò-columns. Similar ideas have been explored in CSSliterature [ 5].
In the first stage, we run FairScoresSampler that takes as input a
thresholdùúÉand the rank- ùëòleverage scores of ùê¥andùêµ, and returns
ùëê‚â•ùëòcolumns. In the second stage, we run Low QR, High QR
orGreedy on the subset of columns returned in the first stage,
to obtain a column subset of size ùëò. We refer to these methods as
S-Low QR, S-High QR andS-Greedy.
Table 2 reports the results for the seven largest datasets for
various values of ùëò. We setùúÉ=ùëò‚àí1
2in all cases, except meps,
whereùúÉ=3ùëò
4to reduce the number of sampled columns. Thus
in all datasets (except meps) the resulting number of columns in
the first stage, is a‚àö
2-approximation to the optimal number of
columnsùëê. Column ‚Äúc" in Table 2 indicates the number of columns
returned in the sampling stage. Note that in some cases the number
of columns is required to satisfy ùúÉis significantly large. For each
experiment, the best performing algorithm is highlighted in bold.
We observe that Greedy performs better in most cases, but does
not terminate always within twenty-four hours. S-Greedy is faster
than Greedy, due to the sampling stage, and the objective values
are close. On the other hand, S-High QR does not perform well
in practice, though in theory we expect it to perform better for ùëò
closer toùëõ. Finally, we demonstrate that (see meps) small ùëòdoes
not mean fewer columns are sampled in the first stage, because
the lower-rank leverage scores decay faster; thus more columns
are required to satisfy threshold ùúÉ. A visualization of the decay of
leverage scores is reported in the Supplementary B.6.2 Evaluation of the fair CSSobjective
We examine the imbalance in reconstruction errors of the ‚Äúvanilla"
CSS objective of Problem 1 and FairCSS-MinMax objective for
groupsùê¥andùêµ. We compute the optimal solution for each objec-
tive for various ùëòthrough exhaustive enumeration. opt(ùëÄ),opt(ùê¥)
andopt(ùêµ)denote the reconstruction error of vanilla CSSfor matri-
cesùëÄ,ùê¥ andùêµ, respectively. minmax(ùëÄ)=minmax(ùê¥,ùêµ)denote
the reconstruction error of matrix ùëÄ. Further, fair(ùê¥)andfair(ùêµ)
denote the reconstruction errors of FairCSS-MinMax for groupsùê¥
andùêµ, respectively. Lastly, fair(ùëÄ)denote the reconstruction error
ofùëÄcorresponding to the optimal solution of FairCSS-MinMax.
We note that brute-force enumeration is expensive, even after par-
allelization and extensive optimization, so we only report results
forheart, student and german datasets.
Fairness of solutions. In Figure 2 we compare opt(ùê¥),opt(ùêµ),
that is, the optimal solution of vanilla CSS, and the optimal solution
ofFairCSS-MinMax fair(ùê¥),fair(ùêµ). In most instances, we observe
that the reconstruction errors of groups are disproportionate in
vanilla CSS. However, the degree of imbalance is not uniform across
datasets. One source of imbalance could be vastly different group
sizes. However, as observed in student,|ùê¥|>|ùêµ|, but opt(ùê¥)<
opt(ùêµ). This further supports the need for sophisticated approaches
to fairness in CSS, beyond mere normalization.
Price of fairness. Next, we verify how the fairness objective
influences the quality of the solution in terms of reconstruction
error. In Figure 3, we report the optimal solution of vanilla CSSand
FairCSS-MinMax to assess the trade-off between fairness and re-
construction error. This analysis quantifies the extent to which we
sacrifice reconstruction error to achieve our fairness objective. In
most cases, we observe no significant difference in reconstruction
error between vanilla CSSandFairCSS-MinMax, that is, opt(ùëÄ)
andfair(ùëÄ), even though the value of minmax(ùëÄ)is significantly
higher than opt(ùëÄ). Note that, the observations cannot be gener-
alized across all datasets, and we cannot conclusively claim that
 
2195KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Antonis Matakos, Bruno Ordozgoiti, and Suhas Thejaswi
Table 2: Performance comparison of algorithms.
Dataset c k MinMax Loss
S-Low QR S-High QR S-Greedy Low QR Greedy Random
communities89 10 1.27323 1.50763 1.17121 1.25939 1.16976 1.47485
94 23 1.32462 1.54204 1.2717 1.41701 1.23969 1.65518
98 51 1.40469 1.57761 1.42658 1.40934 1.39823 2.95985
compas118 10 1.04747 1.2738 1.03356 1.05041 1.03057 1.19477
165 19 1.08617 1.34321 1.05688 1.08617 1.0537 1.27599
177 37 1.37174 1.41811 1.14835 1.47138 1.1291 1.67851
adult70 10 1.02345 1.09485 1.02111 1.02345 1.01768 1.05641
96 22 1.03347 1.12764 1.0374 1.03347 - 1.0589
103 49 1.07796 1.19301 1.40252 1.08317 - 1.0994
german53 10 1.08088 1.30176 1.08488 1.07711 1.07349 1.14205
54 15 1.1439 1.34599 1.11798 1.11871 1.11088 1.1966
54 24 1.20605 1.38489 1.192 1.20246 1.18624 1.36138
recidivism134 10 1.02485 1.17864 1.02313 1.02236 1.01483 1.12757
174 24 1.05569 1.29805 1.04054 1.05567 1.03202 1.22332
212 57 1.31688 1.52031 1.16871 1.27495 1.13311 1.59933
student45 10 1.10833 1.42094 1.10559 1.11333 1.10597 1.17856
46 14 1.14467 1.39265 1.14375 1.15592 1.14361 1.26605
47 21 1.18932 1.5756 1.17832 1.209 1.18771 1.56265
meps428 10 1.14642 1.83209 - 1.05601 - 1.17759
382 32 1.20093 1.85843 1.777 1.11665 - 1.26749
338 100 1.33916 1.70488 2.48787 - - 1.47403
3 4 5 6 7 8 9 10
k1.11.21.31.4Reconstruction errorheart
opt(A)
opt(B)
fair(A)
fair(B)
3 4 5 6
k1.01.1Reconstruction errorstudent
opt(A)
opt(B)
fair(A)
fair(B)
3 4 5 6
k1.01.1Reconstruction errorgerman-credit
opt(A)
opt(B)
fair(A)
fair(B)
Figure 2: Comparison of reconstruction error of CSSand FairCSS for groups ùê¥andùêµ.
there is no trade-off between fairness and reconstruction error. For
instance, in the case of the heart dataset, we observe a significant
difference between values of opt(ùëÄ)andfair(ùëÄ)forùëò=5.
7 CONCLUSION
We introduced a novel CSSvariant for a fair setting when the ma-
trix rows are partitioned into two groups. Our goal is to minimize
the reconstruction error for both groups via a min-max objective.
We utilized leverage scores to present an approximation algorithm
when the column count is relaxed, and presented rank revealing
QR-factorisation-based algorithms when the column count is fixed.Extensive experiments on real-world data validated the effective-
ness of our approach in improving fairness. As future work, a
natural direction is to extend our results to more than two groups.
Also, improving the approximation ratio of MinFairnessScores
requires further investigation.
ACKNOWLEDGEMENTS
Suhas Thejaswi acknowledges support from the European Research
Council (ERC) under the European Union‚Äôs Horizon 2020 research
and innovation program (grant agreement No. 945719) and the
European Unions‚Äôs SoBigData++ Transnational Access Scholarship.
 
2196Fair Column Subset Selection KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
3 4 5 6 7 8 9 10
k1.11.21.31.4Reconstruction errorheart
opt(M)
fair(M)
minmax(A,B)
3 4 5 6
k1.01.1Reconstruction errorstudent
opt(M)
fair(M)
minmax(A,B)
3 4 5 6
k1.01.1Reconstruction errorgerman-credit
opt(M)
fair(M)
minmax(A,B)
Figure 3: Price of fairness.
Antonis Matakos acknowledges support from the Academy of
Finland through the grant "Model Management Systems: Machine
learning meets Database Systems"- MLDB (32511).REFERENCES
[1]Jason Altschuler, Aditya Bhaskara, Gang Fu, Vahab Mirrokni, Afshin Ros-
tamizadeh, and Morteza Zadimoghaddam. 2016. Greedy column subset selection:
New bounds and distributed algorithms. In ICML. PMLR, 2539‚Äì2548.
[2]Aris Anagnostopoulos, Luca Becchetti, Adriano Fazzone, Cristina Menghini, and
Chris Schwiegelshohn. 2020. Spectral relaxations and fair densest subgraphs. In
CIKM. ACM, 35‚Äì44.
[3]Solon Barocas, Moritz Hardt, and Arvind Narayanan. 2019. Fairness and Machine
Learning: Limitations and Opportunities. fairmlbook.org. http://www.fairmlbook.
org.
[4]Christos Boutsidis, Petros Drineas, and Malik Magdon-Ismail. 2014. Near-optimal
column-based matrix reconstruction. SIAM J. Comput. 43, 2 (2014), 687‚Äì717.
[5]Christos Boutsidis, Michael W Mahoney, and Petros Drineas. 2008. Unsupervised
feature selection for principal components analysis. In KDD. 61‚Äì69.
[6]Christos Boutsidis, Michael W. Mahoney, and Petros Drineas. 2009. An Improved
Approximation Algorithm for the Column Subset Selection Problem. In SODA
(SODA ‚Äô09). SIAM, 968‚Äì977.
[7]Joy Buolamwini and Timnit Gebru. 2018. Gender shades: Intersectional accuracy
disparities in commercial gender classification. In FAccT. PMLR, 77‚Äì91.
[8]Tony F. Chan and Per Christian Hansen. 1994. Low-rank revealing QR factoriza-
tions. Numerical Linear Algebra with Applic. 1, 1 (1994), 33‚Äì44.
[9]Tony F. Chan. 1987. Rank revealing QR factorizations. Linear Algebra and its
Applic. 88-89 (1987), 67‚Äì82.
[10] Anshuman Chhabra, Karina Masalkovait Àôe, and Prasant Mohapatra. 2021. An
overview of fairness in clustering. IEEE Access 9 (2021), 130698‚Äì130720.
[11] Flavio Chierichetti, Ravi Kumar, Silvio Lattanzi, and Sergei Vassilvitskii. 2017.
Fair Clustering Through Fairlets. In NeuRIPS. Curran Associates, Inc., 5029‚Äì5037.
[12] Joel W Cohen, Steven B Cohen, and Jessica S Banthin. 2009. The medical expen-
diture panel survey: a national information resource to support healthcare cost
research and inform policy and practice. Medical care (2009), S44‚ÄìS50.
[13] Amit Deshpande and Luis Rademacher. 2010. Efficient volume sampling for
row/column subset selection. In FCS. IEEE, 329‚Äì338.
[14] Amit Deshpande, Luis Rademacher, Santosh S Vempala, and Grant Wang. 2006.
Matrix approximation and projective clustering via volume sampling. Theory of
Computing 2, 1 (2006), 225‚Äì247.
[15] Dheeru Dua and Casey Graff. 2017. UCI Machine Learning Repository. http:
//archive.ics.uci.edu/ml
[16] Cynthia Dwork, Moritz Hardt, Toniann Pitassi, Omer Reingold, and Richard
Zemel. 2012. Fairness through awareness. In Innovations in TCS. ACM, 214‚Äì226.
[17] Ahmed K. Farahat, Ahmed Elgohary, Ali Ghodsi, and Mohamed S. Kamel. 2015.
Greedy Column Subset Selection for Large-Scale Data Sets. Knowl. Inf. Syst. 45, 1
(oct 2015), 1‚Äì34. https://doi.org/10.1007/s10115-014-0801-8
[18] Vincent Froese, Leon Kellerhals, and Rolf Niedermeier. 2022. Modification-fair
cluster editing. In AAAI, Vol. 36. 6631‚Äì6638.
[19] M. R. Garey and D. S. Johnson. 1979. Computers and Intractability. W. H. Freeman.
[20] Mehrdad Ghadiri, Samira Samadi, and Santosh Vempala. 2021. Socially fair
k-means clustering. In FAccT. ACM, 438‚Äì448.
[21] G. Golub. 1965. Numerical Methods for Solving Linear Least Squares Problems.
Numer. Math. 7, 3 (jun 1965), 206‚Äì216. https://doi.org/10.1007/BF01436075
[22] Y Hong and C. T. Pan. 1992. Rank-Revealing QR Factorizations and the Singular
Value Decomposition. Math. Comp. 58 (1992), 213‚Äì232.
[23] Faisal Kamiran and Toon Calders. 2010. Classification with no discrimination by
preferential sampling. In Machine Learning Conf., Vol. 1. Citeseer.
[24] Faisal Kamiran and Toon Calders. 2012. Data preprocessing techniques for
classification without discrimination. KIS33, 1 (2012), 1‚Äì33.
 
2197KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Antonis Matakos, Bruno Ordozgoiti, and Suhas Thejaswi
[25] Jon Kleinberg, Jens Ludwig, Sendhil Mullainathan, and Ashesh Rambachan. 2018.
Algorithmic fairness. In AEA papers and proceedings, Vol. 108. 22‚Äì27.
[26] Daniel D. Lee and H. Sebastian Seung. 1999. Learning the parts of objects by
nonnegative matrix factorization. Nature 401 (1999), 788‚Äì791.
[27] Zachary Lipton, Julian McAuley, and Alexandra Chouldechova. 2018. Does
mitigating ML's impact disparity require treatment disparity?. In Advances in
Neural Information Processing Systems, S. Bengio, H. Wallach, H. Larochelle,
K. Grauman, N. Cesa-Bianchi, and R. Garnett (Eds.), Vol. 31. Curran As-
sociates, Inc. https://proceedings.neurips.cc/paper_files/paper/2018/file/
8e0384779e58ce2af40eb365b318cc32-Paper.pdf
[28] Antonis Matakos, Suhas Thejaswi, and Bruno Ordozgoiti. 2023. Fair column
subset selection ‚Äì source code v-1.1. https://github.com/matakos18/FairCSS/.
[29] Shira Mitchell, Eric Potash, Solon Barocas, Alexander D‚ÄôAmour, and Kristian
Lum. 2021. Algorithmic fairness: Choices, assumptions, and definitions. Annual
Review of Statistics and Its Application 8 (2021), 141‚Äì163.
[30] Matt Olfat and Anil Aswani. 2019. Convex Formulations for Fair Principal
Component Analysis. In AAAI. AAAI Press, 663‚Äì670.
[31] Dimitris S. Papailiopoulos, Anastasios Kyrillidis, and Christos Boutsidis. 2014.
Provable deterministic leverage score sampling. In KDD. ACM, 997‚Äì1006.
[32] Karl Pearson. 1901. LIII. On lines and planes of closest fit to systems of points in
space. The London, Edinburgh, and Dublin philosophical magazine and journal of
science 2, 11 (1901), 559‚Äì572.
[33] Dino Pedreschi, Salvatore Ruggieri, and Franco Turini. 2008. Discrimination-
aware data mining. In KDD. ACM, 560‚Äì568.
[34] Dana Pessach and Erez Shmueli. 2022. A review on fairness in machine learning.
Comput. Surveys 55, 3 (2022), 1‚Äì44.
[35] Inioluwa Deborah Raji and Joy Buolamwini. 2022. Actionable Auditing Revisited:
Investigating the Impact of Publicly Naming Biased Performance Results of
Commercial AI Products. Commun. ACM 66, 1 (2022), 101‚Äì108.
[36] Ashesh Rambachan, Jon Kleinberg, Jens Ludwig, and Sendhil Mullainathan. 2020.
An economic perspective on algorithmic fairness. In AEA Papers and Proceedings,
Vol. 110. 91‚Äì95.
[37] Henrik Skaug S√¶tra, Mark Coeckelbergh, and John Danaher. 2022. The AI
Ethicist‚Äôs Dirty Hands Problem. Commun. ACM 66, 1 (2022), 39‚Äì41.
[38] Samira Samadi, Uthaipon Tantipongpipat, Jamie Morgenstern, Mohit Singh, and
Santosh Vempala. 2018. The Price of Fair PCA: One Extra Dimension. In NeuRIPS
(NIPS‚Äô18). Curran Associates Inc., 10999‚Äì11010.
[39] Yaroslav Shitov. 2021. Column subset selection is NP-complete. Linear Algebra
Appl. 610 (2021), 52‚Äì58.
[40] Uthaipon (Tao) Tantipongpipat, Samira Samadi, Mohit Singh, Jamie Morgenstern,
and Santosh Vempala. 2019. Multi-Criteria Dimensionality Reduction with Appli-
cations to Fairness. In NIPS. Curran Associates Inc., Red Hook, NY, USA, Article
1358, 11 pages.
[41] Song√ºl Tolan, Marius Miron, Emilia G√≥mez, and Carlos Castillo. 2019. Why
machine learning may lead to unfairness: Evidence from risk assessment for
juvenile justice in catalonia. In International Conference on Artificial Intelligence
and Law. 83‚Äì92.
[42] Muhammad Bilal Zafar, Isabel Valera, Manuel Gomez Rogriguez, and Krishna P
Gummadi. 2017. Fairness constraints: Mechanisms for fair classification. In
Artificial intelligence and statistics. PMLR, 962‚Äì970.
[43] Meike Zehlike, Francesco Bonchi, Carlos Castillo, Sara Hajian, Mohamed Mega-
hed, and Ricardo Baeza-Yates. 2017. FAIR: A fair top- ùëòranking algorithm. In
Proceedings of Conference on Information and Knowledge Management. 1569‚Äì1578.
[44] Rich Zemel, Yu Wu, Kevin Swersky, Toni Pitassi, and Cynthia Dwork. 2013.
Learning fair representations. In ICML. PMLR, 325‚Äì333.A PSEUDOCODE OF FAIR H-RRQR
High rank revealing QR-factorisation (H-RRQR) is similar to low
rank revealing QR-factorisation (L-RRQR), for details of L-RRQR
see Section 5 of the main paper. In H-RRQR, we begin with ùëÖ11=
ùëÖ,ùëÖ22=0and recursively build ùëÖ22by moving columns to the back.
The fair variant of H-RRQR, at step- ùëñ, chooses the right singular
vectorùë£corresponding to min{ùúéùëñ(ùëÖùê¥
11(ùëñ)),ùúéùëñ(ùëÖùêµ
11(ùëñ))}, whereùúéùëñis
the bottom singular value. Then, we construct a permutation Œ†ùëñ+1
such that|(Œ†ùëá
ùëñ+1ùë£)|ùëñ=‚à•ùë£‚à•‚àû.
Algorithm 3: Fair H-RRQR
1Input: QR factorizations ùê¥Œ†ùê¥=ùëÑùê¥ùëÖùê¥,ùêµŒ†ùêµ=ùëÑùêµùëÖùêµ,ùëò
2Output: permutation Œ†ùëò
1:fori=n,. . . ,n-k+1 do
2:ùëÖùê¥
11‚ÜêùëÖùê¥[:ùëñ,:ùëñ],ùëÖùêµ
11‚ÜêùëÖùêµ[:ùëñ,:ùëñ]
3:ùë£‚Üêmin{ùúéùëñ(ùëÖùê¥
11(ùëñ)),ùúéùëñ(ùëÖùêµ
11(ùëñ))}
4: Compute permutation ùëÉsuch that|(ùëÉùëáùë£)ùëñ|=‚à•ùëÉùëáùë£‚à•‚àû
5: Compute QR fact. ùëÖùê¥
11ùëÉ=ùëÑùê¥
1ÀúùëÖùê¥
11andùëÖùêµ
11ùëÉ=ùëÑùêµ
1ÀúùëÖùêµ
11
6:Œ†‚ÜêŒ†ùëÉ0
0ùêº
7:ùëÖùê¥‚Üê 
ÀúùëÖùê¥
11ùëÑùê¥
1ùëáùëÖùê¥
12
0ùëÖùê¥
22!
andùëÖùêµ‚Üê 
ÀúùëÖùêµ
11ùëÑùêµ
1ùëáùëÖùêµ
12
0ùëÖùêµ
22!
8:end for
returnùëÜ
B DECAY OF LEVERAGE SCORES
We plot the leverage scores of groups ùê¥ and ùêµ for the experiments 
in Table 2. The leverage scores are sorted separately for the two 
groups and plotted in decreasing order of their value.
 
2198Fair Column Subset Selection KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
0 20 40 60 80 100
ranking0.00.20.4Lsadult k=10
ls group A
ls group B
0 20 40 60 80 100
ranking0.00.20.4Lsadult k=22
ls group A
ls group B
0 20 40 60 80 100
ranking0.000.250.500.75Lsadult k=49
ls group A
ls group B
0 20 40 60 80 100
ranking0.000.250.500.75Lscommunities k=10
ls group A
ls group B
0 20 40 60 80 100
ranking0.00.51.0Lscommunities k=23
ls group A
ls group B
0 20 40 60 80 100
ranking0.51.0Lscommunities k=51
ls group A
ls group B
0 50 100 150
ranking0.00.20.4Lscompas k=10
ls group A
ls group B
0 50 100 150
ranking0.00.20.4Lscompas k=19
ls group A
ls group B
0 50 100 150
ranking0.000.250.500.75Lscompas k=37
ls group A
ls group B
0 20 40 60
ranking0.00.20.4Lsgerman k=10
ls group A
ls group B
0 20 40 60
ranking0.00.20.4Lsgerman k=15
ls group A
ls group B
0 20 40 60
ranking0.000.250.500.75Lsgerman k=24
ls group A
ls group B
0 250 500 750 1000 1250
ranking0.000.020.040.06Lsmeps k=10
ls group A
ls group B
0 250 500 750 1000 1250
ranking0.00.5Lsmeps k=100
ls group A
ls group B
0 250 500 750 1000 1250
ranking0.00.10.2Lsmeps k=32
ls group A
ls group B
0 50 100 150 200
ranking0.00.10.2Lsrecidivism k=10
ls group A
ls group B
0 50 100 150 200
ranking0.00.20.4Lsrecidivism k=24
ls group A
ls group B
0 50 100 150 200
ranking0.000.250.500.75Lsrecidivism k=57
ls group A
ls group B
0 20 40
ranking0.20.4Lsstudent k=10
ls group A
ls group B
0 20 40
ranking0.20.40.6Lsstudent k=14
ls group A
ls group B
0 20 40
ranking0.000.250.500.75Lsstudent k=21
ls group A
ls group B
Figure 4: Leverage scores of ùê¥andùêµfor Table 2
 
2199