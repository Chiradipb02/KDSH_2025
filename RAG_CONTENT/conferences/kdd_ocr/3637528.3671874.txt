Multi-Scale Detection of Anomalous Spatio-Temporal Trajectories
in Evolving Trajectory Datasets
Chenhao Wang
University of Electronic Science and
Technology of China
Chengdu, China
chwang@std.uestc.edu.cnLisi Chen
University of Electronic Science and
Technology of China
Chengdu, China
lchen012@e.ntu.edu.sgShuo Shang‚àó
University of Electronic Science and
Technology of China
Chengdu, China
jedi.shang@gmail.com
Christian S. Jensen
Aalborg University
Aalborg, Denmark
csj@cs.aau.dkPanos Kalnis
King Abdullah University of Science
and Technology
Thuwal, Saudi Arabia
panos.kalnis@kaust.edu.sa
ABSTRACT
A trajectory is a sequence of timestamped point locations that cap-
tures the movement of an object such as a vehicle. Such trajectories
encode complex spatial and temporal patterns and provide rich
information about object mobility and the underlying infrastruc-
tures, typically road networks, within which the movements occur.
A trajectory dataset is evolving when new trajectories are included
continuously. The ability to detect anomalous trajectories in online
fashion in this setting is fundamental and challenging functionality
that has many applications, e.g., location-based services. State-of-
the-art solutions determine anomalies based on the shapes or routes
of trajectories, ignoring potential anomalies caused by different
sampling rates or time offsets. We propose a multi-scale model,
termed MST-OATD, for anomalous streaming trajectory detection
that considers both the spatial and temporal aspects of trajectories.
The model‚Äôs multi-scale capabilities aim to enable extraction of
trajectory features at multiple scales. In addition, to improve model
evolvability and to contend with changes in trajectory patterns,
the model is equipped with a learned ranking model that updates
the training set as new trajectories are included. Experiments on
real datasets offer evidence that the model can outperform state-
of-the-art solutions and is capable of real-time anomaly detection.
Further, the learned ranking model achieves promising results when
updating the training set with newly arrived trajectories.
CCS CONCEPTS
‚Ä¢Information systems ‚ÜíSpatial-temporal systems; ‚Ä¢Com-
puting methodologies ‚ÜíArtificial intelligence.
‚àóCorresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
¬©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671874KEYWORDS
Anomalous trajectory detection, Spatio-temporal, Evolving datasets
ACM Reference Format:
Chenhao Wang, Lisi Chen, Shuo Shang, Christian S. Jensen, and Panos
Kalnis. 2024. Multi-Scale Detection of Anomalous Spatio-Temporal Tra-
jectories in Evolving Trajectory Datasets. In Proceedings of the 30th ACM
SIGKDD Conference on Knowledge Discovery and Data Mining (KDD ‚Äô24),
August 25‚Äì29, 2024, Barcelona, Spain. ACM, New York, NY, USA, 11 pages.
https://doi.org/10.1145/3637528.3671874
1 INTRODUCTION
With the diffusion of mobile computing and geo-positioning tech-
nologies, spatial trajectories of moving objects (e.g., vehicles or
pedestrians) are being collected at an unprecedented scale [ 23,33].
Such trajectories, in the form of sequences of timestamped loca-
tions, capture rich movement information, and they fuel a range of
urban computing applications, such as movement pattern mining
[31,32], traffic flow control [ 19,30], local-event exploration [ 9,26],
and other urban computing applications.
Given rich movement information, anomalous trajectory de-
tection has important applications in location-based services. For
example, anomalous trajectories can reveal abnormal driving be-
havior. In online taxi platforms, detecting such behavior can help
prevent passengers from being overcharged due to unnecessary
detours [ 3,15]. As another example, anomalous trajectory detection
can help detect and predict events such as accidents and congestion
in road networks [ 18,27], thus providing technical support and
foundation for location-based service providers such as online nav-
igation and intelligent maps. Anomalous trajectory detection refers
to the process of identifying trajectories that exhibit significant
deviations from normal trajectories. A trajectory is considered to
be anomalous if it does not follow a normal route [ 24,29]. Con-
sider the example in Figure 1, where we have a set of trajectories
between a source and a destination. For the purpose of the example,
we assume that trajectory ùëá1(red) is a normal trajectory, while
trajectoryùëá2(blue) is anomalous as its route deviates significantly
from that of ùëá1.
While the detection of anomalous trajectories has attracted sub-
stantial attention, two key challenges still need to be addressed:
 
2980
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Chenhao Wang, Lisi Chen, Shuo Shang, Christian S. Jensen, & Panos Kalnis
Figure 1: Illustration of spatio-temporal anomalies. ùëá1,ùëá2,
ùëá3, andùëá4are trajectories from the same source to the same
destination.
(1)Inability to detect spatio-temporal anomalies. Most ex-
isting detection methods [ 2,13,15,16,20,24,28,29] focus primarily
on detecting spatially anomalous trajectories. These methods con-
sider a trajectory to be anomalous if it deviates from the route
taken by most other trajectories. These methods do not take into
account temporal differences between trajectories that follow the
same route. However, being able to detect temporal anomalies also
has important uses and should not be ignored. Consider Figure 1.
Trajectoryùëá3(purple) follows the same route as ùëá1(red). However,
ùëá3takes considerably longer to travel from ùëù1toùëù2thanùëá1, i.e.,
6 minutes vs. 2 minutes. Assuming that ùëá1is normal,ùëá3should
then also be considered as an anomalous trajectory. In real-world
applications, ensuring consistent sampling time intervals is chal-
lenging due to different types of sampling devices and missing data
[25]. Although a trajectory is considered as a normal trajectory
in terms of its location coordinates, the time intervals between
consecutive points may differ significantly from what is seen in a
normal trajectory. Thus, the trajectory is still anomalous. Differ-
ences in sampling intervals and missing sampling points can result
in an anomalous trajectory being indistinguishable from a normal
trajectory. It is therefore important to consider temporal differences
when detecting anomalous trajectories.
(2)No support for updates. As machine learning continues to
advance, many recent approaches to trajectory anomaly detection
employ machine learning to leverage these advances. Machine
learning uses trained models to extract features from trajectories
that can be used to detect anomalies [ 7,15,20]. However, currently
available learning-based methods focus on detecting trajectories
using pre-trained weights and do not provide support for updating
models as new data is collected. Irreversible changes to a road
network such as new roads and traffic regulations, e.g., one-way
lanes, speed limits, and traffic lights, call for updatable trajectory
sets and models. Therefore, it is essential to be able to update models
as new trajectories become available. To achieve high trajectory
anomaly detection performance, it is necessary to achieve efficiently
updatable training that keeps models up-to-date with the latest data,
while avoiding costly retraining of entire models from scratch.
In this light, we propose Multi-scale Spatio-temporal Online
Anomalous Trajectory Detection (MST-OATD) method. In MST-
OATD, a trajectory is represented by a spatio-temporal embeddingsequence. A multi-scale inference strategy is proposed to capture
multi-scale spatio-temporal trajectory features. We partition tra-
jectories into segments of different sizes. The multi-scale strategy
then combines spatial and temporal features of trajectory segments
at different scales. When inferring normal route features, we used a
Gaussian mixture model to model features, where different Gauss-
ian components can represent different types of trajectories. In ad-
dition, inspired by learned indexing [ 12], a learned ranking model
is introduced to learn the ranks of the probability of a trajectory
following a particular type. This ranking model can obtain ranks
with constant complexity as new trajectories are collected, and
the ranks are used to update the training trajectory set when new
trajectories are collected.
Our contributions are summarized as follows. First, we propose a
novel anomalous trajectory detection framework called MST-OATD
that can detect both spatial and temporal trajectory anomalies. Sec-
ond, we develop a strategy to capture trajectory features at multiple
scales that is effective and efficient. The relationships between tra-
jectory segments at different scales are used for latent route infer-
ence and generation. Third, we introduce a learned ranking model
to learn the rank of a trajectory based on the probability of following
each Gaussian component. This is used to update the training set at
constant complexity. Finally, we report on extensive experiments
with online anomalous trajectory detection on two large-scale real-
world datasets, finding that MST-OATD outperforms existing meth-
ods. We also find that using the ranking-based update strategy
enables better detection results than other update strategies. Our
code is available at https://github.com/chwang0721/MST-OATD.
2 RELATED WORK
2.1 Anomalous Trajectory Detection
Existing methods for identifying spatially anomalous in trajecto-
ries can be categorized as either metric-based or learning-based
methods [ 15]. The former typically use hand-crafted features and
predefined metrics such as distance or density to detect anomalies.
An early study [ 6] identifies typical trajectories between locations
of interest and computes the distance of each segment of the target
trajectory to reference trajectories. IBAT [ 29] detects anomalies
by finding the trajectories with the same SD pair as the reference
trajectory and employs the notion of degree of isolation. IBOAT [ 2]
is another isolation-based method for online detection. Learning-
based methods learn the features of normal routes and use these
to calculate anomaly scores of target trajectories. The probabilistic
method DB-TOD [ 24] models driving behavior/preferences from
historical trajectories using reinforcement learning. The RNN-based
method ATD-RNN [ 20] characterizes a trajectory by learning its
trajectory embedding using a stacked RNN. Recently, the genera-
tive sequence model GM-VSAE [ 15] has been proposed. Inspired
by the VAE [ 10], it uses a Gaussian mixture model to represent
trajectory features in latent space. ATROM [ 5] is a probabilistic
metric learning model that focuses on recognizing which type of
anomaly a trajectory exhibits. SafeTrip [ 21] uses several factors
such as distance and speed to estimate the probability of abnormal
safety events in a ride-hailing scenario.
Compared to detecting spatially anomalous trajectories, few
methods focus on the temporal information in trajectories. TPRO [ 34]
 
2981Multi-Scale Detection of Anomalous Spatio-Temporal Trajectories in Evolving Trajectory Datasets KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
develops a time-dependent graph to find popular routes in a given
time period as reference routes. An improved version of TPRO,
TPRRO [ 35] is proposed to speed up the detection process. The
recent time-dependent method DeepTEA [ 7] uses traffic patterns as
a reference and combines these with trajectory patterns. However,
these methods are time-dependent methods, they focus on obtain-
ing normal routes at different time periods, which is different from
our goal of detecting spatio-temporal anomalies.
2.2 Rank Prediction Model
The B-tree and its variants (e.g, B+-tree [ 1]) are the most commonly
used index structures for querying. Given a query, they aim to
return the position of a value within a key-sorted set. A recent study
of learned indexing [ 12] argues that the B-tree can be thought of as
a learnable model. The position of a key within a sorted array can be
approximated as a cumulative distribution function. As a result, the
model can be implemented using machine learning, such as linear
regression. Inspired by this, a similarity search called LIMS [ 22]
uses a polynomial function to predict the ranks of elements in
clusters. In our study, this technique can be used to predict the
ranks of trajectories. Although rank prediction using this method is
not exact due to the uncertainty of machine learning [ 4], the need
for an exact lookup is not necessary in our training set update. Our
focus is on updating distributions rather than performing a precise
search. Therefore, the learned index technique is suitable for rank
prediction in our application scenario.
3 PROBLEM FORMULATION
We proceed to present definitions and formally state the online
anomalous trajectory detection problem.
3.1 Preliminaries
Trajectory Point. A trajectory point ùëù=(ùëô,ùë°)captures the spatial
locationùëôof a mobile object at a specific time ùë°.
Trajectory. A trajectory ùëá=‚ü®ùëù1,ùëù2,...,ùëùùëõ‚ü©is a sequence of trajec-
tory points ùëùùëñthat capture the movement of an object over time.
Given a trajectory ùëá,ùëá(ùë†)andùëá(ùë°)denote its spatial and temporal
aspects, respectively: ùëá(ùë†)=‚ü®ùëô1,ùëô2,...,ùëôùëõ‚ü©andùëá(ùë°)=‚ü®ùë°1,ùë°2,...,ùë°ùëõ‚ü©.
Trajectory Segment. A trajectory segment ùëá[ùëñ;ùëó]is a consecutive
sub-sequence of trajectory ùëá=‚ü®ùëù1,ùëù2,...,ùëùùëõ‚ü©fromùëùùëñtoùëùùëó, 1‚â§
ùëñ‚â§ùëó‚â§ùëõ.
Route Type. Given a set of trajectories {ùëá1,ùëá2,...,ùëáùëÅ}from differ-
ent regions of a city (e.g., downtown or suburbs) and using different
types of roads (e.g., freeways or streets), we use this information to
assign a route type ùëêto each trajectory.
Trajectory Rank. The rankùëüùëéùëõùëòùëê(ùëá)of a trajectory ùëáis defined
as the rank of the probability among all the trajectories that a
trajectoryùëáhas, or follows, route type ùëê. In the example in Figure 1,
we assume that ùëá1(red) represents a trajectory following the route
typeùëê. Then we assume that the probabilities of ùëá2(blue),ùëá3(purple),
andùëá4(orange) following route type ùëêare 0, 1, and 0.5, respectively.
Therefore,ùëüùëéùëõùëòùëê(ùëá3)=1,ùëüùëéùëõùëòùëê(ùëá4)=2, andùëüùëéùëõùëòùëê(ùëá2)=3. The
probabilities are calculated based on a Gaussian mixture model, to
be described in Section 4.2.2.3.2 Problem Statement
Online Anomalous Trajectory Detection. A trajectory ùëáis con-
sidered anomalous if its route deviates significantly from the normal
routes or its time consumption differs significantly from those of
normal trajectories with the same route. The objective of online
anomalous trajectory detection is to acquire knowledge of regular
route patterns and update the anomaly score at each time point.
Section 5 outlines the methodology for calculating the anomaly
scoreùëÜùëêùëúùëüùëí(ùëá). The range of the score is [0,1], andùëÜùëêùëúùëüùëí(ùëá)can
reflect the combination of spatial and temporal anomalies of ùëá.
4 THE MST-OATD MODEL
We proceed to present the MST-OATD method. The overall archi-
tecture of MST-OATD is illustrated in Figure 2.
4.1 Trajectory Embedding Computation
To extract trajectory features, it is essential to represent trajectories
using low-dimensional embeddings. To achieve this, we compute
spatial and temporal embeddings and perform multi-scale fusion.
4.1.1 Spatial Embedding. We map spatial locations of trajectories
to cells in a uniform grid following a previous study [ 14]. Given a
trajectoryùëá, the spatial sequence ùëá(ùë†)=‚ü®ùëô1,ùëô2,...,ùëôùëõ‚ü©is transformed
into sequence g=‚ü®ùëî1,ùëî2,...,ùëîùëõ‚ü©, whereùëîùëñdenotes a grid cell. We
useùëíùëîùëñto represent the grid cell id embedding of ùëîùëñ. However, grid
cell id embedding is not a complete representation of a trajectory
point because it ignores the positional relationships between the
grid cells. Inspired by Graph Convolutional Networks [ 11], we
generate an aggregation matrix ùêªfor the grid cells:
ùêª=eùê∑‚àí1
2ùëäeùê¥eùê∑‚àí1
2, (1)
whereùê¥is the adjacency matrix. In the grid mapping, adjacent
grid cells are cells with common edges and eùê¥=ùê¥+ùêº,eùê¥is used to
aggregate features of a grid cell and its adjacent grid cells. Next,
degree matrix eùê∑is calculated as eùê∑ùëñùëñ=√ç
ùëóeùê¥ùëñùëó, andùëäis a weight
matrix for eùê¥, which is learned to obtain the weights of adjacent grid
cells since the influence of adjacent grid cells vary. For instance,
cells connected by a road, influence each other more than cells
without a road connection.
Therefore, the spatial embedding ùëí(ùë†)
ùëñcan be calculated by mul-
tiplying the aggregation matrix and grid cell id embedding:
ùëí(ùë†)
ùëñ=ùêªùëíùëîùëñ=eùê∑‚àí1
2ùëäeùê¥eùê∑‚àí1
2ùëíùëîùëñ (2)
Based on the method above, the spatial trajectory ùëá(ùë†)can be
embedded as a sequence of vectors e(ùë†)=‚ü®ùëí(ùë†)
1,ùëí(ùë†)
2,...,ùëí(ùë†)
ùëõ‚ü©.
4.1.2 Temporal Embedding. Compared to the spatial embedding,
the temporal embedding is more difficult to compute because the
method used for spatial embedding may fail to capture periodic fea-
tures, which is an important characteristic of temporal information.
Instead, inspired by Time2Vec [ 8], we learn temporal embeddings
using a neural network with a periodic activation function to ex-
tract periodic and non-periodic features. For each timestamp ùë°in a
trajectory, we represent ùë°by a tupleùúèconsisting of values for dif-
ferent levels of time units (e.g., dates, hours, minutes and seconds).
 
2982KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Chenhao Wang, Lisi Chen, Shuo Shang, Christian S. Jensen, & Panos Kalnis
TrajectoriesMapped Locations
TimestampsSpatial EmbeddingTemporal EmbeddingMuti-scale Fusion
Trajectory Embedding Computation‚Ä¶Scale 1 Embedding‚Ä¶‚Ä¶Scale 2 EmbeddingScale ùëòEmbeddingSingle-scale Inference
Trajectory Generation
ReconstructionRoute InferenceGenerated LocationsGenerated Timestampsr(s)r(t)Multi-scale Inference‚Ä¶‚Ä¶
Figure 2: An overview of MST-OATD. It comprises three stages: trajectory embedding computation, route inference, and
trajectory reconstruction.
The temporal embedding ùëí(ùë°)is given in Equation 3:
ùëí(ùë°)=[ùëì1(ùúè)‚à•F(ùëì2(ùúè))], (3)
whereùëì1(¬∑)andùëì2(¬∑)are learnable fully connected layers, Fde-
notes a periodic activation function that helps capture periodic
behaviors at different levels without the need for feature engineer-
ing,[¬∑‚à•¬∑] is the concatenation operator. In MST-OATD, we choose
theùë†ùëñùëõùëí function asF, representing periodicity at different time
units. With Equation 3, the temporal information of a trajectory
ùëá(ùë°)=‚ü®ùë°1,ùë°2,...,ùë°ùëõ‚ü©can be embedded into a sequence of vectors
e(ùë°)=‚ü®ùëí(ùë°)
1,ùëí(ùë°)
2,...,ùëí(ùë°)
ùëõ‚ü©.
4.1.3 Multi-scale Fusion. A trajectory is a sequence of trajectory
points, and the connections between different segments of a tra-
jectory play a crucial role in representing the trajectory‚Äôs features.
As single-scale methods focus mainly on individual points within
a trajectory, they face challenges in achieving a comprehensive
representation of an entire trajectory. Furthermore, it is essential to
integrate spatial and temporal information. To address these issues,
we provide a multi-scale fusion module that effectively captures
spatio-temporal features across multiple scales.
Specifically, a cross-attention module is adopted to fuse spa-
tial and temporal embeddings. The spatial and temporal attention
results ÀÜe(ùë†)andÀÜe(ùë°)are computed as follows:
ÀÜe(ùë†)=Softmax(e(ùë°)ùëä(ùë†)
ùëûe(ùë†)ùëä(ùë†)
ùëòùëá/‚àöÔ∏Å
ùëëùëò)e(ùë†)ùëä(ùë†)
ùëâ
ÀÜe(ùë°)=Softmax(e(ùë†)ùëä(ùë°)
ùëûe(ùë°)ùëä(ùë°)
ùëòùëá/‚àöÔ∏Å
ùëëùëò)e(ùë°)ùëä(ùë°)
ùëâ,(4)
whereùëä(ùë†)
ùëû,ùëä(ùë†)
ùëò, andùëä(ùë†)
ùëâare the weights for spatial cross-
attention;ùëä(ùë°)
ùëû,ùëä(ùë°)
ùëò, andùëä(ùë°)
ùëâare the weights for temporal cross-
attention; and ùëëùëòis the dimensionality of ùëä(ùë†)
ùëòandùëä(ùë°)
ùëò. The
trajectory embedding eis then calculated as shown in Equation 5:
e=[(Norm(FFN(ÀÜe(ùë†))+e(ùë†))‚à•Norm(FFN(ÀÜe(ùë°))+e(ùë°)))] (5)
Here, FFN denotes a feed-forward network, and Norm is the Layer
Normalization operation. We use eùëòto represent a trajectory embed-
ding at scale ùëò. Specifically, since we have a sequence of embeddings
e=‚ü®ùëí1,ùëí2,...,ùëíùëõ‚ü©of lengthùëõ,eùëòis computed as follows:
eùëò=‚ü®ÀÜùëíùëò1,ÀÜùëíùëò2,...,ÀÜùëíùëò‚åàùëõ/ùë†ùëò‚åâ‚ü©, (6)whereùë†ùëòdenotes the segment size of scale ùëò,ÀÜùëíùëòùëñis the mean of the
values of embeddings in the ùëñ-th segment of scale ùëò,‚åà¬∑‚åâdenotes the
rounding-up operation, ÀÜùëíùëò‚åàùëõ/ùë†ùëò‚åâis the last segment of trajectory ùëá
because the length of a trajectory is not necessarily divisible by the
size of the segment, which are calculated as shown in next:
ÀÜùëíùëòùëñ=(√çùëñ√óùë†ùëò+1
ùëó=(ùëñ‚àí1)ùë†ùëò+1ùëíùëó/ùë†ùëòùëñ<‚åàùëõ/ùë†ùëò‚åâ√çùëõ
ùëó=(ùëñ‚àí1)ùë†ùëò+1ùëíùëó/ùë†ùëòùëñ=‚åàùëõ/ùë†ùëò‚åâ(7)
In order to capture the correlation between the segments in a
trajectory, we use an attention layer for embeddings at different
scales, the aim being to compute the attention score of segments in
the same trajectory. The calculation is shown in Equation 8:
Àúùëíùëòùëñ=√ç
ùëóSoftmax(ùõºùëñ,ùëó)ÀÜùëíùëòùëó, (8)
whereùõºùëñ,ùëó=ùëäùõº¬∑tanh(ùëäùëñ¬∑ÀÜùëíùëòùëñ+ùëäùëó¬∑ÀÜùëíùëòùëó);ùëäùõº,ùëäùëñ, andùëäùëòare the
parameters to learn; and Àúùëíùëòùëñis theùëñ-th segment embedding at scale
ùëòafter the attention layer.
We use Àúeùëòto represent the embedding of trajectory ùëáat scaleùëò
after multi-scale fusion, and Àúeùëòis calculated using the method above.
Different scales capture different characteristics of trajectories. For
example, smaller scales can capture intricate details such as corners.
Conversely, larger scales are required to capture trajectory features
such as their overall shape.
4.2 Route Inference
To extract spatio-temporal features of the trajectory ùëáat multiple
scales, we propose an inference network ùëûùúÉ(ùëü(ùë†),ùëü(ùë°)|ùëá)to infer
latent route vectors given a trajectory ùëá. Here,ùúÉdenotes the pa-
rameters of ùëûùúÉ(ùëü(ùë†),ùëü(ùë°)|ùëá)to be learned, where ùëü(ùë†)andùëü(ùë°)are
spatial and temporal latent vectors. To cope with the uncertainty of
trajectories, we model ùëü(ùë†)andùëü(ùë°)using Gaussian distributions:
ùëü(ùë†)
ùëá‚àºùëûùúÉ(ùëü(ùë†)|ùëá)=N(ùúá(ùë†),ùúé2(ùë†))
ùëü(ùë°)
ùëá‚àºùëûùúÉ(ùëü(ùë°)|ùëá)=N(ùúá(ùë°),ùúé2(ùë°)),(9)
whereùúá(ùë†),ùúé2(ùë†),ùúá(ùë°), andùúé2(ùë°)are parameters of the spatial and
temporal Gaussian distributions.
The route inference stage consists of single-scale and multi-
scale inference. Single-scale inference acquires latent vectors at a
particular scale, while multi-scale inference combines vectors at
different scales.
 
2983Multi-Scale Detection of Anomalous Spatio-Temporal Trajectories in Evolving Trajectory Datasets KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
4.2.1 Single-scale Inference. We provide a specialized module for
route inference, focusing on a specific scale. Our approach employs
recurrent neural networks (RNN) to enable single-scale inference.
The RNNs operate at each timestamp ùë°ùëñ, taking in the trajectory
embedding Àúùëíùëñand generating a hidden state ‚Ñéùëñas follows:
‚Ñéùëñ=ùëî1(Àúùëíùëñ,‚Ñéùëñ‚àí1), ùëñ=1,2,...,ùëõ (10)
Here,ùëî1(¬∑)represents the RNN module, while ‚Ñéùëñ‚àí1denotes theùëñ‚àí1-
th hidden state. Using this method, ‚Ñé(ùë†)
ùëñand‚Ñé(ùë°)
ùëñcan be obtained
given Àúùëíùëñ,‚Ñé(ùë†)
ùëñ‚àí1, and‚Ñé(ùë°)
ùëñ‚àí1. We use‚Ñé(ùë†)and‚Ñé(ùë°)to refer to the final
hidden states derived from the spatial and temporal embeddings,
respectively.
4.2.2 Multi-scale Inference. To combine single-scale trajectory fea-
tures, we propose a probability-based multi-scale inference module
for latent route inference. Gaussian mixture models are used to
model the spatial and temporal latent vectors to contend with the
complexity of the trajectories. The parameters of the spatial and
temporal Gaussian mixture distributions at scale ùëòcan be obtained
by performing linear transformations on ‚Ñé(ùë†)ùëòand‚Ñé(ùë°)ùëò:
ùúá(ùë†)=ùëì3(√ç
ùëòùúÜ(ùë†)
ùëò‚Ñé(ùë†)ùëò), ùúé2(ùë†)=ùëì4(√ç
ùëòùúÜ(ùë†)
ùëò‚Ñé(ùë†)ùëò)
ùúá(ùë°)=ùëì5(√ç
ùëòùúÜ(ùë°)
ùëò‚Ñé(ùë°)ùëò), ùúé2(ùë°)=ùëì6(√ç
ùëòùúÜ(ùë°)
ùëò‚Ñé(ùë°)ùëò),(11)
where‚Ñé(ùë†)ùëòand‚Ñé(ùë°)ùëòare the final hidden states of the spatial and
the temporal embeddings at scale ùëò,ùúÜ(ùë†)
ùëòandùúÜ(ùë°)
ùëòare spatial and
temporal parameters at scale ùëò, andùëì3(¬∑),ùëì4(¬∑),ùëì5(¬∑), andùëì6(¬∑)are
fully connected layers. Further, ùúá(ùë†),ùúé2(ùë†),ùúá(ùë°), andùúé2(ùë°)are the
multi-scale processed parameters of spatial and temporal Gaussian
mixture distributions. These two distributions contain information
about spatially and temporally normal routes.
Furthermore, since vehicles may travel in different regions of
a city (e.g., downtown or suburbs) and on different types of roads
(e.g., freeways or streets), it is not reasonable to model all trajec-
tories with a single distribution. Similarly, normal trajectories are
different at different times, e.g., morning and evening rush hour
trajectories differ from ones at other times, so it also makes sense to
temporally categorize trajectories into different types. Motivated by
this, we assume that there are ùê∂types of routes both spatially and
temporally. We use a multinomial distribution ùëùùúô(ùëê)=Mult(ùúã)
to represent the distribution of route types, where ùëêis a variable
that determines the type of a trajectory and ùúãis the distribution
parameter. For each type, a Gaussian distribution is used to model
the latent vector, as shown in Equations 12:
ùëùùúô(ùëü(ùë†)|ùëê(ùë†))=N(ùúá(ùë†)
ùëê(ùë†),ùúé2(ùë†)
ùëê(ùë†)),ùëùùúô(ùëü(ùë°)|ùëê(ùë°))=N(ùúá(ùë°)
ùëê(ùë°),ùúé2(ùë°)
ùëê(ùë°))
(12)
Here,ùëùùúô(ùëü|ùëê)denotes the probability of a type ùëêroute being
traversed by the trajectories, and ùëü(ùë†)andùëü(ùë°)are the spatial and
temporal latent route vectors. Next, ùúá(ùë†)
ùëê(ùë†)andùúé2(ùë†)
ùëê(ùë†)denote the
mean and variance of the spatial distribution of type ùëê(ùë†), andùúá(ùë°)
ùëê(ùë°)
andùúé2(ùë°)
ùëê(ùë°)denote the parameters of the temporal distribution of
typeùëê(ùë°)). The latent vectors ùëü(ùë†), andùëü(ùë°)and the route types ùëê(ùë†),
andùëê(ùë°)can be inferred from Equation 13:
ùëûùúÉ(ùëü(ùë†),ùëü(ùë°),ùëê(ùë†),ùëê(ùë°)|ùëá)=ùëûùúÉ(ùëü(ùë†),ùëü(ùë°)|ùëá)ùëûùúÉ(ùëê(ùë†),ùëê(ùë°)|ùëá)(13)Basically,ùëûùúÉ(ùëê(ùë†),ùëê(ùë°)|ùëá)can be considered as the probability of
spatial type ùëê(ùë†)and temporal type ùëê(ùë°)given the route of a tra-
jectoryùëá. Since the trajectory ùëácan be encoded into spatial and
temporal latent vectors ùëü(ùë†)
ùëáandùëü(ùë°)
ùëá,ùëûùúÉ(ùëê(ùë†),ùëê(ùë°)|ùëá)can also be
written asùëùùúô(ùëê(ùë†),ùëê(ùë°)|ùëü(ùë†)
ùëá,ùëü(ùë°)
ùëá). Then,ùëùùúô(ùëê|ùëüùëá)can be converted
by the Bayesian formula as shown in Equation 14:
ùëûùúÉ(ùëê(ùë†),ùëê(ùë°)|ùëá)=ùëùùúô(ùëê(ùë†),ùëê(ùë°)|ùëü(ùë†)
ùëá,ùëü(ùë°)
ùëá)
=ùëùùúô(ùëê(ùë†))ùëùùúô(ùëü(ùë†)
ùëá|ùëê(ùë†))
√çùê∂
ùëñ=1ùëùùúô(ùëñ)ùëùùúô(ùëü(ùë†)
ùëá|ùëñ)¬∑ùëùùúô(ùëê(ùë°))ùëùùúô(ùëü(ùë°)
ùëá|ùëê(ùë°))
√çùê∂
ùëó=1ùëùùúô(ùëó)ùëùùúô(ùëü(ùë°)
ùëá|ùëó)(14)
Therefore, the spatial and temporal latent vectors and their types
can be inferred using ùëùùúô(ùëü|ùëê)andùëùùúô(ùëê), which are defined above.
4.3 Trajectory Reconstruction
To enable online detection, we design a generation network ùëùùõæ(ùëá|ùëü),
whereùõærepresents the parameters of the network. The distribution
ùëùùõæ(ùëá|ùëü)denotes the probability that a trajectory ùëáfollows normal
routes contained in ùëü. RNNs are also used to generate trajectories.
Given a sequence of embeddings e<ùëñ=‚ü®ùëí1,ùëí2,...,ùëíùëñ‚àí1‚ü©and a la-
tent route vector ùëü, the hidden state ùëöùëñis updated as shown in
Equation 15:
ùëöùëñ=ùëî2(ùëíùëñ,ùëöùëñ‚àí1)ùëñ=1,2,...,ùëõ ùëö 0=ùëü, (15)
whereùëî2(¬∑)is an RNN to be learned, and ùëö0is the initial hidden
state, which is also the spatial latent route vector. The ùëíùëñat theùëñ-th
step is generated according to Equation 16:
ùëíùëñ‚àºùëùùõæ(ùëíùëñ|e<ùëñ,ùëü)=ùëùùõæ(ùëíùëñ|ùëöùëñ‚àí1). (16)
With this method, ùëí(ùë†)
ùëñcan be calculated given a sequence of spatial
embeddings e(ùë†)<ùëñand spatial latent route vector ùëü(ùë†); andùëí(ùë°)
ùëñcan
be calculated given a sequence of temporal embeddings e(ùë°)<ùëñand
temporal latent route vector ùëü(ùë°).
Using the generation network, the spatial and temporal aspects
of trajectory ùëá,ùëá(ùë†)andùëá(ùë°), can be generated sequentially by
ùëùùõæ(ùëá(ùë†)|ùëü(ùë†))andùëùùõæ(ùëá(ùë°)|ùëü(ùë°)).
4.4 Optimization
The parameters to be learned include the spatial and temporal
embeddings, ùúÉfor route inference, and ùõæfor trajectory generation.
The training objective is to maximize the marginal log-likelihood
of generated trajectories:
logùëùùõæ(ùëá1,ùëá2,...,ùëáùëÅ)=ùëÅ‚àëÔ∏Å
ùëñ=1logùëùùõæ(ùëá(ùë†)
ùëñ)ùëùùõæ(ùëá(ùë°)
ùëñ), (17)
whereùëÅis the number of trajectories used for training. The mar-
ginal log-likelihood is optimized by maximizing the lower bound on
the sum of marginal likelihoods L(ùúÉ,ùúô,ùõæ ;ùëá(ùë†))andL(ùúÉ,ùúô,ùõæ ;ùëá(ùë°)).
Appendix provides the details on calculating the lower bound.
5 ONLINE ANOMALOUS TRAJECTORY
DETECTION BY MST-OATD
To detect anomalous trajectories, we use the detect-by-generation
strategy. Given a trajectory ùëáand latent route vectors ùëü(ùë†)andùëü(ùë°),
the generative networks ùëùùõæ(ùëá(ùë†)|ùëü(ùë†))andùëùùõæ(ùëá(ùë°)|ùëü(ùë°))are used to
 
2984KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Chenhao Wang, Lisi Chen, Shuo Shang, Christian S. Jensen, & Panos Kalnis
compute the probability that ùëáwas generated from the latent vector
ùëü. To find the most likely route type in the spatial and temporal
latent space for each trajectory, we compute the probability of the
trajectory following all types, and we select the highest type as
the final type. The anomaly score of a trajectory ùëáis defined in
Equation 18:
Score(ùëá)=1‚àíarg max
ùëê(ùë†),ùëê(ùë°)exp[logùëùùõæ(ùëá(ùë†)|ùúá(ùë†)
ùëê(ùë†))ùëùùõæ(ùëá(ùë°)|ùúá(ùë°)
ùëê(ùë°))
ùëõ],
(18)
where arg max is the operation that finds the argument that maxi-
mizes the argument function, ùëõis the length of the trajectory, which
is used to normalize the anomaly score of trajectories with different
lengths, and ùëê(ùë†)andùëê(ùë°)are the types of the spatial and temporal
embeddings. Here, we use ùúá(ùë†)
ùëê(ùë†)andùúá(ùë°)
ùëê(ùë°)to approximate the latent
vectors of each type.
For online detection, the anomaly score Score(ùëá‚â§ùëñ)is determined
by the log-likelihood at the previous timestamp and the upcoming
trajectory point:
Score(ùëá‚â§ùëñ)=1‚àíarg max
ùëê(ùë†),ùëê(ùë°)exp[logùëùùõæ(ùëá(ùë†)
‚â§ùëñ|ùúá(ùë†)
ùëê(ùë†))ùëùùõæ(ùëí(ùë†)
ùëñ|ùëá(ùë†)
‚â§ùëñ,ùúá(ùë†)
ùëê(ùë†))
ùëñ+1
+logùëùùõæ(ùëá(ùë°)
‚â§ùëñ|ùúá(ùë°)
ùëê(ùë°))ùëùùõæ(ùëí(ùë°)
ùëñ|ùëá(ùë°)
‚â§ùëñ,ùúá(ùë°)
ùëê(ùë°))
ùëñ+1]
(19)
6 EVOLVING DATASET UPDATE
Sections 4 and 5 present the MST-OATD model and its application to
online detection. However, as road conditions change over time and
new trajectories are collected, the pre-trained spatial and temporal
features may not match the current trajectory patterns. Therefore,
a method to update the model with new data is needed.
A natural approach is to update the model weights with a con-
stant number of newly collected trajectories, replacing the oldest
ones. However, this approach is not always optimal. For example,
if all of the newest trajectories are from a particular type, simply
replacing the oldest trajectories may not result in a rapid shift in
the data distribution. Our goal is to ensure that the training and
target data distributions remain consistent, as this allows the model
to be fine-tuned with greater efficiency. To achieve this, we pro-
pose a ranking-based update strategy that prioritizes updates of
the training set based on the spatial distribution of the trajectories.
Since the update process is inherently a temporal problem, we
focus on updating the training set according to the spatial distribu-
tion. More specifically, suppose we have a set of trajectories that
spatially follow a Gaussian mixture distribution with ùê∂components.
As discussed in Section 4.2.2, the probability that a trajectory ùëáis
of typeùëêin the spatial domain is expressed as ùëù(ùëê|ùëá)=ùëù(ùëê|ùëü(ùë†)
ùëá),
whereùëü(ùë†)
ùëáis the spatial latent vector of ùëá. We compute the proba-
bility that each trajectory follows a particular type, and then rank
them in descending order. We place a trajectory in the type with
the highest rank and replace the earliest trajectory in the type with
the lowest rank.Further, considering that our model supports online detection,
the efficiency of updates is also critical. The input to our ranking-
based model is the probability that the trajectory has a particular
type, as discussed in Section 4.2.2, and the output is the rank of
the probability of the trajectory in that type. Traditional search
structures like B-trees can handle this problem with O(logùëõ)time
complexity. Inspired by learned indexing [ 12], it is possible to view
the rank of a trajectory as an estimate of the cumulative distribution
function (CDF). Equation 20 models the relationship between the
trajectory rank ùëüùëéùëõùëòùëê(ùëá)and the probability of ùëáhaving spatial
typeùëê:
ùëüùëéùëõùëòùëê(ùëá)=ùêπ(ùëù(ùëê|ùëü(ùë†)))‚àóùëÅ, (20)
whereùêπ(¬∑)is the estimated cumulative distribution function and
ùëÅis the total number of trajectories. Specifically, we use logistic
regression to implement the model as follows:
ùëüùëéùëõùëòùëê(ùëá)=[1+ùëí‚àí(ùë§¬∑ùëù(ùëê|ùëü(ùë†))+ùëè)]‚àí1‚àóùëÅ, (21)
whereùë§andùëèare the weight and bias. The use of the Sigmoid
activation function is able to restrict the output to [0, 1], which
is consistent with the output range of the cumulative distribution.
The regression model learns the data distribution by minimising the
squared error of the function. The loss of category ùëêis calculated
as follows:
ùêø(ùë§;ùëè)=√çùëÅ
ùëñ=1(ùë¶ùëñ‚àíùëüùëéùëõùëòùëê(ùëáùëñ))2, (22)
whereùë¶ùëñis the real rank of trajectory ùëáùëñ. Using this method, the
trajectory rank of ùëácan be obtained within a constant operation.
The Appendix provides the pseudo-code of evolving dataset update
using the learned ranking method.
7 EXPERIMENTS
7.1 Experimental Settings
Datasets: We conducted experiments on two real-world taxi tra-
jectory datasets, namely Porto1and Chengdu2. Porto contains an
entire year of trajectories from 442 taxis in Porto, Portugal, where
positions are sampled every 15 seconds. Chengdu contains over
1.4 billion trajectory points from approximately 14 thousand taxis
in Chengdu, China from August 3, 2014, to August 30, 2014. In
Chengdu, the sampling rate is non-uniform. In our experiments,
we use a ten-day subset of the Chengdu dataset.
Prepossessing: Following a previous study [ 14], we converted
the underlying geographical spaces of Porto and Chengdu into
100m√ó100m grids. In Porto, trajectories with more than 50 points
are divided into trajectories with lengths between 20 and 50, and we
also delete at random 30% of the points in each trajectory to make
the durations between points uneven. In Chengdu, trajectories
longer than 100 points are divided randomly into trajectories with
lengths between 30 and 100. Table 1 gives information about the
two adjusted datasets. For Porto, we use the first two months of data
to evaluate the effectiveness and efficiency of MST-OATD and to
train the ranking model. The remaining data is used to evaluate the
performance with the evolving dataset update algorithm. Similarly,
the first three days of data in Chengdu are used to evaluate the
effectiveness and efficiency and to train the ranking model. The
1https://www.kaggle.com/c/pkdd-15-predict-taxi-service-trajectory-i/data
2https://js.dclab.run/v2/cmptDetail.html?id=175
 
2985Multi-Scale Detection of Anomalous Spatio-Temporal Trajectories in Evolving Trajectory Datasets KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
remaining seven days of trajectories are used to update the training
set. For each dataset, we randomly select 80% of the trajectories for
training and 20% for testing.
Table 1: Dataset Statistics
Dataset # Trajectories # Trajectory Points # Grid Size
Porto 1,198,551 35,274,322 [51, 119]
Chengdu 2,124,763 128,837,312 [167, 154]
Ground Truth: In the absence of a label dataset for anomaly detec-
tion, some studies attempt to label anomalies manually. However,
manual labeling is time-consuming and lacks uniform standards.
Instead, we generate anomalous samples according to specific rules.
Following previous studies, we use a perturbation scheme to gener-
ate spatial and temporal anomalies. Specifically, we use parameters
ùõºandùëë, whereùõºis the fraction of continuous outlier and ùëëis the
moving distance of outliers. In GM-VSAE [ 15], a spatially anoma-
lous trajectory is generated by moving a part of a trajectory by a
certain distance. However, in this method, the moved part of the
trajectory is not continuous. Our method moves a continuous part
of a trajectory. For example, ùõº=0.1;ùëë=3means that 10% of a
trajectory deviates by 3 grid cells. It should also be noted that tra-
jectory perturbations affect the timestamps of the trajectories. We
assume that the speed of a trajectory is constant, so as the distance
traveled increases, the time interval will change to keep the number
of trajectory points constant. The proportion of anomalous samples
generated is set to 5% in all experiments.
Evaluation Metric: We use Precision-Recall AUC (PR-AUC) to
evaluate the performance of anomalous trajectory detection. Since
the anomalous samples make up a small proportion of the datasets,
the positive and negative samples are unbalanced. The goal of the
evaluation of anomaly detection is to evaluate the ability to discover
positive samples, for which PR-AUC is suitable.
Baselines: We consider six existing methods for online anomalous
trajectory detection:
‚Ä¢iBAT [29]. This isolation-based anomalous trajectory method
detects anomalous trajectories by checking how much a tar-
get trajectory can be isolated from reference trajectories.
‚Ä¢SAE [17]. The sequence autoencoder is an RNN-based sequence-
to-sequence model learned by minimizing a reconstruction
error. The anomaly score is also defined based on the recon-
struction error.
‚Ä¢VSAE [10]. The variational sequence autoencoder is a degen-
erate GM-VSAE model, where the latent route distribution
is a Gaussian.
‚Ä¢TPRRO [35]. This method distinguishes outliers from time-
dependent popular routes using a time-dependent transfer
graph.
‚Ä¢GM-VSAE [15]. This Gaussian mixture variational sequence
autoencoder is an RNN-based sequence-to-sequence model.
This method can handle complex trajectory distributions by
considering the latent space as a Gaussian mixture model.
‚Ä¢DeepTEA [7] This is a state-of-the-art time-dependent method
that combines dynamic traffic conditions and trajectory pat-
terns to detect anomalies.7.2 Effectiveness Evaluation
Table 2 shows experimental results on the Porto and Chengdu
datasets. To evaluate the online detection capability, we vary the
observed ratio ùúåof the trajectories, i.e, only part of the trajectory
are observed during detection. We can find that compared to the
metric-based method iBAT and TPRRO, the learning-based methods
have significant advantages. The proposed MST-OATD outperforms
all baselines. MST-OATD has an average promotion of 18.6% on
Porto and 2.9% on Chengdu compared to the best existing method,
DeepTEA. The average promotion is the mean value of the PR-AUC
improvements over DeepTEA divided by DeepTEA‚Äôs PR-AUC in
each set of experiments. For full trajectory detection, MST-OATD
achieves high PR-AUC results even when the offset distance is
small, which means that it is capable of outlier detection even when
anomalous parts are not obvious. For example, when ùõº=0.2and
ùëë=2, the PR-AUC can be as high as 0.892 and 0.949 on Porto and
Chengdu, respectively. For online detection, we set the observed
ratio to 0.5 and 0.7, which means that only the first 50% and 70%
of a trajectory can be observed. MST-OATD can again outperform
all baselines including two methods that leverage temporal infor-
mation TPRRO and DeepTEA. On Chengdu, the improvements are
smaller than on Porto due to the higher PR-AUC values, making
improvements it more difficult. In addition, the shorter time horizon
of Chengdu limits the use of temporal information.
5 10 20 50 100
Number of Gaussian components0.40.50.60.70.80.91.0PR-AUC ( =0.1; d=3)
Porto
Chengdu
Figure 3: Effect of the num-
ber of Gaussian components.
128 256 512 1024
Dimension of hidden state0.60.70.80.91.0PR-AUC ( =0.1; d=3)
Porto ChengduFigure 4: Effect of the dimen-
sion of hidden state.
7.3 Hyperparameter Sensitivity Analysis
We perform parameter sensitivity experiments on the two datasets
and present our analysis. Two hyperparameters influence the per-
formance of MST-OATD the most: the dimension of the RNN hidden
state and the number of Gaussian components. The trajectory per-
turbation parameter is set to ùõº=0.1,ùëë=3in the ablation study,
and we focus on the result of detecting complete trajectories. The
number of Gaussian components varies from 5 to 100, and the
dimensionality of the hidden state varies from 128 to 1024. The
experimental results are shown in Figures 3 and 4. We find that the
PR-AUC is highest when the number of Gaussian components is
20 on both Porto and Chengdu. The best detection performance is
achieved when the dimensionality of the hidden state is set to 512
on both Porto and Chengdu.
7.4 Ablation Study
We conduct an ablation study on Porto and Chengdu to assess the
effectiveness of the two modules of MST-OATD. We thus compare
MST-OATD with two variants:
 
2986KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Chenhao Wang, Lisi Chen, Shuo Shang, Christian S. Jensen, & Panos Kalnis
Table 2: Performance Comparison on Porto and Chengdu Dataset (PR-AUC)
Dataset Porto Chengdu
Parameters ùõº=0.1;ùëë=3ùõº=0.2;ùëë=2ùõº=0.3;ùëë=2ùõº=0.1;ùëë=3ùõº=0.2;ùëë=2ùõº=0.3;ùëë=2
Observed ratio(ùúå)0.5 0.7 1.0 0.5 0.7 1.0 0.5 0.7 1.0 0.5 0.7 1.0 0.5 0.7 1.0 0.5 0.7 1.0
iBAT [29] 0.126 0.157 0.199 0.161 0.213 0.304 0.195 0.278 0.331 0.154 0.233 0.409 0.217 0.313 0.504 0.254 0.326 0.585
SAE [17] 0.234 0.316 0.331 0.227 0.589 0.654 0.577 0.831 0.893 0.514 0.658 0.836 0.579 0.771 0.913 0.638 0.891 0.918
VSAE [10] 0.255 0.293 0.306 0.475 0.611 0.649 0.584 0.823 0.871 0.513 0.676 0.831 0.559 0.782 0.907 0.632 0.899 0.924
TPRRO [35] 0.278 0.289 0.292 0.285 0.297 0.303 0.312 0.324 0.322 0.517 0.518 0.553 0.524 0.539 0.551 0.519 0.537 0.543
GM-VSAE [15] 0.305 0.358 0.374 0.509 0.667 0.722 0.606 0.853 0.910 0.522 0.687 0.858 0.573 0.798 0.919 0.654 0.914 0.947
DeepTEA [7] 0.347 0.366 0.408 0.496 0.685 0.736 0.588 0.863 0.921 0.531 0.693 0.875 0.582 0.812 0.931 0.664 0.919 0.935
MST-OATD w/o T 0.372 0.464 0.507 0.535 0.720 0.808 0.609 0.880 0.947 0.523 0.694 0.872 0.598 0.804 0.926 0.681 0.929 0.953
MST-OATD w/o M 0.411 0.575 0.683 0.526 0.742 0.847 0.618 0.865 0.951 0.538 0.715 0.878 0.581 0.806 0.936 0.669 0.923 0.962
MST-OATD 0.431 0.590 0.739 0.539 0.752 0.892 0.621 0.884 0.970 0.547 0.724 0.907 0.605 0.821 0.949 0.688 0.933 0.969
‚Ä¢MST-OATD w/o T: This variant only uses spatial informa-
tion for training and detects spatial anomalous trajectories.
‚Ä¢MST-OATD w/o M: This variant uses the single-scale in-
ference, not multi-scale inference, on both the spatial and
temporal dimensions.
MST-OATD outperforms the two variants, confirming the effec-
tiveness of multi-scale inference and temporal embedding. We find
that temporal embedding has a substantially larger impact on de-
tection performance than has multi-scale inference in general. This
suggests that the combination of spatial and temporal embedding
is most critical to anomalous trajectory detection. Furthermore,
the improvement due to using spatial and temporal embeddings is
more significant when the anomaly distance is short or the anomaly
fraction is small. This indicates that the temporal anomalies of a
trajectory are more pronounced than the spatial anomalies. Multi-
scale inference yields almost the same improvements for each set
of experiments on both Porto and Chengdu.
  Porto                                 Chengdu103
102
101
100101102Average runtime per 
 trajectory (ms)iBAT
SAEVSAE
TPRROGM-VSAE
DeepTEAMST-OATD
Figure 5: Detection time comparison.
7.5 Efficiency Evaluation
Figure 5 shows the average run time per trajectory. The efficiency
tests are performed on a single NVIDIA RTX 3090 GPU. In the
efficiency evaluation, the numbers of Gaussian components of GM-
VSAE, DeepTEA, and MST-OATD are all set to 10. TPRRO and
iBAT are the most time consuming methods as they extract normal
routes first and then compare a trajectory with these routes. VSAE
is the fastest deep learning method because it does not need to
encode trajectories in a latent space as does SAE. Due to the parallel
spatial and temporal generation, the detection speeds of MST-OATDand GM-VSAE are basically the same. However, due to the use of
Gaussian mixture distributions, the detection time is proportional
to the number of Gaussian components, making these two methods
slower than VSAE and SAE. The detection speed of DeepTEA is
lower than those of the other learning-based methods as it needs
to capture traffic patterns before generating trajectories. It is worth
noting that MST-OATD only takes 0.413 ms to detect a trajectory
in Porto and 0.636 ms in Chengdu, which is sufficient for real-time
detection.
12345678910
Number of updates (Porto)0.300.400.500.600.700.800.90PR-AUC ( =0.1; d=3)
rank_0.8037
temporal_0.784
pretrain_0.754
1234567
Number of updates (Chengdu)0.500.600.700.800.90PR-AUC ( =0.1; d=3)
rank_0.8573
temporal_0.8458
pretrain_0.805
12345678910
Number of updates (Porto)0.650.700.750.800.850.900.95PR-AUC ( =0.2; d=2)
rank_0.9172
temporal_0.9016
pretrain_0.8814
1234567
Number of updates (Chengdu)0.600.700.800.901.00PR-AUC ( =0.2; d=2)
rank_0.9071
temporal_0.8961
pretrain_0.8732
12345678910
Number of updates (Porto)0.750.800.850.900.951.00PR-AUC ( =0.3; d=2)
rank_0.9751
temporal_0.965
pretrain_0.9593
1234567
Number of updates (Chengdu)0.600.700.800.901.00PR-AUC ( =0.3; d=2)
rank_0.9356
temporal_0.9209
pretrain_0.9045
Figur
e 6: PR-AUC comparison of updatable training.
7.6 Updatable Training Evaluation
We further evaluate the effectiveness of our ranking-based method
when performing updatable training. Figure 6 shows the PR-AUC
 
2987Multi-Scale Detection of Anomalous Spatio-Temporal Trajectories in Evolving Trajectory Datasets KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
when detecting anomalous trajectories on Porto and Chengdu. We
compare ranking-based approach with two other methods: tempo-
ral update and a pretrained model, denoted as temporal and pretrain
in the figure. Temporal update replaces the oldest trajectories in the
training set when new trajectories arrive, and the pretrained model
keeps the weight of the model unchanged. We also report the aver-
age PR-AUC for the three methods in Figure 6. We can see that our
proposed ranking-based method outperforms the pretrained model
and the temporal update strategy. With the passage of time, there is
some degradation in the effectiveness of the pre-trained model, as
the characteristics of trajectories change over time. However, the
performance of training with temporal updating and ranking-based
updating does not show a significant decline.
8 CONCLUSION
We propose MST-OATD, a multi-scale model for online anomalous
spatial trajectory detection. MST-OATD utilizes both spatial and
temporal embeddings, and a multi-scale inference strategy is de-
signed to improve the performance of the trajectory representation.
MST-OATD can detect both spatial and temporal anomalies and
supports online detection. We also introduce a learned ranking
model to update the trajectory training set based on the distribu-
tion of incoming trajectories. We report on extensive experiments
on two real-world, large-scale taxi trajectory datasets. The results
offer evidence that each component of MST-OATD is effective and
efficient and show that MST-OATD is capable of outperforming
six baseline methods. The updatable training also shows that our
proposed ranking-based update strategy is capable of state-of-the-
art performance. In future research, it is of interest to extend our
model to support other trajectory data mining tasks.
ACKNOWLEDGMENT
This work was supported by the NSFC (No. U22B2037, U2001212,
U21B2046, 62032001, and 61932004).
REFERENCES
[1]Rudolf Bayer and Edward M. McCreight. 1972. Organization and Maintenance of
Large Ordered Indices. Acta Informatica 1 (1972), 173‚Äì189.
[2]Chao Chen, Daqing Zhang, Pablo Samuel Castro, Nan Li, Lin Sun, Shijian Li,
and Zonghui Wang. 2013. iBOAT: Isolation-Based Online Anomalous Trajectory
Detection. IEEE Trans. Intell. Transp. Syst. 14, 2 (2013), 806‚Äì818.
[3]Bin Cheng, Shiyou Qian, Jian Cao, Guangtao Xue, Jiadi Yu, Yanmin Zhu, Minglu
Li, and Tao Zhang. 2019. STL: Online Detection of Taxi Trajectory Anomaly
Based on Spatial-Temporal Laws. In DASFAA (Lecture Notes in Computer Science,
Vol. 11447). Springer, 764‚Äì779.
[4]Jialin Ding, Umar Farooq Minhas, Jia Yu, Chi Wang, Jaeyoung Do, Yinan Li,
Hantian Zhang, Badrish Chandramouli, Johannes Gehrke, Donald Kossmann,
David B. Lomet, and Tim Kraska. 2020. ALEX: An Updatable Adaptive Learned
Index. In SIGMOD. ACM, 969‚Äì984.
[5]Qiang Gao, Xiaohan Wang, Chaoran Liu, Goce Trajcevski, Li Huang, and Fan
Zhou. 2023. Open Anomalous Trajectory Recognition via Probabilistic Metric
Learning. In Proceedings of the Thirty-Second International Joint Conference on Ar-
tificial Intelligence, IJCAI 2023, 19th-25th August 2023, Macao, SAR, China. ijcai.org,
2095‚Äì2103.
[6]Yong Ge, Hui Xiong, Chuanren Liu, and Zhi-Hua Zhou. 2011. A Taxi Driving
Fraud Detection System. In ICDM. IEEE Computer Society, 181‚Äì190.
[7]Xiaolin Han, Reynold Cheng, Chenhao Ma, and Tobias Grubenmann. 2022.
DeepTEA: Effective and Efficient Online Time-dependent Trajectory Outlier
Detection. Proc. VLDB Endow. 15, 7 (2022), 1493‚Äì1505.
[8]Seyed Mehran Kazemi, Rishab Goel, Sepehr Eghbali, Janahan Ramanan, Jaspreet
Sahota, Sanjay Thakur, Stella Wu, Cathal Smyth, Pascal Poupart, and Marcus A.
Brubaker. 2019. Time2Vec: Learning a Vector Representation of Time. CoRR
abs/1907.05321 (2019).
[9]Seokyeon Kim, Seongmin Jeong, Insoo Woo, Yun Jang, Ross Maciejewski, and
David S. Ebert. 2018. Data Flow Analysis and Visualization for SpatiotemporalStatistical Data without Trajectory Information. IEEE Trans. Vis. Comput. Graph.
24, 3 (2018), 1287‚Äì1300.
[10] Diederik P. Kingma and Max Welling. 2014. Auto-Encoding Variational Bayes. In
ICLR.
[11] Thomas N. Kipf and Max Welling. 2017. Semi-Supervised Classification with
Graph Convolutional Networks. In ICLR. OpenReview.net.
[12] Tim Kraska, Alex Beutel, Ed H. Chi, Jeffrey Dean, and Neoklis Polyzotis. 2018.
The Case for Learned Index Structures. In SIGMOD. ACM, 489‚Äì504.
[13] Jae-Gil Lee, Jiawei Han, and Xiaolei Li. 2008. Trajectory Outlier Detection: A
Partition-and-Detect Framework. In ICDE. IEEE Computer Society, 140‚Äì149.
[14] Xiucheng Li, Kaiqi Zhao, Gao Cong, Christian S. Jensen, and Wei Wei. 2018. Deep
Representation Learning for Trajectory Similarity Computation. In ICDE. IEEE
Computer Society, 617‚Äì628.
[15] Yiding Liu, Kaiqi Zhao, Gao Cong, and Zhifeng Bao. 2020. Online Anomalous
Trajectory Detection with Deep Generative Sequence Modeling. In ICDE. IEEE,
949‚Äì960.
[16] Zhongjian Lv, Jiajie Xu, Pengpeng Zhao, Guanfeng Liu, Lei Zhao, and Xiaofang
Zhou. 2017. Outlier Trajectory Detection: A Trajectory Analytics Based Approach.
InDASFAA, Vol. 10177. Springer, 231‚Äì246.
[17] Pankaj Malhotra, Anusha Ramakrishnan, Gaurangi Anand, Lovekesh Vig, Puneet
Agarwal, and Gautam Shroff. 2016. LSTM-based Encoder-Decoder for Multi-
sensor Anomaly Detection. CoRR abs/1607.00148 (2016).
[18] Yue Ning, Liang Zhao, Feng Chen, Chang-Tien Lu, and Huzefa Rangwala. 2019.
Spatio-temporal Event Forecasting and Precursor Identification. In KDD. ACM,
3237‚Äì3238.
[19] Xuan Rao, Hao Wang, Liang Zhang, Jing Li, Shuo Shang, and Peng Han. 2022.
FOGS: First-Order Gradient Supervision with Learning-based Graph for Traffic
Flow Forecasting. In IJCAI. ijcai.org, 3926‚Äì3932.
[20] Li Song, Ruijia Wang, Ding Xiao, Xiaotian Han, Yanan Cai, and Chuan Shi. 2018.
Anomalous Trajectory Detection Using Recurrent Neural Network. In ADMA,
Vol. 11323. Springer, 263‚Äì277.
[21] Yueyang Su, Di Yao, Xiaolei Zhou, Yuxuan Zhang, Yunxia Fan, Lu Bai, and
Jingping Bi. 2023. TripSafe: Retrieving Safety-related Abnormal Trips in Real-
time with Trajectory Data. In Proceedings of the 46th International ACM SIGIR
Conference on Research and Development in Information Retrieval, SIGIR 2023,
Taipei, Taiwan, July 23-27, 2023. ACM, 2446‚Äì2450.
[22] Yao Tian, Tingyun Yan, Xi Zhao, Kai Huang, and Xiaofang Zhou. 2023. A Learned
Index for Exact Similarity Search in Metric Spaces. IEEE Trans. Knowl. Data Eng.
35, 8 (2023), 7624‚Äì7638.
[23] Sheng Wang, Zhifeng Bao, J. Shane Culpepper, and Gao Cong. 2022. A Survey
on Trajectory Data Management, Analytics, and Learning. ACM Comput. Surv.
54, 2 (2022), 39:1‚Äì39:36.
[24] Hao Wu, Weiwei Sun, and Baihua Zheng. 2017. A Fast Trajectory Outlier Detec-
tion Approach via Driving Behavior Modeling. In CIKM. ACM, 837‚Äì846.
[25] Dongbo Xi, Fuzhen Zhuang, Yanchi Liu, Jingjing Gu, Hui Xiong, and Qing He.
2019. Modelling of Bi-Directional Spatio-Temporal Dependence and Users‚Äô Dy-
namic Preferences for Missing POI Check-In Identification. In AAAI. AAAI Press,
5458‚Äì5465.
[26] Chuang Yang, Zhiwen Zhang, Zipei Fan, Renhe Jiang, Quanjun Chen, Xuan Song,
and Ryosuke Shibasaki. 2023. EpiMob: Interactive Visual Analytics of Citywide
Human Mobility Restrictions for Epidemic Control. IEEE Trans. Vis. Comput.
Graph. 29, 8 (2023), 3586‚Äì3601.
[27] Zhuoning Yuan, Xun Zhou, and Tianbao Yang. 2018. Hetero-ConvLSTM: A Deep
Learning Approach to Traffic Accident Prediction on Heterogeneous Spatio-
Temporal Data. In KDD. ACM, 984‚Äì992.
[28] Dongxiang Zhang, Zhihao Chang, Sai Wu, Ye Yuan, Kian-Lee Tan, and Gang
Chen. 2022. Continuous Trajectory Similarity Search for Online Outlier Detection.
IEEE Trans. Knowl. Data Eng. 34, 10 (2022), 4690‚Äì4704.
[29] Daqing Zhang, Nan Li, Zhi-Hua Zhou, Chao Chen, Lin Sun, and Shijian Li. 2011.
iBAT: detecting anomalous taxi trajectories from GPS traces. In UbiComp. ACM,
99‚Äì108.
[30] Huichu Zhang, Chang Liu, Weinan Zhang, Guanjie Zheng, and Yong Yu. 2020.
GeneraLight: Improving Environment Generalization of Traffic Signal Control
via Meta Reinforcement Learning. In CIKM. ACM, 1783‚Äì1792.
[31] Kai Zheng, Yu Zheng, Nicholas Jing Yuan, and Shuo Shang. 2013. On discovery of
gathering patterns from trajectories. In ICDE. IEEE Computer Society, 242‚Äì253.
[32] Kai Zheng, Yu Zheng, Nicholas Jing Yuan, Shuo Shang, and Xiaofang Zhou. 2014.
Online Discovery of Gathering Patterns over Trajectories. IEEE Trans. Knowl.
Data Eng. 26, 8 (2014), 1974‚Äì1988.
[33] Yu Zheng. 2015. Trajectory Data Mining: An Overview. ACM Trans. Intell. Syst.
Technol. 6, 3 (2015), 29:1‚Äì29:41.
[34] Jie Zhu, Wei Jiang, An Liu, Guanfeng Liu, and Lei Zhao. 2015. Time-Dependent
Popular Routes Based Trajectory Outlier Detection. In WISE, Vol. 9418. Springer,
16‚Äì30.
[35] Jie Zhu, Wei Jiang, An Liu, Guanfeng Liu, and Lei Zhao. 2017. Effective and
efficient trajectory outlier detection based on time-dependent popular route.
World Wide Web 20, 1 (2017), 111‚Äì134.
 
2988KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Chenhao Wang, Lisi Chen, Shuo Shang, Christian S. Jensen, & Panos Kalnis
A NOTATION TABLE
For reference, Table 3 summarizes the key notations and their de-
scriptions in this paper.
Table 3: Notation Table
Notation Description
ùëù Trajectory point
ùëá Trajectory
ùëá(ùë†)/ùëá(ùë°)Spatial/temporal trajectory
e Trajectory embedding
e(ùë†)/e(ùë°)Spatial/temporal trajectory embedding
ùëê A route type
ùëüùëéùëõùëòùëê(ùëá)Trajectory rank of ùëáin typeùëê
ùëò A trajectory scale
eùëò Trajectory embedding at scale ùëò
ùëü Latent vector
ùëü(ùë†)/ùëü(ùë°)Spatial/temporal latent vector
ùëüùëá Latent vector of trajectory ùëá
ùëûùúÉ(¬∑) Inference network
ùëùùúô(¬∑) Distribution of route types
ùëùùõæ(¬∑) Generative network
ùúá,ùúé Parameters of Gaussian distribution
ùëì(¬∑) Fully connected layers
ùëî(¬∑) RNN modules
‚Ñé,ùëö Hidden states of RNNs
ùëÅ Number of trajectories
B ADDITIONAL OPTIMIZATION DETAILS
The marginal log-likelihood is optimized by maximizing the lower
bound on the sum of marginal likelihoods L(ùúÉ,ùúô,ùõæ ;ùëá(ùë†))and
L(ùúÉ,ùúô,ùõæ ;ùëá(ùë°)), as specified in Equation 23:
logùëùùõæ(ùëá(ùë†))ùëùùõæ(ùëá(ùë°))‚â•L(ùúÉ,ùõæ,ùúô ;ùëá(ùë†))+L(ùúÉ,ùõæ,ùúô ;ùëá(ùë°))
=EùëûùúÉ(ùëü(ùë†),ùëê(ùë†)|ùëá(ùë†))[logùëùùõæ,ùúô(ùëá(ùë†),ùëü(ùë†),ùëê(ùë†))
ùëûùúÉ(ùëü(ùë†),ùëê(ùë†)|ùëá(ùë†))]
+EùëûùúÉ(ùëü(ùë°),ùëê(ùë°)|ùëá(ùë°))[logùëùùõæ,ùúô(ùëá(ùë°),ùëü(ùë°),ùëê(ùë°))
ùëûùúÉ(ùëü(ùë°),ùëê(ùë°)|ùëá(ùë°))](23)
The lower bound can be converted to the form of Equation 24:
EùëûùúÉ(ùëü,ùëê|ùëá)[logùëùùõæ,ùúô(ùëá,ùëü,ùëê)
ùëûùúÉ(ùëü,ùëê|ùëá)]=EùëûùúÉ(ùëü|ùëá)logùëùùõæ(ùëá|ùëü)
‚àíEùëûùúÉ(ùëê|ùëá)[ùê∑ùêæùêø(ùëûùúÉ(ùëê|ùëá)||ùëùùúô(ùëê))]‚àíEùëûùúÉ(ùëê|ùëá)[ùê∑ùêæùêø(ùëûùúÉ(ùëü|ùëá)||ùëùùúô(ùëü|ùëê))],
(24)
where EùëûùúÉlogùëùùõæ(ùëá|ùëü)denotes the reconstruction error. ùê∑ùêæùêø(¬∑||¬∑)
is the KL divergence between two distributions. The first term is
the reconstruction loss. It reflects the loss between the generated
and the real trajectories. The second is the category loss, which
is the loss between the distribution of trajectory types and the
multinomial distribution. The third is the Gaussian loss, which is the
loss between the latent vector and a specific Gaussian distribution.C DETAILS ON EVOLVING DATASET UPDATE
Algorithm 1 The Evolving Dataset Update Algorithm
Input: Training set ùëà={ùëà1,ùëà2,...,ùëàùê∂};
A new collected trajectory ùëá
Output: Updated training set Àúùëà
1:Construct a rank set R‚Üê‚àÖ ;
2:forevery route type ùëêdo
3: Calculate the probability of ùëáfollowing type ùëêùëù(ùëê|ùëá);
4: Obtainùëüùëéùëõùëòùëê(ùëá)based on the learned ranking model;
5:R‚ÜêR‚à™{ùëüùëéùëõùëòùëê(ùëá)};
6:end for
7:Obtain the highest ranked category: ùëêùëöùëéùë•‚Üêarg max
ùëêR;
8:ùëàùëêùëöùëéùë•‚Üêùëàùëêùëöùëéùë•‚à™{ùëá};
9:Obtain the lowest ranked category: ùëêùëöùëñùëõ‚Üêarg min
ùëêR;
10:whileùëàùëêùëöùëñùëõ=‚àÖdo
11:R‚ÜêR‚àí{ùëüùëéùëõùëòùëêùëöùëñùëõ(ùëá)};
12:ùëêùëöùëñùëõ‚Üêarg min
ùëêR;
13:end while
14:ùëàùëêùëöùëñùëõ‚Üêùëàùëêùëöùëñùëõ‚àí{ùëáùëúùëôùëëùëíùë†ùë° _ùëêùëöùëñùëõ};
15:Àúùëà‚Üê{ùëà1,ùëà2,...,ùëàùê∂};
16:return Àúùëà;
The whole process of updating an evolving dataset is shown
in Algorithm 1. The input is the original training set ùëàand a
newly collected trajectory ùëá, andùëàcan be divided into ùê∂cate-
gories,ùëà={ùëà1,ùëà2,...,ùëàùê∂}. The output is the updated training
setÀúùëà. First, for each type of route, we calculate the probability
that trajectory ùëáfollows type ùëêand use the probability to obtain
the trajectory rank ùëüùëéùëõùëòùëê(ùëá)based on the learned ranking model,
a setRis used to store all the ranks of trajectory ùëá(Lines 1‚Äì6).
After obtaining the ranks of each type, we calculate the highest
ranked category ùëêùëöùëéùë• and add trajectory ùëáto the subset ùëàùëêùëöùëéùë•
(Lines 8‚Äì9). Using the same method, we calculate the lowest ranked
categoryùëêùëöùëñùëõand remove the oldest trajectory in category ùëêùëöùëñùëõ,
which denotes as ùëáùëúùëôùëëùëíùë†ùë° _ùëêùëöùëñùëõ. During the update process, as we
remove the oldest trajectory from the lowest ranked category set
when a new trajectory becomes available, there may be cases where
the lowest ranked category set, denoted as ùëàùëêùëöùëñùëõ, becomes empty.
In such cases, we instead remove the oldest trajectory from the
second-lowest ranked category, provided it is not empty, and so
forth (Lines 9‚Äì14). Finally, we obtain the updated training set Àúùëà
and return Àúùëàas the result (Lines 15‚Äì16).
D EXPERIMENTS
D.1 Implementation Details
We implement MST-OATD using Python 3.10.12 and Pytorch 2.0.1.
Experiments are run on a machine with a 40-core Intel Xeon CPU,
an NIVIDIA RTX 3090 GPU, and 128 GB of RAM. The AdamW
optimizer, initialized with a learning rate of 0.002 and decaying by
0.9 after every 2 epochs, is used for model training. The batch size
is set to 1600 for the Porto dataset and 300 for the Chengdu dataset.
The embedding dimension is 128 and the hidden state dimension is
 
2989Multi-Scale Detection of Anomalous Spatio-Temporal Trajectories in Evolving Trajectory Datasets KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
512 in our method, the same settings are applied to the baselines.
We use 3 different scales for multi-scale inference, with scale sizes
of 1, 2, and 4. For training on evolving datasets, the size of the
training set is set to 80,000 for Porto and 200,000 for Chengdu. We
repeat the experiments 5 times with different random seeds and
report the average performance.
D.2 Experiments for longer trajectories on
Porto dataset
To evaluate the effectiveness of our method in detecting longer
trajectories, we clip trajectories to a maximum of 100 points in the
Porto dataset and perform experiments. The preprocessed dataset
contains 1,162,423 trajectories and 37,856,009 points. The perfor-
mance comparison with GM-VSAE and DeepTEA is shown in Table
4. We have two observations: First, our proposed MST-OATD stilloutperforms the state-of-the-art methods, DeepTEA and GM-VSAE,
when the maximum trajectory length is set to 100; Second, setting
the maximum trajectory length to 50 and 100 maintains almost the
same detection performance, indicating that our method is applica-
ble to the detection of trajectory anomalies of different lengths.
Table 4: Performance for longer trajectories on Porto dataset
Parameters ùõº=0.1;ùëë=3ùõº=0.2;ùëë=2ùõº=0.3;ùëë=2
Observed ratio 0.5 0.7 1.0 0.5 0.7 1.0 0.5 0.7 1.0
GM-VSAE 0.345 0.396 0.382 0.514 0.667 0.709 0.614 0.845 0.904
DeepTEA 0.374 0.404 0.413 0.506 0.679 0.729 0.596 0.848 0.921
MST-OATD 0.419 0.619 0.744 0.528 0.754 0.887 0.616 0.891 0.974
 
2990