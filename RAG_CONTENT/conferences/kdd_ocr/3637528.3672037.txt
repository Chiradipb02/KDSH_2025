BitLINK: Temporal Linkage of Address Clusters in Bitcoin
Blockchain
Sheng Zhong
The University of New Mexico,
Albuquerque, New Mexico, USA
zhongs@unm.eduAbdullah Mueen
The University of New Mexico,
Albuquerque, New Mexico, USA
mueen@unm.edu
ABSTRACT
In the Bitcoin blockchain, an entity (e.g., a gambling service) may
control multiple distinct address clusters. Links (i.e., trust relation-
ships) between these disjoint address clusters can be established
when one cluster is abandoned, and a new one is formed shortly
thereafter. To link the clusters across time, we have developed a
deep neural network model that exploits these synchronous ac-
tions derived from unlabeled data in a self-supervised manner. This
model assesses whether two clusters exhibit synchronous temporal
signatures indicative of a shared entity ownership.
We validated our model on 26 real-world entities identified by
WalletExplorer [36]. In addition to the existing knowledge, our
analysis revealed more transaction history by linking address clus-
ters for three major services: HelixMixer ,Primedice , and Bitcoin
Fog, as well as 60 other services. This enables us to address ques-
tions related to the revenue and expenditures of these services and
create informative aggregate statistics. Readers can find code and
data on our support website: http://www.bitlinkwallet.com/.
CCS CONCEPTS
•Security and privacy →Pseudonymity, anonymity and un-
traceability; •Computing methodologies →Cluster analysis;
•Information systems →Data mining ;•Applied computing
→Digital cash .
KEYWORDS
Bitcoin; clustering; address; flushing; time series; self-supervised
learning; trace
ACM Reference Format:
Sheng Zhong and Abdullah Mueen. 2024. BitLINK: Temporal Linkage of
Address Clusters in Bitcoin Blockchain. In Proceedings of the 30th ACM
SIGKDD Conference on Knowledge Discovery and Data Mining (KDD ’24),
August 25–29, 2024, Barcelona, Spain. ACM, New York, NY, USA, 12 pages.
https://doi.org/10.1145/3637528.3672037
1 INTRODUCTION
Bitcoin is an anonymous and decentralized electronic cash system
that employs hashed cryptographic keys as transaction addresses.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ’24, August 25–29, 2024, Barcelona, Spain
©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3672037Many digital services, particularly in the gambling and financial
sectors, utilize Bitcoin for payments and manage a multitude of
Bitcoin addresses to facilitate their operations. To manage funds effi-
ciently across these addresses, such services commonly consolidate
several addresses into a single transaction. This is made possible by
the multi-input and multi-output capabilities inherent to the Bit-
coin protocol. Nevertheless, while this method increases efficiency,
it simultaneously compromises anonymity. The consolidation of
multiple input addresses in a single transaction typically signifies
either singular control by an entity or coordinated management
among an alliance of trusted entities.
Prior research [ 15,23,24] has employed the multi-input heuristic
in a recursive process to construct an address cluster, suggesting
shared ownership of the addresses involved. However, we have
observed a strategic behavior among some entities, particularly
those involved in mixing services, where they periodically abandon
an address cluster and promptly establish a new one. This behavior
appears to be a precautionary measure to avoid forming large, easily
traceable clusters. Thereby minimizing the risk of their activities
being uncovered.
Figure 1: Temporal activity of Bitcoin addresses owned by
BitPay , where addresses in the same color belong to the
same cluster. These clusters are formed using the multi-input
heuristic. The x-axis represents the timestamp of the first
receiving transaction, while the y-axis shows the timestamp
of the last spending transaction for each address.
Figure 1 illustrates the behavior of an entity known as BitPay .
We show four address clusters of BitPay that are labeled by
WalletExplorer , a public website that provides tagged Bitcoin ad-
dresses. Initially, BitPay managed an address cluster, C1, which
was active from July 2011 until February 2015. Abruptly, in February
2015, nearly all spending transactions from C1 ceased, and a new
cluster, C2, emerged and began to accumulate Bitcoin. This pattern
of simultaneous termination and initiation of transactions across
distinct clusters exemplifies what we define as address flushing.
Subsequently, BitPay transitioned from C2 to a missing cluster, M1,
which was later flushed into cluster C3 in February 2016. Notably,
WalletExplorer failed to detect two intermediate clusters, M1 and
4583
KDD ’24, August 25–29, 2024, Barcelona, Spain Sheng Zhong and Abdullah Mueen
M2, showcasing the inherent limitations of its manual clustering
methodology, as documented on its website [ 36]. This traditional
method begins by acquiring an address from the service (through
user registration) and then employs the multi-input heuristic re-
cursively to cluster additional addresses. The manual approach can
be prohibitively costly if conducted repeatedly and is not scalable
across the vast number of address clusters managed by various
services on the Bitcoin blockchain due to frequent address flushing.
Our paper introduces an automated framework designed to effi-
ciently identify carry-on clusters subsequent to address flushing
events. While human analysts may still be required to validate the
most promising candidates, this framework significantly enhances
efficiency, reducing the verification process from nearly one billion
cases to a handful of cases compared to the manual approach. This
dramatic increase in efficiency not only optimizes current analytical
processes but also has the potential to accumulate more labeled
data, thereby facilitating continuous refinement and evolution of
the system in the future.
Identifying untagged clusters of a service can provide valuable
financial information. Although full disclosure may be elusive, even
partial clusters owned by a service can offer insightful knowledge.
For instance, identifying address clusters related to mixing services
such as HelixMixer , which was the first bitcoin mixer penalized
byFinCEN for violating anti-money-laundering laws [ 6,20], can
help estimate a lower bound of the BTC laundered. Similarly, re-
vealing addresses associated with darknet markets like SilkRoad ,
the most infamous anonymous drug black market [ 18,19], may aid
law enforcement efforts.
Figure 2: The time series of daily receiving transaction count
for address clusters owned by BitPay . On the left, a clear
temporal linkage signature is depicted, demonstrating the
transition from flushed cluster C1 to carry-on cluster C2. On
the right, the graph presents the transaction count time series
for four clusters (C1, C2, C3, C4) tagged by WalletExplorer ,
alongside two clusters (M1, M2) that have been identified
through our model BitLINK .
As discussed in Section 2, existing heuristics and tools for ad-
dress identification fall short in tracking entities that obscure their
activities by flushing their addresses. Our approach, however, cap-
italizes on the temporal patterns of transaction activities. As we
observed, flushing events exhibit a distinct temporal linkage sig-
nature. By plotting the time series of daily receiving transactions
for a cluster, we can identify a pattern where two time series inter-
sect, as illustrated in Figure 2(left). Furthermore, the consistency
of transaction patterns before and after a flushing event serves as
another indicator of the flushing event between clusters.In this study, we introduce BitLINK , a novel temporal heuristic
designed to trace Bitcoin address clusters after a flushing activity
through distinctive temporal linkage signatures. BitLINK posits
that two clusters displaying distinctive temporal linkage sig-
natures can be connected as part of the same entity. Leveraging
this heuristic, we implement a deep neural network model capable
of examining potential linkages between a known flushed cluster
and another cluster on the blockchain. The objective is to accurately
identify the carry-on cluster that succeeds the flushed one.
This model is trained in a self-supervised manner, eliminating
the need for labeled data, which is a significant advantage given
the inherent anonymity of Bitcoin. Furthermore, the generalization
capability of the neural network makes it suitable for addressing
the dynamic nature of flushing events observed in the blockchain,
as detailed in Section 3. Leveraging this trained model allows us to
successfully identify previously undetected clusters, such as M1 and
M2, in Figure 1. The temporal patterns of these clusters, illustrated
in Figure 2(right), reveal a matching growth trend in the number
of receiving transactions.
The main contributions of this work are summarized below:
•This study is the first to formally define and discuss flushing
behavior observed in the Bitcoin blockchain. We propose a
novel temporal heuristic paired with a self-supervised learn-
ing model BitLINK to trace a flushed address cluster.
•We provide three case studies involving HelixMixer,
Primedice andBitcoin Fog . Using BitLINK , we link all
known address clusters of these services to new clusters,
completing the temporal spectrum of their activities.
•We have linked clusters from 60 services listed on
WalletExplorer . The visualization of these clusters is avail-
able at http://www.bitlinkwallet.com/ with the password
"KDD".
Figure 3: Transaction graph of clusters owned by HelixMixer.
2 RELATED WORK
Since the inception of Bitcoin, clustering of Bitcoin addresses has
been a prominent area of research. Despite extensive studies, the
phenomenon of address flushing has not been explicitly discussed in
the existing literature. Furthermore, none of the current methodolo-
gies for clustering can effectively handle flushing behavior, which
4584BitLINK: Temporal Linkage of Address Clusters in Bitcoin Blockchain KDD ’24, August 25–29, 2024, Barcelona, Spain
2013
2013
2014
2014
2015
2015
04008001200
2013
2015
2017
2019
0200040006000
2014
2014
2014
2015
2015
0200400600
2013
2014 2015
2016
020004000
2014
2015
2016
2017
0204060
2017
2017
2017
2017
04080120
15/12
17/12
19/12
21/12
0100200300
22/12
11/01
31/01
20/02
11/03
0100020003000
22/10
24/10
26/10
28/1030/1001/11
0200400
10/07
30/0719/08
08/09
28/09
04008001200
07/12
27/12
16/01
05/02
25/02
17/03
0102030
02/07
10/07
18/07
26/07
03/0811/08
19/08
0204060
Bitfinex.com LocalBitcoins.com Cryptsy.com AntPool.com CrimeNetwork.cc Bter.com
Figure 4: Temporal visualization of address flushing across various Bitcoin services labeled by WalletExplorer . The red time
series represents flushed clusters, while the blue time series indicates the carry-on clusters as identified by WalletExplorer .
The top row illustrates the flushing pattern, with the bottom row providing a detailed view of the transition period. The Y-axis
shows the daily count of receiving transactions by a cluster. The X-axis shows years in the top row and days/months in the
bottom row.
is crucial for improving performance in clustering analysis. This
gap highlights the innovative aspect of our work.
Entity identification by clustering: Bitcoin address cluster-
ing is a key approach to identifying entities behind Bitcoin ad-
dresses. Typically, addresses within a single cluster are believed
to be controlled by one entity. The fundamental technique is the
multi-input (common-input) heuristic, introduced in the Bit-
coin white paper [ 26]. Numerous adaptations and advancements of
this heuristic have since been developed. The change (shadow)
address heuristic [ 23,24,42], designed to identify addresses that
collect change from transaction outputs, often falls short during
address flushing events due to the lack of direct transactions among
flushed clusters and the carry on clusters detailed in Figure 3 which
indicate that entities may strategically manage their transactions
to obscure direct connections, complicating the clustering process.
Specialized heuristics, such as the coinbase (mining) [15] and mix-
ingheuristics [13], target specific activities like mining or mixing
services but do not effectively distinguish between different entities
within these categories. The state-of-the-art multi-heuristics [ 16]
proposed by He et al. combines the above heuristic rules and the
Louvain community detection method for clustering.
Our methodology enhances the traditional common-input heuris-
tic by integrating a novel temporal dimension, an aspect that re-
mains unexplored in existing literature. Our approach maintains
broad applicability in contrast to domain-specific analyses, which
often depend on identifiable features or expert knowledge of par-
ticular Bitcoin services such as mixing services [ 1,28,29,37] or
mining operations [27, 33].
Entity identification tools: Table 1 lists various tools devel-
oped to assist Bitcoin blockchain analysis. BitIodine [ 31] is a notable
framework for constructing a pipeline for analysis. However, its
ability is limited by its reliance on traditional heuristics and lacks
the integration of temporal data analysis. Other frameworks likeTable 1: Features utilized in different tools for analyzing
Bitcoin address clusters.
Tools Heuristics TX network
StatisticsAsynchronous
Time series
BitIodine multi-input &
change address× ×
BitConeView multi-input ✓ ×
BitConduite multi-input ✓ ×
BitLINK multi-input ✓ ✓
Bitconeview [ 8], BitConduite [ 34], and BitExTract [ 39] similarly
concentrate on transaction graphs that do not incorporate time
series signatures. The state-of-the-art Bitcoin analysis framework,
BitAnalysis [ 32], incorporates a temporal view section for clusters
achieved through the use of Dynamic Time Warping (DTW) to
compare clusters active during the same period. However, it falls
short of analyzing clusters that are active in different periods.
BitLINK has a unique capability to compare and analyze clusters
with staggered temporal activity in the context of address flushing,
which sets it apart from existing methodologies.
3 METHODS
3.1 Temporal Signature for Address Flushing
The temporal linkage signature, as initially illustrated in Figure
2(Left), is further exemplified through real-world cases demon-
strated in Figure 4. This figure showcases the temporal linkage
patterns of six distinct entities. A commonality across these exam-
ples is the presence of two intersecting time series: a decreasing red
time series representing the flushed cluster and an increasing blue
time series indicating the carry-on cluster. We also observed varia-
tions of the flushing behaviors among entities. Ranging from the
instantaneous flushing observed in entities like Bitfinex andBter
to more protracted transitions over weeks, as noted in AntPool ,
4585KDD ’24, August 25–29, 2024, Barcelona, Spain Sheng Zhong and Abdullah Mueen
LocalBitcoins , and CrimeNetwork . A particularly high correla-
tion between two address clusters managed by Cryptsy was also
noted, underscoring the variability of flushing dynamics.
Another key insight from these observations is the stability in
the daily count of receiving transactions on the entity level before
and after a flushing event. This stability suggests that customer be-
haviors remain largely unaffected by changes in receiving addresses
and their changes (i.e., address flushing) of a service.
The identification of a temporal linkage signature between two
address clusters, as outlined by our BitLINK heuristic, is a robust
indicator of a flushing event. This observation enables us to trace
clusters operated by the same entity after flushing activities.
3.2 Self-supervised Learning
Learning the temporal linkage signature, as illustrated in Figure 4,
poses a significant challenge, primarily due to the intrinsic privacy
features of blockchain technology that limit the availability of la-
beled data. This challenge is compounded by the diverse nature of
flushing behaviors exhibited by distinct entities.
A promising approach to circumvent the scarcity of labeled data
is through self-supervised learning. This methodology constructs
supervised learning tasks from unlabeled data based on the intrinsic
nature (i.e., temporal pattern) of the data. Inspired by one of the
pre-training tasks used in BERT [ 7], which involves determining
whether one sentence follows another, our self-supervised task
aims to ascertain whether one time series follows another. This al-
lows us to exploit the unlabeled data within the Bitcoin blockchain
to generate pseudo-labeled datasets, as detailed in Section 3.4. The
essence of this task lies in its simplicity and effectiveness in iden-
tifying temporal linkage signatures since the pattern of receiving
transactions remains consistent before and after a flushing event.
Figure 5: The architecture for the BitLINK .
3.3 Model Architecture
A visualization of the network structure can be found in Figure
5. The architecture consists of a convolutional neural network
(ConvNet) that can extract intricate features with minimal manual
feature engineering. We follow a classical VGG design style [ 30],
which constructs the network by piling up blocks of ConvNets. In
summary, the model has three ConvNet blocks paired with three
fully connected layers (MLP). Each block is equipped with multiple
convolution kernels complemented by a max pooling layer, each
convolutional layer having a 3x3 receptive field. The final block’soutput is flattened to feed into the MLP. The terminal output neu-
ron employs a Sigmoid activation, yielding the final score within
the [0, 1] interval. By employing a streamlined model architecture,
we aim to minimize the risk of overfitting and increase generaliz-
ability, which is crucial for the diverse and noisy data of Bitcoin
transactions.
3.4 Data Augmentation
Figure 6: Data augmentation process utilizing Bitcoin on-
chain data. For demonstrative purposes, we focus on the
augmentation of the red time series at the second split point.
Figure 6 offers a visual demonstration of five steps to generate
the pseudo-labeled dataset from Bitcoin on-chain data. We share
the code to prepare the data from the raw blockchain data to the
pseudo-labeled dataset on our support website [3].
Table 2: Symbols and notations.
Symbol Definition
𝑐𝑖address cluster 𝑖
cluster is formed based on the multiple-input heuristic rule.
𝑡𝑟𝑖Time series of daily receiving transaction count for 𝑐𝑖.
𝑡𝑠𝑖Time series of daily spending transaction count for 𝑐𝑖.
𝑝(𝑖,𝑗)Probability that cluster 𝑐𝑗is temporally linked to cluster 𝑐𝑖.
Probability that pair( 𝑐𝑖,𝑐𝑗) is positive.
𝑦(𝑖,𝑗)True label for pair ( 𝑐𝑖,𝑐𝑗).𝑦(𝑖,𝑗)=±1
ˆ𝑦(𝑖,𝑗)Model predicted label for pair ( 𝑐𝑖,𝑐𝑗)
Step 1 - Cluster generation: We use Bitcoin Core [ 4] to syn-
chronize Bitcoin on-chain data from its inception on January 03,
2009, to October 16, 2022, covering blocks 0 to 758,967. Then, we
employed BlockSci [ 21] for data parsing and clustering addresses
using the common-input heuristic. This process initially identified
786,969,200 common input clusters. Due to computational con-
straints, this number was refined to 455,731 clusters, prioritizing
those containing either more than 100 addresses or exceeding 400
transactions. Clusters already identified in the WalletExplorer
database and clusters within manually labeled datasets designated
for testing purposes were excluded.
4586BitLINK: Temporal Linkage of Address Clusters in Bitcoin Blockchain KDD ’24, August 25–29, 2024, Barcelona, Spain
Step 2 - Time series generation: We generate daily transaction
time series𝑡𝑟𝑖and𝑡𝑠𝑖capturing receiving and spending activities
for each cluster. Transactions are counted at the block level first and
then aggregated daily. A Bitcoin transaction is counted when its
output or input address is contained in 𝑐𝑖. Transactions are counted
once, regardless of multiple addresses from 𝑐𝑖being in the same
transaction. The complete time series spans 5,035 days based on
our on-chain data. Although the augmentation process primarily
focuses on the receiving transactions ( 𝑡𝑟𝑖), we also construct a
corresponding spending time series ( 𝑡𝑠𝑖) for each pair in the pseudo-
labeled dataset. This inclusion of spending activities serves to enrich
the dataset, providing additional dimensions of information that
enhance the performance of our model.
Step 3 - Time series segmentation: After applying data filtering
techniques detailed in Section A.2 (Appendix), we determined a
set of split points as described in Section A.3 (Appendix) for each
receiving time series.
Step 4 - Positive pair generation: For each split location, the
time series was divided into a prefix (subsequence before the split
point) and a suffix (subsequence after the split point). Then, both
subsequences are padded with zeros to match the length of the
original time series to form a positive pair. Figure 6 illustrates a
positive pair formed at the second split position. One cluster can
yield the same number of positive pairs as the number of split
positions. However, each prefix in the positive pair can form many
negative pairs, as described in Step 5.
Step 5 - Negative pair generation: For each positive pair gen-
erated from the above step, we take the prefix and pair it with
the complete time series of other clusters to form negative pairs.
To create maximum confusion for the model, we first remove easy
cases and then prioritize the hard cases. The easy cases are the pairs
where the suffix has no overlapping with the prefix or has excessive
overlapping. This is determined by a set of hyperparameters set
empirically, including Pearson correlation value between the suffix
and prefix, and the relative positions between prefix and suffix. The
hard negative pairs are selected based on the Euclidean distance
between the negative suffixes and the positive suffix. No more than
500 negative suffixes will be selected for each prefix.
3.5 Focal-Loss
Owing to the significant imbalance between positive and negative
pairs, we employ Focal-Loss [ 22] during training. Defined in Equa-
tion 1, the loss function uses 𝛼∈[0,1]as a balancing coefficient
to manage this imbalance. Additionally, 𝛾operates as the focusing
parameter, accentuating the learning on challenging misclassified
positive instances over the numerous trivial negative ones.
𝐹𝐿(pair(𝑐𝑖,𝑐𝑗))=(
−𝛼(1−𝑝(𝑖,𝑗))𝛾log(𝑝(𝑖,𝑗))if𝑦(𝑖,𝑗)=1
−𝛼(𝑝(𝑖,𝑗))𝛾log(1−𝑝(𝑖,𝑗))if𝑦(𝑖,𝑗)=−1(1)
4 EXPERIMENTAL EVALUATION
4.1 Problem Formulation
In this section, we use the notations in Table 2 to formulate the prob-
lem. An address cluster contains the non-zero number of blockchainaddresses that are spent together in some transactions. The mem-
bership to a cluster, 𝑐𝑖, is a transitive relation - if 𝑐𝑖and𝑐𝑗are spent
together in one transaction, and 𝑐𝑗and𝑐𝑘are spent together in
another transaction, then {𝑐𝑖,𝑐𝑗,𝑐𝑘}are in one address cluster. This
entails that the address clusters are disjoint. This work aims to iden-
tify one or more address clusters that can be temporal linked with
𝑐𝑖if there is a flushing event. We formulate this as a classification
problem: given a pair of clusters, 𝑐𝑖and𝑐𝑘, determine the likelihood
that two clusters can be temporally linked. In other words, the pre-
dicted label is positive if it shows a temporal linkage signature;
otherwise, it is negative.
This formulation is amenable to training a self-supervised model
without any labeled data, enabling us to exploit the whole of the
Bitcoin blockchain data for training.
Table 3: Size of different datasets.
# of Pos. pairs # of Neg. pairs
Pseudo-labeled set 71,883 5,933,212
WalletExplorer labeled set (W.E.) 65 59,066
Manually labeled set (M.L.) 25 32,426
4.2 Data Description
Pseudo-labeled dataset: Following the steps outlined in Section
3.4, we generated nearly 71,000 positive pairs and 5,933,000 negative
pairs for self-supervised learning. Detailed numbers are provided in
Table 3. The data generation process does not involve any synthetic
components except for the randomly selected split points for the
time series. This approach ensures that the generated data closely
resembles real-world scenarios, thereby enhancing the validity of
our methodology.
WalletExplorer labeled dataset (W.E.): WalletExplorer [36]
has been an essential resource for various studies on the Bitcoin
blockchain [ 17,43]. From WalletExplorer , we finalized 65 positive
pairs from 26 services listed in Table 7 (appendix) and more than
59,000 negative pairs. Among the 275 services listed on WalletEx-
plorer, 49 have multiple address clusters. However, not all cluster
pairs exhibit flushing behavior; some show parallel usage patterns
or serve as cold wallets for balance maintenance. We manually
selected and verified the cluster pairs with flushing behavior.
The aim of this work is to locate the carry-on cluster from a
flushed cluster. Therefore, negative pairs are generated to simulate
this process: each prefix from a positive pair forms a negative pair
with all other clusters on the blockchain. To reduce the number of
negative pairs, we assumed that the cluster for the negative suffix
should have at least 100 addresses or 400 transactions. Additionally,
the suffix and prefix clusters need to share at least one sender or
receiver, based on the assumption that clusters owned by the same
entity share some common senders and receivers [ 41]. In total, we
organized 65 positive pairs and more than 59,000 negative pairs.
Manually labeled dataset (M.L.): We manually identified clus-
ters associated with two services: HelixMixer andPrimedice . Al-
though these clusters were missed by WalletExplorer , our manual
review of all time series (conducted before developing BitLINK ) re-
vealed strong address flushing patterns. These clusters form a chain
4587KDD ’24, August 25–29, 2024, Barcelona, Spain Sheng Zhong and Abdullah Mueen
starting from a WalletExplorer -labeled cluster and ending with a
confirmed cluster verified using unintentionally leaked off-chain
information, as discussed in Section 6.
Each data pair ( 𝑐𝑖,𝑐𝑗) consists of four time series: 𝑡𝑟𝑖,𝑡𝑟𝑗,𝑡𝑠𝑖,𝑡𝑠𝑗.
These series are vertically stacked to generate a 4×32matrix,
serving as the input to the model. Notably, while the full-time
series spans 5035 days, we extract a 32-day sub-sequence with the
flushing point at its center.
4.3 Setup
All experiments are reproducible using resources available on our
website [ 3]. We conducted experiments on a single RTX 3090 GPU.
We adopted weight initialization from [ 14] and trained BitLINK
using Stochastic Gradient Descent (SGD) with a learning rate of
0.02. For the focal loss, we followed [ 22] by setting 𝛾=2and the
balancing ratio 𝛼to 0.98, based on the ratio of positive to negative
pairs in the pseudo-labeled dataset.
Figure 7: Receiving time series of three clusters owned by
CrimeNetwork.cc , tagged by WalletExplorer . The blue and
green time series are both temporally linked with the red
time series.
Our primary evaluation metric is the top-5 accuracy, commonly
used in computer vision to discern multiple objects in an image.
Given the possibility of multiple carry-on clusters due to parallel
time series (see Figure 7), our model must recognize all potential
matches. We also track top-1 accuracy and other metrics: TPR,
FPR, and G_mean as defined in Equation 2. When computing top-k
accuracy, we consider only the ranking of 𝑝(𝑖,𝑗)for each candidate
cluster𝑐𝑗. For computing TPR, FPR, and G_mean, we set ˆ𝑦(𝑖,𝑗)=1
if𝑝(𝑖,𝑗)>0.5, and -1 otherwise.
G_mean =√︁
𝑇𝑃𝑅×(1−𝐹𝑃𝑅) (2)
4.4 BitLINK Performance
Figure 8: Left: 80% of the unlabeled dataset is used for training
and 20% for validation, with WalletExplorer and manually
labeled data as the test set. Right: The full unlabeled dataset
is used for training, with two datasets used for testing.To evaluate the learning capability of our model on unlabeled
data, we allocate 80% of the pseudo-labeled dataset for training and
reserve the remaining 20% for validation while using the Wallet-
Explorer labeled set (W.E.) and the manually labeled set (M.L.) for
testing. It is important to note that the clusters used as prefixes in
the training and validation sets are mutually exclusive to prevent in-
formation leakage. The training and validation curve, as illustrated
in Figure 8(Left), shows rapid convergence, indicating the model
effectively learns the artificially created temporal linkage signature.
However, a higher validation score implies reduced generalizability,
which can lead to lower performance on real-world datasets. This
is due to the diversity of actual flushing behavior encountered in
real-world scenarios. Given that our primary objective is to de-
tect temporal linkage signature, a task closely aligned with this
self-supervised learning task. We can leverage either the W.E. or
M.L. dataset to establish an early stopping point. This approach
is intended to mitigate the risk of overfitting, ensuring the model
remains applicable and effective in practical scenarios.
To test the generalizability of the model, we leverage the entire
pseudo-labeled dataset for self-supervised training. while the W.E.
and M.L. datasets are used exclusively for testing purposes. The
training and testing performance, measured by the G_mean score
after each epoch, is plotted in Figure 8(Right). Since we do not
fine-tune the model with labeled data (i.e., no supervised phase),
the testing accuracy observed across the training epochs serves as
a crucial indicator of the model’s real-world performance when
trained solely on the unlabeled dataset.
The notable correlation between the testing curves of the W.E.
and M.L. datasets allows us to use either one for validation and the
other one for testing, particularly for implementing early stopping
to prevent overfitting. For example, using W.E. for validation and
M.L. for testing, we observe that the testing score at the peak of
the validation set is similar to the score at the tenth epoch – the
point of maximum performance for the testing set. This observation
remains consistent when the roles of the W.E. and M.L. datasets
are swapped between validation and testing. For detailed results of
each service, please refer to Table 7 and 8 in the appendix.
4.5 Performance Comparison
As the first study to formally define and propose a solution for
Bitcoin address flushing using a novel temporal heuristic with
self-supervised learning, we found no existing models directly com-
parable or specifically designed for this unique challenge in the
blockchain domain. This absence necessitated the use of models
that were not specifically designed for blockchain. Both TS2Vec[ 40]
with self-supervised learning and semi-supervised SemiTime[ 10]
are state-of-the-art models for general time series classification,
aligning with our approach of generating pseudo-labeled data.
4.6 Models for Comparison
SemiTime[ 10] and SSTSC [ 38] are semi-supervised models for
time series classification. They train encoders via self-supervised
learning and then fine-tune the encoder with an MLP on labeled
datasets. The self-supervised approach involves splitting time series
into non-overlapping segments and predicting if segments come
from the same series. Data augmentation techniques like magnitude
4588BitLINK: Temporal Linkage of Address Clusters in Bitcoin Blockchain KDD ’24, August 25–29, 2024, Barcelona, Spain
and time warping[ 35] ensure sufficient training pairs. We used the
SemiTime encoder and relation head due to its two-segment input,
whereas SSTSC uses three. The encoder has four convolution blocks,
each with a 1D kernel convolution layer, batch normalization, and
ReLU activation. The relation head features two linear layers with
batch normalization and ReLU activation in between. To ensure a
fair comparison, we used the same training data, and we replaced
the BCE loss with Focal loss. Additionally, we adjusted the first
convolution layer from one to two channels to accommodate both
receiving and spending transaction series.
TS2Vec [40] is a leading self-supervised learning model for time
series data, surpassing prior benchmarks like TS-TCC [ 9] and T-Loss
[11] in classification tasks. TS2Vec employs a two-phase approach,
initially training an encoder unsupervised, then transitioning to
fine-tuning and testing using the representations from the encoder.
The self-supervised approach relies on dual augmented context
representations of two overlapping sub-sequences as positive pairs.
The encoder formulates a latent vector at every timestamp for two
overlapping segments. Vectors from the same timestamp across
overlapping segments are positive, while those from different times-
tamps or different time series at identical timestamps are considered
negative. The encoder utilizes a series of residual convolutional
blocks. For our purposes, we input the complete time series data
into the encoder without explicit segmenting. After training, we
leverage the instance-level representations from the encoder to
train a classifier, adopting the same MLP structure as BitLINK . We
used the same training set to train the classifier, and the train-
ing data for the encoder is fundamentally the same data as well.
SemiTime was trained with these parameters for enhanced perfor-
mance. While the TS2Vec encoder used default parameters, and its
classifier shared settings with BitLINK.
Table 4: Testing results on the W.E. dataset when G_mean of
validation score is highest on the M.L. dataset. The numbers
are the mean values for five rounds.
Models Top5 Acc. Top1 Acc. TPR FPR G_mean
SemiTime 0.72 0.52 0.56 0.0083 0.76
TS2Vec 0.89 0.56 0.86 0.0034 0.93
BitLINK 0.93 0.75 0.95 0.017 0.97
Table 5: Testing results on the M.L. dataset when G_mean of
validation score is highest on the W.E. dataset. The numbers
are the mean values for five rounds.
Models Top5 Acc. Top1 Acc. TPR FPR G_mean
SemiTime 0.84 0.46 0.2 0.0001 0.44
TS2Vec 1 0.73 0.99 0.0041 0.99
BitLINK 0.96 0.96 0.96 0.0014 0.98
Table 4 shows the testing performance on the W.E. dataset at
the epoch when the best validation G_mean is achieved on the M.L.
dataset. BitLINK outperforms its counterparts in several key met-
rics. Table 5 shows the performance when tested on the M.L. dataset,BitLINK performs comparably to TS2Vec with a notable improve-
ment in FPR but a slight decrement in TPR. caused by the wrong
classification of a single positive pair within the dataset. Hence,
there is no statistically significant difference between BitLINK and
TS2Vec on the M.L. dataset.
Figure 9: Confusion matrix for the testing results of BitLINK
on one dataset when the best G_mean is achieved on another
dataset.
Figure 10: Left: TPR, FPR results for each service when tested
with BitLINK . Right: G_mean of each service with respect to
TS2Vec and BitLINK .
TheBitLINK prediction results are shown in the confusion ma-
trix in Figure 9. The TPR and FPR for each of the 26 services in the
WalletExplorer dataset are presented in Figure 10(Left). A com-
parison between TS2Vec and BitLINK for each of these services is
shown in Figure 10(Right). BitLINK achieves a better G_mean on
all but one service.
4.7 Discussion
Based on the results in Table 4, 5, BitLINK demonstrates a near
95% top-5 accuracy. This capability is particularly beneficial for
manually chaining clusters, as detailed in Section 5. This marks a
significant improvement over the manual approach, which requires
analysts to sift through nearly a billion clusters. BitLINK effectively
narrows down the options to the top 5 candidates, simplifying and
enhancing the verification process.
While there is room for improvement, we are committed to
further enhancing the BitLINK model. Our goal is to develop a
fully automated system capable of chaining multiple clusters with
guaranteed robustness. We believe that the facilitated manual ex-
ploration by BitLINK in its current phase will aid in gathering more
data, which is crucial for advancing the model. Acquiring such data,
especially in the context of Bitcoin anonymity, remains one of the
most significant challenges.
4589KDD ’24, August 25–29, 2024, Barcelona, Spain Sheng Zhong and Abdullah Mueen
Table 6: Performance of BitLINK in expanding information for three services. The BitLINK columns indicate the additional
clusters and addresses identified compared to the existing data from WalletExplorer.
HelixMixer Primedice Bitcoin Fog
WalletExplorer BitLINK WalletExplorer BitLINK WalletExplorer BitLINK
# of clusters 35 50 5 10 1 7
# of address 246,116 200,845 204,797 397,767 244,975 235,373
BTC received 188,051 127,715 129,274 151,561 110,2451 409,371
BTC spent 188,034 127,713 129,266 151,554 110,2449 408,026
BTC received in USD $57,778,646 $59,592,710 $58,099,361 $111,041,254 $217,684,348 $276,248,796
BTC spent in USD $57,772,326 $60,000,959 $58,055,279 $110,969,413 $217,867,937 $275,339,037
26/05/15
25/07/15
23/09/15
22/11/15
21/01/16
21/03/16
20/05/16
19/07/16
17/09/16
16/11/16
15/01/17
16/03/17
15/05/17
14/07/17
12/09/17
11/11/17
10/01/18
020040060080010001200Daily
receiving TX. Num.
"
old11"Verified
cluster15 linked clusters
6
linked clusters fill gaps
29
linked clusters
Helixmixer
Figure 11: The time series for 35 address clusters owned by HelixMixer identified by WalletExplorer , shown in color. 50
additional address clusters linked by BitLINK shown in black. Click Here for a high-resolution version.
05/06/13
02/12/13
31/05/14
27/11/14 26/05/15
22/11/15
20/05/16
16/11/16
15/05/17
11/11/17 10/05/18
06/11/18
05/05/19
01/11/19
29/04/20
26/10/20
24/04/21
21/10/21
19/04/22
16/10/22
050010001500200025003000Daily
receiving TX. Num.
PrimeDice.com
PrimeDice.com-old
PrimeDice.com-old2
PrimeDice.com-old3
PrimeDice.com-old4
Verified cluster
6 clusters linked forward
4 clusters
linked backwardstarting 18 May, 2013
Figure 12: The time series of daily counts of receiving transactions for five address clusters owned by Primedice identified by
theWalletExplorer, shown in color. Ten additional address clusters linked by BitLINK are shown in black.
01/01/12
01/01/13
01/01/14
01/01/15
01/01/16
01/01/17
01/01/18
01/01/19 01/01/20
01/01/21
02004006008001000Daily
receiving TX. Num.
BitcoinFog
Most
frequent receiver
01/04/14
01/07/14
01/10/14
01/01/15
01/04/15
01/07/15
01/10/15
70%
correlation
84%
correlation
84%
correlation
Figure 13: The left figure displays the time series data for Bitcoin Fog and its most frequent receiver. The right figure shows
six chained clusters chain linked from the most frequent receiver. These linked clusters also demonstrate a notable correlation
with Bitcoin Fog. The correlation is calculated using a normalized DTW distance with a 2-day warping band.
4590BitLINK: Temporal Linkage of Address Clusters in Bitcoin Blockchain KDD ’24, August 25–29, 2024, Barcelona, Spain
5 CHAIN OF LINKED CLUSTERS
Clusters can be sequentially linked, resulting in their transaction
time series forming a seamless chain over time, as illustrated in
Figure 2 (right). To achieve this, we deploy BitLINK iteratively.
Starting with an initial cluster as a prefix or suffix, BitLINK ranks
potential suffixes or prefixes, respectively. We then manually in-
spect the top-ranked candidates, selecting the cluster that stands
out. This selected cluster then serves as the new prefix (or suffix),
and the cycle continues.
The manual inspection is more of a design choice than a require-
ment. Chaining could be done automatically using the top-1 candi-
dates produced by BitLINK at each iteration. However, the manual
inspection step allows room for prior information and subjective
preferences. For example, if the top candidate has participated in a
CoinJoin [ 5,12,25] transaction, we exclude that candidate cluster
because off-chain arrangements are beyond the scope of our work.
Another example is that multiple top candidates may exhibit the
same pattern. Manual inspection reduces confidence in those clus-
ters even if BitLINK ranks them high. Generally, we observe that
70% of the linkages are formed using the top-1 candidate, and 90%
of the links are formed using the top-5 candidates.
6 CASE STUDY
We present three successful cases of linking address clusters for
three services. We argue that such chains of linked clusters are
better discovered by BitLINK . We describe the results of chain
discovery on three services in Table 6.
6.1 HelixMixer
HelixMixer is a Bitcoin mixing service that pays users back with
funds from other users, thereby mixing the money for a fee. The
purpose of this service is to make it harder to trace a transaction
to its original sender. HelixMixer operated from April 2014 to
December 2017, when it was shut down by the FinCEN for violating
anti-money-laundering laws [6, 20].
WalletExplorer detected 35 clusters belonging to HelixMixer .
Each cluster was identified by acquiring one address through the
service and then using the common-input heuristic to find other
addresses in the same cluster. The receiving time series for 34
clusters are shown in color in Figure 11. The earliest detected cluster
("HelixMixer-old") was active from 2014-12-05 to 2015-01-19; the
second earliest cluster is "HelixMixer-old11", which started on 2015-
05-23. We chose the "HelixMixer-old11" as our first address cluster
to form the chain.
BitLINK linked 50 new clusters starting with "HelixMixer-old11"
shown in black in Figure 11. The newly identified clusters filled the
gaps in the existing clusters perfectly and extended the timeline to
December 2017 when HelixMixer ceased operation. We found one
leaked address, "1C2pqxbQTPbx4xWNYCn7fome1T8wfCzCC3," in
a Reddit post [ 2], where the owner of HelixMixer declared the
closure of the service. This leaked address is included in the cluster
at the end of the chain. Overall, BitLINK linked address clusters of
HelixMixer for over three years between 2015 and 2018.
We found 200,845 new addresses related to HelixMixer using
BitLINK . This is almost double the number of addresses (246,116)
reported by WalletExplorer . To find these additional addresses,we only needed to manually check the top 5 candidate clusters
yielded by BitLINK for each link. In contrast, simpler methods
(e.g., similarity search) would require sifting through thousands of
clusters for each link.
This chain of address clusters enables us to make a closer estimate
(i.e., lower bound) of the total money transacted via HelixMixer .
We estimate that over $115M USD were transacted between 2014
and 2018 via this service.
6.2 Primedice
Primedice is a betting site launched on May 18, 2013, and is still
in operation. Primedice uses many cryptocurrencies, including
Bitcoin, for transactions. WalletExplorer reports five address clus-
ters, plotted in color in Figure 12. We linked an additional 10 clusters,
completing 100% of the transaction history of this service up to the
most recent block. The first cluster received its first transaction on
May 18, 2013, coinciding with the launch of Primedice.
Since Primedice is still operating, we could collect an address
from the last cluster by simply being a customer and sending Bitcoin
to it. The address "3R1hAXKgaQESrryzaHsYwPFjgZerm7fSyW" is
such an address. This address is in the last address cluster linked
byBitLINK, as shown in Figure 12.
6.3 Bitcoin Fog
Bitcoin Fog is the longest-running Bitcoin money laundering ser-
vice on the darknet. The address cluster for Bitcoin Fog found in
WalletExplorer had never been flushed and spans over ten years,
as shown by the cyan-colored time series in Figure 13. However,
we extracted the largest cluster that Bitcoin Fog sent money to,
shown by the red time series in Figure 13. This cluster accounts
for 59% of transactions, totaling 115,334 originating from Bitcoin
Fogand 56% of sender addresses belonging to the Bitcoin Fog .
Moreover, the two clusters show a very high correlation in their
transaction counts, suggesting an exclusive and trusted relation-
ship between them. We could chain more than eight of the ten-year
history of Bitcoin Fog from this cluster.
6.4 Linking at Scale
BitLINK has enabled us to link clusters at a scale of hundreds of
crypto-based services. We have successfully formed chains on 60
services tagged by WalletExplorer using BitLINK , resulting in a
1-fold increase in the number of linked clusters. This information is
organized and available at (http://www.bitlinkwallet.com/) behind
the password "KDD".
7 CONCLUSION
This paper introduces BitLINK , a method to link address clusters
in Bitcoin blockchain based on their temporal pattern. BitLINK is
trained in a self-supervised manner and can significantly shrink the
search space of possible clusters. Consequently, BitLINK enables
scaling up linking of address clusters throughout the entire life
span of a service of interest.
ACKNOWLEDGEMENTS
This material is based upon work supported by the National Science
Foundation under Grant #2008910.
4591KDD ’24, August 25–29, 2024, Barcelona, Spain Sheng Zhong and Abdullah Mueen
REFERENCES
[1]Chábeli Castaño Arango, Roberto Luna-Garcia, Steven Cutchin, and Gaby G.
Dagher. 2022. Towards Deanonymization of Mixing Services in Bitcoin. In
2022 IEEE 1st Global Emerging Technology Blockchain Forum: Blockchain & Be-
yond (iGETblockchain). 1–6. https://doi.org/10.1109/iGETblockchain56591.2022.
10087184
[2]Archive.today. 2024. So Long, and Thanks for All the Fish. Retrieved Feb 8, 2024
from https://archive.ph/paKIO#selection-1541.0-1541.36
[3]Author. 2024. BitLinkWallet. Retrieved Feb 8, 2024 from www.bitlinkwallet.com
[4]Bitcoin.org. 2024. Bitcoin Core. Retrieved Feb 8, 2024 from https://bitcoin.org/
en/bitcoin-core/
[5]Joseph Bonneau, Arvind Narayanan, Andrew Miller, Jeremy Clark, Joshua A.
Kroll, and Edward W. Felten. 2014. Mixcoin: Anonymity for Bitcoin with account-
able mixes. Cryptology ePrint Archive, Paper 2014/077. https://eprint.iacr.org/
2014/077 https://eprint.iacr.org/2014/077.
[6]CoinDesk. 2024. Are Crypto Mixers Legal? Retrieved Feb 8, 2024 from
https://www.coindesk.com/learn/are-crypto-mixers-legal/#:~:text=Helix%2C%
20a%20darknet%20bitcoin%20mixer,anti%2Dmoney%2Dlaundering%20laws.
[7]Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT:
Pre-training of Deep Bidirectional Transformers for Language Understanding. In
Proceedings of the 2019 Conference of the North American Chapter of the Association
for Computational Linguistics: Human Language Technologies, Volume 1 (Long and
Short Papers). Association for Computational Linguistics, Minneapolis, Minnesota,
4171–4186. https://doi.org/10.18653/v1/N19-1423
[8]Giuseppe Di Battista, Valentino Di Donato, Maurizio Patrignani, Maurizio Pizzo-
nia, Vincenzo Roselli, and Roberto Tamassia. 2015. Bitconeview: visualization of
flows in the bitcoin transaction graph. In 2015 IEEE Symposium on Visualization
for Cyber Security (VizSec). 1–8. https://doi.org/10.1109/VIZSEC.2015.7312773
[9]Emadeldeen Eldele, Mohamed Ragab, Zhenghua Chen, Min Wu, Chee Keong
Kwoh, Xiaoli Li, and Cuntai Guan. 2021. Time-Series Representation Learning via
Temporal and Contextual Contrasting. In Proceedings of the Thirtieth International
Joint Conference on Artificial Intelligence, IJCAI-21. 2352–2359.
[10] Haoyi Fan, Fengbin Zhang, Ruidong Wang, Xunhua Huang, and Zuoyong Li. 2021.
Semi-Supervised Time Series Classification by Temporal Relation Prediction. IEEE
International Conference on Acoustics, Speech and Signal Processing, 3545–3549.
https://doi.org/10.1109/ICASSP39728.2021.9413883
[11] Jean-Yves Franceschi, Aymeric Dieuleveut, and Martin Jaggi. 2019. Unsuper-
vised Scalable Representation Learning for Multivariate Time Series. In Ad-
vances in Neural Information Processing Systems, H. Wallach, H. Larochelle,
A. Beygelzimer, F. d 'Alché-Buc, E. Fox, and R. Garnett (Eds.), Vol. 32. Cur-
ran Associates, Inc. https://proceedings.neurips.cc/paper_files/paper/2019/file/
53c6de78244e9f528eb3e1cda69699bb-Paper.pdf
[12] gmaxwell. 2013. CoinJoin: Bitcoin privacy for the real world. Retrieved Feb 8,
2024 from https://bitcointalk.org/index.php?topic=279249.0
[13] Steven Goldfeder, Harry Kalodner, Dillon Reisman, and Arvind Narayanan. 2018.
When the cookie meets the blockchain: Privacy risks of web payments via cryp-
tocurrencies. Proceedings on Privacy Enhancing Technologies 2018 (10 2018),
179–199. Issue 4. https://doi.org/10.1515/popets-2018-0038
[14] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2015. Delving Deep into
Rectifiers: Surpassing Human-Level Performance on ImageNet Classification.
In2015 IEEE International Conference on Computer Vision (ICCV). 1026–1034.
https://doi.org/10.1109/ICCV.2015.123
[15] Xi He, Ketai He, Shenwen Lin, Jinglin Yang, and Hongliang Mao. 2022. Bitcoin
address clustering method based on multiple heuristic conditions. IET Blockchain
2 (6 2022), 44–56. Issue 2. https://doi.org/10.1049/blc2.12014
[16] Xi He, Ketai He, Shenwen Lin, Jinglin Yang, and Hongliang Mao. 2022. Bitcoin
address clustering method based on multiple heuristic conditions. IET Blockchain
2 (6 2022), 44–56. Issue 2. https://doi.org/10.1049/blc2.12014
[17] Zhengjie Huang, Yunyang Huang, Peng Qian, Jianhai Chen, and Qinming He.
2023. Demystifying Bitcoin Address Behavior via Graph Neural Networks. In
2023 IEEE 39th International Conference on Data Engineering (ICDE). 1747–1760.
https://doi.org/10.1109/ICDE55515.2023.00137
[18] U.S. Immigration and Customs Enforcement. 2024. HSI seizes biggest
anonymous drug black market website and assists in arrest of op-
erator and overseas co-conspirators. Retrieved Feb 8, 2024 from
https://www.ice.gov/news/releases/hsi-seizes-biggest-anonymous-drug-
black-market-website-and-assists-arrest-operator
[19] CBS Interactive Inc. 2024. Inside the FBI takedown of the mastermind behind
website offering drugs, guns and murders for hire. Retrieved Feb 8, 2024
from https://www.cbsnews.com/news/ross-ulbricht-dread-pirate-roberts-silk-
road-fbi/
[20] The Wallet Street Journal. 2024. Operator of Helix Bitcoin ‘Mixer’ Pleads
Guilty. Retrieved Feb 8, 2024 from https://www.wsj.com/articles/operator-
of-helix-bitcoin-mixer-pleads-guilty-11629328791
[21] Harry Kalodner, Malte Möser, Kevin Lee, Steven Goldfeder, Martin Plattner, Al-
ishah Chator, and Arvind Narayanan. 2020. BlockSci: Design and applications ofa blockchain analysis platform. In 29th USENIX Security Symposium (USENIX Se-
curity 20) . USENIX Association, 2721–2738. https://www.usenix.org/conference/
usenixsecurity20/presentation/kalodner
[22] Tsung-Yi Lin, Priya Goyal, Ross Girshick, Kaiming He, and Piotr Dollar. 2020.
Focal Loss for Dense Object Detection. IEEE Transactions on Pattern Analysis
and Machine Intelligence 42 (2 2020), 318–327. Issue 2. https://doi.org/10.1109/
TPAMI.2018.2858826
[23] Feng Liu, Zhihan Li, Kun Jia, Panwei Xiang, Aimin Zhou, Jiayin Qi, and Zhibin
Li. 2023. Bitcoin Address Clustering Based on Change Address Improvement.
IEEE Transactions on Computational Social Systems (2023), 1–12. https://doi.org/
10.1109/TCSS.2023.3239031
[24] Sarah Meiklejohn, Marjori Pomarole, Grant Jordan, Kirill Levchenko, Damon
McCoy, Geoffrey M. Voelker, and Stefan Savage. 2013. A fistful of bitcoins.
Proceedings of the 2013 conference on Internet measurement conference, 127–140.
https://doi.org/10.1145/2504730.2504747
[25] Malte Möser and Rainer Böhme. 2016. Join Me on a Market for Anonymity.
https://api.semanticscholar.org/CorpusID:14471821
[26] Satoshi Nakamoto. 2009. Bitcoin: A Peer-to-Peer Electronic Cash System. (May
2009). http://www.bitcoin.org/bitcoin.pdf
[27] M. J. Jeyasheela Rakkini and K. Geetha. 2022. Detection of Bitcoin Miners by
Clustering Crypto Address with Google BigQuery Open Dataset. 25–32. https:
//doi.org/10.1007/978-981-19-0707-4_3
[28] M. Mazhar Rathore, Sushil Chaurasia, and Dhirendra Shukla. 2022. Mixers
Detection in bitcoin network: a step towards detecting money laundering in
crypto-currencies. In 2022 IEEE International Conference on Big Data (Big Data).
5775–5782. https://doi.org/10.1109/BigData55660.2022.10020982
[29] Ardeshir Shojaeinasab, Amir Pasha Motamed, and Behnam Bahrak. 2023. Mixing
detection on Bitcoin transactions using statistical patterns. IET Blockchain 3 (9
2023), 136–148. Issue 3. https://doi.org/10.1049/blc2.12036
[30] Karen Simonyan and Andrew Zisserman. 2014. Very Deep Convolutional Net-
works for Large-Scale Image Recognition. arXiv:1409.1556 [cs.CV]
[31] Michele Spagnuolo, Federico Maggi, and Stefano Zanero. 2014. BitIodine: Extract-
ing Intelligence from the Bitcoin Network. 457–468. https://doi.org/10.1007/978-
3-662-45472-5_29
[32] Yujing Sun, Hao Xiong, Siu Ming Yiu, and Kwok Yan Lam. 2023. BitAnalysis: A
Visualization System for Bitcoin Wallet Investigation. IEEE Transactions on Big
Data 9, 2 (2023), 621–636. https://doi.org/10.1109/TBDATA.2022.3188660
[33] Natkamon Tovanich and Rémy Cazabet. 2022. Pattern Analysis of Money Flows
in the Bitcoin Blockchain. In International Conference on Complex Networks and
Their Applications. Springer, 443–455.
[34] Natkamon Tovanich, Nicolas Heulot, Jean-Daniel Fekete, and Petra Isenberg.
2021. Visualization of Blockchain Data: A Systematic Review. IEEE Transactions
on Visualization and Computer Graphics 27, 7 (2021), 3135–3152. https://doi.org/
10.1109/TVCG.2019.2963018
[35] Terry T. Um, Franz M. J. Pfister, Daniel Pichler, Satoshi Endo, Muriel Lang, Sandra
Hirche, Urban Fietzek, and Dana Kulić. 2017. Data Augmentation of Wearable
Sensor Data for Parkinson’s Disease Monitoring Using Convolutional Neural
Networks. In Proceedings of the 19th ACM International Conference on Multimodal
Interaction (Glasgow, UK) (ICMI ’17). Association for Computing Machinery, New
York, NY, USA, 216–220. https://doi.org/10.1145/3136755.3136817
[36] walletexplorer. 2024. Info about WalletExplorer.com. Retrieved Feb 8, 2024 from
https://www.walletexplorer.com/info
[37] Jiajing Wu, Jieli Liu, Weili Chen, Huawei Huang, Zibin Zheng, and Yan Zhang.
2022. Detecting Mixing Services via Mining Bitcoin Transaction Network With
Hybrid Motifs. IEEE Transactions on Systems, Man, and Cybernetics: Systems 52, 4
(2022), 2237–2249. https://doi.org/10.1109/TSMC.2021.3049278
[38] Liang Xi, Zichao Yun, Han Liu, Ruidong Wang, Xunhua Huang, and Haoyi Fan.
2022. Semi-supervised Time Series Classification Model with Self-supervised
Learning. Engineering Applications of Artificial Intelligence 116 (2022), 105331.
https://doi.org/10.1016/j.engappai.2022.105331
[39] Xuanwu Yue, Xinhuan Shu, Xinyu Zhu, Xinnan Du, Zheqing Yu, Dimitrios
Papadopoulos, and Siyuan Liu. 2019. BitExTract: Interactive Visualization for
Extracting Bitcoin Exchange Intelligence. IEEE Transactions on Visualization and
Computer Graphics 25, 1 (2019), 162–171. https://doi.org/10.1109/TVCG.2018.
2864814
[40] Zhihan Yue, Yujing Wang, Juanyong Duan, Tianmeng Yang, Congrui Huang,
Yunhai Tong, and Bixiong Xu. 2022. TS2Vec: Towards Universal Representation
of Time Series. Proceedings of the AAAI Conference on Artificial Intelligence 36, 8
(Jun 2022), 8980–8987. https://doi.org/10.1609/aaai.v36i8.20881
[41] Zhen Zhang, Tianyi Zhou, and Zhitong Xie. 2019. BitScope: Scaling Bitcoin
Address De-anonymization using Multi-Resolution Clustering. https://izgzhen.
github.io/bitscope-public/paper.pdf.
[42] Zening Zhao, Jinsong Wang, Kai Shi, and Hongwei Zhang. 2022. Improving
Address Clustering in Bitcoin by Proposing Heuristics. IEEE Transactions on
Network and Service Management 19, 4 (2022), 3737–3749. https://doi.org/10.
1109/TNSM.2022.3186466
[43] Francesco Zola, Lander Segurola-Gil, Jan L. Bruse, Mikel Galar, and Raul Orduna-
Urrutia. 2022. Attacking Bitcoin anonymity: generative adversarial networks
4592BitLINK: Temporal Linkage of Address Clusters in Bitcoin Blockchain KDD ’24, August 25–29, 2024, Barcelona, Spain
for improving Bitcoin entity classification. Applied Intelligence 52 (12 2022),
17289–17314. Issue 15. https://doi.org/10.1007/s10489-022-03378-7
A DETAILS
A.1 Support Website
We linked clusters from 60 services listed on WalletExplorer . The
visualization of these clusters is available at (http://www.bitlinkwallet.
com/) with the password "KDD".
Figure 14: BitLink website main page.
Figure 15: BitLink website for viewing time series of each
service.
A.2 Time Series Filtering
Transactional data can be sporadic, as illustrated in Figure 16, where
261 sub-sequences of non-zero values emerge beyond the main
service activation phase. We define a sub-sequence as a windowed
time series data that has no zero value and cannot be expanded
further. We only want to keep the sub-sequence corresponding to
the main activate period of a cluster to enhance the efficiency of
the following steps. To achieve this, we employed a second-order
Butterworth low pass filter, setting the cut-off frequency at 0.015Hzand the time series frequency at 1Hz. This allowed us to extract
the time series trend as shown by the red curve in Figure 16. We
then evaluated the trend’s first-order derivative to identify the top
5 local minimums and maximums. Any sub-sequences that lacked
extrema were filtered out (setting to 0).
Figure 16: The blue curve shows raw time series data for
BTC-e , and the red curve shows the trend time series. The
Y-axis represents the daily receiving transaction count. Ver-
tical lines indicate the start and end of each non-zero sub-
sequence.
A.3 Time Series Segmentation Details
For each time series of clusters that spanned more than 10 days,
we determined split points positioned 15 days apart and ensured a
5-day buffer from both subsequence ends. We carefully eliminated
points that might coincide with potential real flush activities by
restricting the variance in mean values between the prefix and suffix
segments. The difference between the mean value of prefix and
suffix should not exceed 50% of the prefix mean. Furthermore, the
prefix mean must exceed a threshold of 25. These mean calculations
used a window up to 16 days in length.
Table 7: Testing results for BitLINK on manually labeled
dataset when the best validation score is achieved on the
WalletExplorer dataset. Total 2 services and 25 positive pairs.
All the pairs can be viewed at http://www.bitlinkwallet.com
Service Pair # Neg pairs Acc-1 Acc-5 TPR FPR G-mean
HelixMixerHelixMixer-old4 || 22128045017 757 0 0 0.00 0.0000 0.00
HelixMixer-old10 || 22146884174 813 1 1 1.00 0.0012 0.9994
HelixMixer-old23 || 22192612979 972 1 1 1.00 0.0010 0.9995
HelixMixer-old19 || 22229168202 1387 1 1 1.00 0.0000 1.0000
22229168202 || 22234221805 1604 1 1 1.00 0.0000 1.0000
HelixMixer-old29 || 22249369936 1387 1 1 1.00 0.0007 0.9996
HelixMixer-old34 || 22287372047 1437 1 1 1.00 0.0000 1.0000
22287372047 || 22293506629 1364 1 1 1.00 0.0007 0.9996
22293506629 || 22298758391 1403 1 1 1.00 0.0000 1.0000
22298758391 || 22314307349 1218 1 1 1.00 0.0016 0.9992
22314307349 || 22323767728 1327 1 1 1.00 0.0008 0.9996
22323767728 || 22328769201 1249 1 1 1.00 0.0008 0.9996
22328769201 || 22331782585 1509 1 1 1.00 0.0013 0.9993
22331782585 || 22335875630 1379 1 1 1.00 0.0007 0.9996
22335875630 || 22344622135 1410 1 1 1.00 0.0000 1.0000
22344622135 || 22349874694 1445 1 1 1.00 0.0007 0.9997
22349874694 || 22355989080 1674 1 1 1.00 0.0006 0.9997
22355989080 || 22366783608 1260 1 1 1.00 0.0040 0.9980
22366783608 || 22379501990 1698 1 1 1.00 0.0088 0.9956
Total 19 pairs 25293 0.9474 0.9474 0.95 0.0013 0.9727
PrimeDice.comPrimeDice.com || 22128313702 614 1 1 1.0000 0.0016 0.9992
22128313702 || 22149475712 823 1 1 1.0000 0.0012 0.9994
22149475712 || 22250465827 1058 1 1 1.0000 0.0000 1.0000
22250465827 || 22261613574 1703 1 1 1.0000 0.0023 0.9988
22261613574 || 22331938426 1298 1 1 1.0000 0.0031 0.9985
22331938426 || 2446686602 1637 1 1 1.0000 0.0000 1.0000
Total 6 pairs 7133 1.0000 1.0000 1.0000 0.0014 0.9993
4593KDD ’24, August 25–29, 2024, Barcelona, Spain Sheng Zhong and Abdullah Mueen
Table 8: Testing results for BitLINK onWalletExplorer dataset when the best validation score is achieved on the manually
labeled dataset. Total 26 services and 65 positive pairs.
Service Pair # Neg pairs Acc-1 Acc-5 TPR FPR G-mean
FoxBit.com.br FoxBit.com.br-cold-old || FoxBit.com.br-cold 488 1 1 1.0000 0.0430 0.9782
Cryptonator.com Cryptonator.com-old || Cryptonator.com 397 1 1 1.0000 0.0025 0.9987
C-Cex.com C-Cex.com-old || C-Cex.com 424 1 1 1.0000 0.0000 1.0000
Satoshi-Karoshi.com Satoshi-Karoshi.com-old || Satoshi-Karoshi.com 786 1 1 1.0000 0.0254 0.9872
50BTC.com 50BTC.com-old3 || 50BTC.com-old2 293 1 1 1.0000 0.0614 0.9688
BitPay.com BitPay.com-old || BitPay.com-old2 650 1 1 1.0000 0.0000 1.0000
Bitfinex.comBitfinex.com-old || Bitfinex.com-old2 310 0 1 1.0000 0.0290 0.9854
Bitfinex.com-old2 || Bitfinex.com 486 1 1 1.0000 0.0000 1.0000
Total 2 pairs 796 0.5000 1.0000 1.0000 0.0113 0.9943
BTCC.com BTCC.com-old2 || BTCC.com 233 0 0 0.0000 0.0215 0.0000
HelixMixerHelixMixer-old2 || HelixMixer-old3 605 1 1 1.0000 0.0033 0.9983
HelixMixer-old3 || HelixMixer-old4 815 1 1 1.0000 0.0000 1.0000
HelixMixer-old5 || HelixMixer 765 1 1 1.0000 0.0000 1.0000
HelixMixer || HelixMixer-old6 738 1 1 1.0000 0.0000 1.0000
HelixMixer-old6 || HelixMixer-old7 976 1 1 1.0000 0.0072 0.9964
HelixMixer-old7 || HelixMixer-old8 774 1 1 1.0000 0.0026 0.9987
HelixMixer-old8 || HelixMixer-old9 813 1 1 1.0000 0.0025 0.9988
HelixMixer-old9 || HelixMixer-old10 823 1 1 1.0000 0.0012 0.9994
HelixMixer-old12 || HelixMixer-old13 982 1 1 1.0000 0.0000 1.0000
HelixMixer-old13 || HelixMixer-old14 1039 1 1 1.0000 0.0010 0.9995
HelixMixer-old14 || HelixMixer-old15 1064 1 1 1.0000 0.0009 0.9995
HelixMixer-old15 || HelixMixer-old16 1032 1 1 1.0000 0.0010 0.9995
HelixMixer-old16 || HelixMixer-old17 873 1 1 1.0000 0.0011 0.9994
HelixMixer-old17 || HelixMixer-old20 849 1 1 1.0000 0.0024 0.9988
HelixMixer-old20 || HelixMixer-old18 946 1 1 1.0000 0.0021 0.9989
HelixMixer-old18 || HelixMixer-old23 863 0 1 1.0000 0.0023 0.9988
HelixMixer-old26 || HelixMixer-old22 1293 1 1 1.0000 0.0015 0.9992
HelixMixer-old22 || HelixMixer-old21 970 1 1 1.0000 0.0000 1.0000
HelixMixer-old21 || HelixMixer-old24 1835 1 1 1.0000 0.0000 1.0000
HelixMixer-old24 || HelixMixer-old27 1305 1 1 1.0000 0.0015 0.9992
HelixMixer-old27 || HelixMixer-old25 1328 1 1 1.0000 0.0008 0.9996
HelixMixer-old25 || HelixMixer-old19 1382 1 1 1.0000 0.0007 0.9996
HelixMixer-old28 || HelixMixer-old29 1432 1 1 1.0000 0.0000 1.0000
HelixMixer-old30 || HelixMixer-old31 1287 0 1 1.0000 0.0016 0.9992
HelixMixer-old31 || HelixMixer-old32 1580 1 1 1.0000 0.0013 0.9994
HelixMixer-old32 || HelixMixer-old33 1631 1 1 1.0000 0.0000 1.0000
HelixMixer-old33 || HelixMixer-old34 1223 1 1 1.0000 0.0000 1.0000
Total 27 pairs 29223 0.9259 1.0000 1.0000 0.0012 0.9994
Bter.comBter.com-old || Bter.com-old2 419 0 1 1.0000 0.0072 0.9964
Bter.com-old || Bter.com 419 0 1 1.0000 0.0072 0.9964
Bter.com-old2 || Bter.com-old3 461 1 1 1.0000 0.0043 0.9978
Bter.com || Bter.com-old3 642 1 1 1.0000 0.0093 0.9953
Total 4 pairs 1941 0.5000 1.0000 1.0000 0.0072 0.9964
PrimeDice.comPrimeDice.com-old || PrimeDice.com-old2 495 1 1 1.0000 0.0000 1.0000
PrimeDice.com-old2 || PrimeDice.com-old3 420 1 1 1.0000 0.0000 1.0000
PrimeDice.com-old3 || PrimeDice.com-old4 448 1 1 1.0000 0.0000 1.0000
PrimeDice.com-old4 || PrimeDice.com 511 1 1 1.0000 0.0020 0.9990
Total 4 pairs 1874 1.0000 1.0000 1.0000 0.0005 0.9997
BTC-e.com BTC-e.com-old || BTC-e.com 459 1 1 1.0000 0.0000 1.0000
BitcoinVideoCasino.comBitcoinVideoCasino.com-old2 || BitcoinVideoCasino.com 506 1 1 1.0000 0.0040 0.9980
BitcoinVideoCasino.com-old || BitcoinVideoCasino.com-old2 537 1 1 1.0000 0.0019 0.9991
Total 2 pairs 1043 1.0000 1.0000 1.0000 0.0029 0.9986
CrimeNetwork.ccCrimeNetwork.cc-old || CrimeNetwork.cc-old2 719 0 1 1.0000 0.0403 0.9796
CrimeNetwork.cc-old || CrimeNetwork.cc 853 0 1 1.0000 0.1196 0.9383
Total 2 pairs 1572 0.0000 1.0000 1.0000 0.0833 0.9574
Bitcoinica.com Bitcoinica.com-old || Bitcoinica.com 169 1 1 1.0000 0.0059 0.9970
BitAces.me BitAces.me-old || BitAces.me 633 1 1 1.0000 0.0126 0.9937
LocalBitcoins.com LocalBitcoins.com-old || LocalBitcoins.com 675 0 1 1.0000 0.0030 0.9985
Bitstamp.net Bitstamp.net-old || Bitstamp.net 617 1 1 1.0000 0.0000 1.0000
SimpleCoin.czSimpleCoin.cz-old2 || SimpleCoin.cz-old3 1722 0 0 1.0000 0.0587 0.9702
SimpleCoin.cz-old3 || SimpleCoin.cz-old4 2811 1 1 1.0000 0.0221 0.9889
SimpleCoin.cz-old5 || SimpleCoin.cz 2297 1 1 1.0000 0.0070 0.9965
Total 3 pairs 6830 0.6667 0.6667 1.0000 0.0262 0.9868
Huobi.com Huobi.com || Huobi.com-2 373 1 1 1.0000 0.0000 1.0000
Cryptsy.com Cryptsy.com-old || Cryptsy.com 409 1 1 1.0000 0.0000 1.0000
SecureVPN.to SecureVPN.to-old || SecureVPN.to 2858 0 1 1.0000 0.0360 0.9818
SlushPool.com SlushPool.com-old2 || SlushPool.com 720 1 1 1.0000 0.0250 0.9874
Banx.ioBanx.io-old || Banx.io-old2 538 0 0 1.0000 0.0688 0.9650
Banx.io-old2 || Banx.io 429 0 1 1.0000 0.0723 0.9632
Total 2 pairs 967 0.0000 0.5000 1.0000 0.0703 0.9642
Bitcoin.de Bitcoin.de-old || Bitcoin.de 178 0 1 1.0000 0.0112 0.9944
AntPool.comAntPool.com-old || AntPool.com-old2 2425 1 1 1.0000 0.0606 0.9692
AntPool.com-old2 || AntPool.com 2033 0 0 0.0000 0.1205 0.0000
Total 2 pairs 4458 0.5000 0.5000 0.5000 0.0879 0.6753
4594