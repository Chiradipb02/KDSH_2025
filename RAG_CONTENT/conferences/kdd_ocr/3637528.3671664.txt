Online Preference Weight Estimation Algorithm with Vanishing
Regret for Car-Hailing in Road Network
Yucen Gao
guo_ke@sjtu.edu.cn
Shanghai Jiao Tong University
Shanghai, ChinaZhehao Zhu
zhehaozhu111@gmail.com
Northwestern University
Evanston, Illinois, the USAMingqian Ma
mingqianma@sjtu.edu.cn
Shanghai Jiao Tong University
Shanghai, China
Fei Gao
danzergaofei@didiglobal.com
Didi Global Inc.
Beijing, ChinaHui Gao
deangaohui@didiglobal.com
Didi Global Inc.
Beijing, ChinaYangguang Shi
shiyangguang@sdu.edu.cn
Shandong University
Qingdao, China
Xiaofeng Gao‚àó
gao-xf@cs.sjtu.edu.cn
Shanghai Jiao Tong University
Shanghai, China
ABSTRACT
Car-hailing services play an important role in the modern trans-
portation system, and the utilities of the service providers highly
depend on the efficiency of route planning algorithms. A widely
adopted route planning framework is to assign weights to roads
and compute the routes with the shortest path algorithms. Existing
techniques of weight-assigning often focus on the traveling time
and length of the roads, but cannot incorporate with the preferences
of the passengers (users).
In this paper, a set of preference weight estimation models is
employed to capture the users‚Äô preferences over paths in car-hailing
with their historical choices. Since the user preferences may vary
dynamically over time, it is a challenging task to make real-time
decisions over the models. The main technical contribution of this
paper is to propose an online learning-based preference weight
chasing (PWC) algorithm to solve this problem. The worst-case
performance of PWC is analyzed with the metric regret, and it is
proved that PWC has a vanishing regret, which means that the time-
averaged loss concerning the fixed in-hindsight best model tends
to zero. Experiments based on real-world datasets are conducted to
verify the effectiveness and efficiency of our algorithm. The code is
available at https://github.com/GaoYucen/PWC.
CCS CONCEPTS
‚Ä¢Information systems ‚ÜíData mining; ‚Ä¢Applied computing
‚ÜíForecasting.
‚àóXiaofeng Gao is the corresponding author
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
¬©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671664KEYWORDS
Preference weight, stateful online learning, vanishing regret, dy-
namic deterministic markov decision process
ACM Reference Format:
Yucen Gao, Zhehao Zhu, Mingqian Ma, Fei Gao, Hui Gao, Yangguang Shi,
and Xiaofeng Gao. 2024. Online Preference Weight Estimation Algorithm
with Vanishing Regret for Car-Hailing in Road Network. In Proceedings of
the 30th ACM SIGKDD Conference on Knowledge Discovery and Data Mining
(KDD ‚Äô24), August 25‚Äì29, 2024, Barcelona, Spain. ACM, Long Beach, CA, USA,
9 pages. https://doi.org/10.1145/3637528.3671664
1 INTRODUCTION
The advent of car-hailing services has revolutionized urban trans-
portation by providing users with convenient, on-demand mobility
solutions. These car-hailing platforms, characterized by their seam-
less integration of mobile applications, GPS tracking, and efficient
matching algorithms, have fundamentally transformed the way
people commute within cities [ 29]. With the increasing demand for
traveling, the significance of car-hailing services is becoming in-
creasingly important. Central to the success of car-hailing services
is their ability to provide users with proper routes.
Previous work usually aimed to find the shortest route that mini-
mize distance or travel time. Traditional route planning algorithms,
such as Dijkstra‚Äôs algorithm and A* search, have been widely em-
ployed in these services [ 18]. However, the shortest route does not
mean the most suitable route for users [ 5]. Users may consider a
variety of factors, including the number of traffic lights in the route,
whether the route is a major road or highway, route smoothness.
As shown in Figure 1, when a user uses a car-hailing platform, such
as Didi Chuxing, the platform would recommend multiple routes,
including routes with shorter distance, faster travel time and routes
taken by more people. The most frequently chosen route is not the
one with the minimum travel time or distance.
As a result, in recent years, many efforts have begun to explore
planning more appropriate routes based on learning about historical
trajectories. Existing data-driven work can be roughly categorized
 
863
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yucen Gao et al.
Figure 1: Interface of car-hailing paltform
into two classes. One is based on machine learning and the other
is based on database indexing. However, both types of work have
limitations. Machine learning based approaches require real-time
computation of the proper route based on the user‚Äôs current location,
leading to the problem of route changes during the trip, inviting
complaints from both drivers and users. Database indexing based
methods are unable to give a proper route when a new request for
an unseen origin-destination pair arises. Thus, we need to develop
a method that can satisfy the following requirements.
‚Ä¢Fast response: The method needs to respond to online re-
quests as quickly as possible.
‚Ä¢Initial solution Optimality: The method needs to maintain
consistency of the optimal solution at the initial position and
during the trip.
‚Ä¢Global Computability: The method needs to have the abil-
ity to find the optimal routes for globally arbitrary origin-
destination pairs.
Based on the observation of the shortest path algorithm, we
expect to use a Preference Weight Estimation (PWE) model to
construct the preference weights for road networks. On a road
network with preference weights, we can invoke the shortest path
algorithm to quickly compute the most preferred routes of users
and satisfy the above requirements. However, a challenge is that
user preferences change over time [ 17]. This means that preference
weights need to be updated dynamically. However, it is difficult
to accurately predict how user preferences change during each
update cycle. Existing incremental update technology cannot give
theoretical performance guarantees for an arbitrary sequence of
order sets. Therefore, in this paper, we design an online learning
based algorithm called Preference Weight Chasing (PWC) to provide
good theoretical performance guarantees.
Given a set of PWE models for reference, PWC consists of a
model selector ùîñto select a target model from the set and a chas-
ing oracle ùîíto determine the preference weights. Specifically, the
model selector maps multiple PWE models to the arms of On-
line Learning with Switching Cost (OLSC) problem and selects a
model strategy referring to the Following the Perturbed Leader
(FPL) algorithm [ 24]. The chasing oracle is an iterative tracking
sub-procedure, which determines the preference weights based on
the target model for each time slot. PWC ensures the performance
loss of the tracking process is always sublinear.We then make the theoretical analysis. Regret is often consid-
ered as the theoretical performance metric in online learning al-
gorithms [ 6]. It refers to the difference in performance between
an algorithm and the best model fixed in-hindsight. Our goal is to
achieve vanishing regret, which means that the regret of each time
slot converges to 0over time. By introducing the Online Learn-
ing with Switching Cost (OLSC) problem [ 24] and analyzing the
regret of the chasing procedure, we prove that PWC can achieve
vanishing regret. Moreover, we conduct experiments on real data
from Didi, a car-hailing service provider. The results demonstrate
PWC performs well for various situations and can achieve the best
performance in terms of the average performance.
2 RELATED WORK
2.1 Route Planning
In the navigation and transportation domain, efficient route plan-
ning is essential. Research in this field has explored various tech-
niques to optimize route planning, aiming to improve the quality
of planned routes and enhance user satisfaction [27, 35].
Route planning heavily relies on the edge weights of road net-
works, where edge weights represent the cost of traversing each
road segment [ 30,31]. To plan the most preferred route for users,
most existing approaches use deterministic weight modeling, often
combining multiple factors such as travel time, distance, and road
hierarchy using expert-designed rules [ 3,4]. However, when consid-
ering providing personalized route recommendations for different
users, their preferences in different cities and regions may differ,
making it challenging to design a general weighting scheme. Many
edge weighting algorithms aim to design different weight sets for
specific route planning problems [19, 28].
Still, designing weighting schemes for different time periods
is challenging. In real scenarios, the order sequence is revealed
sequentially as an online problem. Thus, a single weighting algo-
rithm usually cannot capture the change in order distribution, users‚Äô
preferences and other factors over time [10].
2.2 Online Learning
Online learning is a method of machine learning in which data
becomes available in sequential order and is used to update the best
treatment for future data at each step [ 21]. online learning tech-
niques can be applied to solve a variety of tasks in a wide range of
real-world application domains, such as supervised learning tasks,
bandit learning tasks and unsupervised learning tasks. Besides, on-
line learning algorithms are founded on solid theory with rigorous
regret bounds. Online learning is widely used in advertising auc-
tion [ 25], recommendation system [ 7,32], scheduling [ 2,34] and
other fields. In the paper, we apply the solid theory of online learn-
ing to the O-PWE task, and design the preference weight chasing
algorithm with a theoretical guarantee.
3 PROBLEM AND PRELIMINARIES
3.1 Problem Statement
Definition 1 (Order Set). An order set consists of numerous or-
ders during time slot ùë°, which could be denoted by ùëÇùë°={ùëúùë°
1,¬∑¬∑¬∑,ùëúùë°
|ùëÇùë°|}.
 
864Online Preference Weight Estimation Algorithm with Vanishing Regret for Car-Hailing in Road Network KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
An orderùëúùë°
ùëñowns three attributes ‚ü®ùë†ùë°
ùëñ,ùëëùë°
ùëñ,ùëüùë°
ùëñ‚ü©, whereùë†ùë°
ùëñandùëëùë°
ùëñrepre-
sent the origin and destination, respectively. ùëüùëñ
ùë°represents the actual
route ofùëúùëñ
ùë°. Time slots usually represent time intervals of the same
length. Note that ùëÇùë°can not be known until time slot ùë°+1.
In commercial car-hailing systems, such as Didi Chuxing, the
time slot is usually 15minutes, one hour, or one day. Each order ùëúùë°
ùëñ
arrives at the platform at a specific moment in the time slot ùë°. How-
ever, since the platform only adjusts its route planning algorithm
at the beginning or end of a time slot, we consider all orders in ùëÇùë°
to be processed at the beginning of the time slot ùë°+1.
Definition 2 (Seqence of Order Sets). A sequence of order
sets is denoted byO={ùëÇ1,ùëÇ2,¬∑¬∑¬∑,ùëÇùëá}, whereùëárepresents the
length of time slots.
The time horizon ùëáin commercial platforms usually spans over
a week or a month. After ùëátime slots, the car-hailing platform will
evaluate the quality of the route planning during this period. Refer-
ring to common setting [16, 33], we define the choice assumption.
Assumption 1 (Choice assumption). For each order ùëúùë°
ùëñ, it is
assumed that the actual route chosen by the user in the car-hailing
platform is the most preferred route between the origin-destination
pairùë†ùë°
ùëñandùëëùë°
ùëñ.
Assumption 1 implies that at the end of each time slot, after the
users that correspond to the order set decide their actual routes,
the most preferred routes are also revealed as input. So now we can
explicitly define the Route Planning Problem, an online problem of
maximizing the overlapping ratio between the planned routes and
the most preferred routes.
Definition 3 (Route Planning Problem). Given a directed
graphùê∫=(ùëâ,ùê∏)representing the road network and a sequence of
order setO, the Route Planning Problem aims to find a planned route
ùëüùë°
ùëñùëùfor each order ùëúùë°
ùëñto maximize the cumulative accuracy.
ùëá‚àëÔ∏Å
ùë°=1ùëéùëêùëêùë°(1)
where
ùëéùëêùëêùë°=√ç|ùëÇùë°|
ùëñ=11(ùëüùë°
ùëñùëù,ùëüùë°
ùëñ,ùúÉ)
|ùëÇùë°|(2)
andùëüùë°
ùëñùëùrepresents the route planned by the platform for ùëúùë°
ùëñ.1(ùëüùë°
ùëñùëù,ùëüùë°
ùëñ,ùúÉ)
is a0‚àí1function, returning 1when the length of the overlapping
route ofùëüùë°
ùëñùëùandùëüùë°
ùëñis greater than ùúÉtimes the length of ùëüùë°
ùëñ. Otherwise,
it returns 0.ùúÉ‚àà(0,1), and is usually set to 0.95in practice.
The Route Planning problem described in Definition 3 requires
the algorithm to explicitly specify the planned routes. As discussed
in Section 1, in this paper we are more interested in a variation
of Route Planning where the algorithm is only responsible for
assigning weights to the edges (roads), and the planned routes are
specified with the shortest paths with respect to the edge weights.
Before give the full definition of this variation problem, we first
clarify the relation between the edge weights and the shortest path
(planned path) with the following proposition.Definition 4 (Shortest Path Algorithm). Given a directed
graphùê∫=(ùëâ,ùê∏)with preference weights ùëäand an order ùëúwith
the originùë†and destination ùëë, we can find the most preferred route
ùëü=ùëÜùëÉ(ùë†,ùëë,ùê∫,ùëä)with a Shortest Path algorithmùëÜùëÉ(¬∑), such as Di-
jkstra‚Äôs algorithm [ 13]. For convenience, We use ùëÜùëÉ(ùëú,ùëä)to represent
ùëÜùëÉ(ùë†,ùëë,ùê∫,ùëä).
Based on the shortest path algorithm, we can give the definition
of the variation problem.
Definition 5 (Route Planning Problem with Edge Weights
Estimation). Given a directed graph ùê∫=(ùëâ,ùê∏)and a sequence of
order setO, the Route Planning Problem with Edge Weights Estimation
aims to output weights for all edges in ùê∏at each time slot ùë°and
useùëÜùëÉ(¬∑)to get the planned route ùëüùë°
ùëñùëùfor each order ùëúùë°
ùëñsuch as to
maximize the cumulative accuracy by Equation (1).
As discussed in Section 1, existing work often decides the edge
weights in route planning with the traveling time or the length
of roads, while in this paper, we employ the Preference Weight
Estimation (PWE) models to learn mass preferences as edge weights
from historical data. We emphasize that our technical framework
does not make much assumption on the internal implementation
of the PWE models, but only requires them to satisfy the following
anonymous assumption.
Assumption 2 (Anonymous assumption). In consideration of
protecting users‚Äô privacy, the preference weight estimation model is
based on the observation of the historical actual routes of all users,
instead of constructing unique edge weights for each user.
Definition 6 (Preference Weight Estimation Model). Given
a directed graph ùê∫=(ùëâ,ùê∏)and the order sets{ùëÇ1,ùëÇ2,¬∑¬∑¬∑,ùëÇùë°‚àí1}, a
preference weight estimation model ùõæoutputs the preference weights
ùëäùë°for all edges in ùê∏at time slotùë°.
Note that, for the sake of stability, the car-hailing platform would
not directly take the preference weights ùëäùë°output by a PWE model
as the final weights, but would use the Time-Decay function to
output the final weights at time slot ùë°[8].
Definition 7 (Time-Decay Function ùëáùê∑(¬∑)).Given a directed
graphùê∫=(ùëâ,ùê∏), the preference weights set for the previous ùêøtime
slotsWùë°={ùëäùëó}ùë°‚àí1
ùëó=max{ùë°‚àíùêø,1}and the current preference weights ùëäùë°
output by a PWE model, the time-decay function is used to calculate
the final preference weight ÀÜùëäùë°at time slotùë°.
ÀÜùëäùë°=ùë°‚àëÔ∏Å
ùëó=max{ùë°‚àíùêø,1}ùëéùëóùëäùëó, ùëéùëó=1
ùëíùë°‚àíùëó(3)
Here,ùêøcan be set according to the actual needs of different sce-
narios, usually 3. In the field of route planning, the length of edges
are non-negative real numbers, and smaller weights are associated
with the routes that are shorter [ 12,22]. Similarly, we assume that
the route with smaller preference weight is more preferred by users.
Therefore, we can use the shortest path algorithm to find the most
preferred routes for orders within ùê∫with preference weights ùëä.
We then give the formal definition of the online preference weight
estimation problem.
Definition 8 (Online Preference Weight Estimation Prob-
lem (O-PWE)). Given a directed graph ùê∫=(ùëâ,ùê∏)representing the
 
865KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yucen Gao et al.
road network, the time horizon ùëáand a set of PWE models for ref-
erence, at time slot ùë°, we are revealed ùëÇùë°‚àí1. The goal is to maximize
the cumulative accuracy by designing a preference weight estimation
algorithmùõæ, which determines the sequence of preference weights
W={ùëä1,ùëä2,¬∑¬∑¬∑,ùëäùëá}.
Figure 2 gives an example of the O-PWE problem. At time slot
ùë°, we first need to give preference weights ùëäùë°for all edges by ùõæ
and calculateÀÜùëäùë°through the time-decay function. When an order
arrives, the appropriate route is obtained using the shortest path
algorithm and compared with the actual route of this order. When
the last order of this time slot arrives, we can compute the accuracy
of time slot ùë°ofùõæ, e.g.,ùëéùëêùëê(ùëÇùë°,ùõæ)orùëéùëêùëêùë°ùõæ. The goal of the O-PWE
problem is to maximize the cumulative accuracy of all ùëátime slots.
O-PWE Problem
time slot ùíïtime slot ùíï+ùüè‚Ä¶‚Ä¶Order Set	ùë∂ùíïùíÖùüèùíïùíîùüèùíïùíêùüèùíïùíÖùíïùüêùíîùüêùíïùíêùüêùíïProcedure for time slot t:Outputthepreferenceweightsùëä!byŒ≥andcalculateùëä!#bythetime-decayfunctionFind the routeùëü"#!for each order ùëú"!bytheshortestpathalgorithmCalculateaccuracyattimeslotùë°by comparing planned routes and actual routesùëéùëêùëêùëÇ!,ùõæ=‚àë1(ùëü"#!,ùëü"!,ùúÉ)|%!|"&'|ùëÇ!|1234567Order ùëú!":  ùë†!"=3,ùëë!"=7Planned route: 3 -> 2 -> 4-> 7Actual route: 3 ->2 -> 1-> 7Order Sequence
Figure 2: An example of the O-PWE problem
3.2 Preliminaries
We first introduce some preliminaries in order to better describe
the chasing algorithm in detail and analyze its performance.
3.2.1 Model Set. The model set Œìconsists of various preference
weight estimation models.
3.2.2 Regret. Regret is the accumulative reward difference of an
algorithm to the best model fixed in-hindsight over a series of
actions [ 11]. Given a finite model set Œìand a sequence of order sets
O, the regret in the O-PWE problem can be defined as:
Regret =max
ùõæ‚ààŒìùëá‚àëÔ∏Å
ùë°=1ùëéùëêùëêùë°
ùõæ‚àíùëá‚àëÔ∏Å
ùë°=1ùëéùëêùëê(ùëÇùë°,ÀÜùëäùë°) (4)
whereùõærepresents the best model for the offline scenario.
3.2.3 Vanishing Regret. The vanishing regret is also called no re-
gret or sublinear regret [ 23,26]. It means that the regret per time
slot tends to zero, and is widely recognized as a great theoreti-
cal performance metric [ 1]. The vanishing regret in the O-PWE
problem can be defined as:
Avg. Regret =ùëÖùëíùëîùëüùëíùë°
ùëá‚Üí0,asùëá‚Üí‚àû (5)
3.2.4 The Statefulness of Model Selection for O-PWE. The stateful-
ness of online learning means that it is not possible to make the
current state identical to the state of the target model by the action
of the current step alone. Since ÀÜùëäùë°andùëéùëêùëêùë°ùõædo not just depend on
the preference weights at time slot ùë°, but also on the ones at thepreviousùêøtime slots, we cannot get the same ÀÜùëäùë°andùëéùëêùëêùë°ùõæas the
target model simply by determining ùëäùë°. This means O-PWE is a
stateful online learning problem.
3.2.5 Reduction to Dynamic deterministic Markov Decision Process.
For a stateful online learning problem, we usually reduce it to a
Dynamic deterministic Markov Decision Process (Dd-MDP) in order
to propose a solution to the problem. Here, we introduce concepts
of Dd-MDP for the O-PWE.
State: The state should be able to reflect the information about
historical order sets as well as the execution performance of the
algorithm. Hence, we use the tuple sequence of the past ùêøtime slots
{ùëäùëó,ùëÇùëó}ùë°‚àí1
ùëó=ùë°‚àíùêøas the state at time slot ùë°.
Action: We identify the action with the help of the model set Œì.
Specifically, at each time slot ùë°, we select a target model ùõæ‚àófrom Œì,
and update the preference weights ùëäùë°based onùõæ‚àó.
Reward: According to ùëäùë°, we can calculate ÀÜùëäùë°throughùëáùê∑(¬∑)
and then compute the accuracy ùëéùëêùëêùë°at time slot ùë°as the reward.
Transition function: The state transition function is used to
calculate the state at time slot ùë°+1. It is determined by the preference
weights of the past ùêøtime slots and selected target model at ùë°, i.e.,
ùëî({ùëäùëó}ùë°‚àí1
ùëó=ùë°‚àíùêø,ùõæ‚àó)={ùëäùëó}ùë°
ùëó=ùë°‚àíùêø+1. Hence, The state at time slot
ùë°+1is{ùëäùëó,ùëÇùëó}ùë°
ùëó=ùë°‚àíùêø+1.
4 ALGORITHM OF PREFERENCE WEIGHT
CHASING
In this section, we design an online learning-based algorithm called
Preference Weight Chasing (PWC) to solve the O-PWE problem.
Figure 3 illustrates the framework of the PWC algorithm.
First, we propose our Model Selector ùîñbased on the Following
the Perturbed Leader (FPL) algorithm [ 24]. Algorithm 1 shows the
pseudo-code. Given a model set Œì, at time slot ùë°,ùîñfirst samples
a possible accuracy ùëùùë°ùõæfrom an exponential distribution for each
modelùõæ(Lines 1‚àí2). Here, the purpose of our construction of the ex-
ponential distribution as‚àöÔ∏Å
logùëõ/ùêøùëáùëí‚àí‚àö
logùëõ/ùêøùëáùë•is to subsequently
reach vanishing regret, which we will explain more in Section 5. ùîñ
then selects the model ùõæ‚àówith the maximum cumulative accuracy
as the target model (Line 3).
Algorithm 1: Model Selector ùîñ
Input: Model set Œì, time slotùë°.
Output: Target model ùõæ‚àó.
1forùõæ‚ààŒìdo
2 Sampleùëùùë°ùõæ‚â•0from distribution
ùëëùúá(ùë•)=‚àöÔ∏Å
log|Œì|/ùêøùëáùëí‚àí‚àö
log|Œì|/ùêøùëáùë•;
3Output the target model ùõæ‚àówith maximum cumulative
accuracy√çùë°‚àí1
ùëó=1ùëéùëêùëêùëó
ùõæ+ùëùùë°ùõæ;
The Chasing Oracle ùîíoutputs preference weights based on the
target model. Algorithm 2 shows the corresponding pseudo-code.
Given the target model ùõæ‚àó, initial time slot to start chasing ùë°ùëñùëõùëñùë°,
the corresponding state ùë†ùë°ùëñùëõùëñùë°, and final time slot ùë°ùëì ùëñùëõùëéùëô that is the
last time slot for which ùõæ‚àóis the target model, for time slot ùë°(Line
1),ùõæ‚àófirst outputs the preference weights ùëäùë°
ùõæ‚àó(Line 2), which we
 
866Online Preference Weight Estimation Algorithm with Vanishing Regret for Car-Hailing in Road Network KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Model  Set Œì
ùõæ!
ùõæ"
ùõæ#
ùõæ|%|¬∑¬∑¬∑
Model Selector ùîñSample FromDistributionùëù!"=log |Œì|/LTùëí‚àílog |#|/LT$
Cumulative acc
CurrentacccalculationùëéùëêùëêùëÇ!,ùõæ=‚àë1(ùëü"#!,ùëü"!,ùúÉ)|%!|"&'|ùëÇ!|ùõæ‚àó'(!	‚Üíùõæ‚àó'Chasing Process
ùõæ‚àó"=ùõæ‚àó"#$	
NoChasing
YesContinueCumulative acc
InChasing?NoYes
Continue Chasing
ùëü&'‚àó"‚ÜêùëÜùëÉùëú&",ùëä*'‚àó"
TargetModelùú∏‚àóùíïTime Sequence
Time Decay+Shortest Path
ShortestPath Algorithm1234567ùëä!"=$ùëé"ùëä"!"#!$%
Time Decay +Shortest Path
Figure 3: The framework of PWC algorithm
assign toùëäùë°(Line 3). We then calculate ÀÜùëäùë°using the time-decay
functionùëáùê∑(¬∑)by Definition 7 (Line 4). For all orders within ùëÇùë°,
we obtain the corresponding routes using ùëÜùëÉ(¬∑)(Lines 5‚àí6) and
calculate the accuracy ùëéùëêùëêùë°(Line 7). Similarly, we calculate ÀÜùëäùë°
ùõæ‚àóand
the accuracy of the target model ùõæ‚àóat time slotùë°(Lines 8‚àí11). The
above calculation is repeated until the target model changes.
Algorithm 2: Chasing Oracle ùîí
Input: Target model ùõæ‚àó, initial time slot ùë°ùëñùëõùëñùë°, final time slot
ùë°ùëì ùëñùëõùëéùëô , initial state ùë†ùë°ùëñùëõùëñùë°.
Output: Preference weights and accuracy sequence.
1forùë°‚Üêùë°ùëñùëõùëñùë°toùë°ùëì ùëñùëõùëéùëô do
2 Target model ùõæ‚àóoutputsùëäùë°
ùõæ‚àó;
3 Update the preference weight ùëäùë°=ùëäùë°
ùõæ‚àó;
4 Calculate ÀÜùëäùë°usingùëáùê∑(Wùë°,ùëäùë°);
5 forùëúùë°
ùëñ‚ààùëÇùë°do
6 Obtain the route ùëüùë°
ùëñfor orderùëúùë°
ùëñusingùëÜùëÉ(ùëúùë°
ùëñ,ÀÜùëäùë°);
7 Calculate accuracy ùëéùëêùëêùë°;
8 Calculate ÀÜùëäùë°
ùõæ‚àóusingùëáùê∑(Wùë°
ùõæ‚àó,ùëäùë°
ùõæ‚àó);
9 forùëúùë°
ùëñ‚ààùëÇùë°do
10 Obtain the route ùëüùë°
ùëñùõæ‚àófor orderùëúùë°
ùëñusingùëÜùëÉ(ùëúùë°
ùëñ,ÀÜùëäùë°
ùõæ‚àó);
11 Calculate accuracy ùëéùëêùëêùë°
ùõæ‚àó;
Algorithm 3 shows pseudo-code of the Preference Weights Chas-
ing algorithm. We refer to the main model of our PWC algorithm as
the ensemble model. At time slot ùë°(Line 1), we first call the model
selector ùîñto choose a target model ùõæ‚àóùë°(Line 2). If the target model
atùë°is different from that at ùë°‚àí1, the chasing oracle ùîíis invokedwithùõæ‚àóùë°, thus obtaining the preference weights ùëäùë°and accuracy
ùëéùëêùëêùë°of the ensemble model (Lines 3‚àí5). Otherwise, we continue to
execute the previous ùîíto getùëäùë°andùëéùëêùëêùë°(Lines 6‚àí7). Simultane-
ously, PWC algorithm needs to obtain the preference weights and
accuracy of each base model (Lines 8‚àí11). Finally, PWC algorithm
updates the states of the ensemble and base models (Line 12).
Algorithm 3: Preference Weights Chasing Algorithm
Input: Order sequenceO, model set Œì, model selector ùîñ,
chasing oracle ùîí, initial state ùë†1.
Output: Preference weights and accuracy sequence.
1forùë°‚Üê1toùëádo
2 Invoke ùîñto select a target model ùõæ‚àóùë°;
3 ifùë°‚â•2&ùõæ‚àóùë°‚â†ùõæ‚àóùë°‚àí1then
4 Invoke ùîíwith target model ùõæ‚àóùë°;
5 Get preference weights ùëäùë°and accuracy ùëéùëêùëêùë°;
6 else
7 Continue the existing run of ùîí, thus obtaining
preference weights ùëäùë°and accuracy ùëéùëêùëêùë°;
8 foreachùõæ‚ààŒìdo
9 forùëúùë°
ùëñ‚ààùëÇùë°do
10 Obtain route ùëüùë°
ùëñùõæfor orderùëúùë°
ùëñusingùëÜùëÉ(ùëúùë°
ùëñ,ÀÜùëäùë°ùõæ);
11 Calculate accuracy ùëéùëêùëêùë°ùõæ;
12 Update states of the ensemble and base models;
5 THEORETICAL GUARANTEES
In this section, we give the proof that the proposed algorithm PWC
can achieve vanishing regret.
 
867KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yucen Gao et al.
5.1 Online Learning with Switching Cost (OLSC)
In an online learning problem, one decision maker should make a
sequence of decisions without knowledge of the future. One version
of the problem is the case with ùëõexperts. At each time slot, the
decision maker selects one expert and then observes the cost ‚àà[0,1]
for each expert. Note that, for the Online Learning with Switching
Cost scenario, an extra cost termed switching cost is incurred every
time the decision maker switches from one expert to another [ 24].
Here, we first introduce Lemma 1 about OLSC.
Lemma 1 ([ 14]).Online Learning with switching cost with Œîas the
upper bound on the switching cost admits an online learning algorithm
with regretùëÇ(‚àöÔ∏Å
Œî¬∑ùëálogŒì), e.g., the Following The Perturbed Leader
(FPL) algorithm ùîÑ[24].
Here, we introduce the FPL algorithm as shown in Algorithm 4
and the corresponding Lemma 2.
Algorithm 4: FPL Algorithm ùîÑ
Input: Expert set Œì.
Output: Cumulative reward.
1forùë°‚Üê1toùëádo
2 forùõæ‚ààŒìdo
3 Sampleùëùùë°ùõæ‚â•0from distribution ùëëùúá(ùë•)=ùúñùëí‚àíùúñùë•;
4Choose expert with maximal√çùë°‚àí1
ùëó=1ùëüùëó
ùõæ+ùëùùë°ùõæ;
5Obtain the reward ùëüùë°of the chosen expert;
Lemma 2. FPL gives the following small regret relative to the best
expert fixed in-hindsight.
Regret‚â§ùúñ(max reward in hindsight)+ùëÇ(log|Œì|)
ùúñ(6)
Since the reward each time slot is ‚àà[0,1]andŒîis the upper
bound on the switching cost, max reward in hindsight ‚â§(1+Œî)ùëá.
Hence, when ùúñ=‚àöÔ∏É
log|Œì|
(1+Œî)ùëá,
ùëÖùëíùëîùëüùëíùë°‚â§‚àöÔ∏Ñ
log|Œì|
(1+Œî)ùëá(1+Œî)ùëá+ùëÇ(‚àöÔ∏Å
(1+Œî)ùëálog|Œì|)
=‚àöÔ∏Å
(1+Œî)ùëálog|Œì|+ùëÇ(‚àöÔ∏Å
(1+Œî)ùëálog|Œì|)
Since Œîis usually greater than 1, FPL algorithm can achieve the
regretùëÇ(‚àöÔ∏Å
Œî¬∑ùëálogŒì)when we set ùúñ=‚àöÔ∏É
log|Œì|
(1+Œî)ùëá.
5.2 Chasing Regret Analysis
We call the process that occurs in a chasing oracle ùîí, i.e., when the
target model is unchanged, the chasing procedure, and thus define
the chasing regret [14].
Definition 9 (Chasing Regret). The chasing regret ùúéis defined
to describe the regret generated in the chasing procedure, as shown in
Equation (7).
ùúé‚âúùë°ùëì ùëñùëõùëéùëô‚àëÔ∏Å
ùë°=ùë°ùëñùëõùëñùë°ùëéùëêùëêùë°
ùõæ‚àíùë°ùëì ùëñùëõùëéùëô‚àëÔ∏Å
ùë°=ùë°ùëñùëõùëñùë°ùëéùëêùëêùë°(7)
We then claim Theorem 1 and give the corresponding proof.Theorem 1. The chasing regret generated by the chasing Oracle
ùîícorresponding to the O-PWE problem is ùëÇ(ùêø).
Proof. According to the definition of state ùë†for the Dd-MDP,
we can find that after chasing ùêøtime-steps as Algorithm 2, the state
(preference weight sequence and order set sequence) of ensemble
model will be completely consistent with that of target model ùõæ‚àó.
Therefore, the chasing regret of ùîíis
ùúé=ùë°ùëì ùëñùëõùëéùëô‚àëÔ∏Å
ùë°=ùë°ùëñùëõùëñùë°ùëéùëêùëêùë°
ùõæ‚àó‚àíùë°ùëì ùëñùëõùëéùëô‚àëÔ∏Å
ùë°=ùë°ùëñùëõùëñùë°ùëéùëêùëêùë°=ùë°ùëñùëõùëñùë°+ùêø‚àëÔ∏Å
ùë°=ùë°ùëñùëõùëñùë°(ùëéùëêùëêùë°
ùõæ‚àó‚àíùëéùëêùëêùë°). (8)
Asùëéùëêùëêùë°‚àà[0,1],ùëéùëêùëêùë°
ùõæ‚àó‚àíùëéùëêùëêùë°‚àà[0,1]. Hence, the chasing regret
ofùîíisùëÇ(ùêø). ‚ñ°
5.3 Reduction to Analysis of OLSC Algorithm
When the chasing regret is verified to be sublinear, we can modify
FPL algorithm to our proposed model selector ùîñso as to solve the
stateful online learning problem with the help of the solution of the
OLSC problem. The key design idea is to map the chasing regret to
the switching cost by our porposed chasing oracle ùîí.
We first recall the regret of the OLSC problem.
Regret =max
ùõæ‚ààŒìùëá‚àëÔ∏Å
ùë°=1ùëéùëêùëêùë°
ùõæ‚àí(ùëá‚àëÔ∏Å
ùë°=1ùëéùëêùëêùë°
ùõæùë°‚àíŒî¬∑ùëá‚àëÔ∏Å
ùë°=21ùõæùë°‚â†ùõæùë°‚àí1) (9)
When our algorithm satisfies the following conditions, we can
obtain the Thorem 2.
‚Ä¢the expert set of ùîÑis identified with the model set Œìin the
O-PWE problem;
‚Ä¢the number of steps of ùîÑequals to that in the O-PWE prob-
lem, denoted by ùëá;
‚Ä¢the switching cost of ùîÑis set to Œî=ùúé.
Theorem 2. The regret of PWC with a chasing oracle of chasing
regretùúéfor the O-PWE problem is ùëÇ(‚àöÔ∏Å
ùúéùëálogŒì).
Proof. We split the ùëátime slots into episodes {1,2,¬∑¬∑¬∑}. Each
episodeùúÉrepresents a maximal contiguous time slot sequence
during which ùîÑkeeps the model ùõæùúÉunchanged. Assuming that ùë°ùúÉ
andùë°‚Ä≤
ùúÉdenote the first and last time slot of episode ùúÉrespectively,
PWC follows the sequential actions generated by ùîíduring[ùë°ùúÉ,ùë°‚Ä≤
ùúÉ]
and the chasing regret of ùîíis upper bounded by ùúé=Œî. The chasing
regret follows that
ùë°‚Ä≤
ùúÉ‚àëÔ∏Å
ùë°=ùë°ùúÉùëéùëêùëêùë°
ùõæùúÉ‚àíùë°‚Ä≤
ùúÉ‚àëÔ∏Å
ùë°=ùë°ùúÉùëéùëêùëêùë°‚â§Œî.
Therefore, for each model ùõæ‚ààŒì, we have
ùëá‚àëÔ∏Å
ùë°=1ùëéùëêùëêùë°
ùõæ‚àíùëá‚àëÔ∏Å
ùë°=1ùëéùëêùëêùë°
‚â§ùëá‚àëÔ∏Å
ùë°=1ùëéùëêùëêùë°
ùõæ‚àí‚àëÔ∏Å
ùúÉ(ùë°‚Ä≤
ùúÉ‚àëÔ∏Å
ùë°=ùë°ùúÉùëéùëêùëêùë°
ùõæùúÉ‚àíŒî)
=ùëá‚àëÔ∏Å
ùë°=1ùëéùëêùëêùë°
ùõæ‚àí(ùëá‚àëÔ∏Å
ùë°=1ùëéùëêùëêùë°
ùõæùë°‚àíŒî¬∑ùëá‚àëÔ∏Å
ùë°=21ùõæùë°‚â†ùõæùë°‚àí1)
 
868Online Preference Weight Estimation Algorithm with Vanishing Regret for Car-Hailing in Road Network KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
PWC
POWER-D
POWER-S
ConSTGAT
LengthPWC
POWER-D
POWER-S
ConSTGAT
Length
70
60
50
40
30
20
10
0
(a) Beijing
PWC
POWER-D
POWER-S
ConSTGAT
LengthPWC
POWER-D
POWER-S
ConSTGAT
Length
50
40
30
20
10
0 (b) Shanghai
PWC
POWER-D
POWER-S
ConSTGAT
LengthPWC
POWER-D
POWER-S
ConSTGAT
Length
60
50
40
30
20
10
0 (c) Qingdao
Figure 4: Accuracy comparison: The color block represents the cumulative accuracy of the
method at the vertical axis minus that of the method at to the horizontal axis.
3691215182124
T1234567Day
‚àí4‚àí3‚àí2‚àí10123Figure 5: The accuracy loss of
PWC (Beijing) (%)
By Lemma 1, the regret is at most
ùëÇ(‚àöÔ∏Å
Œî¬∑ùëálog|Œì|)=ùëÇ(‚àöÔ∏Å
ùúé¬∑ùëálog|Œì|).‚ñ°
5.4 Regret of PWC for O-PWE Problem
Since the chasing regret of our chasing oracle ùîíisùëÇ(ùêø), we set
ùúñ=‚àöÔ∏Å
log|Œì|(1+ùêø)ùëáaccording to the deduction in Section 5.1, thus
obtaining the exp. distribution ùëëùúá(ùë•)=‚àöÔ∏Å
log|Œì|/ùêøùëáùëí‚àí‚àö
log|Œì|/ùêøùëáùë•
and our model selector ùîñ. We recall the O-PWE problem and the
PWC algorithm. Given the model set Œì, the model selector ùîñ, the
chasing oracle ùîí, PWC outputs preference weights and obtains the
accuracy at each time slot. Combining Theorem 1 and Theorem 2,
we can obtain Theorem 3.
Theorem 3. The regret of PWC with model selector ùîñand chasing
oracleùîífor O-PWE problem is ùëÇ(‚àöÔ∏Å
ùêøùëálog|Œì|).
Becauseùêøis taken based on specific scenarios, but must be much
smaller than‚àö
ùëá, the regret is sublinear in terms of ùëá. That is to
say, PWC can achieve vanishing regret for the O-PWE problem.
6 EXPERIMENTS
6.1 Datasets
We use the Beijing, Shanghai and Qingdao road network from
Didi, a carpooling service provider, because they have different
road network structures. We set each time slot to one hour and
randomly select samples from each time slot of the historical orders.
The attributes of each sample include the timestamp, staring point,
ending point, and actual route.
Table 1: Statistics of the Datasets
Dataset #Edges #Nodes Time Range
Beijing 2,575,216 1,119,143 04/16/2023-04/22/2023
Shanghai 2,840,477 1,225,903 04/16/2023-04/22/2023
Qingdao 2,135,189 821,661 04/16/2023-04/22/2023
Table 1 shows the statistics of different datasets. Figure 6 shows
the difference in the road network structure of different cities (labels
on maps are marked in Chinese). Beijing has a relatively more
regular road network structure as shown in Figure 6(a), while road
network structures of Shanghai and Qingdao are freer as shown in
Figure 6(b) and (c).
Beijing(a) Square Grid Road Network(c)FreestyleRoad Network(b) Circular Radial Road NetworkQingdaoShanghaiFigure 6: Road network structure of different cities
6.2 Baseline Methods
Because preference weight estimation is not yet well-studied issues,
we adopt four baseline methods used in the industry to our scenario.
We present their core ideas here.
Length Weight: Because the length of the roads rarely changes,
using length weight as preference weight can be considered essen-
tially static over ùëátime slots.
ConSTGAT: We use the road time weight prediction model
ConSTGAT to generate the time weights for different time slots [ 15].
Unlike length weights, time weights are changeable across time
slots, which are influenced by a variety of factors such as travel
demand and weather.
POWER-S: A deep learning method called POWER is designed
by Didi based on DeepFM [ 20], which is easy to deploy with effec-
tiveness and efficiency. We use data from the last 3weeks to get
the static preference weight.
POWER-D: Unlike the static preference weight, the dynamic
preference weight has a corresponding preference weight for each
hour of a week.
6.3 Performance Analysis
We denote the number of orders sampled in each time slot as ùëÅ.
Figure 4 shows the difference between PWC and its base models
in terms of cumulative accuracy for the online order sequences
sampled in the three cities with ùëÅ=20,ùëá=168. It can be seen that
the PWC algorithm achieves the best cumulative accuracy in all
three cities. Meanwhile, The lead of the PWC algorithm compared
to the base models varies relatively widely across cities, which
show that the performance of the preference weight estimation
methods is affected by different attributes such as the structure of
 
869KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yucen Gao et al.
1224364860728496108120132144156168
T020406080AccLength
ConSTGAT
POWER-S
POWER-D
PWC
(a) Front view
1224364860728496108120132144156168
TBeijingShanghaiQingdao
City020406080
AccLength
ConSTGAT
POWER-S
POWER-D
PWC (b) 3-D view
Figure 7: Experiment Results for PWC on different online
order sequences: 3-dimensional view for the number of time
slotsùëá, city versus cumulative accuracy: (a) Front view: A
straight line formed by points of the same color reflects the
change in cumulative accuracy of each method in a city with
different values of ùëá. Asùëágrows, the relative performance
of the PWC algorithm gradually improves. (b) 3-D view: The
PWC algorithm performs better when ùëáis relatively large,
while the POWER-S and POWER-D methods perform better
whenùëáis relatively small.
the road network in different cities. Besides, the performance of
using length and time weights directly as preference weights is
significantly weaker than that of the remaining methods, which
shows that targeting user preferences is not exactly equivalent
to travel time or distance. However, based on the comparison of
ConSTGAT and length weights, it can be seen that users attach
more importance to travel time.
We also conducted experiments in Beijing for different values of
ùëá. In order to compare the performance of the PWC algorithm with
that of the best method fixed in-hindsight, we define the accuracy
loss as shown in Equation (10):
Accuracy loss =Acc of PWC‚àímax Acc ofùõæ‚ààŒì
max Acc ofùõæ‚ààŒì(10)
Figure 5 shows the accuracy loss for different values of ùëá, where
positive values represent that the PWC algorithm outperforms
the best model among the baseline methods, and negative values
represent that the performance of the PWC algorithm is weaker
than the best model among the baseline methods. Since each time
slot corresponds to one hour, the total time corresponding to each
square in the heat map is (Day‚àí1)‚àó24+ùëá. The average accuracy loss
for these 56instances is 1.28%, which represents the PWC algorithm
has the best average performance. Note that when time is 105, the
accuracy loss takes the maximum value of 2.71%. And when time
is15, the accuracy loss achieves the minimum value of ‚àí3.29%.
Combined with the trend of the accuracy loss in the heat map,
PWC achieves the best performance when time is large enough,
which is consistent with our theoretical analysis in Section 5. Note
that tiny enhancements in industrial applications have tremendous
value [ 9,36]. Based on the annual report from carpooling service
providers, the average amount of daily orders can reach up to 2.5
million. This means that small improvements in accuracy metric can
lead to significant corporate word-of-mouth and financial benefits.Figure 7 shows the cumulative accuracy for different values of ùëá
and cities. The results show that the PWC algorithm achieves the
best cumulative accuracy in most cases and there is a significant
difference in the absolute values of the cumulative accuracy for
different cities. Figure 7a shows how the model performance varies
with the growth of ùëá. Figure 7b gives the full 3d view. From this, it
can be seen that different base models have their own advantages
in different scenarios, and PWC can synthesize the advantages of
each base model to better cope with future scenarios and achieve
good performance in terms of cumulative accuracy.
Sensitivity to ùëÅ.To verify the stability of PWC, we change
the number of orders sampled from each time slot for sensitivity
analysis. Table 2 shows the experimental results. It can be seen that
the POWER-D‚Äôs performance is best when the number of sampled
orders is small, and when the number of sampled orders increases,
the performance advantage of PWC gradually expands from 0.1
for15orders to 0.25for20orders. This demonstrates that PWC is
suitable for scenarios with large-scale data, which is suitable for the
practical application needs of the car-hailing service providers. In
addition, the results show that PWC can strike a balance between
performance and efficiency using sampling methods.
Table 2: Accuracy w.r.t. Order Number/Time Slot (Beijing)
ModelùëÅ10 15 20
Length 14.00 14.35 13.60
ConSTGAT 69.85 70.45 70.65
POWER-S 81.20 80.75 81.15
POWER-D 82.10 82.17 82.50
PWC 81.40 82.27 83.75
7 CONCLUSION
In this paper, we formulate the Online Preference Weight Estima-
tion (O-PWE) problem with the goal of maximizing the cumulative
accuracy of the route planning task for the car-hailing service.
Solving the O-PWE problem helps to recommend routes to users
that match their preferences, which leads to more users and in-
creased platform revenue. However, since the users‚Äô preference
changes over time and future data is uncertain, it is difficult to
achieve good performance with existing models. Moreover, exist-
ing models cannot give a theoretical guarantee. Hence, inspired by
the online learning algorithm, we propose a online learning-based
algorithm called Preference Weight Chasing (PWC) to provide the
great theoretical guarantee, vanishing regret. PWC consists of a
model selector ùîñand a chasing oracle ùîí. We use four baseline
methods as PWE model set to execute experiments on real-world
datasets. The results show the superiority of PWC.
8 ACKNOWLEDGE
This work was supported by the National Natural Science Founda-
tion of China [U23A20309, 62272302, 62172276, 62372296, 62302273];
Shanghai Municipal Science and Technology Major Project [2021-
SHZDZX0102]; Science Fund Program of Shandong Province for
Distinguished Oversea Young Scholars [2023HWYQ-006]; and CCF-
DiDi GAIA Collaborative Research Funds [202307].
 
870Online Preference Weight Estimation Algorithm with Vanishing Regret for Car-Hailing in Road Network KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
REFERENCES
[1]Hassene Aissi, Cristina Bazgan, and Daniel Vanderpooten. 2009. Min-max and
min-max regret versions of combinatorial optimization problems: A survey. Eu-
ropean Journal of Operational Research 197, 2 (2009), 427‚Äì438.
[2]Omer Amar, Ilana Sarfati, and Kobi Cohen. 2023. An Online Learning Approach
to Shortest Path and Backpressure Routing in Wireless Networks. IEEE Access 11
(2023), 57253‚Äì57267.
[3]Krystian Birr, Kazimierz Jamroz, and Wojciech Kustra. 2014. Travel Time of
Public Transport Vehicles Estimation. Transportation Research Procedia 3 (2014),
359‚Äì365.
[4]Marta Borowska-Stefa≈Ñska, Micha≈Ç Kowalski, Filip Turobo≈õ, and Szymon
Wi≈õniewski. 2022. On determining the weight of edges in map-representing
graphs-applications of heuristic methods in planning escape routes. Journal of
Traffic and Transportation Engineering 9, 6 (2022), 1027‚Äì1043.
[5]Guochen Cai, Kyungmi Lee, and Ickjai Lee. 2018. Itinerary recommender system
with semantic trajectory pattern mining from geo-tagged photos. Expert Systems
with Applications 94 (2018), 32‚Äì40.
[6]Kechao Cai, Xutong Liu, Yu-Zhen Janice Chen, and John C. S. Lui. 2018. An
Online Learning Approach to Network Application Optimization with Guarantee.
InIEEE Conference on Computer Communications (INFOCOM). 2006‚Äì2014.
[7]Shi-Yong Chen, Yang Yu, Qing Da, Jun Tan, Hai-Kuan Huang, and Hai-Hong
Tang. 2018. Stabilizing Reinforcement Learning in Dynamic Environment with
Application to Online Recommendation. In ACM SIGKDD International Conference
on Knowledge Discovery and Data Mining (SIGKDD). 1187‚Äì1196.
[8]Yi-Cheng Chen, Lin Hui, and Tipajin Thaipisutikul. 2021. A collaborative filtering
recommendation system with dynamic time decay. The Journal of Supercomputing
77, 1 (2021), 244‚Äì262.
[9]Heng-Tze Cheng, Levent Koc, Jeremiah Harmsen, Tal Shaked, Tushar Chandra,
Hrishi Aradhye, Glen Anderson, Greg Corrado, Wei Chai, Mustafa Ispir, Rohan
Anil, Zakaria Haque, Lichan Hong, Vihan Jain, Xiaobing Liu, and Hemal Shah.
2016. Wide & Deep Learning for Recommender Systems. In Workshop on Deep
Learning for Recommender Systems (DLRS@RecSys). 7‚Äì10.
[10] Razvan-Gabriel Cirstea, Bin Yang, Chenjuan Guo, Tung Kieu, and Shirui Pan.
2022. Towards Spatio- Temporal Aware Traffic Time Series Forecasting. In IEEE
International Conference on Data Engineering (ICDE). 2900‚Äì2913.
[11] Ofer Dekel and Elad Hazan. 2013. Better Rates for Any Adversarial Deterministic
MDP. In International Conference on Machine Learning (ICML). 675‚Äì683.
[12] Austin Derrow-Pinion, Jennifer She, David Wong, Oliver Lange, Todd Hester,
Luis Perez, Marc Nunkesser, Seongjae Lee, Xueying Guo, Brett Wiltshire, Pe-
ter W. Battaglia, Vishal Gupta, Ang Li, Zhongwen Xu, Alvaro Sanchez-Gonzalez,
Yujia Li, and Petar Velickovic. 2021. ETA Prediction with Graph Neural Net-
works in Google Maps. In International Conference on Information and Knowledge
Management (CIKM). 3767‚Äì3776.
[13] Edsger W. Dijkstra. 1959. A note on two problems in connexion with graphs.
Numer. Math. 1 (1959), 269‚Äì271.
[14] Yuval Emek, Ron Lavi, Rad Niazadeh, and Yangguang Shi. 2020. Stateful Posted
Pricing with Vanishing Regret via Dynamic Deterministic Markov Decision
Processes. In Advances in Neural Information Processing Systems (NeurIPS).
[15] Xiaomin Fang, Jizhou Huang, Fan Wang, Lingke Zeng, Haijin Liang, and Haifeng
Wang. 2020. ConSTGAT: Contextual Spatial-Temporal Graph Attention Net-
work for Travel Time Estimation at Baidu Maps. In ACM SIGKDD Conference on
Knowledge Discovery and Data Mining (SIGKDD). 2697‚Äì2705.
[16] Ziquan Fang, Yuntao Du, Xinjun Zhu, Danlei Hu, Lu Chen, Yunjun Gao, and
Christian S. Jensen. 2022. Spatio-Temporal Trajectory Similarity Learning in
Road Networks. In ACM SIGKDD Conference on Knowledge Discovery and Data
Mining (SIGKDD). 347‚Äì356.
[17] Jo√£o Gama, Indre Zliobaite, Albert Bifet, Mykola Pechenizkiy, and Abdelhamid
Bouchachia. 2014. A survey on concept drift adaptation. ACM Computer Survey
46, 4 (2014), 44:1‚Äì44:37.[18] Nandani Garg and Sayan Ranu. 2018. Route Recommendations for Idle Taxi
Drivers: Find Me the Shortest Route to a Customer!. In ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining (SIGKDD). 1425‚Äì1434.
[19] Dian Gong, Xuemei Zhao, and G√©rard G. Medioni. 2012. Robust Multiple Manifold
Structure Learning. In International Conference on Machine Learning (ICML).
[20] Huifeng Guo, Ruiming Tang, Yunming Ye, Zhenguo Li, and Xiuqiang He. 2017.
DeepFM: A Factorization-Machine based Neural Network for CTR Prediction. In
International Joint Conference on Artificial Intelligence (IJCAI). 1725‚Äì1731.
[21] Steven C. H. Hoi, Doyen Sahoo, Jing Lu, and Peilin Zhao. 2021. Online learning:
A comprehensive survey. Neurocomputing 459 (2021), 249‚Äì289.
[22] Jizhou Huang, Zhengjie Huang, Xiaomin Fang, Shikun Feng, Xuyi Chen, Jiaxiang
Liu, Haitao Yuan, and Haifeng Wang. 2022. DuETA: Traffic Congestion Propaga-
tion Pattern Modeling via Efficient Graph Learning for ETA Prediction at Baidu
Maps. In International Conference on Information and Knowledge Management
(CIKM). 3172‚Äì3181.
[23] Shinji Ito, Daisuke Hatano, Hanna Sumita, Akihiro Yabe, Takuro Fukunaga,
Naonori Kakimura, and Ken-ichi Kawarabayashi. 2017. Efficient Sublinear-Regret
Algorithms for Online Sparse Linear Regression with Limited Observation. In
Annual Conference on Neural Information Processing Systems (NeurIPS). 4099‚Äì
4108.
[24] Adam Tauman Kalai and Santosh S. Vempala. 2005. Efficient algorithms for online
decision problems. J. Comput. System Sci. 71, 3 (2005), 291‚Äì307.
[25] Ning Ma, Mustafa Ispir, Yuan Li, Yongpeng Yang, Zhe Chen, Derek Zhiyuan
Cheng, Lan Nie, and Kishor Barman. 2022. An Online Multi-task Learning
Framework for Google Feed Ads Auction Models. In ACM SIGKDD Conference
on Knowledge Discovery and Data Mining (SIGKDD). 3477‚Äì3485.
[26] Mojmir Mutny and Andreas Krause. 2021. No-regret Algorithms for Captur-
ing Events in Poisson Point Processes. In International Conference on Machine
Learning (ICML). 7894‚Äì7904.
[27] Paul Newson and John Krumm. 2009. Hidden Markov map matching through
noise and sparseness. In ACM SIGSPATIAL International Symposium on Advances
in Geographic Information Systems. 336‚Äì343.
[28] Longquan Tao, Jinli Cao, and Fei Liu. 2018. Dynamic feature weighting based on
user preference sensitivity for recommender systems. Knowledge Based Systems
149 (2018), 61‚Äì75.
[29] Mikhail B. Vialtsev and Mikhail M. Komarov. 2023. A study of the impact of
implementation of smart contracts in the sharing economy. In IEEE Conference
on Business Informatics (CBI). 1‚Äì8.
[30] Ulrike Von Luxburg. 2007. A tutorial on spectral clustering. Statistics and
Computing 17, 4 (2007), 395‚Äì416.
[31] Fei Wang and Changshui Zhang. 2008. Label Propagation through Linear Neigh-
borhoods. IEEE Transactions on Knowledge and Data Engineering (TKDE)) 20, 1
(2008), 55‚Äì67.
[32] Jia Wang, Shuhao Jiang, and Jincheng Ding. 2023. Online learning resource
recommendation method based on multi-similarity metric optimization under
the COVID-19 epidemic. Computer Communications 206 (2023), 152‚Äì159.
[33] Yuan Xu, Jiajie Xu, Jing Zhao, Kai Zheng, An Liu, Lei Zhao, and Xiaofang Zhou.
2022. MetaPTP: An Adaptive Meta-optimized Model for Personalized Spatial
Trajectory Prediction. In ACM SIGKDD Conference on Knowledge Discovery and
Data Mining (SIGKDD). 2151‚Äì2159.
[34] Zichuan Xu, Wenhao Ren, Weifa Liang, Wenzheng Xu, Qiufen Xia, Pan Zhou,
and Mingchu Li. 2022. Schedule or Wait: Age-Minimization for IoT Big Data
Processing in MEC via Online Learning. In IEEE International Conference on
Computer Communications (INFOCOM). 1809‚Äì1818.
[35] Tim Zeitz. 2022. Engineering Algorithms for Dynamic and Time-Dependent Route
Planning. Ph. D. Dissertation. Karlsruhe Institute of Technology, Germany.
[36] Zuowu Zheng, Changwang Zhang, Xiaofeng Gao, and Guihai Chen. 2022. HIEN:
Hierarchical Intention Embedding Network for Click-Through Rate Prediction. In
International ACM SIGIR Conference on Research and Development in Information
Retrieval (SIGIR). 322‚Äì331.
 
871