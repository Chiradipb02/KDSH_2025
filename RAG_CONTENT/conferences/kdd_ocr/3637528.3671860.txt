Flexible Graph Neural Diffusion with Latent Class Representation
Learning
Liangtian Wan
Huijin Han
Key Laboratory for Ubiquitous
Network and Service Software of
Liaoning Province, School of Software,
Dalian University of Technology
Dalian, China
wanliangtian@dlut.edu.cn
hanhuijin2022@163.comLu Sun
Department of Communication
Engineering, Institute of Information
Science Technology, Dalian Maritime
University
Dalian, China
sunlu@dlmu.edu.cnZixun Zhang
School of Science and Engineering,
The Chinese University of Hong Kong
Shenzhen, China
zixunzhang@link.cuhk.edu.cn
Zhaolong Ning
School of Communication and
Information Engineering, Chongqing
University of Posts and
Telecommunications
Chongqing, China
z.ning@ieee.orgXiaoran Yan‚àó
Research Center for Data Hub and
Security, Zhejiang Lab
Hangzhou, China
Xiaoran.a.yan@gmail.comFeng Xia
School of Computing Technologies,
RMIT University
Melbourne, Australia
f.xia@ieee.org
Abstract
In existing graph data, the connection relationships often exhibit
uniform weights, leading to the model aggregating neighboring
nodes with equal weights across various connection types. How-
ever, this uniform aggregation of diverse information diminishes
the discriminability of node representations, contributing signif-
icantly to the over-smoothing issue in models. In this paper, we
propose the Flexible Graph Neural Diffusion (FGND) model, incor-
porating latent class representation to address the misalignment
between graph topology and node features. In particular, we com-
bine latent class representation learning with the inherent graph
topology to reconstruct the diffusion matrix during the graph diffu-
sion process. We introduce the simmetric to quantify the degree of
mismatch between graph topology and node features. By flexibly
adjusting the dependency level on node features through the hyper-
parameter, we accommodate diverse adjacency relationships. The
effective filtering of noise in the topology also allows the model
to capture higher order information, significantly alleviating the
over-smoothing problem. Meanwhile, we model the graphical diffu-
sion process as a set of differential equations and employ advanced
partial differential equation tools to obtain more accurate solutions.
Empirical evaluations on five benchmarks reveal that our FGND
model outperforms existing popular GNN methods in terms of both
‚àóCorresponding author
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
¬©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671860overall performance and stability under data perturbations. Mean-
while, our model exhibits superior performance in comparison to
models tailored for heterogeneous graphs and those designed to
address oversmoothing issues.
CCS Concepts
‚Ä¢Computing methodologies ‚ÜíLearning latent representa-
tions; ‚Ä¢Theory of computation ‚ÜíGraph algorithms analysis;
‚Ä¢Information systems ‚ÜíSocial tagging .
Keywords
Graph learning; Graph convolution neural network; Latent class;
Representation learning; Denoising filters
ACM Reference Format:
Liangtian Wan, Huijin Han, Lu Sun, Zixun Zhang, Zhaolong Ning, Xiaoran
Yan, and Feng Xia. 2024. Flexible Graph Neural Diffusion with Latent Class
Representation Learning. In Proceedings of the 30th ACM SIGKDD Conference
on Knowledge Discovery and Data Mining (KDD ‚Äô24), August 25‚Äì29, 2024,
Barcelona, Spain. ACM, New York, NY, USA, 12 pages. https://doi.org/10.
1145/3637528.3671860
1 Introduction
Graphs, as a versatile data representation, find widespread applica-
tions in many web applications such as social networks, semantic
networks, web search, citation networks, and recommendation sys-
tems [ 21,27]. These web applications not only possess graph struc-
tures but also exhibit diverse individual attribute features. Graph
Neural Networks (GNNs) have emerged as a powerful framework
for handling data that not only includes node features but also en-
codes topological relationships among nodes, making them suitable
for a variety of real-world problems. Due to the sparsity of labeled
data points in graphs, semi-supervised learning on graphs has been
extensively studied for several decades [ 3,7,14,17,23,26,28]. In
 
2936
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Liangtian Wan et al.
this paper, we focus on addressing the semi-supervised learning
task of node classification on graphs.
(a)simandùõΩin Action: Experi-
ment on Pubmed Dataset
(b) Numerical Methods Impact:
Experiment on Cora Dataset
Figure 1: Exploring Model Performance Enhancements: sim
andùõΩ& Numerical Methods
Partial Differential Equations (PDEs) are invaluable mathemati-
cal tools widely applied in signal and image processing [ 18], com-
puter graphics [ 5], and machine learning [ 12,24,31]. Diffusion-
based GNNs have close ties with PDEs, as mainstream message-
passing paradigms can be modeled as differential equations. Recent
diffusion-based works [ 3,6,23] have demonstrated that tools from
PDEs can be employed to comprehend existing GNN architectures.
Experimental evidence indicates that modeling the information
propagation process as a diffusion process significantly enhances
the performance of the model compared to traditional spatial-
domain GNN methods. Building upon GRAND [ 3], GRAND++ [ 23]
incorporates a source term into the diffusion process to enhance
the model‚Äôs robustness. On the other hand, GREAD [ 6] further re-
fines the reaction-diffusion equation to improve model performance.
These diffusion-based models further enhance the model‚Äôs ability
to counteract over-smoothing. However, these improvements do
not alter the connectivity relationships in the graph topology at the
data level, still relying on the original node-to-node relationships.
In real-world data, graph edges often contain noise [ 13], and
there exist disparities between node features and graph structure
[4]. Noisy connections can degrade the representation of node
features after aggregating neighbor information. For instance, in
datasets like Amazon ‚ÄòComputers‚Äô and ‚ÄòPhoto‚Äô, the graph topology
is determined by co-occurrence relationships (products appearing
in the same user reviews or simultaneously appearing in purchase
histories) and user behaviors (user purchase and review activities).
In these topologies, co-occurrence relationships and user behaviors
can generate connection relationships that are irrelevant to product
recommendations themselves. Additionally, the connection weights
between different relationships should be distinct. However, in
actual datasets, these connection relationships are assigned uniform
weights. Excessive noise connections can lead to a decrease in
the discriminability of node hidden layer representations when
aggregating neighbor information. Simultaneously, it is a key factor
contributing to the occurrence of oversmoothing issues in the model.
Therefore, addressing the mismatch between node features and
graph structure characteristics for different real datasets and flexibly
handling the problem is crucial for improving model prediction
accuracy and combating oversmoothing.In this paper, we introduce the Flexible Graph Neural Diffu-
sion (FGND) model. We reconstruct the adjacency matrix used in
the graph diffusion process by considering both the hidden layer
representations of nodes and the original adjacency relationships.
A metric simthat quantifies the severity of the mismatch is in-
troduced and the relationship matrix between each node and its
neighbouring nodes is adaptively adjusted by the parameter ùõΩthat
allows the model to adapt to different datasets and task require-
ments by controlling its dependence on the similarity measure
during the information aggregation process. This refinement aims
to strike a better balance between graph topology and node feature
relationships, effectively filtering out noise in the graph‚Äôs adja-
cency relationships. The filtering of noise in graph adjacencies also
strengthens the model against transition smoothing when aggre-
gating higher-order information. Figure 1 provides an overview
of our investigation into model performance improvements, cov-
ering the utilization of simandùõΩ, along with the exploration of
various numerical methods in the context of graph diffusion. The
contributions of this paper can be summarized as follows:
‚Ä¢Unified Treatment for Graph Topology and Node Fea-
tures: We propose the FGND model to address the mismatch
between graph topology and node features, thereby im-
proving the model‚Äôs predictive accuracy in semi-supervised
node classification problems and its ability to counteract
over-smoothing. By incorporating latent class representa-
tion learning, we achieve a unified treatment of node features
and graph topology, offering a more effective solution to the
noise issues in graph topology structures.
‚Ä¢Enhancing Model Flexibility and Inter-Node Relation-
ship Reconstruction: The introduction of the simmetric
quantifies the severity of mismatch between graph topology
and node features, combined with the parameter ùõΩto pro-
vide the model with greater flexibility. Adjustments are made
flexibly to different inter-dataset relationships in real-world
datasets, facilitating a more effective and rational reconstruc-
tion of inter-node relationships.
‚Ä¢Exploration of Numerical Methods: We investigate the
application of high-precision, high-order numerical solving
methods, as well as the utilization of implicit methods with
enhanced stability for diffusion step sizes, in the process of
solving graph diffusion equations.
‚Ä¢Empirical Flexibility and Superior Performance: Empir-
ically, we demonstrate the flexibility of the proposed model,
allowing adaptation to different datasets by adjusting its
reliance on latent class representational learning. Our ex-
periments show that FGND consistently outperforms the
state of art baselines with a significant margin in semi-
supervised node classification problems. Simultaneously, our
model demonstrates superior performance in addressing is-
sues related to heterogeneous graph data and countering
over-smoothing problems.
The outline of this paper is presented as follows. In Section 2, we
provide a comprehensive review of the existing research on GNNs.
Section 3 systematically introduces our novel algorithm. Section
4 encompasses an analysis of the key parameter ùõΩ, which allows
flexible adjustment of our model to achieve the integration of node
 
2937Flexible Graph Neural Diffusion with Latent Class Representation Learning KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
features with graph topology across different datasets. Addition-
ally, it delves into the mitigation of oversmoothing, assessing the
effectiveness of the FGND model. We also compare our algorithm
with popular GNN models. Finally, we conclude with a discussion
and outline potential avenues for future research in Section 5.
2 Related Work
2.1 Spectral Domain GNNs
Spectral GNN [ 2] extends the concept of convolutional neural net-
works (CNNs) to non-Euclidean spaces through Fourier transform.
ChebyNet [ 7] simplifies the convolution process in graph convo-
lutions by incorporating convolution kernels into the convolution
theorem, eliminating the requirement for the Laplacian matrix
decomposition step. This simplification makes convolution only
dependent on polynomial functions of the Laplacian matrix, the
polynomial coefficient and its order, offering the potentiality for
practical spectral methods. GCN [ 14] builds upon ChebyNet by
further limiting the number of parameters and employing only
first-order approximations, thereby reducing the risk of model over-
smothong. GWNN [ 29] leverages the sparsity and localization prop-
erties of graph wavelets in the vertex domain, enhancing model per-
formance by replacing Fourier transform with wavelet transform.
Additionally, researchers such as Wan et al. [ 26], have explored
the use of wavelet transform as denoising filters. By leveraging
the inherent locality and sparsity of wavelets, they filter noise in
the graph‚Äôs topological structure, thereby improving model perfor-
mance. In recent years, the effectiveness of spectral domain graph
neural networks has shown some disparity compared to spatial do-
main GNNs, resulting in fewer model contributions in the spectral
domain.
2.2 Spatial Domain GNNs
In the realm of spatial domain methods, DCNN [ 1] takes the inspi-
ration from breadth-first traversal and aggregates the information
fromùëò-hop neighbors separately for each node. This aggregation
involves a parameter block, denoted as ùëä, corresponding to each
hop‚Äôs aggregated information. On the other hand, GraphSage [ 11]
focuses on addressing the challenge of aggregating information
from the local neighborhoods of nodes, offering a solution for im-
plementing GNN in large-scale graphs.
GAT [ 25] introduces attention mechanisms into the GNN model.
By stacking layers where nodes can attend to their neighborhoods‚Äô
features, it enables the implicit assignment of varying weights to
different nodes within a neighborhood. This is achieved without
the requirement for computationally expensive matrix operations
or prior knowledge of the graph structure.
Furthermore, MoNet [ 19] formulates a versatile spatial domain
framework by defining pseudo-coordinates denoted as ‚Äòu‚Äô and
weight functions ‚Äòw(u)‚Äô. This framework is designed for learning
in non-Euclidean domains, offering a solution beyond traditional
Euclidean spaces. Regarding Spatial Domain GNN, a significant re-
search direction is the development of GNNs based on diffusion. In
the diffusion based GNN subsection, we provide a detailed overview
of the latest research advancements in diffusion-based GNNs and
discuss the strengths and weaknesses in comparison to the model
proposed in our study.2.3 Diffusion Based GNNs
In the realm of graph diffusion-based techniques, GRAND [ 3] treats
GNN as a discretization of underlying PDE. It extends the heat dif-
fusion equation to graphs, employing PDE tools to solve differential
equations, thereby addressing issues within GNN. This approach
yields more stable and accurate model performance. GRAND++ [ 23]
builds upon the GRAND model by incorporating a source term into
the diffusion process, aimed at mitigating oversmoothing issues. On
the other hand, GREAD [ 6] enhances the reaction-diffusion layer
to improve model performance.
On the other hand, CAD-Net [ 17] introduces a novel aggregation
scheme, adaptively aggregating neighboring nodes while empha-
sizing the incorporation of intra-category node information and
attenuating attention towards inter-category nodes. However, the
classifier in CAD-Net, which is responsible for classifying neigh-
boring nodes, is not trained separately, which has difficulty for
accurately distinguishing intra-category nodes among neighbors.
Furthermore, it can be observed that the optimal ùõΩvalues for the
CAD-Net model do not vary significantly across different datasets.
This suggests that CAD-Net may overlook certain inter-class node
features in some datasets, indicating that these features might be
valuable for such datasets.
Our novel method amalgamates the strengths of both approaches
mentioned above. we introduce a novel inter-node relationship
based on node hidden layer representations. The introduction of the
parameterùõΩallows for the adjustment of the aggregation approach
of the model based on the sensitivity to the mixing of inter-category
and intra-category nodes, varying according to different datasets,
thereby obtaining a superior representation of node hidden layer
information. Furthermore, We view GNN as discretizations of un-
derlying PDE, employing advanced PDE tools to enhance stability
and accuracy in addressing issues posed by GNN.
2.4 Mitigating Oversmoothing in GNNs
GNN models suffer from significant performance degradation across
various graph learning tasks as the depth of GNNs increases. This
performance decline is widely attributed to the problem of over-
smoothing [ 16][20][4]. Intuitively, GNNs aggregate neighborhood
information to generate new node representations, ultimately using
these representations to differentiate between different nodes. With
increasing depth, node representations become indistinguishable,
leading to oversmoothing. This is because a large amount of noise
exists in the adjacency relationships, which propagates between
layers during the aggregation of neighborhood information. Sev-
eral algorithms have been proposed to alleviate oversmoothing in
GNNs, including skip connections and dilated convolutions [ 15],
JumpKnowledge [ 30], DropEdge [ 22], PairNorm [ 32], GRAND [ 3],
GRAND++ [23], and wave equation motivated GNNs [9].
3 Method
In this section, we present our approach called FGND for semi-
supervised node classification tasks aiming to enhance the model‚Äôs
performance in addressing oversmoothing and the mismatch be-
tween graph topology and node features. On this basis, due to
the effective filtering of noisy connections in the graph topology,
 
2938KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Liangtian Wan et al.
we find that the performance of the FGND model for the over-
smoothing problem is also effectively improved.
3.1 Problem Formulation & Preliminaries
In the problem of semi-supervised node classification, let G=
(V,E)be a graph, where Vrepresents the set of nodes and E
represents the set of edges. Each node ùë£ùëñ‚ààV corresponds to a
data point, and the edges ùëíùëñùëó‚ààEencode the pairwise relationships
between nodes. Xrepresents the node features of the graph G, and
Yrepresents the categories of nodes. The objective of the problem
is to assign a category label Yùëñto each node ùë£ùëñ‚ààV, where Yùëñis
drawn from the category set C.
The definition of the diffusion process from the application of
Fourier‚Äôs law of heat conduction, where the heat flux, denoted as
‚Ñé=‚àíùëî‚àáùë•[3] , is directly proportional to the temperature gradient
‚àáùë•. In this context, ùëîrepresents the diffusivity characterizing the
thermal conductance properties of the domain Œ©. The continuity
condition, expressed asùúïùë•
ùúïùë°=‚àídiv(‚Ñé), implying that temperature
variations solely arise from heat flux as measured by the divergence
operator, gives rise to a PDE commonly known as the diffusion
equation for heat:
ùúïx(ùë°)
ùúïùë°=div[g(x(ùë°),ùë°)‚àáx(ùë°)]. (1)
Similarly, in the context of the graph diffusion equation, we
define the equation as follows, where the change in the graph
signal is solely influenced by the divergence of the signal flowing
from each node to its neighbors:
ùúïx(ùë°)
ùúïùë°=div[G(x(ùë°),ùë°)‚àáx(ùë°)], (2)
where G(x(ùë°),ùë°)=diag(ùëé(ùë•ùëñ(ùë°),ùë•ùëó(ùë°),ùë°))represents an ùëí√óùëídiag-
onal matrix. ùëéis a function determining the relationships between
nodes, which is used to ascertain the magnitudes of the weights for
each edge. Let ùí≥denote the features associated with the edges. The
divergence(div(ùí≥))ùëñis defined on the graph as the summation of
information from all neighboring nodes of node ùëñ.‚àáx(ùë°)represents
the difference between the graph signal of its neighbors ùëóand the
diffusion node ùëñ(i.e.,ùë•ùëó‚àíùë•ùëñ). By substituting the expressions for
‚àáanddiv, we obtain the following result
ùúï
ùúïùë°x(ùë°)=(A(x(ùë°))‚àíI)x(ùë°)=A(x(ùë°))x(ùë°), (3)
where Ais the adjacency matrix of the graph. With the initial state
set as X(0)=ùúô(Xin), we can then define the differential equation
on the graph:
X(ùëá)=X(0)+‚à´ùëá
0ùúïX(ùë°)
ùúïùë°ùëëùë°, X(0)=ùúô(Xin), (4)
whereùúïX(ùë°)
ùúïùë°is given by the graph diffusion equation (2).
3.2 Framework of FGND
The framework of our model is depicted in Figure 2. Firstly, we
reconstructed the relationships between nodes based on the graph
topology and latent class representation. The simis designed as a
metric to measure the degree of mismatch severity. Subsequently,
we combine the parameter ùõΩto reconstruct the graph by diffu-
sion. PDE tools are introduced in the diffusion process, and the
Figure 2: Framework of FGND
advantages and disadvantages of different numerical discretisation
methods are explored in the graph diffusion process. The algorithm
of pseudocode is shown in Algorithm 1.
Algorithm 1 FGND
Input: GraphG=(V,E); Adjacency matrix ùë®; Node features
matrices Xin;Iùëñ=X(ùëá)ùëñandIùëó=X(ùëá)ùëñforùëó‚ààN(ùëñ), where
N(ùëñ)denotes the neighborhood of node ùëñ;ùúîùëñùëóis a learnable
parameter initialized to one;
Output: Prediction result of node ùë•(denoted as Y)
1:Get embedding X(0)=ùúô(Xin)
2:Using PDE tools to Solving differential equation, X(ùëá)=
X(0)+‚à´ùëá
0ùúïX(ùë°)
ùúïùë°ùëëùë°,X(0)=ùúô(Xin),whileùúï
ùúïùë°x(ùë°)=(A(x(ùë°))‚àí
I)x(ùë°)=A(x(ùë°))x(ùë°)
3:Recalculate the graph diffusion matrix ùê∑,ùê∑ùëñùëó =
softmaxùëó‚ààN(ùëñ)
ùúîùëñùëóIùëá
ùëñIùëó
4:Exploit PDE tools to solving differential equation 6 based on ùê∑
5:Utilize decoder to obtain the node classification Y
6:Return Y
The central focus of our work is on resolving the mismatch be-
tween graph topology and node features, which is especially critical
in datasets like pubmed, Amazon‚Äôs ‚ÄòPhoto‚Äô and ‚ÄòComputers‚Äô. Our
model outperforms GRAND by introducing effective solutions to
handle this significant issue. The specific solution can be summa-
rized as follows.
‚Ä¢Node Relationship Recomputation: To enhance the rep-
resentation of relationships between nodes, we employ the
learned representations from node hidden layers. The tran-
sition probability from ùë£ùëñtoùë£ùëóis redefined using a softmax
function based on the inner product of node representations.
‚Ä¢Quantifying Mismatch Severity sim:We introduce the
simmetric to quantify the severity of the mismatch between
graph topology and node features. This metric is positively
correlated with the proportion of intra-class connections in
the neighbourhood of a node.
‚Ä¢Parameter ùõΩfor Adaptive Adjustment: The introduction
of the parameter ùõΩenables an adaptive adjustment of the re-
lationship matrix between each node and its neighbors. This
adjustment, guided by the calculated sim, aims to optimize
node representations during the solution of the differential
equation.
 
2939Flexible Graph Neural Diffusion with Latent Class Representation Learning KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
The detail of FGND is introduced in the remaining of Section 3.
3.3 Graph Diffusion Matrix Reconstruction
Based on Latent Class Representation
Currently, many models are dedicated to addressing the issue of
incorrect guidance in aggregating information caused by inter-
category connections within adjacency relationships [ 17] [8]. In
order to incorporate node feature information into the diffusion
process and address the issue of partial inconsistency between
node features and adjacency relationships in some real datasets, we
utilize latent class representation along with the graph‚Äôs inherent
topological structure. Additionally, we make use of a learnable
parameterùúîùëñùëóto recompute the graph diffusion matrix.
LetIùëñ=X(ùëá)ùëñandIùëó=X(ùëá)ùëóforùëó‚ààN(ùëñ), whereN(ùëñ)de-
notes the neighborhood of node ùëñ. Our objective in this study is
to encourage the walker to transition from node ùë£ùëñtoùë£ùëówhen the
probabilities IùëñandIùëóare more similar. To achieve this, we define
the transition probability from ùë£ùëñtoùë£ùëóas:
ùê∑ùëñùëó=softmaxùëó‚ààN(ùëñ)
ùúîùëñùëóIùëá
ùëñIùëó
, (5)
whereùúîùëñùëóis a learnable parameter initialized to one.
In our model, the final diffusion step utilizes ùê∑ùëñùëóas the transition
probability from node ùë£ùëñto nodeùë£ùëó. This optimization enhances the
diffusion process by promoting the aggregation of similar features
during propagation, thereby mitigating the impact of inter-class
feature aggregation in the adjacency relationships on the final
results, which is given by
X(ùëá+1)=(1‚àíùõæ)X(ùëá)+ùõæ‚à´ùëá+1
ùëáùúïX(ùë°)
ùúïùë°aggregated by ùê∑ùëëùë°. (6)
The parameter ùõæis employed to regulate the degree of aggregat-
ing similar features during the diffusion process. Given the varying
influence of node features on the interrelationships between nodes
across different datasets, adjusting the magnitude of parameter ùõæ
enables us to strike a balance between the features of nodes within
the same class and the adjacent node features within the original
topological structure. The similarity between the features of node ùëñ
and its neighboring nodes is given by
ùë†ùëñùëöùëñ=√ç
ùëóùúñùëÅ(ùëñ)ùêºùëá
ùëñùêºùëó
ùë†ùëûùëüùë°[ùëëùëíùëî(ùëñ)], (7)
where the degree of node ùëñ, denoted as ùëëùëíùëî(ùëñ), represents the num-
ber of edges connected to the ùëñth node.ùë†ùëñùëöùëñmeans the similarity
among the features of node ùëñand its neighboring nodes. A larger
value ofùë†ùëñùëöùëñindicates that there are more nodes of the same class
among the neighbors of node ùëñ. The parameter vector ùõæis given by
ùõæ=(1‚àíùõΩ)¬∑ùë†ùëñùëö+ùõΩ, (8)
whereùõΩis a hyperparameter of the model and ùë†ùëñùëörepresents a
vector that includes all nodes ùë†ùëñùëöùëñ. This allows for a greater aggre-
gation of similar features during the diffusion process in equation
(6).
Here, the range of ùõΩis0‚â§ùõΩ‚â§1. Since the elements of ùë†ùëñùëö
are less than 1, this also ensures that the range of the element ùõæùëñ
inùõæis0‚â§ùõæùëñ‚â§1. The vector of ùõæis primarily determined by ùõΩ
and fine-tuned through vector ùë†ùëñùëö. If, for a node ùëñ, the value ofùë†ùëñùëöùëñis relatively high, it indicates that the features of node ùëñare
consistent with the topological information between it and its neigh-
boring nodes. Under the same ùõΩvalue,ùõæùëñof nodeùëñin the process
of equation (6)will be larger compared to other nodes, leading to a
greater aggregation of information in the graph diffusion matrix
constructed based on node features. By adjusting the parameter ùõΩ,
the dependence of model on the node hidden layer representation
in the graph diffusion process can be tailored according to differ-
ent datasets, effectively filtering out noise in the graph topology
structure.
3.4 Exploration of Numerical Methods for
Differential Equations
3.4.1 Explicit Method. The explicit Euler method, commonly known
as the explicit forward Euler method, is a frequently used numerical
technique for solving differential equations. When modeling the
graph diffusion process as a differential equation, the conventional
method for solving corresponding GNN models is the explicit Euler
method. The solving formula for this method is given by
X(ùëá+1)=X(ùëá)+Œîùëá¬∑ùúï
ùúïùë°x(ùëá). (9)
By substituting equation (3) into equation (6), we have
X(ùëá+1)=X(ùëá)+Œîùëá¬∑A(x(ùëá))x(ùëá). (10)
With the assistance of PDE tools, we can employ more sophis-
ticated and higher-accuracy numerical methods for solving differ-
ential equations. As a higher-order explicit technique, the Runge-
Kutta method excels in numerical accuracy compared to the explicit
Euler method. The formula for the commonly used fourth-order
Runge-Kutta method is expressed as
K1=Œîùëá¬∑ùúï
ùúïùë°x(ùëá)=Œîùëá¬∑A(x(ùëá))x(ùëá),
K2=Œîùëá¬∑ùúï
ùúïùë°x(ùëá+Œîùëá
2)=Œîùëá¬∑A(x(ùëá+Œîùëá
2))x(ùëá+Œîùëá
2),
K3=Œîùëá¬∑ùúï
ùúïùë°x(ùëá+Œîùëá
2)=Œîùëá¬∑A(x(ùëá+Œîùëá
2))x(x(ùëá+Œîùëá
2),
K4=Œîùëá¬∑ùúï
ùúïùë°x(ùëá+Œîùëá)=Œîùëá¬∑A(x(ùëá+Œîùëá))x(ùëá+Œîùëá),
X(ùëá+1)=X(ùëá)+1
6¬∑(K1+2K2+2K3+K4).
(11)
3.4.2 Implicit Method. By harnessing advanced PDE tools, we can
also utilize the implicit Euler method, which offers greater time
stability in comparison to the explicit Euler method when solving
differential equations. The implicit Euler method, relative to the
explicit Euler method, incorporates an algebraic equation into each
iteration to determine the next time step. The solution of this alge-
braic equation typically employs numerical techniques such as the
Newton-Raphson method or the bisection method. Concurrently,
the implicit Euler method exhibits greater time stability, character-
ized by unconditional stability, which means that it remains stable
regardless of the size of the time step Œîùëá. This quality is particularly
crucial for problems that demand strict time stability requirements.
Its computational formula is presented as
 
2940KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Liangtian Wan et al.
X(ùëá+1)=X(ùëá)+Œîùëá¬∑ùúï
ùúïùëáx(ùëá+1). (12)
By substituting equation (3) into equation (9), we have
X(ùëá+1)=X(ùëá)+Œîùëá¬∑A(x(ùëá+1))x(ùëá+1). (13)
4 Experiments
In this section, we conduct experiments to evaluate our algorithm
and popular graph diffusion-based GNN. We also explore the param-
eter space of the algorithm in our model, particularly the sensitivity
parameterùõΩ, which is used to adjust the sensitivity of the model to
the newly constructed adjacency relationships ùê∑based on node hid-
den layers, thereby adapting to different application scenarios. Our
code and datasets can be found at https://github.com/hanhuijin/FGND.
4.1 Datasets
We compare our model with traditional graph diffusion models in
the task of semi-supervised node classification. Experiments are
conducted on three citation networks: Cora, Citeseer, and Pubmed,
as well as two product datasets from Amazon: Computers and
Photo. In the citation network datasets, nodes represent research
papers, while edges represent citation relationships between papers.
In the Amazon product datasets, nodes represent product-related
information, and edges are determined based on co-occurrence
relationships among products in the dataset, as well as user pur-
chasing and review behavior. Table 1 provides detailed information
on the five aforementioned datasets. The label rate represents the
percentage of nodes used for training.
Table 1: Graph topology statistics of datasets
Dataset
Nodes Edges Classes Features Label Rate
Cora
2,708 5,429 7 1,433 0.052
Citeseer 3,327 4,732 6 3,703 0.036
PubMed 19,717 44,338 3 500 0.003
Amazon ‚ÄòComputers‚Äô 13,752 505,474 10 767 0.015
Amazon ‚ÄòPhoto‚Äô 7,487 245,573 8 745 0.021
Table 2: Mean of same class ratio
Cora
Citeseer PubMed Amazon ‚ÄòComputers‚Äô Amazon ‚ÄòPhoto‚Äô
86.2%
80.08% 86.46% 81.68% 86.09%
Table 2 shows the proportion of intra-class connections (edges
within the same class) among all connections between different
datasets. It quantifies the ratio of edges that connect nodes of the
same class to the total number of edges in different datasets. Inter-
class connections within the dataset can influence the model‚Äôs repre-
sentation of aggregated neighbor features. Aggregating inter-class
relationships can, in certain scenarios, decrease the distinguisha-
bility of node representations in the hidden layers, making it more
challenging for the model to classify nodes accurately.
Table 3 shows the ratio between the mean weight of inter-class
edges and intra-class edges. A smaller ratio indicates a greater dis-
tinction between inter-class and intra-class connections. According
to Figure 3, when this ratio is smaller, we should appropriately
increase the value of ùõΩto improve the model‚Äôs ability to filter out
noise in the graph topology.Table 3: The ratio of inter-category connections to intra-
category connections among neighboring nodes
Cora
Citeseer PubMed Amazon ‚ÄòComputers‚Äô Amazon ‚ÄòPhoto‚Äô
85.65%
95.92% 81.13% 80.79% 79.36%
4.2 Experimental Setup
We have opted for three representative types of GCN architectures:
‚Ä¢Spatial-based methods, including GraphSage [ 11], GAT [ 25],
IncepGCN [ 22], IncepGCN-DropEdge [ 22], Deep-gcns [ 15],
SGLR(SGC) [ 10], SGLR(GCN) [ 10], EGNN [ 33], SGC-PN [ 32],
GCN-PN [32] and GAT-PN [32];
‚Ä¢Spectral-based methods, encompassing ChebyNet [ 7] and
GCN [ 14], ChebyNet_WaveThresh [ 26], ChebyNet_WaveShri
nk [26], GCN-_WaveThresh [26], GCN_WaveShrink [26];
‚Ä¢Graph diffusion-based methods, namely GRAND [ 3], GRAND
++ [23], GREAD [6] and CAD-Net [17].
For each dataset, we select 1500 nodes as the training validation set,
we select 20 labeled nodes through uniformly random sampling
from each class to form the training set and the remaining nodes
are used as the validation set for model training. In addition 1000
nodes constitute the test set.
See the Experimental Setup section in the Appendix for specific
parameter settings during the experiment.
4.3 Exploring the Flexibility of Network Models
This chapter explores the flexibility of our model by analyzing the
relationship between the weight ratios of intra-class and inter-class
connections, and the parameter ùõΩacross various datasets. The study
validates the adaptability of our model to different relationship
categories in the real world. It autonomously adjusts the weights
of inter-node connections, effectively filtering out noise factors
within node relationships, and consequently, obtaining enhanced
node representations.
From Table 2, it becomes evident that real-world datasets exhibit
adjacency relationships between nodes that encompass both intra-
category and inter-category nodes. Employing a straightforward
aggregation of original adjacency relationships for capturing node
adjacency information within the model might inadvertently blend
features of inter-category and intra-category nodes together. In
our experiments, we observe that such an approach led to deterio-
rated hidden layer representations after aggregation. This primitive
blending approach consequently diminish the classification capac-
ity of the model. To address this concern, our model tackles the
issue by reconstituting the adjacency relationships between nodes
based on the nodes‚Äô inherent hidden layer representations. Under
this novel adjacency scheme, nodes are oriented to aggregate the
hidden layer representations of intra-category nodes more promi-
nently. Simultaneously, the sensitivity of the model is regulated
through the parameter ùõΩ.
Figures 3 depict the variation in model accuracy as ùõΩchanges,
by using the citation network and Amazon dataset as instances.
To mitigate the impact of experimental randomness, the accuracy
for eachùõΩvalue has been computed as the average result from
100 independent repetitions of the experiment involving multiple
random dataset partitions.
 
2941Flexible Graph Neural Diffusion with Latent Class Representation Learning KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
(a) Citeseer
 (b) Cora & Amazon ‚ÄòComputers‚Äô
(c) Pubmed
 (d) Amazon ‚ÄòPhoto‚Äô
Figure 3: The accuracy of different ùõΩ
It can be observed that the optimal ùõΩvalues for the model on
different datasets correspond to the results indicated in Table 3. In
the Cora and Citeseer datasets, this ratio of inter-category to intra-
category connections is higher. This suggests that in the adjacency-
based inter-node relationships formed by node hidden layer repre-
sentations, there is a closer allocation of weights between nodes of
different categories and nodes of the same category. This indicates
that node features are more consistent with the information pro-
vided by the topological structure of graph, and there is less noise
in the topological structure. Consequently, the optimal ùõΩvalues
are lower, indicating that the model places greater emphasis on the
original adjacency relationships.
Conversely, in the Pubmed, Amazon ‚ÄòPhoto‚Äô, and Amazon ‚ÄòCom-
puters‚Äô datasets, the ratio of inter-category to intra-category connec-
tions is lower. This implies that in the adjacency-based inter-node
relationships formed by node hidden layer representations, there is
a greater disparity in weight allocation between nodes of different
categories and nodes of the same category. This suggests a certain
level of contradiction between node features and the topological
structure of the graph. Therefore, larger values of ùõΩare needed to
enable the model to filter out the noise in the topological structure,
thereby achieving a unified representation of graph node features
and topology.
We have incorporated additional comparative experiments on
our model in the context of heterophilic graphs. Our model adheres
to the data partitioning requirements outlined in [ 34]. Specifically,
we designated 10% of nodes for each category as the training and
validation sets, while the remaining 80% of the data served as the
test set. The results of our experiments are presented in the table
below, indicating that our model outperforms existing approaches
on heterophilic graphs datasets.Table 4: Heterophilous graphs
Model Squirrel Chameleon Mean Acc
FGND 38.8¬±1.30 54.6¬±1.80 46.7
CPGNN-MLP-1 32.70 ¬±1.90 51.08¬±2.29 41.89
CPGNN-MLP-2 26.64 ¬±1.23 55.46¬±1.42 41.05
CPGNN-Cheby-1 37.03 ¬±1.23 53.90¬±2.61 45.465
CPGNN-Cheby-2 27.92 ¬±1.53 56.93¬±2.03 42.425
H2GCN 29.50¬±0.77 48.12¬±1.96 38.81
GraphSAGE 34.35 ¬±1.09 45.45¬±1.97 39.9
GCN-Cheby 26.52 ¬±0.92 36.66¬±1.84 31.59
MixHop 36.42 ¬±3.43 46.84¬±3.47 41.63
GCN 33.31 ¬±0.89 52.00¬±2.30 42.655
GAT 31.20 ¬±2.57 50.54¬±1.97 40.87
MLP 25.50 ¬±0.87 37.36¬±2.05 31.43
We have bolded the prediction accuracy of the optimal model in
Table 4, which illustrates that our model exhibits superior perfor-
mance on heterophilic graphs datasets compared to the algorithm
proposed by Zhu et al. [34]
4.4 Mitigating Oversmoothing: Effectiveness of
the FGND Model
(a) 9th-order neighborhood fea-
tures (Citeseer)
(b) 19th-order neighborhood fea-
tures (Cora)
(c) 14th-order neighborhood fea-
tures (Pubmed)
Figure 4: Node hidden layer representations in the FGND
model when stacking high-order neighborhood features
Figure 4 presents the node hidden layer representations of FGND
across different datasets. It is evident that FGND maintains a clear
distinction between nodes of different classes even after aggregat-
ing high-order neighborhood features. This observation indicates
the effectiveness of model in mitigating oversmoothing issues. In
contrast, as shown in Figure 5, the GCN model encounters pro-
nounced oversmoothing when aggregating neighborhood features
 
2942KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Liangtian Wan et al.
(a) 9th-order neighborhood fea-
tures (Citeseer)
(b) 19th-order neighborhood fea-
tures (Cora)
(c) 14th-order neighborhood fea-
tures (Pubmed)
Figure 5: Node hidden layer representations in the GCN
model when stacking high-order neighborhood features
of the same order as FGND. In the node‚Äôs hidden layer represen-
tations, nodes of different classes are mixed together, making it
challenging to differentiate them.
Taking the Cora dataset as an example, we compared our model
with GRAND++, evaluating the effectiveness of both models in
combating oversmoothing when stacking neural networks to the
same depth. The experimental results are presented in the Table 5,
where the reported values represent means accompanied by their
respective standard deviations (mean ¬±std), calculated from 10
independent runs.
Table 5: Oversmoothing Comparative Analysis: Model Per-
formance vs GRAND++
Depth
(T) 16 64 128 256
FGND
0.840¬±0.013 0.840¬±0.013 0.840¬±0.011 0.832¬±0.024
GRAND++ 0.829¬±0.011
0.820¬±0.011 0.809¬±0.019 0.731¬±0.108
This direct comparison aims to provide a clearer understanding
of how our model performs against GRAND++ in the context of
oversmoothing.
4.5 Comparison with State-of-the-Art Methods
Table 6 presents the overall results obtained under standard bench-
mark settings. The reported values represent means accompanied
by their respective standard deviations (mean ¬±std), calculated
from 20 independent runs. We highlight the best two methods as
follows: First andSecond . Notably, our model exhibits superior
performance across all datasets. Furthermore, our model demon-
strates enhanced stability in its predictive outcomes over the course
of 20 independently partitioned dataset experiments.
Figure 6 and Figure 7 respectively present the results of our
model across 20 random experiments on the citation network and
(a) Citeseer
 (b) Cora
(c) Pubmed
Figure 6: Three citation networks Cora Citeseer Pubmed
compare for 20 splits
(a) Amazon ‚ÄòPhoto‚Äô
 (b) Amazon ‚ÄòComputers‚Äô
Figure 7: Amazon ‚ÄòPhoto‚Äô and Amazon ‚ÄòComputers‚Äô compare
for 20 splits
Amazon datasets. It is evident that, in the Citeseer, Cora, and Ama-
zon ‚ÄòComputers‚Äô datasets, the original GRAND model outperforms
CAD-Net. This observation can be rationalized by the fact that, in
these datasets, the influence of inter-category node hidden features
on the performance of the model is relatively minor. Simultane-
ously, the graph diffusion-based GRAND model treats GNN as a
discretization of underlying PDEs, which contributes to a more
stable model performance. Meanwhile, in the Pubmed and Amazon
‚ÄòPhoto‚Äô datasets, the CAD-Net model exhibits superior performance.
This suggests that in these datasets, the sensitivity of model to the
hidden layer representation of features is more pronounced, with
the aggregation of inter-category node hidden features in the ad-
jacency relationships exerting a more substantial impact on the
node hidden layer representation. Our FGND model leverages the
strengths of both methods by incorporating the reconstruction
of inter-node relationships based on hidden layer representations.
Furthermore, it flexibly handles inter-dataset characteristics in the
diffusion process through the adjustment of the simmetric and
the parameter beta. Additionally, we explore various numerical
methods to solve the graph diffusion process. From Figure 6 and
Figure 7, it can be observed that compared to both GRAND and
CAD-Net models, our FGND method consistently maintains supe-
rior predictive accuracy across these five publicly available datasets.
 
2943Flexible Graph Neural Diffusion with Latent Class Representation Learning KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Table 6: Accuracy (%) under standard benchmark setting
Metho
d Cora Citeseer PubMed Amazon ‚ÄòPhoto‚Äô Amazon ‚ÄòComputers‚Äô
BaselinesCAD-Net 83.31¬±1.6%
70.80¬±1.4% 78.79¬±2.3% 89.62¬±2.6% 79.31 ¬±2.0%
GRAND 83.62¬±1.5% 74.10¬±1.7% 76.49¬±1.9% 90.20¬±1.5% 84.09 ¬±1.4%
GRAND++ 82.75¬±1.4% 73.28¬±2.0% 79.88¬±1.1% 92.80¬±0.4%
83.75¬±1.1%
GREAD 82.41¬±1.6% 71.30¬±1.5% 74.25¬±1.8% 89.78¬±1.6% 83.25 ¬±1.2%
GAT 78.79¬±1.5% 65.31¬±1.9% 76.27¬±2.4% 89.54¬±1.3% 78.37 ¬±2.8%
GraphSage 74.21¬±3.7% 60.25¬±3.7% 74.93¬±1.8% 86.18¬±4.1% 76.75 ¬±4.0%
ChebyNet 75.26¬±2.5% 67.82¬±1.6% 67.48¬±2.8% 84.00¬±2.1% 71.14 ¬±4.3%
GCN 78.71¬±1.5% 65.74¬±1.6% 77.56¬±1.7% 89.43¬±1.5% 79.08 ¬±2.3%
ChebyNet_WaveThresh 75.77¬±1.6% 67.37¬±1.2% 67.96¬±3.4% 84.83¬±2.4% 61.56 ¬±7.3%
ChebyNet_WaveShrink 76.22¬±1.2% 67.59¬±0.9% 68.11¬±3.4% 84.19¬±2.1 % 63.26 ¬±5.8%
GCN_WaveThresh 78.31¬±1.7 % 64.53¬±1.6% 77.70¬±1.0% 89.94¬±1.3 % 82.75 ¬±1.3%
GCN_WaveShrink 78.17¬±2.1% 64.76¬±1.6% 75.49¬±2.3% 90.17¬±1.0% 82.07 ¬±1.6%
Deep-gcns 75.26¬±1.6% 58.36¬±2.3% 71.95¬±1.7% 87.94¬±1.3% 78.14 ¬±2.2%
SGLR(SGC) 81.24¬±0.8% 68.39¬±0.7% 76.28¬±1.0% 80.66¬±2.6% 66.07 ¬±5.9%
SGLR(GCN) 81.95¬±0.3% 69.50¬±0.3% 78.60¬±0.3% 89.28¬±0.6% 74.23 ¬±0.8%
SGC-PN 75.85¬±0.6% 63.02¬±0.7% 78.21¬±0.2% 78.99¬±0.1% 73.93 ¬±0.2%
GCN-PN 76.09¬±1.4% 54.69¬±2.5% 77.29¬±0.6% 87.22¬±2.7% 80.83 ¬±6.1%
GAT-PN 74.95¬±2.2% 56.61¬±1.2% 77.53¬±1.0% 85.13¬±2.2% 70.98 ¬±6.5%
EGNN 82.85¬±0.4% 67.68¬±0.3% 79.27¬±0.3% 83.13¬±0.4% 75.44 ¬±0.8%
IncepGCN-DropEdge 80.53¬±1.2% 63.82¬±1.0% 52.53¬±7.7% 89.96¬±1.0% 80.74 ¬±2.3%
IncepGCN 79.92¬±1.5% 63.88¬±1.4% 53.03¬±7.6% 86.66¬±1.9% 78.25 ¬±5.0%
CPGNN-MLP-1 78.76¬±0.5% 64.28¬±0.4% 75.33¬±0.1% 88.21¬±0.3% 77.46 ¬±1.2%
CPGNN-MLP-2 76.19¬±0.7% 64.86¬±0.5% 77.59¬±0.7% 85.57¬±1.0% 67.83 ¬±3.6%
CPGNN-Cheby-1 79.39¬±1.0% 68.66¬±0.8% 76.95¬±1.0% 86.78¬±0.3% 77.66 ¬±1.1%
CPGNN-Cheby-2 76.40¬±1.3% 68.62¬±0.6% 76.37¬±0.9% 84.00¬±0.7% 62.91 ¬±2.1%
Our
Proposed AlgorithmGrand+CAD-beta(new)-k(1) 83.78¬±1.2% 74.08¬±1.6%
79.56¬±1.0% 92.35¬±0.5% 85.22 ¬±2.6%
Grand+CAD-b
eta(CAD)-k(CAD) 83.61¬±1.4% 73.98¬±1.9% 80.06¬±1.4% 92.83¬±0.8%
84.84¬±2.7%
FGND 84.49¬±1.1% 74.99¬±2.0% 79.77¬±1.5% 92.89¬±0.6% 85.80¬±1.8%
FGND-Explicit
Euler 83.32¬±1.4% 74.52¬±1.2% 79.49¬±1.3%
92.85¬±0.6% 85.00¬±1.8%
Additionally, our FGND method exhibits reduced variability in per-
formance as a response to data partition fluctuations.
We attempt to integrate the GNN solvers GRAND and class-
attentive diffusion network into two versions: Grand+CAD-beta(new)-
k(1) and Grand+CAD-beta(CAD)-k(CAD). The experimental results
are presented in Table 6. Grand+CAD-beta(new)-k(1) fully replaces
the diffusion process with discrete time steps derived from differ-
ential equations, whereas Grand+CAD-beta(CAD)-k(CAD) retains
the original graph diffusion process of the class-attentive diffusion
network. Experimental results demonstrate that both versions of
the model outperform existing models on most datasets, although
they still fall short of the performance achieved by our proposed
FGND model.
Traditional diffusion-based models correspond to the explicit
Euler numerical solution method in their solving process. In Table
6, we present the FGND model using the explicit Euler method to
solve differential equations, denoted as FGND-Explicit Euler. From
the table, it can be observed that by employing advanced PDE tools,
the FGND model can utilize a more efficient approach to solve
differential equations, leading to improved performance.
We also conducted experiments on the large dataset Ogbn-arxiv,
and the results, as presented in Table 9 of the Appendix, demonstrate
that our model continues to achieve superior performance.
5 Conclusion
In this paper, we address the challenge of the inconsistent node fea-
tures and network topology in real-world datasets by introducing
a novel model, FGND. This model leverages advanced PDE tools
and latent class representation to provide flexibility in adapting
to the characteristics of different datasets. It effectively filters outnoise present in the graph edges and maintains stable model per-
formance in the presence of data perturbations. In the future, we
plan to further explore the impact of the contradiction between
node features and network topology on predictive accuracy from
an interpretable perspective. Additionally, we aim to investigate
more complex structures or other more efficient methods for solv-
ing differential equations, such as attention-based mechanisms, to
mitigate edge noise in real-world datasets.
6 Acknowledgement
This work is supported by the National Key Research and Devel-
opment Program of China (No. 2022YFF0712400), National Natural
Science Foundation of China (62101088), Natural Science Foun-
dation of Liaoning Province (2022-MS-157, 2023-MS-108), Funda-
mental Research Funds for the Central Universities ((3132024242),
Zhejiang Lab (2022KG0AN02) and the Science and Technology Re-
search Program for Chongqing Municipal Education Commission
KJZD-M202200601.
References
[1]James Atwood and Don Towsley. 2016. Diffusion-convolutional neural networks.
Advances in Neural Information Processing Systems 29 (2016), 1‚Äì9.
[2]Joan Bruna, Wojciech Zaremba, Arthur Szlam, and Yann LeCun. 2013. Spectral net-
works and locally connected networks on graphs. arXiv preprint arXiv:1312.6203
(2013), 1‚Äì13.
[3]Ben Chamberlain, James Rowbottom, Maria I Gorinova, Michael Bronstein, Stefan
Webb, and Emanuele Rossi. 2021. Grand: Graph neural diffusion. In International
Conference on Machine Learning. 1407‚Äì1418.
[4]Deli Chen, Yankai Lin, Wei Li, Peng Li, Jie Zhou, and Xu Sun. 2020. Measuring
and relieving the over-smoothing problem for graph neural networks from the
topological view. In Proceedings of the AAAI conference on artificial intelligence,
Vol. 34. 3438‚Äì3445.
[5]Geng Chen, Hang Dai, Tao Zhou, Jianbing Shen, and Ling Shao. 2022. Automatic
Schelling points detection from meshes. IEEE Transactions on Visualization and
 
2944KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Liangtian Wan et al.
Computer Graphics (2022), 2926‚Äì2939.
[6]Jeongwhan Choi, Seoyoung Hong, Noseong Park, and Sung-Bae Cho. 2023.
GREAD: Graph neural reaction-diffusion networks. In International Conference
on Machine Learning. PMLR, 5722‚Äì5747.
[7]Micha√´l Defferrard, Xavier Bresson, and Pierre Vandergheynst. 2016. Convolu-
tional neural networks on graphs with fast localized spectral filtering. Advances
in Neural Information Processing Systems 29 (2016), 1‚Äì9.
[8]Mehmet F Demirel, Shengchao Liu, Siddhant Garg, Zhenmei Shi, and Yingyu
Liang. 2022. Attentive Walk-Aggregating Graph Neural Networks. Transactions
on Machine Learning Research (2022), 1‚Äì32.
[9]Moshe Eliasof, Eldad Haber, and Eran Treister. 2021. Pde-gcn: Novel architectures
for graph neural networks motivated by partial differential equations. Advances
in neural information processing systems 34 (2021), 3836‚Äì3849.
[10] Jhony H Giraldo, Konstantinos Skianis, Thierry Bouwmans, and Fragkiskos D
Malliaros. 2023. On the trade-off between over-smoothing and over-squashing
in deep graph neural networks. In Proceedings of the 32nd ACM International
Conference on Information and Knowledge Management. 566‚Äì576.
[11] Will Hamilton, Zhitao Ying, and Jure Leskovec. 2017. Inductive representation
learning on large graphs. Advances in Neural Information Processing Systems 30
(2017), 1‚Äì9.
[12] Jacob Helwig, Xuan Zhang, Cong Fu, Jerry Kurtin, Stephan Wojtowytsch, and
Shuiwang Ji. 2023. Group Equivariant Fourier Neural Operators for Partial
Differential Equations. In International Conference on Machine Learning. 1‚Äì9.
[13] Arijit Khan, Yuan Ye, Lei Chen, and HV Jagadish. 2018. On Uncertain Graphs.
Springer.
[14] Thomas N. Kipf and Max Welling. 2017. Semi-supervised classification with
graph convolutional networks. arXiv preprint arXiv:1609.02907 (2017), 1‚Äì9.
[15] Guohao Li, Matthias Muller, Ali Thabet, and Bernard Ghanem. 2019. Deep-
gcns: Can gcns go as deep as cnns?. In Proceedings of the IEEE/CVF international
conference on computer vision. 9267‚Äì9276.
[16] Qimai Li, Zhichao Han, and Xiao-Ming Wu. 2018. Deeper insights into graph
convolutional networks for semi-supervised learning. In Proceedings of the AAAI
conference on artificial intelligence, Vol. 32.
[17] Jongin Lim, Daeho Um, Hyung Jin Chang, Dae Ung Jo, and Jin Young Choi.
2021. Class-attentive diffusion network for semi-supervised classification. In
Proceedings of the AAAI Conference on Artificial Intelligence, Vol. 35. 8601‚Äì8609.
[18] Ziwei Luo, Fredrik K. Gustafsson, Zheng Zhao, Jens Sj√∂lund, and Thomas B.
Sch√∂n. 2023. Image Restoration with Mean-Reverting Stochastic Differential
Equations. In International Conference on Machine Learning. 23045‚Äì23066.
[19] Federico Monti, Davide Boscaini, Jonathan Masci, Emanuele Rodola, Jan Svoboda,
and Michael M Bronstein. 2017. Geometric deep learning on graphs and manifolds
using mixture model cnns. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition. 5115‚Äì5124.
[20] Kenta Oono and Taiji Suzuki. 2019. Graph neural networks exponentially lose
expressive power for node classification. arXiv preprint arXiv:1905.10947 (2019).
[21] Jiaxing Qu, Yuxuan Richard Xie, and Elif Ertekin. 2023. A language-based recom-
mendation system for material discovery. In International Conference on Machine
Learning. 1‚Äì5.
[22] Yu Rong, Wenbing Huang, Tingyang Xu, and Junzhou Huang. 2019. Dropedge:
Towards deep graph convolutional networks on node classification. arXiv preprint
arXiv:1907.10903 (2019).
[23] Matthew Thorpe, Tan Minh Nguyen, Hedi Xia, Thomas Strohmer, Andrea
Bertozzi, Stanley Osher, and Bao Wang. 2022. GRAND++: Graph Neural Diffusion
with A Source Term. In International Conference on Learning Representations. 1‚Äì9.
[24] Arnaud Vadeboncoeur, Ieva Kazlauskaite, Yanni Papandreou, Fehmi Cirak, Mark
Girolami, and Omer Deniz Akyildiz. 2023. Random grid neural processes for
parametric partial differential equations. In International Conference on Machine
Learning. 34759‚Äì34778.
[25] Petar Veliƒçkoviƒá, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro
Li√≤, and Yoshua Bengio. 2018. Graph Attention Networks. In International Con-
ference on Learning Representations. 1‚Äì9.
[26] Liangtian Wan, Xiaona Li, Huijin Han, Xiaoran Yan, Lu Sun, Zhaolong Ning, and
Feng Xia. 2023. Unifying and Improving Graph Convolutional Neural Networks
with Wavelet Denoising Filters. In Proceedings of the ACM Web Conference 2023 .
177‚Äì187.
[27] Feng Xia, Ke Sun, Shuo Yu, Abdul Aziz, Liangtian Wan, Shirui Pan, and Huan
Liu. 2021. Graph Learning: A Survey. IEEE Transactions on Artificial Intelligence
2, 2 (2021), 109‚Äì127. https://doi.org/10.1109/TAI.2021.3076021
[28] Feng Xia, Lei Wang, Tao Tang, Xin Chen, Xiangjie Kong, Giles Oatley, and Irwin
King. 2022. Cengcn: Centralized convolutional networks with vertex imbalance
for scale-free graphs. IEEE Transactions on Knowledge and Data Engineering 35, 5
(2022), 4555‚Äì4569.
[29] Bingbing Xu, Huawei Shen, Qi Cao, Yunqi Qiu, and Xueqi Cheng. 2018. Graph
Wavelet Neural Network. In International Conference on Learning Representations.
1‚Äì8.
[30] Keyulu Xu, Chengtao Li, Yonglong Tian, Tomohiro Sonobe, Ken-ichi
Kawarabayashi, and Stefanie Jegelka. 2018. Representation learning on graphs
with jumping knowledge networks. In International conference on machine learn-
ing. PMLR, 5453‚Äì5462.[31] Sangeeta Yadav. 2023. Predicting the stabilization quantity with neural networks
for Singularly Perturbed Partial Differential Equations. In International Conference
on Machine Learning. 1‚Äì8.
[32] Lingxiao Zhao and Leman Akoglu. 2019. Pairnorm: Tackling oversmoothing in
gnns. arXiv preprint arXiv:1909.12223 (2019).
[33] Kaixiong Zhou, Xiao Huang, Daochen Zha, Rui Chen, Li Li, Soo-Hyun Choi,
and Xia Hu. 2021. Dirichlet energy constrained learning for deep graph neural
networks. Advances in Neural Information Processing Systems 34 (2021), 21834‚Äì
21846.
[34] Jiong Zhu, Ryan A Rossi, Anup Rao, Tung Mai, Nedim Lipka, Nesreen K Ahmed,
and Danai Koutra. 2021. Graph neural networks with heterophily. In Proceedings
of the AAAI conference on artificial intelligence, Vol. 35. 11168‚Äì11176.
A Appendix
A.1 Experimental Setup
The ogbn-arxiv dataset was added during the rebuttal stage to
validate the performance of our proposed FGND model in larger
datasets. The ogbn-arxiv dataset is a directed graph representing
the citation network of all computer-related papers on the arxiv
website. Each node is an arxiv paper, and each edge represents an
article citing another article. It has 169343 nodes, 1166243 edges.
The detailed performance comparison can be found in Table 9.
Experiments Compute Resource: Except for experiments con-
ducted on the ogbn-arxiv dataset, all other experiments were per-
formed using a single Nvidia RTX 3090 GPU with 24GB of memory.
For experiments on the ogbn-arxiv dataset, we utilized an A-100
GPU for evaluation.
Table 7: Experimental setup in spectral-based methods
Mo
del Dataset Learning Rate Early Stop K (Corresponding to the time step ùëá)
GCNCora
0.01 10 2
Citeseer 0.01 10 2
Pubmed 0.01 10 2
Amazon
‚ÄòPhoto‚Äô 0.001 10 2
Amazon ‚ÄòComputers‚Äô 0.001 10 2
Ogbn-arxiv 0.001 80 2
ChebyNetCora
0.1 30 3
Citeseer 0.1 30 3
Pubmed 0.001 30 3
Amazon
‚ÄòPhoto‚Äô 0.001 30 2
Amazon ‚ÄòComputers‚Äô 0.001 10 2
Ogbn-arxiv 0.001 80 2
In the context of spectral-based methodologies, for the ChebyNet-
_WaveThresh [ 26], ChebyNet_WaveShrink [ 26], GCN_Wa-veThresh
[26], GCN_WaveShrink [ 26] models, we utilize publicly available
code implementations. For the GCN and ChebyNet models, we
construct a two-layer network consisting of 16 hidden units. The
constitution of the test set for each experiment follows a random
process. To enhance the representativeness of outcomes, we conduct
each experiment iteratively for 20 trials and subsequently computed
the mean of these twenty outcomes to establish the ultimate result.
Adam is selected as the optimization algorithm. The configuration of
hyperparameters involves setting ‚Äòmax_epochs‚Äô to 200. In instances
where a reduction in loss is not observed, an early stopping criterion
has been implemented, with termination set at 10 epochs for GCN
and 30 epochs for ChebyNet. For further parameter specifications,
please refer to Table 7.
Regarding the spatial-based techniques, for the IncepGCN [22],
IncepGCN-DropEdge [ 22], Deep-gcns [ 15], SGLR(SGC) [ 10], SGLR(
GCN) [ 10], EGNN [ 33], SGC-PN [ 32], GCN-PN [ 32] and GAT-PN
[32] models, we utilize publicly available code implementations.
For the GAT and GraphSage models, the optimization algorithm
 
2945Flexible Graph Neural Diffusion with Latent Class Representation Learning KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Table 10: Statistical Values for Edge Weights in Reconstructed
Topology Structure
Dataset Mean Min Max Standard Deviation Variance Range
CoauthorCS 0.8584 0.0434 1 0.1943 0.0377 0.9566
Citeseer 0.8008 0.0526 1 0.2502 0.0626 0.9474
Pubmed 0.8646 0.0212 1 0.2170 0.0471 0.9788
Cora 0.8620 0.1250 1 0.2146 0.0460 0.8750
Photo 0.8609 0.0111 1 0.2054 0.0421 0.9889
Computers 0.8168 0.0119 1 0.2156 0.0465 0.9881
Texas 0.4029 0.0238 1 0.1838 0.0338 0.9761
Squirrel 0.4376 0.0897 1 0.2098 0.0440 0.9103
Ogbn-arxiv 0.7070 0.0017 1 0.2718 0.0073 0.9983
of choice is Adam, with a maximum number of epochs set at 200.
If a decline in loss is not evident, an early stopping mechanism is
implemented, which is terminated after 10 epochs. In the Graph-
Sage framework, a dual-layer network comprising 16 hidden units
has been constructed. The hyperparameter settings encompass a
learning rate of 0.01 for citation network datasets, and a learning
rate of 0.001 for Amazon datasets. As for GAT, the hyperparameters
are configured with a learning rate of 0.001.
For graph diffusion-based methods, the optimization algorithm
of choice is Adam, with a maximum number of epochs set at 200. For
the GRAND, GRAND++, GREAD and CAD-Net models, we utilize
publicly available code implementations. The specific parameters
are outlined in Table 8.
Table 8: Experimental setup in diffusion-based methods
Mo
del Dataset Learning Rate ùõΩ K (Corresponding to the time step ùëá)
CAD-NetCora
0.01 0.8 6
Citeseer 0.03 0.7 3
Pubmed 0.03 0.85 8
Amazon ‚ÄòPhoto‚Äô 0.03 0.95 2
Amazon ‚ÄòComputers‚Äô 0.03 0.95 2
GRANDCora
0.01 - 18
Citeseer 0.01 - 8
Pubmed 0.03 - 13
Amazon ‚ÄòPhoto‚Äô 0.03 - 4
Amazon ‚ÄòComputers‚Äô 0.03 - 3
Ogbn-arxiv 0.005 - 4
FGNDCora
0.01 0.1 19
Citeseer 0.01 0.15 9
Pubmed 0.03 1 14
Amazon ‚ÄòPhoto‚Äô 0.03 0.8 5
Amazon ‚ÄòComputers‚Äô 0.03 0.75 4
Ogbn-arxiv 0.005 0 5
Squirrel 0.017 0.95 8
Chameleon 0.006 0.96 3
GRAND++Cora
0.01 - 18.3
Citeseer 0.01 - 8
Pubmed 0.01 - 13
Amazon ‚ÄòPhoto‚Äô 0.01 - 3.6
Amazon ‚ÄòComputers‚Äô 0.01 - 3.2
Ogbn-arxiv 0.005 - 3.6
GREADCora
0.01 - 3.79
Citeseer 0.002 - 2.03
Pubmed 0.01 - 1.73
Amazon ‚ÄòPhoto‚Äô 0.01 - 3.6
Amazon ‚ÄòComputers‚Äô 0.01 - 3.2
Ogbn-arxiv 0.01 - 3.8
Table 9: Performance of different graph neural networks on
the Ogbn-arxiv dataset.
GRAND
GCN GraphSage GAT Chebynet GREAD CAD-Net GRAND++ FGND
A
ccuracy 69.40% 60.30% 62.30% 66.10% 63.73% N/A N/A 69.40% 69.70%A.2 Theoretical analysis related to the
parameters
Table 10 below shows the statistical values representing the weights
of edges in the reconstructed topology structure. This indicates
how reconstructing topological relationships based on node latent
representations effectively differentiates the topology of the original
graph. This also aligns with observations from Table 3 in the paper,
where it is noted that reconstruction reduces the weights of inter-
class connections and enhances those of intra-class connections.
The Role of Parameter ùõæ
According to the equation
X(ùëá+1)=(1‚àíùõæ)X(ùëá)+ùõæ‚à´ùëá+1
ùëáùúïX(ùë°)
ùúïùë°ùëëùë°, (14)
ùõæcontrols the weighted balance between the current node features
and neighboring node features. When ùõæapproaches 0, the model
preserves the original node features predominantly. Conversely,
whenùõæapproaches 1, the model aggregates neighboring node fea-
tures more significantly. Adjusting ùõæcan optimize the information
propagation effect by controlling the relative contributions of node
features and neighboring node features during the aggregation
process.
The Role of Parameter ùõΩ
According to the equation
ùõæ=(1‚àíùõΩ)¬∑sim+ùõΩ, (15)
ùõΩadjusts the dependence of ùõæon the similarity measure sim. A
smallerùõΩindicates a stronger reliance on sim, allowing ùõæto be
largely determined by the similarity of node features. Conversely,
a largerùõΩmakes the model more independent of sim, making ùõæ
predominantly determined by ùõΩ. Thus, adjusting ùõΩallows the model
to adapt to different datasets and task requirements by controlling
its dependence on the similarity measure during the information
aggregation process.
A.3 Theoretical justifications elucidating why
FGND can alleviate the oversmoothing issue
One significant cause of oversmoothing is the presence of numer-
ous erroneous connections in the graph topology, which leads to
a reduction in node embeddings when aggregating information.
These noises propagate between layers, resulting in oversmoothing
issues.
The theoretical foundation for combating oversmoothing using
partial differential equations and graph diffusion methods based on
node embeddings lies in their effectiveness in filtering out noise in
the graph topology. This prevents misaggregation of node informa-
tion due to erroneous inter-class connections and facilitates better
aggregation of neighbor node information. Moreover, the numer-
ical solution methods for graph diffusion processes also include
residual connections similar to those in ResNet.
 
2946KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Liangtian Wan et al.
Taking the following formula as an example, in GCN, the aggre-
gation of neighboring nodes is equivalent to:
X(ùëá+1)=Œîùëá¬∑ùúï
ùúïùë°x(ùëá). (16)
While the explicit Euler method, as the simplest form of PDE-
based approach, adds residual connections on top of GCN:
X(ùëá+1)=X(ùëá)+Œîùëá¬∑ùúï
ùúïùë°x(ùëá). (17)
For more complex Runge-Kutta numerical integration methods:
K1=Œîùëá¬∑ùúï
ùúïùë°x(ùëá)=Œîùëá¬∑A(x(ùëá))x(ùëá),
K2=Œîùëá¬∑ùúï
ùúïùë°x(ùëá+Œîùëá
2)=Œîùëá¬∑A(x(ùëá+Œîùëá
2))x(ùëá+Œîùëá
2),
K3=Œîùëá¬∑ùúï
ùúïùë°x(ùëá+Œîùëá
2)=Œîùëá¬∑A(x(ùëá+Œîùëá
2))x(ùëá+Œîùëá
2),
K4=Œîùëá¬∑ùúï
ùúïùë°x(ùëá+Œîùëá)=Œîùëá¬∑A(x(ùëá+Œîùëá))x(ùëá+Œîùëá),
X(ùëá+1)=X(ùëá)+1
6¬∑(K1+2K2+2K3+K4).(18)This can be understood as handling temporal models in a manner
similar to long short-term memory networks, using high-precision
numerical solution methods to better aggregate information from
different order neighbors. This allows the model to learn local
information more effectively, capturing more multi-hop neighbor
information while still remembering local details as layers stack.
It is worth noting that in FGND, we distinguish the aggregation
weights for different adjacency relationships. If too much noise
information is incorrectly aggregated in one layer, it will gradu-
ally accumulate with the increase in layers, eventually leading to
oversmoothing. We have also supplemented related analyses in
A.2, demonstrating that our model can effectively assign different
weights to intra-class and inter-class connections, thereby filtering
out this part of noise.
 
2947