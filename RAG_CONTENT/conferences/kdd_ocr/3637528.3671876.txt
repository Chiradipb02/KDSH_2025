Top-Down Bayesian Posterior Sampling for Sum-Product
Networks
Soma Yokoi
The University of Tokyo
Tokyo, Japan
syokoi@g.ecc.u-tokyo.ac.jpIssei Sato
The University of Tokyo
Tokyo, Japan
sato@g.ecc.u-tokyo.ac.jp
Abstract
Sum-product networks (SPNs) are probabilistic models character-
ized by exact and fast evaluation of fundamental probabilistic opera-
tions. Its superior computational tractability has led to applications
in many fields, such as machine learning with time constraints
or accuracy requirements and real-time systems. The structural
constraints of SPNs supporting fast inference, however, lead to in-
creased learning-time complexity and can be an obstacle to building
highly expressive SPNs. This study aimed to develop a Bayesian
learning approach that can be efficiently implemented on large-
scale SPNs. We derived a new full conditional probability of Gibbs
sampling by marginalizing multiple random variables to expedi-
tiously obtain the posterior distribution. The complexity analysis
revealed that our sampling algorithm works efficiently even for the
largest possible SPN. Furthermore, we proposed a hyperparameter
tuning method that balances the diversity of the prior distribution
and optimization efficiency in large-scale SPNs. Our method has im-
proved learning-time complexity and demonstrated computational
speed tens to more than one hundred times faster and superior
predictive performance in numerical experiments on more than 20
datasets.
CCS Concepts
‚Ä¢Computing methodologies ‚ÜíLatent variable models; ‚Ä¢
Mathematics of computing ‚ÜíGibbs sampling; Metropolis-
Hastings algorithm.
Keywords
Sum-Product Network, Bayesian inference, Gibbs Sampling
ACM Reference Format:
Soma Yokoi and Issei Sato. 2024. Top-Down Bayesian Posterior Sampling for
Sum-Product Networks. In Proceedings of the 30th ACM SIGKDD Conference
on Knowledge Discovery and Data Mining (KDD ‚Äô24), August 25‚Äì29, 2024,
Barcelona, Spain. ACM, New York, NY, USA, 12 pages. https://doi.org/10.
1145/3637528.3671876
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
¬©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671876Table 1: Tractability of Probabilistic Models [15, 27]
Factorized Mixture SPN DNN
Sampling ‚úì ‚úì ‚úì ‚úì
Density ‚úì ‚úì ‚úì ‚úì /√ó
Marginal ‚úì ‚úì ‚úì √ó
Conditional ‚úì ‚úì ‚úì √ó
Moment ‚úì ‚úì ‚úì √ó
Deep structure √ó √ó ‚úì ‚úì
1 Introduction
Probabilistic machine learning can account for uncertainty, but
many important inference tasks often encounter computational
difficulties due to high-dimensional integrals. Simple probabilistic
models, such as factorized and mixture models, can compute funda-
mental probabilistic operations exactly in polynomial time to the
model size, e.g., likelihood, marginalization, conditional distribu-
tion, and moments as shown in Table 1. However, these models
often suffer from insufficient expressive power due to the lack of
scalability to complex structures. Consequently, the primary focus
of current probabilistic modeling is to achieve both expressiveness
and computational tractability.
A sum-product network (SPN) [ 20] has received much attention
in recent years thanks to its tractability by design. SPNs are consid-
ered a deep extension of the factorized and mixture models while
maintaining their tractability. The tractability of SPNs is a notable
characteristic, markedly distinct from models using deep neural
networks (DNNs) such as generative adversarial networks [ 8], vari-
ational autoencoders [ 12], and normalizing flows [ 24], where many
operations are approximated. SPNs have many possible uses for
machine learning tasks that require fast and exact inference, e.g.,
image segmentation [ 23,33], speech processing [ 17], language mod-
eling [ 4], and cosmological simulations [ 14]. SPNs have also been
investigated for real-time systems such as activity recognition [ 1],
robotics [ 21], probabilistic programming [ 25], and hardware de-
sign [26].
Learning an SPN is relatively more complicated and time con-
suming than inference. Conventional approaches like gradient de-
scent [ 6,20] and an expectation-maximization algorithm [ 9,20]
often suffer from overfitting, mode collapse, and instability in miss-
ing data. One way to prevent these problems is Bayesian learning.
Bayesian moment matching [ 10,22] and collapsed variation in-
ference [ 34] were proposed, and in recent years, Gibbs sampling
has been remarkable for generating samples from the posterior
distribution. Vergari et al . [32] obtained the samples from the full
conditional distribution using ancestral sampling that recursively
3977
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Soma Yokoi and Issei Sato
Computational Graph Density p(x) Structural constraints
+
√ó √ó √ó
0.6
0.30.1.062
.07 .06 .02
.35 .2 .4 .15 .1 .2
x1x2x1x2x1x20.6
0.30.1√ó
x1x2x3
decomposable√ó
x1x2x2
non-decomposable
+
x1x1x1
complete+
x1x1x2
incomplete
Figure 1: Overview of SPNs. Left: computational graph representing the structure and weights of the SPN. Center: evaluation of
the density of input data ùíô. Right: structural constraints ensuring tractability.
traces the graph from the leaf nodes toward the root, and Trapp
et al. [28] showed that the model parameters and the network struc-
ture can be learned simultaneously in a theoretically consistent
Bayesian framework. However, although these studies validated
the flexibility of Bayesian learning, little attention has been paid to
the computational complexity.
The structural constraints of sum and product nodes guarantee
the inference-time tractability of SPNs but lead to increased time
complexity during posterior sampling. The scope of a node, typ-
ically feature dimensions included in its children, is constrained
bydecomposability andcompleteness conditions. SPNs still possess
high expressiveness despite these constraints, although the graph
shape is restricted. In particular, the height of SPNs has a strict
upper limit, so the graph tends to be broad. Ko et al . [13] reported
that existing structural learning methods [ 3,7,31,36] are more
likely to generate wide graphs, which can be a performance bottle-
neck for inference. It is also computationally disadvantageous for
existing posterior sampling that relies on bottom-up traversal of
the entire graph. This problem is currently an obstacle to building
highly expressive large-scale SPNs.
This study aims to extend the efficiency of SPNs to Bayesian
learning. To enable Bayesian learning of SPNs in a reasonable time
for large network sizes, we solve the three most critical problems
from theory to practice: (1) A new full conditional probability of
Gibbs sampling is derived by marginalizing multiple random vari-
ables to obtain the posterior distribution. (2) To efficiently sample
from the derived probability, we propose a novel sampling algo-
rithm, top-down sampling algorithm, based on the Metropolis‚ÄìHast-
ings method considering the complexity of SPNs. It reduces the
exponent by one in learning-time complexity and achieves tens to
more than one hundred times faster runtime in numerical experi-
ments. (3) For the increasing hyperparameters of large-scale SPNs,
a new tuning method is proposed following an empirical Bayesian
approach.This paper is structured as follows. Section 2 quickly reviews
SPNs. We describe an existing latent variable model and Gibbs sam-
pling and illustrate how they are impaired by large-scale SPNs. Sec-
tion 3 reveals the complexity of SPNs and introduces our marginal-
ized posterior, fast sampling algorithm, and hyperparameter tuning
method and discusses their theoretical computational complexity.
Section 4 demonstrates the computational speed, sample correla-
tion, and predictive performance of the proposed method through
numerical experiments on more than 20datasets. Finally, Section 5
concludes the study.
2 Bayesian Sum-Product Networks
This section quickly reviews SPNs and introduces their basics and
constraints. We also describe an existing latent variable model and
approximate Bayesian learning by Gibbs sampling and illustrate
how they are impaired by large-scale SPNs.
2.1 Sum-Product Network
An SPN is a probabilistic model with a computational graph repre-
sented as a rooted directed acyclic graph (DAG) composed of sum,
product, distribution nodes, and edges. Figure 1 left illustrates a typ-
ical computational graph of an SPN. The product node corresponds
to the factorized model, i.e., a product of probability distributions
ùëù(ùíô)=√é
ùëëùëùùëë(ùë•ùëë), and the sum node is the mixture model, i.e.,
a weighted sum of probability distributions ùëù(ùíô)=√ç
ùëòùë§ùëòùëùùëò(ùíô).
These nodes exist at the root and intermediate levels, performing
the operations on their children‚Äôs outputs and producing results.
SPNs can stack factorized and mixture models in a complex manner
by repeating the product and sum nodes alternately. The distribu-
tion node at the leaves consists of a probability distribution and its
parameters for a simple, typically one-dimensional variable.
The modeling probability of SPNs corresponds to the bottom-up
evaluation on the computational graph. Figure 1 center depicts an
example of evaluating density ùëù(ùíô)ofùê∑=2input data ùíô=(ùë•1,ùë•2):
(1) The input vector ùíôis divided into simple variables ùë•1andùë•2and
3978Top-Down Bayesian Posterior Sampling for Sum-Product Networks KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Plate Notation Bottom-up Sampling Top-down Sampling
Œ∏d
j xd
nŒ≥d
jzs
nwsŒ±s
N Jd
DSz= (2,‚àó,‚àó,1,2)
+
√ó √ó
+ + + +
x1x1x2x2x1x1x2x2z1= 2
z2= 1 z3= 1 z4= 1 z5= 2/hatwidez= (2,1,1,1,2)
+
√ó √ó
+ + + +
x1x2/hatwidez1= 2
/hatwidez4= 1 /hatwidez5= 2
Figure 2: Bayesian SPNs. Left: plate notation showing the conditional dependencies of random variables based on the Bayesian
interpretation of SPNs. Center: entire graph traversal for ancestral sampling in the bottom-up approach. Right: subgraph access
for rejection sampling in the proposed top-down approach.
input to the corresponding distribution nodes. The input value is
evaluated by the probability of the distribution node and outputs a
scalar probability value. (2) The intermediate node that receives the
children‚Äôs output computes their convex combination or product
and outputs the scalar value. This procedure is repeated bottom-up
toward the root. (3) All leaves and intermediate nodes are computed,
and the final output value of the SPN is computed at the root node.
Two simple constraints on the structure of the graph streamline
the fundamental probabilistic operations during inference. Figure 1
right represents the structural constraints of SPNs. The children
of product nodes must have mutually exclusive variables, called
decomposability. Decomposability simplifies the integration of a
product node into the integration of its children. The children of
sum nodes must include common variables, called completeness.
Completeness ensures efficient model counting and minimization
of cardinality [ 5] and simplifies the integration of a sum node into
the integration of its children. SPNs satisfying both conditions can
compute any marginalization in linear time with respect to the
number of nodes [ 18]. The exact evaluation of density, marginaliza-
tion, conditional probability, and moment [ 35] can be performed
efficiently.
2.2 Latent Variable Model
An SPN can be interpreted within the Bayesian framework by con-
sidering it as a latent variable model. Let us introduce a categorical
latent variable zthat indicates a mixture component of the sum
node. The latent state z=(z1,..., zùëÜ)of the SPN is determined by
specifying the state zùë†=ùëêwhereùëê‚àà(1,...,ùê∂ùë†)for each sum node
ùë†‚àà(1,...,ùëÜ).
A multinomial distribution is considered as the underlying prob-
ability distribution for latent variable zùë†, and a Dirichlet distribution
is given as the conjugate prior distribution
zùë†
ùëõ‚àºMulti zùë†
ùëõ|wùë†‚àÄùë†‚àÄùëõ,wùë†‚àºDir wùë†|ùõºùë†‚àÄùë†. (1)
The probability distribution of the distribution node is given by
a distribution ùêøùëë
ùëóparameterized with ùúÉùëë
ùëóand its correspondingconjugate prior distribution
ùíôùëõ‚àº√ñ
ùêøùëë
ùëó‚ààùëá(zùëõ)ùêøùëë
ùëó
ùíôùëë
ùëõ|ùúΩùëë
ùëó
‚àÄùëõ, ùúÉùëë
ùëó‚àºùëù
ùúÉùëë
ùëó|ùú∏ùëë
ùëó
‚àÄùëó‚àÄùëë.(2)
The assumption of conjugacy is inherited from existing studies [ 28,
32], and it is noted that even in non-conjugate cases, one-dimensional
leaf distributions can be easily approximated numerically. The prob-
ability distribution ùêøùëë
ùëóis typically chosen by the variable type (con-
tinuous or discrete) and its domain (real numbers, positive numbers,
finite interval[0,1], etc.). Alternatively, the model can automatically
choose the appropriate distribution by configuring the distribution
node as a heterogeneous mixture distribution [ 32]. The dependency
between the random variables and hyperparameters is summarized
in Figure 2 left.
As indicated by the bold edges in Figure 2 center and right, a
subgraph from the root to the leaves is obtained by removing the
unselected edges from the graph. This is called an induced tree [36].
We denote the induced tree determined by the state zasùëá(z). The
induced tree always includes one distribution node for each feature
dimension,ùêøùëë
ùëó‚ààùëá(z) ‚àÄùëë‚àà(1,...,ùê∑), due to the decomposability
and completeness.
2.3 Gibbs Sampling
From the plate notation in Figure 2 left, the posterior distribution
of SPNs can be obtained as
ùëù Z,W,ùöØ|X,ùú∂,ùú∏
‚àùùëù(X|Z,ùöØ)ùëù(Z|W)ùëù(W|ùú∂)ùëù ùöØ|ùú∏.(3)
In Bayesian learning of SPNs, it is necessary to numerically
realize the posterior distribution. Previous studies [ 28,32] have used
Gibbs sampling to generate samples alternately from the conditional
probabilities of the three random variables Z,W, and ùöØ:
ùëù(zùëõ|xùëõ,ùöØ,W)‚àÄùëõ, ùëù(ùöØ|X,Z), ùëù(W|Z). (4)
Since it is difficult to sample all categorical variables Zat once, they
are divided into zùëõ‚àÄùëõ‚àà(1,...,ùëÅ).
3979KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Soma Yokoi and Issei Sato
Table 2: Complexity of the SPN
Complete Tree Skewed Tree
Definition Maximum Size Asymptotic Order Maximum Size Asymptotic Order
ùê∑ input dimension - - - -
ùê∂ùë†sum outdegree - - - -
ùê∂ùëùproduct outdegree ùê∑ - ùê∑ -
- graph height 2 logùê∂ùëùùê∑+2 - 2ùê∑‚àí1
ùê∂ùëù‚àí1+2 -
- graph breadth ùêø O
ùê∂logùê∂ùëùùê∑+1
ùë†
ùêø O
ùê∂ùê∑‚àí1
ùê∂ùëù‚àí1+1
ùë†
ùëâ # all nodes ùëÜ+ùëÉ+ùêøO
ùê∂logùê∂ùëùùê∑+1
ùë†
ùëÜ+ùëÉ+ùêø O
ùê∂ùê∑‚àí1
ùê∂ùëù‚àí1+1
ùë†
ùëÜ # sum nodes(ùê∂ùëùùê∂ùë†)logùê∂ùëùùê∑+1‚àí1
ùê∂ùëùùê∂ùë†‚àí1O
ùê∂logùê∂ùëùùê∑
ùë†
ùê∂ùëùùê∂ùê∑‚àí1
ùê∂ùëù‚àí1+1
ùë†+(1‚àíùê∂ùëù)ùê∂ùë†
ùê∂ùë†‚àí1O
ùê∂ùê∑‚àí1
ùê∂ùëù‚àí1
ùë†
ùëÉ # product nodesùê∂ùë†¬∑(ùê∂ùëùùê∂ùë†)logùê∂ùëùùê∑‚àíùê∂ùë†
ùê∂ùëùùê∂ùë†‚àí1O
ùê∂logùê∂ùëùùê∑
ùë†
ùê∂ùê∑‚àí1
ùê∂ùëù‚àí1+1
ùë†‚àíùê∂ùë†
ùê∂ùë†‚àí1O
ùê∂ùê∑‚àí1
ùê∂ùëù‚àí1
ùë†
ùêø # distribution nodes ùê∂ùë†¬∑(ùê∂ùëùùê∂ùë†)logùê∂ùëùùê∑O
ùê∂logùê∂ùëùùê∑+1
ùë†
(ùê∂ùëùùê∂ùë†‚àí1)ùê∂ùê∑‚àí1
ùê∂ùëù‚àí1+1
ùë†+(1‚àíùê∂ùëù)ùê∂2
ùë†
ùê∂ùë†‚àí1O
ùê∂ùê∑‚àí1
ùê∂ùëù‚àí1+1
ùë†
- # induced trees ùê∂ùê∂ùëùùê∑‚àí1
ùê∂ùëù‚àí1+1
ùë† O
ùê∂ùë™ùëùùê∑‚àí1
ùê∂ùëù‚àí1+1
ùë†
ùê∂ùê∂ùëùùê∑‚àí1
ùê∂ùëù‚àí1+1
ùë† O
ùê∂ùë™ùëùùê∑‚àí1
ùê∂ùëù‚àí1+1
ùë†
Ancestral sampling is employed to generate the ùëÜ-dimensional
latent vector zùëõ=(z1ùëõ,..., zùëÜùëõ)from the joint distribution. Starting
at the root node, sample the branch ùëê‚ààùê∂‚Ñé(ùë†)for each sum node ùë†
encountered
ùëùùë† zùë†
ùëõ=ùëê|xùëõ,ùöØ,W‚àùùë§ùë†,ùëêùëùùëê(xùëõ|ùöØ,W). (5)
Figure 2 center illustrates joint sampling of latent vector zùëõusing
ancestral sampling. The algorithm runs bottom-up, where the out-
put is determined first [ 20,28,32]. The states excluded from the
induced tree are sampled from the prior [16].
Posterior sampling using this approach is often computationally
challenging for large SPNs. Ancestral sampling requires a traversal
of the entire graph, which is too costly to be executed inside the
most critical loop of Gibbs sampling. The larger SPNs typically
require more iterations to reach a stationary state, making the
problem more serious.
3 Proposed Method
This section reveals the complexity of SPNs and the structures that
highly expressive SPNs tend to form. Then we propose a novel
posterior sampling method for the SPNs and discuss its theoret-
ical advantages. The proposed method is explained from three
perspectives: a new full conditional probability of Gibbs sampling
that marginalizes multiple random variables, a top-down sampling
algorithm that includes new proposal and rejection steps, and hy-
perparameter tuning using an empirical Bayesian approach.
3.1 Complexity of SPNs
Both top-down and bottom-up algorithms are applicable to DAG-
structured SPNs. However, the ensuing discussion on computa-
tional complexity confines SPNs to tree structures. Tree-structuredSPNs are not necessarily compact representations [ 27], but they
are frequently used in previous studies [7, 19, 28, 29, 31, 32].
This study aims to propose a sampling method that efficiently
operates even on SPNs of theoretically maximum size. For compu-
tational considerations, we assume that SPNs fulfill the following
conditions: (1) They satisfy the structural constraints of complete-
ness and decomposability. (2) The outdegrees of sum and product
nodes areùê∂ùë†,ùê∂ùëù‚â•2, respectively. (3) The graph exhibits a tree
structure, implying that the nodes do not have overlapping children.
(4) The root is a sum node. These assumptions enable subsequent
algorithmic discussions to cover the worst-case computational com-
plexity under given ùê∑,ùê∂ùë†, andùê∂ùëù.
The structural constraints are important for making SPNs tractable
for fundamental probability operations, but they restrict the graph
shape. Table 2 shows the maximum possible size of an SPN. For sim-
plicity, it only presents cases where the SPN is a complete tree, i.e.,
the product nodes evenly distribute children, resulting in logùê∂ùëùùê∑
being an integer, or conversely, where the children of product nodes
are maximally skewed, withùê∑‚àí1
ùê∂ùëù‚àí1being an integer. Other tree struc-
tures fall within the intermediate of these cases. In either case, the
number of all nodes ùëâ, distribution nodes ùêø, induced trees, and
graph breadth are larger than the other variables. Note that the
sizes may differ if one considers SPNs with different conditions. For
example,ùëâandùëÜare proportional in Zhao et al . [34] , while they
are asymptotically different by a degree of one in our case.
The height and breadth of the SPN should be noted. Increasing
ùê∂ùë†can widen the graph, whereas increasing ùê∂ùëùreduces the height.
Since the product nodes must have children of different feature
dimensions for decomposability, the number of product nodes is
restricted by ùê∑. Each time a product node is passed through on
the graph, it consumesùê∂ùëùdimensions from ùê∑. When the SPN is
a complete tree, the product node satisfying decomposability can
3980Top-Down Bayesian Posterior Sampling for Sum-Product Networks KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Figure 3: Example of the SPN for ùê∑=2input data. Left: the largest computational graph with ùê∂ùë†children for each sum node.
Right: graph breadth and expressivity on non-linearly correlated examples.
only be used up to logùê∂ùëùùê∑times from a leaf to the root. For the
SPN where sum and product nodes alternate, the graph height
is limited to 2logùê∂ùëùùê∑+2, including the root and leaves. When
the consumption is minimized, i.e., ùê∂ùëù=2, the graph height is
maximized to 2log2ùê∑+2. In contrast, the outdegree ùê∂ùë†of sum nodes
can be increased while satisfying completeness. Accordingly, the
graph breadth can increase as ùê∂ùë†¬∑ ùê∂ùëùùê∂ùë†logùê∂ùëùùê∑without limitation.
Figure 3 left shows the possible graph structures of an SPN for
ùê∑=2data. While the height is limited to a maximum of 4when
ùê∂ùëù=2, the breadth can expand at 2ùê∂2ùë†by increasing ùê∂ùë†. Figure 3
right depicts the density of an SPN modeling a two-dimensional
artificial dataset with a strong correlation. As ùê∂ùë†increases and the
SPN becomes broader, it can capture the complex distribution of
spiral data. SPNs are highly expressive even for complicated data by
combining multiple one-dimensional distribution nodes. However,
the breadth of SPNs significantly impacts this. In order for SPNs to
have high representational power under the structural constraints,
ùê∂ùë†must be increased.
3.2 Marginalized Posterior Distribution
The existing studies [ 28,32] use Gibbs sampling that updates all
random variables zùëõ(ùëõ=1,...,ùëÅ),W, and ùöØalternately in Equa-
tion (4), resulting in strong correlation between consecutive sam-
ples. In such cases, the mixing can be slow due to potential barriers
that cannot be overcome unless multiple random variables are up-
dated simultaneously. We solve this problem by marginalization.
From the dependency between variables shown in Figure 2 left,
we marginalize the two random variables WandùöØ. The marginal-
ized posterior distribution including only Zis given by
ùëù Z|X,ùú∂,ùú∏‚àùùëù X|Z,ùú∏ùëù(Z|ùú∂). (6)
Sampling WandùöØcan be omitted entirely during learning. It
reduces the number of variables that need to be sampled, thereby
reducing the sample correlation and the number of iterations. The
parameters WandùöØare required during inference, so they aresampled immediately before use. Since the learning and inference
processes are usually separated in Gibbs sampling, this delayed
evaluation approach works efficiently.
In the algorithm, the sampling of WandùöØis replaced by deter-
ministic computation of sufficient statistics, which is constantly
referenced during sampling Z. The problem here is that marginal-
ization can sometimes result in complex implementation, leading
to decreased performance. We will explain the new sampling algo-
rithm designed from the viewpoint of computational complexity.
3.3 Top-Down Sampling Method
The full conditional distribution of Gibbs sampling to obtain a
sample from the posterior is given by
ùëù
zùëõ|X,Z\ùëõ,ùú∂,ùú∏
. (7)
Directly generating zùëõfrom Equation (7) is difficult due to the
dependencies of random variables. We break it down into simple
components. The distribution can be interpreted as a product of
two factors:
ùëù
zùëõ=ùíÑ|X,Z\ùëõ,ùú∂,ùú∏
‚àùùëù
zùëõ=ùíÑ|Z\ùëõ,ùú∂
|                  {z                  }
network¬∑ùëù
xùëõ|X\ùëõ,zùëõ=ùíÑ,Z\ùëõ,ùú∏
|                             {z                             }
leaf.(8)
The network determines the first factor, i.e., the weights of the sum
nodes. The leaves determine the second factor, i.e., the probability
distributions of the distribution nodes. These factors have different
properties and thus require different approaches for efficient com-
putation. We design our algorithm to have calculations related to
ùëÜandùê∑, where the degree of increase is relatively small from the
complexity of SPNs in Table 2.
3.3.1 Network Proposal. By the conjugate prior distribution of
the Multinomial and Dirichlet distributions in Equation (1), the
network factor is Dirichlet posterior predictive distributions after
3981KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Soma Yokoi and Issei Sato
integrating out W
ùëù
zùëõ=ùíÑ|Z\ùëõ,ùú∂
‚àùùëÜ√ñ
ùë†=1
Nùë†,ùëêùë†
\ùëõ+ùõºùëêùë†
(9)
represented by allocation counts Nùë†,ùëê
\ùëõ=√ç
ùëö=(1,...,ùëÅ)\ùëõùõø zùë†ùëö=ùëê
and the concentration hyperparameters ùú∂.
Equation (9) can be evaluated and sampled with O(ùëÜ)time. We
regard Equation (9) as mixtures of allocation counts and concentra-
tion parameters for ùë†‚àà(1,...,ùëÜ)
bzùë†
ùëõ‚àº(
Nùë†,ùëêùë†
\ùëõwith probability‚àù√ç
ùëêNùë†,ùëê
\ùëõ
ùõºùëêùë† with probability‚àù√ç
ùëêùõºùëê.(10)
This can be implemented with straightforward memory lookup
and basic random number generation. With probabilities propor-
tional to√ç
ùëêNùë†,ùëê
\ùëõ, sampling from Nùë†,ùëê
\ùëõforùëê‚àà (1,...,ùê∂ùë†)is per-
formed, which can be immediately obtained by uniformly selecting
a single element from previous allocations zùë†
\ùëõ. With probabilities
proportional to√ç
ùëêùõºùëê, sampling from ùõºùëêis performed, which can
be obtained by uniform or alias sampling. These steps efficiently
generate candidate bzùëõ=ùíÑfrom the network factor.
The sampling time complexity O(ùëÜ)is practically important. The
number of sum nodes ùëÜis approximatelyO
ùê∂logùê∂ùëùùê∑
ùë†
, and it does
not increase extremely as ùê∑andùê∂ùë†increase, unlikeO
ùê∂logùê∂ùëùùê∑+1
ùë†
for the number of all nodes ùëâ. Therefore, the above steps can be
executed stably in large SPNs.
To make the bzùëõ=ùíÑgenerated by this method follow Equation (7),
the rejection described next is necessary.
3.3.2 Leaf Acceptance. By the conjugate prior of leaf probability
distribution in Equation (2), the leaf factor, after integrating out ùöØ,
is a posterior predictive distribution of the leaves in the induced
treeùëá(ùíÑ)given state zùëõ=ùíÑ:
ùëù
xùëõ|X\ùëõ,zùëõ=ùíÑ,Z\ùëõ,ùú∏
=√ñ
ùêøùëë
ùëó‚ààùëá(ùíÑ)‚à´
ùêøùëë
ùëó
ùë•ùëë
ùëõ|ùúÉùëë
ùëó
ùëù
ùúÉùëë
ùëó|xùëë
\ùëõ,Z\ùëõ,ùõæùëë
ùëó
ùëëùúÉùëë
ùëó
¬∑√ñ
ùêøùëë
ùëó‚àâùëá(ùíÑ)‚à´
ùëù
ùúÉùëë
ùëó|xùëë
\ùëõ,Z\ùëõ,ùõæùëë
ùëó
ùëëùúÉùëë
ùëó
=√ñ
ùêøùëë
ùëó‚ààùëá(ùíÑ)ùëùùêøùëë
ùëó
xùëë
ùëõ|xùëë
\ùëõ,Z\ùëõ,ùõæùëë
ùëó
,(11)
whereùëù(xùëõ|zùëõ=ùíÑ,ùöØ)is the output of ùëá(ùíÑ), and the posterior
predictive distribution of leaf ùêøùëë
ùëóis given by
ùëùùêøùëë
ùëó
xùëë
ùëõ|xùëë
\ùëõ,Z\ùëõ,ùõæùëë
ùëó
=‚à´
ùêøùëë
ùëó
ùë•ùëë
ùëõ|ùúÉùëë
ùëó
ùëù
ùúÉùëë
ùëó|xùëë
\ùëõ,Z\ùëõ,ùõæùëë
ùëó
ùëëùúÉùëë
ùëó.(12)
The induced tree has one distribution node per feature dimension ùëë
in the complete and decomposable SPN. Referring to only ùê∑distri-
bution nodes is sufficient in the leaf factor, which is less costly thancalculating all distribution nodes. The problem is that the combina-
tion{ùêøùëë
ùëó}ùê∑
ùëë=1depends on the graph structure of the SPN. The joint
sampling for{ùêøùëë
ùëó}ùê∑
ùëë=1cannot be reduced to simple per-dimension
calculations. Enumerating the possible patterns of induced trees
requiresO 
ùê∂ùê∂ùëùùê∑‚àí1
ùê∂ùëù‚àí1
ùë†!
time as shown in Table 2, exhibiting a steep
growth asùê∑andùê∂ùë†increase. Generating candidates bzùëõ=ùíÑfrom
Equation (11) is computationally prohibited.
Instead, we use the leaf factor to accept candidates. To make
the candidate bzùëõ=ùíÑgenerated by the network factor follow the
marginalized posterior distribution, the Metropolis‚ÄìHastings accep-
tance probability of the move from zùëõ=ùíÉtoùíÑismin(1,ùê¥(ùíÉ‚ÜíùíÑ))
where
ùê¥(ùíÉ‚ÜíùíÑ)=ùëù
zùëõ=ùíÑ|X,Z\ùëõ,ùú∂,ùú∏
¬∑ùëù
zùëõ=ùíÉ|Z\ùëõ,ùú∂
ùëù
zùëõ=ùíÉ|X,Z\ùëõ,ùú∂,ùú∏
¬∑ùëù
zùëõ=ùíÑ|Z\ùëõ,ùú∂
=ùëù
xùëõ|X\ùëõ,zùëõ=ùíÑ,Z\ùëõ,ùú∏
ùëù
xùëõ|X\ùëõ,zùëõ=ùíÉ,Z\ùëõ,ùú∏
=√é
ùêøùëë
ùëó‚ààùëá(ùíÑ)ùëùùêøùëë
ùëó
xùëëùëõ|xùëë
\ùëõ,Z\ùëõ,ùõæùëë
ùëó
√é
ùêøùëë
ùëó‚ààùëá(ùíÉ)ùëùùêøùëë
ùëó
xùëëùëõ|xùëë
\ùëõ,Z\ùëõ,ùõæùëë
ùëó.(13)
The network factors in the numerator and denominator cancel out
each other and do not need to be evaluated.
By computing the sufficient statistics of the distribution nodes
beforehand, Equation (11) can be evaluated in O(ùê∑), independent
of the number of datapoints ùëÅ. Sinceùëùùêøùëë
ùëóis a one-dimensional
probability distribution, the sufficient statistics can be easily up-
dated in constant time for each sample. As shown in Table 2, ùê∑is
tiny compared to other dimensionalities, so the acceptance prob-
ability can be efficiently obtained. Furthermore, the evaluation of
predictive distributions can be omitted for the dimension ùëëwhere
the candidate component does not change ( ùëèùëë=ùëêùëë). It accelerates
Gibbs sampling even when the samples are correlated.
3.3.3 Algorithm and Complexity. The efficient implementation of
this algorithm involves traversing the computational graph top-
down while referring to the candidate state bzùëõ=ùíÑgenerated by the
network factor, as shown in Figure 2 right. Ignoring the nodes out-
side the induced tree, only the distribution nodes required in Equa-
tion (13) are evaluated. Compared to the existing method traversing
the entire graph bottom-up in Figure 2 center, the proposed method
can be more efficiently executed by accessing a subgraph consisting
of a limited number of nodes. Intuitively, the top-down method is
more efficient for wider graphs. Table 3 compares the time com-
plexity of the algorithms. The entire algorithm of the top-down
method is shown as Appendix B.
The parameters WandùöØmarginalized by the proposed method
are not updated during Gibbs sampling. These values need to be
updated to the latest ones in inference time. This pre-processing is
identical to what is done during each iteration of Gibbs sampling in
the bottom-up algorithm (Equation (4)) and is typically performed
at checkpoints during training or upon completion of training. Since
these are not significant in terms of time complexity, the inference
3982Top-Down Bayesian Posterior Sampling for Sum-Product Networks KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Table 3: Time complexity of the sampling algorithms
Top-down Bottom-up [32]
Gibbs sampling O
ùê∂logùê∂ùëùùê∑
ùë†
O
ùê∂logùê∂ùëùùê∑+1
ùë†
inference with pre-processing O
ùê∂logùê∂ùëùùê∑+1
ùë†
O
ùê∂logùê∂ùëùùê∑+1
ùë†
time complexity of the proposed method does not change as shown
in Table 3.
3.4 Empirical Bayesian Hyperparameter Tuning
Another challenge in large-scale SPNs is hyperparameter optimiza-
tion, an essential task in Bayesian learning. The hyperparameters
of SPNs include ùê∂ùë†,ùê∂ùëù,ùú∂, and ùú∏. In particular, the appropriate
ùú∏ùëë
ùëóinduces diversity in each distribution node ùêøùëë
ùëóand helps SPNs
choose suitable component distributions. As shown in Table 2,
there are asymptotically O
ùê∂logùê∂ùëùùê∑+1
ùë†
distribution nodes and ùú∏is
proportional to them. The number of hyperparameters can easily
exceed hundreds to thousands in a real-world dataset. Applying
currently common hyperparameter optimization methods such as
tree-structured Parzen estimator (TPE) [ 2] is not advised in terms
of the number of trials. We must consider tuning proxy parameters
instead of directly tuning ùú∏.
In the empirical Bayesian approach, hyperparameters are ob-
tained by maximizing the marginal likelihood. Although calcu-
lating the marginal likelihood ùëù X|ùú∂,ùú∏of an SPN is difficult,
maximizing it with respect to a hyperparameter ùú∏ùëë
ùëócan be reduced
to maximizing the mixture of leaf marginal likelihoods ùëùùêøùëë
ùëó
¬∑|ùú∏ùëë
ùëó
:
arg max
ùú∏ùëë
ùëóùëù X|ùú∂,ùú∏=arg max
ùú∏ùëë
ùëó‚àëÔ∏Å
Xùëê‚äÜXùúîùëêùëùùêøùëë
ùëó
xùëë
ùëê|ùú∏ùëë
ùëó
.(14)
This is derived from the fact that SPNs can be considered a mixture
of induced trees [ 36] and induced trees are factorized leaf models
for each feature dimension (Section 2.2). The summation√ç
Xùëê‚äÜXis
taken over all possible subset Xùëêof dataset X. When there are ùëÅ
datapoints in the dataset, the summation size is 2ùëÅ. The coefficient
ùúîùëêis complicated and depends on the other hyperparameters ùú∏\ùõæùëë
ùëó.
Whereas the exact evaluation of Equation (14) is computationally
impossible, it gives an essential insight that the marginal likelihood
of distribution nodes over subset data gives the empirical Bayes
estimate.
We consider approximating Equation (14) by a significant term
of the leaf marginal likelihood with specific subset data. Our goal
is not to identify the optimal subset Xùëêdirectly but to find the
subsampling ratio ùëüùëë‚àà (0,1]that Xùëêshould contain from the
dataset Xfor each feature dimension ùëë. The empirical Bayes es-
timate of hyperparameter ùõæùëë
ùëóis approximated with subset data
xùëëùëê=subsample
xùëë,ùëüùëë
by
bùõæùëë
ùëó=arg max
ùõæùëë
ùëóùëùùêøùëë
ùëó
xùëë
ùëê|ùõæùëë
ùëó
.(15)By tuningùëüùëëusing hyperparameter optimization methods, distri-
bution nodes with appropriate hyperparameters are expected to
become the main component of the leaf mixture. When ùëüùëë=1, it is
empirical Bayes over the full dataset, and all the distribution nodes
ùêøùëëhave the same hyperparameters for ùëë. Asùëüùëëapproaches 0, the
intersection of the subset data becomes smaller, resulting in diverse
distribution nodes. This approach significantly reduces the number
of optimized hyperparameters from the order of distribution nodes
O
ùê∂logùê∂ùëùùê∑+1
ùë†
toO(ùê∑), while maintaining the flexibility of the
prior distributions.
It is easy to obtain the empirical Bayes solution for leaf hy-
perparameters numerically because distribution nodes have one-
dimensional probability distributions. Closed-form solutions can
also be obtained for some parameters.
3.5 Contrast with Prior Work
Zhao et al . [34] employed collapsed variational inference to approx-
imate the posterior distribution. Their algorithm is optimization-
based and significantly different from our method based on poste-
rior sampling. Also, it integrated out Z, which is a unique approach
different from many other variational inferences. It is also distinct
from our posterior distribution marginalizing WandùöØ.
The proposed method only discusses Bayesian parameter learn-
ing and does not mention structural learning. In the experiments in
Section 4, we use a heterogeneous leaf mixture similar to Vergari
et al. [32] , and an appropriate probability distribution is selected
by weighting from multiple types of distribution nodes. It is pos-
sible to perform Bayesian structural learning similar to [ 28], but
pre-processing is required for the marginalized parameters ùöØfor a
conditional probability in structural inference. The speed benefits
of our method may be compromised depending on the frequency
of structural changes.
Trapp et al . [28] , Vergari et al . [32] assume that all distribution
nodes have the same hyperparameters for each feature dimension
and distribution type. This simple setting always assumes the same
prior distribution, so it does not induce diversity in distribution
nodes like our empirical Bayesian approach on subset data. When
the hyperparameters are selected to maximize the marginal likeli-
hood, the results are expected to be similar to the proposed method
with subsampling proportion ùëüùëë=1‚àÄùëë.
4 Experiments
In this section, we compare the empirical performance of top-
down and bottom-up sampling methods. We used a total of 24
datasets, where 18datasets were from the UCI repository [ 11]
and OpenML [ 30] and 6datasets were from the previous studies
3983KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Soma Yokoi and Issei Sato
Table 4: Elapsed time [s] per Gibbs iteration (mean ¬±std)
ùê∂ùë†=2 ùê∂ùë†=4
Dataset
Top-down Bottom-up Speedup Top-down Bottom-up Speedup
Abalone 0.076¬±0.004 1.574¬±0.043√ó21 0.367¬±0.019 17.38¬±0.699√ó47
Ailer
ons 2.938¬±0.121 96.28¬±2.631√ó33 181.2¬±28.06 3282¬±105.9√ó18
Airfoil Self-Noise 0.010¬±0.001 0.303¬±0.024√ó30 0.021¬±0.001 2.047¬±0.143√ó97
Breast 0.005¬±0.000 0.170¬±0.016√ó34 0.014¬±0.001 1.938¬±0.079√ó138
Computer Hardware 0.003¬±0.000 0.098¬±0.011√ó33 0.007¬±0.000 0.943¬±0.078√ó135
cpu_act 0.525¬±0.016 16.80¬±0.771√ó32 11.72¬±2.503 588.0¬±15.46√ó50
cpu_small 0.204¬±0.005 5.592¬±0.206√ó27 2.059¬±0.119 99.17¬±3.382√ó48
Crx 0.023¬±0.001 0.722¬±0.013√ó31 0.232¬±0.006 14.21¬±0.458√ó61
Table 5: Effective sample size per 50 samples
ùê∂ùë†=2 ùê∂ùë†=4
Dataset
Top-down Bottom-up Top-down Bottom-up
Dermatology 15.6¬±0.320.6¬±0.119.1¬±0.120.1¬±0.0
ele
vators 15.1¬±0.218.0¬±0.3 17 .0¬±0.1 -
Forest Fires 18.9¬±0.520.6¬±0.218.6¬±0.120.5¬±0.0
German 17.3¬±0.320.6¬±0.118.9¬±0.119.4¬±0.0
Housing 17.3¬±1.220.6¬±0.117.4¬±0.220.5¬±0.0
Hybrid Price 20.4¬±0.720.5¬±1.020.5¬±0.420.6¬±0.4
kin8nm 18.2¬±2.120.8¬±0.316.8¬±0.119.5¬±0.2
LPGA2008 20.7¬±0.6 20.5¬±0.220.5¬±0.2 20 .5¬±0.1Table 6: Log-likelihood
ùê∂ùë†=2 ùê∂ùë†=4
Dataset
Top-down Bottom-up Top-down Bottom-up
LPGA2009‚àí28.3¬±0.4‚àí29.6¬±0.2‚àí27.4¬±0.4‚àí29.7¬±0.2
P
. motor 43.9¬±0.7 41.9¬±0.3 43.5¬±0.6 42.1¬±0.1
P. total 43.4¬±0.6 41.7¬±0.1 42.8¬±0.8 41.5¬±0.1
Vote‚àí49.6¬±0.1‚àí49.8¬±0.0‚àí49.8¬±0.1‚àí49.9¬±0.1
W. Red‚àí3.6¬±0.3‚àí4.4¬±0.4‚àí2.7¬±0.3‚àí3.0¬±0.1
W. White‚àí3.0¬±0.6‚àí3.6¬±0.6‚àí2.6¬±0.1‚àí2.6¬±0.1
Wine‚àí19.9¬±0.6‚àí22.4¬±0.5‚àí18.4¬±0.4‚àí20.6¬±0.1
Yacht 2.2¬±1.8 1.0¬±1.9 8.3¬±0.6 5.0¬±0.2
(Abalone, Breast, Crx, Dermatology, German, Wine). The datasets
were divided into 8:1:1 for training, validation, and testing. To pre-
vent irregular influence on the results, ùëò-nearest neighbor based
outlier detection was performed as pre-processing. We fixed ùê∂ùëù=2
and investigated the effect of different ùê∂ùë†. Each configuration was
tested 10times with different random seeds and the mean and stan-
dard deviation were plotted. The leaf distribution node consisted
of a heterogeneous mixture of one-dimensional probability distri-
butions (exponential, Gaussian, Poisson, and multinomial) similar
to Vergari et al . [32] . The hyperparameters of the leaf distributions
were obtained by the empirical Bayes approach described in Sec-
tion 3.4 optimized by conducting 100trials of TPE. The code was
written in Julia and iterated as much as possible within 12 hours
(including a 6-hour burn-in period) on an Intel Xeon Bronze 3204
CPU machine.
4.1 Computational Efficiency
We first measured the elapsed time required for each sampling
method to perform one iteration of Gibbs sampling and confirmed
how much acceleration was achieved. Table 4 shows the elapsed
time required for each sampling method to perform one itera-
tion of Gibbs sampling. The results consistently show that the
top-down method is superior and generally several orders of mag-
nitude shorter in execution time. The bottom-up method calculates
outputs at all nodes and propagates them using the logsumexp al-
gorithm, whereas the top-down method only identifies the memory
addresses of induced leaves. Therefore, the actual computation time
is significantly faster than the theoretical time complexity suggests.In particular, the difference is significant as ùê∂ùë†increases. These
results show that the top-down method is tens to more than one
hundred times faster, supporting the efficiency of our method.
4.2 Sample Correlation
Samples generated by Gibbs sampling are not independent but
rather long sequences of random vectors that exhibit correlation
over time. Samples with correlation are redundant and do not pro-
vide information about the underlying distribution efficiently, caus-
ing underestimation of errors in Bayesian inference. In this exper-
iment, we investigate the quality of the samples obtained by the
two sampling methods by comparing the effective sample size.
Table 5 shows the effective sample size of 50thinned subsamples
at equal intervals. Since the bottom-up method could not generate
50samples within the time limit for some datasets, the results are
not shown for the cases. The values are large enough for many
configurations, indicating that both sampling methods provide suf-
ficiently independent samples within a realistic time range. The
bottom-up method is slightly superior in many cases, but the dif-
ference is not extreme overall. Due to the marginalization and
rejection, the result of the top-down method remained within a
comparable range to that of the bottom-up method. The results are
stable against the increase in ùê∂ùë†.
4.3 Overall Performance
Finally, we evaluated the overall predictive performance of the top-
down sampling method, which reveals the trade-off between fast
iteration speed and sample correlation.
3984Top-Down Bayesian Posterior Sampling for Sum-Product Networks KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Figure 4: Comparison of the temporal evolution of predictive performance between top-down Gibbs sampling, bottom-up
Gibbs sampling, and collapsed variational Bayesian method. The average test-set log-likelihood over 10trials is shown with the
lines, and the standard deviation is indicated by the shaded regions.
Table 6 compares the log-likelihood on the test set for different
ùê∂ùë†, showing the results after the burn-in period. Also, Figure 4
illustrates the temporal evolution of predictive performance, show-
ing the differences between the methods by optimizing ùê∂ùë†. For
practical interest, this experiment also compares the results with
those of the collapsed variational Bayes [ 34] based on optimization
by the gradient descent method. The top-down method is almost
consistently superior to the others, achieving the same or higher
likelihood in most configurations. These results suggest that the
algorithm speedup outweighs the impact of sample correlation.
While collapsed VB is memory efficient because it does not need
to store latent variables for each data point, it requires two full
network traversals for output propagation and gradient calculation,
resulting in a time complexity of the same order as the bottom-up
method. For a more comprehensive set of results, please refer to
Appendix C.
From the above experiments, we conclude that (1) the top-down
method is tens to more than one hundred times faster than the
bottom-up method, (2) the sample correlation is sufficiently small
for both methods, and (3) as a result, the top-down method can
achieve higher predictive performance than the bottom-up method
in many cases.
5 Conclusion
Prior work has interpreted SPNs as latent variable models and
introduced Gibbs sampling as a Bayesian learning method. This has
made it possible to automatically discriminate different distribution
types for data and learn network structures in a manner consistentwith the Bayesian framework. However, the bottom-up posterior
sampling approach based on the entire graph evaluation had a
computational difficulty. The shape of the computational graph
was a bottleneck due to the structural constraints.
This study aimed to accomplish a fast Bayesian learning method
for SPNs. First, we investigated the complexity of SPNs when the
outdegrees of the sum and product nodes are given and discussed
the graph shape of SPN with high representational power. We
also derived the new full conditional probability that marginalizes
multiple variables to improve sample mixing. For the complexity
and the marginalized posterior distribution, we proposed the top-
down sampling algorithm based on the carefully designed proposal
and rejection steps of the Metropolis‚ÄìHastings. Our optimization
efforts resulted in a time complexity reduction from O
ùê∂logùê∂ùëùùê∑+1
ùë†
down toO
ùê∂logùê∂ùëùùê∑
ùë†
. In numerical experiments on more than 20
datasets, we demonstrated a speedup of tens to more than one
hundred times and improved predictive performance.
Acknowledgments
Issei Sato was supported by JSPS KAKENHI Grant Number 20H05703
Japan.
3985KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Soma Yokoi and Issei Sato
References
[1]Mohamed R Amer and Sinisa Todorovic. 2016. Sum Product Networks for Activity
Recognition. IEEE Trans Pattern Anal Mach Intell 38, 4 (2016), 800‚Äì813.
[2]James Bergstra, R√©mi Bardenet, Yoshua Bengio, and Bal√°zs K√©gl. 2011. Algorithms
for Hyper-Parameter Optimization. In Advances in Neural Information Processing
Systems 24 (NIPS 2011). 2546‚Äì2554.
[3]Cory J. Butz, Jhonatan S. Oliveira, and Andre E. dos Santos. 2017. On Learn-
ing the Structure of Sum-Product Networks. In 2017 IEEE Symposium Series on
Computational Intelligence (SSCI). 1‚Äì8.
[4]Wei-Chen Cheng, Stanley Kok, Hoai Vu Pham, Hai Leong Chieu, and Kian Ming A.
Chai. 2014. Language modeling with sum-product networks. In Fifteenth Annual
Conference of the International Speech Communication Association.
[5]Adnan Darwiche. 2001. On the Tractable Counting of Theory Models and its
Application to Truth Maintenance and Belief Revision. Journal of Applied Non-
Classical Logics 11, 1-2 (2001), 11‚Äì34.
[6]Robert Gens and Pedro Domingos. 2012. Discriminative learning of sum-product
networks. In Advances in Neural Information Processing Systems 25 (NIPS 2012).
3239‚Äì3247.
[7]Robert Gens and Domingos Pedro. 2013. Learning the Structure of Sum-Product
Networks. In Proceedings of the 30th International Conference on Machine Learning
(ICML 2013). 873‚Äì880.
[8]Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-
Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. 2014. Generative
Adversarial Nets. In Advances in Neural Information Processing Systems 27 (NIPS
2014). 2672‚Äì2680.
[9]Wilson Hsu, Agastya Kalra, and Pascal Poupart. 2017. Online Structure Learn-
ing for Sum-Product Networks with Gaussian Leaves. In The 5th International
Conference on Learning Representations (Workshop) (ICLR 2017).
[10] Priyank Jaini, Abdullah Rashwan, Han Zhao, Yue Liu, Ershad Banijamali, Zhitang
Chen, and Pascal Poupart. 2016. Online Algorithms for Sum-Product Networks
with Continuous Variables. In Proceedings of the Eighth International Conference
on Probabilistic Graphical Models (Proceedings of Machine Learning Research,
Vol. 52). 228‚Äì239.
[11] Markelle Kelly, Rachel Longjohn, and Kolby Nottingham. [n. d.]. The UCI Machine
Learning Repository. https://archive.ics.uci.edu. Accessed: 2023-10-12.
[12] Diederik P. Kingma and Max Welling. 2014. Auto-Encoding Variational Bayes. In
The 2nd International Conference on Learning Representations (ICLR 2014).
[13] Ching-Yun Ko, Cong Chen, Zhuolun He, Yuke Zhang, Kim Batselier, and Ngai
Wong. 2020. Deep Model Compression and Inference Speedup of Sum‚ÄìProduct
Networks on Tensor Trains. IEEE Transactions on Neural Networks and Learning
Systems 31, 7 (2020), 2665‚Äì2671.
[14] Amit Parag and Vaishak Belle. 2022. Tractable Generative Modelling of Cosmo-
logical Numerical Simulations. (2022). working paper or preprint.
[15] Robert Peharz. 2019. Sum-Product Networks and Deep Learning: A Love Marriage.
https://slideslive.com/38917679. Accessed: 2023-10-12.
[16] Robert Peharz, Robert Gens, Franz Pernkopf, and Pedro Domingos. 2017. On the
Latent Variable Interpretation in Sum-Product Networks. IEEE Transactions on
Pattern Analysis and Machine Intelligence 39, 10 (2017), 2030‚Äì2044.
[17] Robert Peharz, Georg Kapeller, Pejman Mowlaee, and Franz Pernkopf. 2014. Mod-
eling speech with sum-product networks: Application to bandwidth extension.
In2014 IEEE International Conference on Acoustics, Speech and Signal Processing
(ICASSP). 3699‚Äì3703.
[18] Robert Peharz, Sebastian Tschiatschek, Franz Pernkopf, and Pedro M. Domingos.
2015. On Theoretical Properties of Sum-Product Networks. In International
Conference on Artificial Intelligence and Statistics (AISTATS) (Proceedings of the
Eighteenth International Conference on Artificial Intelligence and Statistics, PMLR
38). 744‚Äì752.[19] Robert Peharz, Antonio Vergari, Karl Stelzner, Alejandro Molina, Xiaoting Shao,
Martin Trapp, Kristian Kersting, and Zoubin Ghahramani. 2020. Random Sum-
Product Networks: A Simple and Effective Approach to Probabilistic Deep Learn-
ing. In Proceedings of the 35th Uncertainty in Artificial Intelligence Conference
(Proceedings of Machine Learning Research, Vol. 115). 334‚Äì344.
[20] Hoifung Poon and Pedro Domingos. 2011. Sum-Product Networks: A New Deep
Architecture. In Proceedings of the Twenty-Seventh Conference on Uncertainty in
Artificial Intelligence (UAI 2011). 337‚Äì346.
[21] Andrzej Pronobis and Rajesh P. N. Rao. 2017. Learning deep generative spatial
models for mobile robots. 2017 IEEE/RSJ International Conference on Intelligent
Robots and Systems (IROS) (2017).
[22] Abdullah Rashwan, Han Zhao, and Pascal Poupart. 2016. Online and Distributed
Bayesian Moment Matching for Parameter Learning in Sum-Product Networks.
InProceedings of the 19th International Conference on Artificial Intelligence and
Statistics (Proceedings of Machine Learning Research, Vol. 51). 1469‚Äì1477.
[23] Fabian Rathke, Mattia Desana, and Christoph Schn√∂rr. 2017. Locally Adaptive
Probabilistic Models for Global Segmentation of Pathological OCT Scans. In
International Conference on Medical Image Computing and Computer-Assisted
Intervention (Lecture Notes in Computer Science, Vol. 10433). Springer, 177‚Äì184.
[24] Danilo Rezende and Shakir Mohamed. 2015. Variational Inference with Nor-
malizing Flows. In Proceedings of the 32nd International Conference on Machine
Learning (ICML 2015). 1530‚Äì1538.
[25] Feras A. Saad, Martin C. Rinard, and Vikash K. Mansinghka. 2021. SPPL: Proba-
bilistic Programming with Fast Exact Symbolic Inference. In Proceedings of the
42nd ACM SIGPLAN International Conference on Programming Language Design
and Implementation. Association for Computing Machinery, 804‚Äì819.
[26] Lukas Sommer, Julian Oppermann, Alejandro Molina, Carsten Binnig, Kristian
Kersting, and Andreas Koch. 2018. Automatic Mapping of the Sum-Product Net-
work Inference Problem to FPGA-Based Accelerators. In ICCD. IEEE Computer
Society, 350‚Äì357.
[27] Martin Trapp. 2020. Sum-Product Networks for Complex Modelling Scenarios. Ph. D.
Dissertation. the Graz University of Technology.
[28] Martin Trapp, Robert Peharz, Hong Ge, Franz Pernkopf, and Zoubin Ghahra-
mani. 2019. Bayesian Learning of Sum-Product Networks. In Advances in Neural
Information Processing Systems 32 (NeurIPS 2019).
[29] Martin Trapp, Robert Peharz, and Franz Pernkopf. 2019. Optimisation of Over-
parametrized Sum-Product Networks. In 3rd Workshop of Tractable Probabilistic
Modeling at the International Conference on Machine Learning.
[30] Joaquin Vanschoren, Jan N. van Rijn, Bernd Bischl, and Luis Torgo. 2013. OpenML:
networked science in machine learning. SIGKDD Explorations 15, 2 (2013), 49‚Äì60.
[31] Antonio Vergari, Nicola Di Mauro, and Floriana Esposito. 2015. Simplifying,
Regularizing and Strengthening Sum-Product Network Structure Learning. In
Proceedings of the 2015th European Conference on Machine Learning and Knowledge
Discovery in Databases - Volume Part II (ECMLPKDD‚Äô15). 343‚Äì358.
[32] Antonio Vergari, Alejandro Molina, Robert Peharz, Zoubin Ghahramani, Kristian
Kersting, and Isabel Valera. 2019. Automatic Bayesian Density Analysis. Proceed-
ings of the AAAI Conference on Artificial Intelligence 33, 01 (2019), 5207‚Äì5215.
[33] Zehuan Yuan, Hao Wang, Limin Wang, Tong Lu, Shivakumara Palaiahnakote, and
Chew Lim Tan. 2016. Modeling Spatial Layout for Scene Image Understanding
via a Novel Multiscale Sum-Product Network. Expert Syst. Appl. 63, C (2016),
231‚Äì240.
[34] Han Zhao, Tameem Adel, Geoff Gordon, and Brandon Amos. 2016. Collapsed
Variational Inference for Sum-Product Networks. In Proceedings of the 33rd Inter-
national Conference on Machine Learning (ICML 2016) . 1310‚Äì1318.
[35] Han Zhao and Geoff Gordon. 2017. Linear Time Computation of Moments in
Sum-Product Networks. In Advances in Neural Information Processing Systems 30
(NIPS 2017). 6897‚Äì6906.
[36] Han Zhao, Pascal Poupart, and Geoff Gordon. 2017. A Unified Approach for Learn-
ing the Parameters of Sum-Product Networks. In Advances in Neural Information
Processing Systems 30 (NIPS 2017). 433‚Äì441.
3986Top-Down Bayesian Posterior Sampling for Sum-Product Networks KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
A Notation
Table 7: Notation
Symbol Definition Dimension
xùëõ ùëõ-th data,ùëõ‚àà(1,...,ùëÅ) ùê∑
zùëõ categorical assignments of ùíôùëõ ùëÜ
ùë† sum node,ùë†‚àà(1,...,ùëÜ) 1
wùë†weight vector of ùë† ùê∂
ùõº hyperparameter of wùë†1
ùêøùëë
ùëóùëó-th leaf distribution of dimension ùëë 1
ùúÉùëë
ùëóparameters of ùêøùëë
ùëó1
ùõæùëë
ùëóhyperparameters of ùúÉùëë
ùëó1
ùëá(z) induced tree by z -
B Algorithm
Algorithm 1 Bayesian learning by top-down sampling
Require: dataset X, hyperparameters ùú∂andùú∏, the number of
childrenùê∂ùë†andùê∂ùëù
initialize SPN ùú∂,ùú∏,ùê∂ùë†,ùê∂ùëùand sample store Zs
forGibbs iteration ùëñdo
fordata indexùëõ‚àà(1,...,ùëÅ)do
generate candidate ùíÑ‚àº¬∑| Z\ùëõ,ùú∂ {Equation (10)}
ifacceptùê¥(ùíÉ‚ÜíùíÑ)>ùëüùëéùëõùëë()then
update assignment zùëõ‚ÜêùíÑ
update assign counts Nùë†,ùëêùë†
\ùëõ
update leaf sufficient statistics ùëùùêøùëë
ùëó
end if
end for
ifùëñ‚àâburn-in then
add sample Zs‚ÜêZs‚à™Z
end if
end for
return Zs
C All Experimental Results
Table 8: Elapsed time [s] per Gibbs iteration (mean ¬±std)
ùê∂ùë†=2 ùê∂ùë†=4
Dataset
Top-down Bottom-up Speedup Top-down Bottom-up Speedup
Abalone 0.076¬±0.004 1.574¬±0.043√ó21 0.367¬±0.019 17.38¬±0.699√ó47
Ailer
ons 2.938¬±0.121 96.28¬±2.631√ó33 181.2¬±28.06 3282¬±105.9√ó18
Airfoil Self-Noise 0.010¬±0.001 0.303¬±0.024√ó30 0.021¬±0.001 2.047¬±0.143√ó97
Breast 0.005¬±0.000 0.170¬±0.016√ó34 0.014¬±0.001 1.938¬±0.079√ó138
Computer Hardware 0.003¬±0.000 0.098¬±0.011√ó33 0.007¬±0.000 0.943¬±0.078√ó135
cpu_act 0.525¬±0.016 16.80¬±0.771√ó32 11.72¬±2.503 588.0¬±15.46√ó50
cpu_small 0.204¬±0.005 5.592¬±0.206√ó27 2.059¬±0.119 99.17¬±3.382√ó48
Crx 0.023¬±0.001 0.722¬±0.013√ó31 0.232¬±0.006 14.21¬±0.458√ó61
Dermatology 0.034¬±0.002 1.887¬±0.042√ó56 1.932¬±0.162 92.19¬±3.150√ó48
elevators 0.759¬±0.025 24.87¬±0.635√ó33 17.62¬±3.630 804.7¬±35.45√ó46
Forest Fires 0.015¬±0.001 0.405¬±0.021√ó27 0.101¬±0.004 5.809¬±0.191√ó58
German 0.050¬±0.003 2.095¬±0.064√ó42 1.298¬±0.099 76.78¬±3.338√ó59
Housing 0.009¬±0.000 0.445¬±0.038√ó49 0.114¬±0.005 6.616¬±0.250√ó58
Hybrid Price 0.001¬±0.000 0.015¬±0.000√ó15 0.001¬±0.000 0.061¬±0.007√ó61
kin8nm 0.099¬±0.005 3.216¬±0.326√ó32 0.696¬±0.034 33.76¬±1.653√ó49
LPGA2008 0.001¬±0.000 0.046¬±0.002√ó46 0.002¬±0.000 0.318¬±0.034√ó159
LPGA2009 0.002¬±0.000 0.118¬±0.014√ó59 0.011¬±0.001 1.347¬±0.061√ó123
Parkinsons Telemonitoring (motor) 0.207¬±0.012 6.516¬±0.189√ó31 3.273¬±0.300 157.8¬±5.869√ó48
Parkinsons Telemonitoring (total) 0.211¬±0.011 6.631¬±0.226√ó30 3.207¬±0.332 156.4¬±5.911√ó49
Vote for Clinton 0.028¬±0.002 1.413¬±0.153√ó50 0.315¬±0.011 15.43¬±0.510√ó49
Wine Quality Red 0.024¬±0.002 1.100¬±0.079√ó46 0.294¬±0.012 15.51¬±0.871√ó53
Wine Quality White 0.088¬±0.006 3.215¬±0.249√ó37 0.979¬±0.044 49.60¬±2.455√ó51
Wine 0.004¬±0.000 0.196¬±0.020√ó49 0.028¬±0.004 2.576¬±0.088√ó92
Yacht Hydrodynamics 0.003¬±0.000 0.088¬±0.012√ó29 0.005¬±0.000 0.603¬±0.064√ó121Table 9: Effective sample size per 50 samples (mean ¬±std)
ùê∂ùë†=2 ùê∂ùë†=4
Dataset
Top-down Bottom-up Top-down Bottom-up
Abalone 19.75¬±0.45 20.39¬±0.40 17.36¬±0.28 19.77¬±0.17
Ailer
ons 14.11¬±0.26 16.74¬±0.18 17 .92¬±0.07 -
Airfoil Self-Noise 20.22¬±0.28 20.47¬±0.55 17.89¬±0.52 20.49¬±0.15
Breast 20.37¬±0.13 20.56¬±0.15 20 .51¬±0.04 20.40¬±0.04
Computer Hardware 20.32¬±0.43 20.69¬±0.24 19.52¬±0.24 20.57¬±0.03
cpu_act 14.37¬±0.63 20.23¬±0.22 15 .50¬±0.70 -
cpu_small 12.94¬±0.99 19.71¬±0.33 17.79¬±0.16 20.18¬±0.13
Crx 18.67¬±0.64 20.63¬±0.13 18.84¬±0.07 19.93¬±0.03
Dermatology 15.56¬±0.25 20.57¬±0.06 19.07¬±0.06 20.10¬±0.03
elevators 15.05¬±0.22 18.01¬±0.34 16 .99¬±0.06 -
Forest Fires 18.86¬±0.45 20.61¬±0.18 18.60¬±0.11 20.53¬±0.03
German 17.34¬±0.34 20.60¬±0.11 18.94¬±0.07 19.35¬±0.03
Housing 17.31¬±1.22 20.56¬±0.14 17.43¬±0.24 20.50¬±0.02
Hybrid Price 20.38¬±0.66 20.54¬±0.97 20.51¬±0.39 20.57¬±0.36
kin8nm 18.15¬±2.14 20.75¬±0.30 16.83¬±0.13 19.45¬±0.18
LPGA2008 20.67¬±0.60 20.46¬±0.24 20.47¬±0.17 20.50¬±0.11
LPGA2009 20.52¬±0.39 20.48¬±0.31 20.37¬±0.15 20.54¬±0.05
Parkinsons Telemonitoring (motor) 16.43¬±2.41 20.29¬±0.29 17 .48¬±0.36 17.07¬±0.06
Parkinsons Telemonitoring (total) 16.54¬±2.52 20.19¬±0.36 18 .46¬±0.62 16.96¬±0.10
Vote for Clinton 16.97¬±0.93 19.95¬±0.58 17.25¬±0.26 19.41¬±0.10
Wine Quality Red 17.27¬±2.25 20.43¬±0.31 17.04¬±0.16 19.72¬±0.05
Wine Quality White 15.81¬±1.21 20.54¬±0.29 16.70¬±0.14 19.37¬±0.10
Wine 20.51¬±0.35 20.53¬±0.13 18.12¬±0.30 20.55¬±0.03
Yacht Hydrodynamics 20.03¬±1.16 20.69¬±0.29 20.19¬±0.21 20.57¬±0.11
Table 10: Log-likelihood (mean ¬±std)
ùê∂ùë†=2 ùê∂ùë†=4
Dataset
Top-down Bottom-up Top-down Bottom-up
Abalone 4.47¬±0.31 1.10¬±0.15 6.97¬±0.30 2.94¬±0.12
Ailer
ons 110.24¬±0.87 108.22¬±0.36 106.95¬±0.83 106.26¬±0.99
Airfoil Self-Noise ‚àí12.57¬±1.25‚àí13.06¬±1.39‚àí6.57¬±0.20‚àí7.91¬±0.27
Breast ‚àí6.56¬±0.18‚àí7.29¬±0.32‚àí6.45¬±0.11‚àí6.90¬±0.16
Computer Hardware ‚àí49.19¬±4.61‚àí51.94¬±5.76‚àí32.35¬±0.71‚àí34.28¬±0.64
cpu_act ‚àí101 .13¬±1.49‚àí103.49¬±1.03‚àí99.91¬±0.13‚àí97.79¬±0.20
cpu_small ‚àí85.03¬±0.76‚àí87.06¬±2.03‚àí82.52¬±0.62‚àí82.09¬±0.32
Crx ‚àí49.87¬±11.20‚àí52.13¬±13.01‚àí30.33¬±2.23‚àí30.08¬±2.18
Dermatology 21.87¬±2.99 22.26¬±1.57 25.92¬±0.55 46.70¬±0.26
elevators 29.07¬±0.15 29.02¬±0.14 29.34¬±0.16 29.14¬±0.19
Forest Fires ‚àí30.81¬±0.49‚àí32.24¬±0.60‚àí27.46¬±0.25‚àí28.45¬±0.15
German ‚àí17.52¬±0.45‚àí19.00¬±0.32‚àí15.33¬±0.60‚àí14.08¬±0.23
Housing ‚àí24.07¬±1.33‚àí27.02¬±0.95‚àí18.40¬±0.94‚àí20.80¬±0.21
Hybrid Price ‚àí22.58¬±0.42‚àí22.74¬±0.29‚àí21.42¬±0.36‚àí22.61¬±0.19
kin8nm ‚àí10.23¬±0.10‚àí10.26¬±0.07‚àí10.10¬±0.04‚àí10.13¬±0.02
LPGA2008 ‚àí15.68¬±0.42‚àí15.93¬±0.43‚àí14.68¬±0.20‚àí14.84¬±0.09
LPGA2009 ‚àí28.29¬±0.40‚àí29.63¬±0.21‚àí27.39¬±0.44‚àí29.72¬±0.20
Parkinsons Telemonitoring (motor) 43.85¬±0.65 41.94¬±0.25 43.50¬±0.56 42.08¬±0.06
Parkinsons Telemonitoring (total) 43.37¬±0.57 41.68¬±0.13 42.82¬±0.83 41.53¬±0.07
Vote for Clinton ‚àí49.61¬±0.14‚àí49.84¬±0.03‚àí49.77¬±0.09‚àí49.89¬±0.05
Wine Quality Red ‚àí3.62¬±0.30‚àí4.35¬±0.37‚àí2.73¬±0.28‚àí2.95¬±0.11
Wine Quality White ‚àí2.96¬±0.57‚àí3.59¬±0.56‚àí2.57¬±0.14‚àí2.61¬±0.10
Wine ‚àí19.90¬±0.63‚àí22.44¬±0.46‚àí18.41¬±0.44‚àí20.58¬±0.14
Yacht Hydrodynamics 2.22¬±1.83 1.06¬±1.85 8.25¬±0.64 4.98¬±0.15
3987KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Soma Yokoi and Issei Sato
Figure 5: Comparison of the temporal evolution of predictive performance between top-down Gibbs sampling, bottom-up
Gibbs sampling, and collapsed variational Bayesian method. The average test-set log-likelihood over 10trials is shown with the
lines, and the standard deviation is indicated by the shaded regions.
3988