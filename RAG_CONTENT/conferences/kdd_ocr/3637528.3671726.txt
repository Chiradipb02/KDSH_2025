Efficient Discovery of Time Series Motifs 
under both Length Differences and Warping  
Makoto Imamura  
 Tokai University 
 Japan 
 imamura@tsc.u-tokai.ac.jp  Takaaki Nakamura  
 Mitsubishi Electric Corporation  
 Japan 
nakamura.takaaki@dy.mitsubishielectric.co.jp 
ABSTRACT 
Over the past two decades, time series motif discovery has become 
a crucial subroutine for many time series data mining tasks; concurrently, it has been establ ished that Dynamic Time Warping 
(DTW) outperforms other similari ty measures like Euclidean 
Distance in most scenarios. Against this backdrop, a DTW motif discovery algorithm was recently  developed; however, it is 
confined to working with fixed-length subsequences. In this work, we propose a novel approach that allows us to find motifs under 
both length differences and warp ing. Our algorithm exploits a 
promising time series repres entation called Spikelets and 
introduces the first lower bound for DTW in the Spikelet space. 
Extensive empirical studies demonstrate that our method scales 
effectively across various real-world datasets and efficiently identifies DTW motif pairs of different lengths.  
CCS CONCEPTS 
‚Ä¢ Computing methodologies ‚Üí Similarity Detection; Motifs. 
KEYWORDS 
Time series; Time series Moti fs; Adaptive Representation 
ACM Reference format: 
Makoto Imamura and Takaaki Nakamura. 2024. Effi cient Discovery of 
Time Series Motifs under both Length Di fferences and Warping. In 
Proceedings of the 30th ACM SIGKDD international conference on 
Knowledge discovery and data mining (KDD‚Äô24). ACM, Barcelona, Spain. 
https://doi.org/10.1145/3637528.3671726  
1 INTRODUCTION 
The concept of time series motifs , subsequences that 
approximately repeat within a long time series, has emerged as 
one of the most useful time seri es primitives in the last two 
decades [5][27]. However, most algorithms in this field continue 
to rely on Euclidean Distance (ED) [14][19][21][28], despite a 
growing consensus that Dynamic Time Warping (DTW) is generally superior in most sett ings [16][23][26]. In response, a 
scalable Matrix Pro file-based method to discover motifs under 
DTW, hereina fter referred to as Fixed-Length DTW (F-DTW), was 
recently proposed [2][3]. However, F-DTW is limited to subsequences of fixed length. Moreover, wh ile F-DTW accelerates 
processing through clever lower bounding and multi-scale pruning techniques, the method is still ultimately quadratic in the 
time series length. 
Recently, the Spikelet  approach [10][11], which employs time 
series decomposition based on the fluctuation range of values, was 
introduced to aggressively prun e candidate motif subsequences 
suitable for DTW distance. This pruning method achieves linear 
computational complexity ùëÇ·à∫ùëÅ·àª  for DTW motifs of arbitrary 
length, with N as the time series length. Notably, if the number of 
candidates is reduced to 1/ 10
‡¨∂, the worst-case computation time 
can be reduced to 1/ 10‡¨∏ , as pairwise distance calculations are 
proportional to the square of the number of candidates. While exceptionally useful, the conven tional Spikelet approach has 
limitations: it only identi fies motif pa tterns separated by flat 
regions, and it lacks an admissible lower bound for DTW distance. 
In this context, we introduce 'PeVAM' (Peak and Valley 
Alignment for Motifs), featuring a novel DTW distance measure ('PV-DTW') that intuitively aligns peaks to peaks and valleys to valleys. This method, along with its lo wer bound, allows for the 
rapid identi fication of DTW motifs of varying lengths. Figure 1 
shows telemetry from an insect pest feeding on a plant, highlighting pa tte r n s  t h a t  v a r y  s i g n i ficantly in length. This 
variability in pa ttern length challenges most algorithms that 
require a fixed subsequence length [3][13]. Unlike F-DTW motif 
analysis, which relies on a single  window size, PeVAM uses a user-
specified fluctuation range  as its parameter, enabling the 
identification of motifs across vastly di fferent lengths in time 
series with tens of millions of data points. 
 
Figure 1:  top) Telemetry from an Asian citrus psyllid of length 
7,583,000. bottom ) The top-1 DTW motifs discovered under a range of 
user constraints (discussed later in Section 4.1). 
 
Permission to make digital or hard copies of  all or part of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed for 
profit or commercial advantage and that copies bear this notice and the full citation on 
the first page. Copyrights for components of this work owned by others than the 
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or 
republish, to post on servers or to redistribute  to lists, requires prior specific permission 
and/or a fee. Request permissions from Permissions@acm.org. 
KDD '24, August 25-29, 2024, Barcelona, Spain. 
¬© 2024 Copyright is held by the owner/author (s). Publication rights  licensed to ACM. 
ACM ISBN 979-8-4007-0490-1/24/08. 
https://doi.org/10.1145/3637528.3671726 
 
1188
KDD '24, August 25-29, 2024, Barcelona, Spain Makoto Imamura & Takaaki Nakamura 
 
 
 The main contributions of this work are the following: 
‚óè More Expressive Pattern Discovery : We introduce a novel 
DTW distance, termed PV-DTW, that allows us to extract 
motifs of arbitrary lengths. Th is generalizes the traditional 
Spikelet approach, which is co nstrained to work only with 
patterns with a special structure; PeVAM can handle shapes 
with arbitrary structure, as hinted at in Figure 1. 
‚óè Fast Discovery : We propose a novel lower bound for the PV-
DTW distance, leveraging the incr ease in DTW distance due to 
misaligned peaks and valleys. This enables rapid discovery of DTW motifs in datasets with millions of data points. 
The rest of this paper is organized as follows. In Section 2, we 
survey related work and review the Spikelet representation. Section 3 introduces the definitions and the algorithms used in our approach. 
In Section 4, we empirically show that PeVAM can discover motifs 
potentially overlooked by existing methods. Furthermore, we provide evidence of its scalability when applied to large real-world datasets. Finally, Section 5 offers conclusions and directions for future work. 
2 RELATED WORK AND BACKGROUND 
2.1 Related Work 
In the standard approach to motif discovery, a window size 'W' is 
given, and the task is to  find the pair of (distinct) subsequences of 
length 'W' where the distance be tween them is minimized. This 
task becomes challenging because it involves evaluating all pairwise distances, which scales with the square of the time series length. For Euclidean distance, th e Matrix Profile [27][29] is a 
state-of-the-art technology that enables fast computation between subsequences using computation reuse. However, this method 
originally did not  apply to DTW distance, prompting Alaee et al. 
to propose SWAMP, a DTW motif discovery method using lower bounding and a pruning strategy with downsampling [2]. However, SWAMP can only discover single-length motifs.  
Numerous studies exist in the field of DTW for data mining. 
There are methods to avoid pathological warping alignments,  including evaluating shapes using derivatives [15] and imposing penalties on alignments that map many points to a single point 
[17]. These approaches share some similarities with PeVAM in 
terms of their use of alignment constraints. However, PeVAM is 
distinct in its use of Spikelet decomposition and its simplicity, 
requiring only a single paramete r, 'MaT (Magnitude Threshold).' 
Various techniques also exist to accelerate DTW, including pruning strategies that leverage DTW lower bounds [2][16] and wavelet-based methods [9]. 
For arbitrary length motif discovery, a scalable approach based 
on Euclidean distance has been proposed [22][18][8] [20]. PeVAM 
focuses on DTW and the comparison of different-length subsequences, while the mentio ned works address Euclidean 
Distance (ED). ED allows linear rescaling, whereas DTW is non-
linear. Moreover, the rescaling may become untenably slow in 
cases such as Figure 1, which shows a motif pair with dramatically 
different lengths. Motif discovery requires O( ùëö
‡¨∂) comparisons, 
where ùëö is the number of motif candidates. Finding motifs of different lengths with rescaling would involve three nested loops: 
testing EVERY subsequence against EVERY  other subsequence 
with EVERY rescaling factor. 
2.2 A Review of the Spikelet Approach 
Our work builds on the recently introduced Spikelet representation [10]. The core idea of Spikelet is to decompose time 
series into shapes that make it easy to estimate DTW distance. We 
begin by reviewing the necessary elements of the Spikelet. We 
refer the interested reader to [10][11] for full details. 
Informally, a ‚Äúspike‚Äù is a subsequence that has a convex shape. 
A spike has two basic quantifiable features: magnitude  and support 
length. The magnitude corresponds to the height of a spike; the 
support length corresponds to the width of a spike. It is important 
to note that despite their name, Spikelets are not necessarily 
‚Äúspikes‚Äù as traditionally understood (a dramatic increase instantly followed by an equally fast return to baseline). The only requirement to be a spike is that  a subsequence has a convex (or 
concave) shape.  
We begin by defining the datatype of interest, time series : 
Definition 1: A time series T  is a sequence of real-valued 
numbers t
i: T = t 1, t2, ..., t n where n is the length of T. 
A local region of time series is called a subsequence : 
Definition 2: A subsequence T [l:r] of a time series  T is a 
continuous subset of the values in  T starting from a position  l to a 
position  r. Formally,  T[l:r] = t l,tl+1,‚Ä¶ t i,‚Ä¶,t r-1,tr, where  l‚â§ i ‚â§ r. A 
position i is called an index of the subsequence T[l:r]. A set of 
indexes is called a support  of a subsequence, and we denote supp. 
Formally,  ùë†ùë¢ùëùùëù·à∫ùëá·àæùëô:ùëü·àø·àª‡µå·àº ùëñ |  ùëô‚â§  ùëñ ‚â§ ùëü ·àΩ  
A subsequence with maximum or  minimum endpoints in the 
subsequence is called a leg.  
Definition 3: A subsequence ùëá·àæùëô:ùëü·àø is a leg, 
if for every  ùëñ such that ùëô‡µèùëñ‡µèùëü    ·à∫ùëá‡Øú‚àíùëá‡Ø•·àª·à∫ùëá‡Øú‚àíùëá‡Øü·àª‡µè0 
                               and  ·à∫ùëá‡Øü‡¨ø‡¨µ‚àíùëá‡Øü·àª·à∫ùëá‡Øü‡¨æ‡¨µ‚àíùëá‡Øü·àª‡µê0 
                               and  ·à∫ùëá‡Ø•‡¨ø‡¨µ‚àíùëá‡Ø•·àª·à∫ùëá‡Ø•‡¨æ‡¨µ‚àíùëá‡Ø•·àª‡µê0 
The sign and magnitude of a leg  are defined as follows: 
    sign (ùëá·àæùëô:ùëü·àø) = sign·à∫ùëá‡Ø•‚àíùëá‡Øü·àª 
    magnitude (ùëá·àæùëô:ùëü·àø) = ùëá‡Ø•‚àíùëá‡Øü 
A leg that cannot be further extended anymore is called a 
maximal leg , as shown in the left side of  Figure 2.  
Definition 4: ùëá·àæùëô:ùëü·àø is the maximal forward leg from l if there 
is no leg ùëá·àæ ùëô: ùëü·á±·àø with ùëü‡µèùëü·á±. Similarly, ùëá·àæùëô:ùëü·àø is the maximal 
backward  leg from r if there is no leg ùëá·àæ ùëô·á±: ùëü·àø with ùëô·á±‡µèùëô. 
Figure 2:  left) An example of the maximal backward leg. right ) A 
spike, its magnitude, left leg, right leg, and support length. 
A subsequence consisting of tw o consecutive maximal legs is 
referred to as a spike, as depicted in Figure 2. right . 
 
1189Efficient Discovery of Time Series Motifs KDD '24, August 25-29, 2024, Barcelona, Spain 
 
 Definition 5: ùëá·àæùëô:ùëü·àø is a spike, if there exists an index p such 
that ùëá·àæùëô:ùëù·àø is the maximal backward leg from p and ùëá·àæùëù:ùëü·àø is the 
maximal forward leg from p. Legs ùëá·àæùëô:ùëù·àø and ùëá·àæùëù:ùëü·àø are called a 
left leg  and a right leg , respectively.  The sign and magnitude  of a 
spike  are defined as follows: 
    sign (ùëá·àæùëô:ùëü·àø) = sign·à∫ùëá·àæùëô:ùëù·àø·àª 
    magnitude (ùëá·àæùëô:ùëü·àø) = sign(ùëá·àæùëô:ùëü·àø) ‡µà 
ùëöùëñùëõ·à∫ùëéùëèùë†‡µ´ùëöùëéùëîùëõùëñùë°ùë¢ùëëùëí ·à∫ùëá·àæùëô:ùëù·àø·àª‡µØ,ùëéùëèùë†·à∫ùëöùëéùëîùëõùëñùë°ùë¢ùëëùëí·à∫ùëá ·àæùëù:ùëü·àø·àª·àª·àª 
The sign of magnitude value re presents whether the shape of 
a spike is convex or concave. That is, a convex spik e has a positive 
magnitude value, while a concave spike has a negative magnitude 
value. We call the former a positive spike and the latter a negative spike. Note that a flat subsequence can be seen as a spike with zero magnitude value, called a constant spike .  
 
Figure 3: left) A snippet from the Penguin motion data, as detailed 
in Section 4. Displayed from top to bottom are the raw data, positive 
spikes with MaT values of 0, 0.6, and 1.75, the latter being the 
recommended value by [11]. right ) Time series representations 
corresponding to each spikelet decomposition. 
The spikelet representation approximates a time series 
through an ordered list of spikes. As demonstrated in Figure 3, the 
Spikelet approach achieves varying levels of approximation. This is based on the magnitude of  variation, termed the MaT 
(Magnitude Threshold), a user-su pplied parameter analogous to 
the subsequence length in tradit ional approaches . A larger MaT 
value leads to a more pronounced coarse-graining representation. Note that MaT represents an inequality constraint that disregards fluctuations with a magnitude smaller than MaT. In contrast to the noted difficulty in selecting an  appropriate subsequence length 
[13][20], setting values for MaT is more interpretable and less 
critical. Heuristics for selecting Ma T have also been proposed [11].  
 
Figure 4: (Adapted from [11] with permission) top) A time series of 
umpire sign. The subsequences colored in red are motif candidates. 
middle ) Matrix Profile for Spiskelet configured with a MaT of 0.03 
and a maximum duration of 2 seconds. bottom ) Top-2 motif pairs, 
whose lengths are from 0.79 seconds to 1.25 seconds. 
While [11] demonstrated that Spikelets off er a foundation to 
discover motifs of arbitrary lengths, as shown in Figure 4, existing 
Spikelet approaches [10][11][12] have the following limitations: ‚óè The Spikelet approach was unable  to discover motifs composed 
of sequences of multiple spikes, as illustrated in Figure 1. To overcome this limitation, we introduce a novel variant of the DTW distance, named 'PV-DTW.' This variant is specifically designed to evaluate the DTW distance between subsequences 
consisting of co ntinuous spikes. 
‚óè Additionally, the Spikelet appr oach does not offer a lower 
bound for the DTW distance. Cons equently, it is unable to 
perform lower bound pruning, resulting in the need to 
calculate all DTW distances. To solve this problem, we propose 
a lower bound for PV-DTW and introduce a novel algorithm, 
PeVAM, which leverages this lower bound. 
3. DIFFERENT LENGTH MOTIF DISCOVERY 
The original DTW (defined in the appendix along with its 
alignment path) calculates the distance by allowing warping between two subsequences. Howeve r, if the subsequences have 
different numbers of peaks and valleys, the distance will be large. PeVAM speeds up the DTW calculation by restricting it to 
subsequences with similar occurre nces of peaks and valleys. In 
other words, PeVAM defines a warping distance for motif 
discovery while selecting subsequences to compare. 
3.1 Peak-Valley-constrained DTW (PV-DTW) 
The Spikelet techniqu e facilitates the extraction of peaks and 
valleys adaptively determined by MaT, allowing us to define a DTW distance tailored to align peaks with peaks and valleys with valleys. Initially, we in troduce the notion of the PV number, which 
quantifies the number of peaks and valleys in a subsequence, as illustrated in Figure 5. 
Definition 6:  The PV subsequence  is defined as a subsequence 
in which the positive leg and negative leg appear alternately. The PV number  for a PV subsequence is determined by multiplying the 
count of legs by the sign of the first leg.  
Figure 5: top) From left to right, subsequences with PV numbers of 
+3, -3, and +6. Red legs indicate positive legs, while blue legs 
indicate negative legs.  bottom ) Based on the definition of leg, the 
same subsequence might have multiple PV numbers, depending on the parameter MaT. The left and right subsequences are identical. However, the left has a PV number of 4 (two peaks and one valley), while the right has a PV number of 2 (one peak and no valleys). 
Note that for robust motif discovery, the same subsequence 
might be assigned two different  PV numbers according to the 
definition of leg, as illustrated at the bottom of Figure 5. For two 
subsequences with the same PV number, the Peak-Valley-
constrained Dynamic Time Warp ing Distance (PV-DTW) is 
defined as the cumulative DTW distance across each segment. Additionally, a normalized form of PV-DTW is established for comparing distances between subsequences of different lengths. This approach also accelerates top-K motif discovery by pruning when the cumulative segment distance surpasses the current best-so-far distance. 
 
1190KDD '24, August 25-29, 2024, Barcelona, Spain Makoto Imamura & Takaaki Nakamura 
 
 
 Definition 7: The PV-DTW distance  between subsequences P 
and Q, both having the same PV number K, is defined as: 
pv‡≠¢‡≠≤‡≠µ·à∫ùë∑,ùë∏·àª‡µå‡∂©‡∑ç‡µ´ dtw·à∫ùëÉ‡Øú,ùëÑ‡Øú·àª‡µØ‡¨∂‡Øî‡Øï‡Ø¶·à∫‡ØÑ·àª
‡Øú‡≠Ä‡¨µ, 
where ·àæùëÉ‡¨µ,ùëÉ‡¨∂,‚Ä¶,ùëÉ‡Øî‡Øï‡Ø¶·à∫‡ØÑ·àª·àø and·àæùëÑ‡¨µ,ùëÑ‡¨∂,‚Ä¶,ùëÑ‡Øî‡Øï‡Ø¶·à∫‡ØÑ·àª·àø are leg 
sequences, each forming the subsequences  P and Q, respectively. 
An alignment path in PV-DTW is referred to as a PV alignment 
path. The normalized PV-DTW distance between subsequences 
of length length·à∫ùë∑·àª and length·à∫ùë∏·àª is: 
norm_pv ‡≠¢‡≠≤‡≠µ·à∫ùë∑,ùë∏·àª‡µåpv‡≠¢‡≠≤‡≠µ·à∫ùë∑,ùë∏·àª
‡∂•length·à∫ùë∑·àª‡∂•length·à∫ùë∏·àª 
PV-DTW is an approximation of the original DTW in that it 
imposes constraints on the alignm ent path; therefore, it is not 
generally guaranteed to produce th e same results as the original 
DTW. However, when MaT is appropriately selected and the data 
is collected at su fficiently small sampling intervals, PV-DTW is 
expected to closely approximate the original DTW distance. In 
fact, for the top-1 motifs of the Penguin data shown in Figure 6 
(detailed in Figure 11), the average error rate with a PV number 
from -10 to 10 is only 0.4%. In other words, the PV-DTW distance 
is, on average, 1.004 times that of the original DTW. PV-DTW also simplifies the setting of the warp length [24], a hyperparameter of 
the original DTW. Like the original DTW, a warp length can be set in PV-DTW. However, even  without specifying it, the 
maximum warp length can be adap tively determined by limiting 
the warping path to the range between the corresponding peaks and valleys for subsequences with the same PV number. 
Figure 6: For the Penguin motion data detailed in Section 4, the PV-
DTW distances in top-1 motifs across 20 different PV numbers ranging from -10 to 10 are almost identical. The figures illustrate 
the alignment paths of the top-1 mo tifs with PV numbers 6 and 9, 
which have error rates of 0% and 0.4%, respectively. Segments at 
even positions in the PV numbers are highlighted in green. The alignment paths themselves are depicted in blue. 
3.2 Outside Lower Bound 
As illustrated in Figure 7, let us consider two legs, P (colored in 
red) and Q (colored in blue), both exhibiting an upward trend.  
Figure 7: Starting and ending points are matched in the DTW 
distance alignment path for legs sharing the same sign. left) The left 
leg (red) has a higher starting point and a higher ending point than 
the right leg ( blue ). right ) The left leg has a higher starting point 
but a lower ending point than the right leg. 
If P's starting point is greater than Q's, then in the DTW 
alignment path, points starting from P's initial point align with 
those at Q's initial point, continuing this alignment until they reach a value equal to Q's starting value. Similarly, for P's 
endpoint, analogous properties  apply, contingent on its 
comparative height to Q's endpoint.By considering the 
combination of the signs and the relative heights of the legs, we 
can derive a tight lower bound for the DTW distance. This lower bound is referred to as th e 'outside lower bound'. 
Observation 1: For a leg ùë∑‡µå·àæ
ùëù1,ùëù2,‚Ä¶,ùëùùëÅ·àø and a leg ùë∏‡µå
·àæùëû1,ùëû2,‚Ä¶,ùëûùëÄ·àø with the same sign: the following inequality holds: 
ùê∑ùëáùëä·à∫ùë∑,ùë∏·àª‚â• 
‡µå‡∂®‡∑ç‡µ´ùëù‡Øú‚àíùëà‡Øä‡µØ‡¨∂
‡Ø£‡≥î‡Æµ‡Øé‡≥Ç‡µÖ‡∑ç‡µ´ùëù‡Øú‚àíùêø‡Øä‡µØ‡¨∂
‡Ø£‡≥î‡Æ¥‡ØÖ‡≥Ç‡µÖ‡∑ç·à∫ùëû‡Øú‚àíùëà‡Øâ·àª‡¨∂
‡Ø§‡≥î‡Æµ‡Øé‡≥Å‡µÖ‡∑ç·à∫ùëû‡Øú‚àíùêø‡Øâ·àª‡¨∂
‡Ø§‡≥î‡Æ¥‡ØÖ‡≥Ç 
where the maximal values (ùëà‡Ø£,ùëà‡Øä) and minimum values (ùêø‡Ø£,ùêø‡Øä) are 
defined as: 
ùëà‡Øâ‡µåmax·à∫ùëù‡¨µ,ùëù‡¨∂,‚Ä¶,ùëù‡Øá·àª,ùëà‡Øä‡µåmax ·à∫ùëû‡¨µ,ùëû‡¨∂,‚Ä¶,ùëû‡ØÜ·àª 
ùêø‡Øâ‡µåmin·à∫ùëù‡¨µ,ùëù‡¨∂,‚Ä¶,ùëù‡Øá·àª,ùêø‡Øä‡µåmin ·à∫ùëû‡¨µ,ùëû‡¨∂,‚Ä¶,ùëû‡ØÜ·àª 
Denoting the right hand of the inequality as Outer_LB (P,Q), we 
obtain:  
ùê∑ùëáùëä·à∫ùë∑,ùë∏·àª‚â• ùëúùë¢ùë°ùëíùëü _ùêøùêµ·à∫ùë∑,ùêê·àª 
According to the definition of a leg, note that ùëà‡Øâ and ùêø‡Øâ will 
be either the starting  and ending values of ùë∑, or vice versa. By 
selecting a fixed number of endpoints, such as 3, we can independently extract features to evaluate the lower bound. This allows pruning in essentially linear order, irrespective of the 
comparison target. 
3.3 Inside Lower Bound 
As shown on the left side of Figure 8, when calculating the DTW 
distance between legs trending upwards, an internal spike in one 
leg and its absence in the other will tend to increase the DTW 
distance between them. 
Figure 8: left) It is expected that the DTW distance between two legs 
will increase if one of the legs has an internal spike. right ) When 
both legs have spikes, we expect that the DTW distance will 
increase if there is a significant difference in the size of the 
corresponding internal spikes. 
To further explore and exploit, we will introduce the notion of 
an 'opposite leg.'  
Definition 8: Let ùë∑ and ùë∏ be legs with the same sign. If the 
support of a leg ùë∂ùë∑ is included in that of ùë∑ and has the opposite 
sign of ùë∑. We refer a leg ùë∂ùë∑ to an opposite leg  in P. Formally: 
(1) ùë∂ùë∑.ùë†ùëñùëîùëõ‡µå‚àí 1‡µàùë∑.ùë†ùëñùëîùëõ  
(2) ùë∂ùë∑.ùë†ùë¢ùëùùëù‚äÇùë∑ .ùë†ùë¢ùëùùëù  
As shown on the left side of Figure 8, consider a scenario where 
one leg P has an opposite leg ùë∂ùë∑, while the other leg Q does not. 
In this case, the minimal impact of ùë∂ùë∑'s endpoints with respective 
values ùëù‡¨µ and ùëù‡¨∂ on the DTW distance between P and Q occurs 
when the alignment path aligns both ùëù‡¨µ and ùëù‡¨∂ with Q's point 
valued at ·à∫ùëù‡¨µ‡µÖùëù‡¨∂·àª/2. Consequently, the following proposition is 
established. 
 
1191Efficient Discovery of Time Series Motifs KDD '24, August 25-29, 2024, Barcelona, Spain 
 
 Proposition 1: Let ùëù‡¨µ and ùëù‡¨∂ be real numbers. For all real 
values of ùë•, the expression  ·à∫ùëù‡¨µ‚àíùë•·àª‡¨∂‡µÖ·à∫ùëù‡¨∂‚àíùë•·àª‡¨∂ takes its 
minimum value of ·à∫ùëù‡¨µ‚àíùëù‡¨∂·àª‡¨∂/2 when ùë•‡µå·à∫ ùëù ‡¨µ‡µÖùëù‡¨∂·àª/2. This 
implies the following inequality holds: 
·à∫ùëù‡¨µ‚àíùë•·àª‡¨∂‡µÖ·à∫ùëù‡¨∂‚àíùë•·àª‡¨∂‚â•·à∫ùëù‡¨µ‚àíùëù‡¨∂·àª‡¨∂
2 
Proof:  Let ùêø‡µå·à∫ ùëù ‡¨µ‚àíùë•·àª‡¨∂‡µÖ·à∫ùëù‡¨∂‚àíùë•·àª‡¨∂. The value of ùë• that 
minimizes ùêø is found by setting the derivative ùëëùêø
ùëëùë• to 0. Hence, ùêø 
takes its minimum value ùêø‡µå·à∫‡Ø£‡∞≠‡¨ø‡Ø£‡∞Æ·àª‡∞Æ
‡¨∂, when ùë•‡µå‡Ø£‡∞≠‡¨æ‡Ø£‡∞Æ
‡¨∂. 
Note that ùëù‡¨∂‚àíùëù‡¨µ is the magnitude of the leg ùë∂ùë∑, denoted as 
ùë∂ùë∑.ùëöùëéùëî . the above proposition im plies the following lower 
bound for DTW distance between ùë∑ and ùë∏, when a leg ùë∑ has an 
opposite leg ùë∂ùë∑ and a leg ùë∏ has no opposite legs.  
ùê∑ùëáùëä·à∫ùë∑,ùë∏·àª‚â•‡∂®1
2·à∫ùë∂ùë∑.ùëöùëéùëî·àª‡¨∂ 
As anticipated from the right of Figure 8, when each of the legs 
ùë∑ and ùë∏ possesses only one opposite leg, the following 
proposition holds. 
Proposition 2: Let ùëù‡¨µ,ùëù‡¨∂,ùëû‡¨µ, and ùëû‡¨∂ be real numbers that 
satisfy ùëù‡¨µ‚â§ùëû‡¨µ‡µèùëû‡¨∂‚â§ùëù‡¨∂. For all pairs of values ·à∫ùë•,ùë¶) where 
ùëû‡¨µ‚â§ùë•‡µèùë¶‚â§ùëû ‡¨∂, the expression  ·à∫ùëù‡¨µ‚àíùë•·àª‡¨∂‡µÖ·à∫ùëù‡¨∂‚àíùë¶·àª‡¨∂ takes its 
minimum value of ‡¨µ
‡¨∂‡µ´·à∫ùëù‡¨µ‚àíùëù‡¨∂·àª‚àí·à∫ùëû‡¨µ‚àíùëû‡¨∂·àª‡µØ‡¨∂when ùë•‡µå
ùëû‡¨µ ùëéùëõùëë   ùë¶‡µåùëû ‡¨∂. This implies the following inequality holds: 
·à∫ùëù‡¨µ‚àíùë•·àª‡¨∂‡µÖ·à∫ùëù‡¨∂‚àíùë¶·àª‡¨∂‚â•1
2‡µ´·à∫ùëù‡¨µ‚àíùëù‡¨∂·àª‚àí·à∫ùëû‡¨µ‚àíùëû‡¨∂·àª‡µØ‡¨∂ 
Proof: Deferred to the appendix. 
This statement lets us create a tight lower bound for the DTW 
distance between legs ùë∑ and ùë∏, when each has only one opposite 
leg, denoted as ùë∂ùë∑ and ùë∂ùíí, respectively: 
ùê∑ùëáùëä·à∫ùë∑,ùë∏·àª‚â•‡∂®1
2·à∫ùë∂ùë∑.ùëöùëéùëî‚àíùë∂ ùë∏.ùëöùëéùëî·àª‡¨∂ 
 
Figure 9: When opposite legs are so rted in descending order by their 
magnitude, the DTW distance in creases as the size disparity 
between corresponding opposite legs grows. For example, 
considering a leg positioned at the top, the DTW distance incrementally increases, moving fr om the left towards the center 
and then increasing towards the right at the bottom. 
In practice, legs ùë∑ and ùë∏ may have multiple opposite legs. To 
maintain linear computation, we propose evaluating the lower 
bound using only independently calculable features for each leg, such as magnitude. As indicated in Figure 9, the lower bound can be assessed through the differences in magnitude between the corresponding opposite legs. The DTW distance is minimized by arranging and matching these legs  in descending order of their 
absolute magnitudes. Proposition 3:  Let MP =[ ùëöùëù
‡¨µ, ùëöùëù‡¨∂,‚Ä¶,ùëöùëù ‡Øá] and MQ = [ ùëöùëû‡¨µ, 
ùëöùëû‡¨∂,‚Ä¶,ùëöùëû‡Øá] be vectors that ùëöùëù‡¨µ‚â•ùëö ùëù‡¨∂‚Ä¶‚â•ùëö ùëù‡Øá‚â•0 and 
ùëöùëû‡¨µ‚â•ùëö ùëû‡¨∂‚Ä¶‚â•ùëö ùëû‡Øá‚â•0, respectively. Let ùúé be a permutation 
of [1, 2, ‚Ä¶ ,ùëÅ], the permutation that minimizes the expression 
‚àë·à∫ùëöùëù‡Øú‚àíùëöùëû‡∞ô·à∫‡Øú·àª·àª‡Øá
‡Øú‡≠Ä‡¨µ‡¨∂ is the identity permutation. 
Proof: Deferred to the appendix. 
The above proposition suggests  a lower bound for the DTW 
distance between legs ùë∑ and ùë∏ under the following conditions: 
when opposite legs in ùë∑ are sorted as [ ùë∂ùë∑‡¨µ, ùë∂ùë∑‡¨∂,‚Ä¶,ùë∂ùë∑‡Øá] 
according to the size of absolute values of their magnitudes, and 
opposite legs [ ùë∂ùíí‡¨µ, ùë∂ùíí‡¨∂,‚Ä¶,ùë∂ùíí‡Øá] in ùë∏ sorted similarly. 
ùê∑ùëáùëä·à∫ùë∑,ùë∏·àª‚â•‡∂©1
2‡∑ç·à∫ùë∂ùë∑ùíä.ùëöùëéùëî‚àíùë∂ ùë∏ùíä.ùëöùëéùëî·àª‡¨∂‡Øá
‡Øú‡≠Ä‡¨µ 
The above evaluation formula is useful as a heuristic for 
pruning based on the occurrence patterns of peaks and valleys in 
subsequences. However, it does no t hold in worst-case scenarios 
where multiple smaller opposite legs can correspond to a single 
large opposite leg. On the othe r hand, when an opposite leg ùë∂ùë∑ùíä 
of ùë∑ has a larger magnitude than the largest magnitude of the 
opposite legs of  ùë∏ (‡∏´ùë∂ùêêùê¶ùêöùê± .ùëöùëéùëî‡∏´ ), they will certainly 
contribute to the DTW distance. Therefore, we use the following 
inequality. This inequality also holds when ùëÉ and Q are 
interchanged: 
Observation 2:  Let ùë∑ and ùë∏ be legs with the same sign. Let a 
leg ùë∂ùêêùê¶ùêöùê±  be opposite legs with the maximal absolute magnitude 
in ùë∏, then the below inequality holds:  
ùê∑ùëáùëä·à∫ùë∑,ùë∏·àª‚â•‡∂©1
2‡∑ç·à∫ max·à∫|ùë∂ùë∑ùíä.ùëöùëéùëî |‚àí‡∏´ùë∂ùêêùê¶ùêöùê± .ùëöùëéùëî‡∏´ ,0·àª·àª‡¨∂‡Øá
‡Øú‡≠Ä‡¨µ 
We denote the larger of the expr ession on the right-hand side 
of the above inequality and the expression obtained by 
interchanging ùë∑ and ùë∏ as ùëñùëõùëõùëíùëü _ùêøùêµ·à∫ùë∂ùíë,ùë∂ùíí·àª. As a result, the 
following holds true.  
ùê∑ùëáùëä·à∫ùë∑,ùë∏·àª‚â• ùëñùëõùëõùëíùëü _ùêøùêµ·à∫ùë∂ùíë,ùë∂ùíí·àª  
By selecting a fixed number ùëÅ, such as 3, we can calculate 
pruning in a linear  order independently of the comparison target, 
analogous to the method used for the outer lower bound. 
3.4 Practically Linear order Lower bound 
Considering that, by the definition  of a leg, the endpoints of leg P 
are never included in its opposite legs, we see that the alignments 
used in the outer and inner lower bounds do not overlap. 
Therefore, we estimate the DTW distance between legs ùë∑ and ùë∏ 
by the sum of the outer and the inner lower bounds:  
Observation 3: Let ùë∑ and ùë∏ be legs with the same sign. If legs 
ùë∂ùë∑and  ùë∂ùíí are the list of opposite legs in ùë∑ and ùë∏, respectively, 
then the following inequality holds: 
 
1192KDD '24, August 25-29, 2024, Barcelona, Spain Makoto Imamura & Takaaki Nakamura  
 
 
 ùê∑ùëáùëä·à∫ùë∑,ùë∏·àª‚â•‡∂ß(ùëúùë¢ùë°ùëíùëü _ùêøùêµ(ùë∑,ùë∏))2+(ùëñùëõùëõùëíùëü _ùêøùêµ(ùë∂ùíë,ùë∂ùíí))2, 
The calculation of the lower bound can be simplified to 
performing element-wise arithmetic  operations on matrices with 
ùëÄ rows and  ùëÉ√óùêπ columns, where ' ùëÄ' is the number of 
subsequence candidates  for the motif, ' ùëÉ' is the absolute value of 
the PV number, and 'ùêπ ' is the number of features extracted (three 
from each leg endpoint and the opposite legs).  Since ' ùëÉ' and 'ùêπ' 
can be set as constants before the algorithm's execution, the 
computational time for matrix calculations using languages like 
Python is essentially constant, provided ' ùëÄ' remains within 
certain limit. The lower bound calculations are repeated ' ùëÄ' times; 
therefore, the total computational complexity is proportional to ' ùëÄ'. 
The number of motif candidates ' ùëÄ' is generally proportional to the 
time series length ' ùëÅ' when MaT is within an appropriate range, but 
it increases rapidly when MaT becomes inappropriately smaller. 
Thus, the total computational complexity of the lower bound calculation is O(N) when MaT is chosen appropriately, but becomes 
significantly larger as MaT decreases, as detailed in Figure 14. 
3.5 PeVAM Algorithm 
The core idea of PeVAM is to iden tify candidate subsequences of 
motifs for each PV number by ignoring fluctuations smaller than 
a given MaT value and then finding the top-1 motif using lower 
bound-based pruning. Note that the parameter MaT is used only for candidate selection, while DTW computation is performed on the raw data. Additionally, as show n in Section 4.1, conventional 
fixed-length DTW motifs exhibit a si mplicity bias [6 ]. To mitigate 
this, PeVAM searches for motifs within a range of PV numbers 
(e.g., -10 to 10), allowing it to identify pa tterns that vary with PV 
numbers, which traditional fixed-length DTW motifs might miss. 
This process is formalized in the algorithm in TABLE I. 
TABLE I PeVAM Algorithm  
Procedure PeVAM( T,P) 
Input: Time Series T , MagThr MaT, PVnum-list PL 
Output: pair-distance-list BSF, location-list Loc 
1 
2 3 4 
5 
6 
7 LegD = legDecomposition(T, Mat) // Phase1 
BSF = Array(length(PL)); Loc = Array(length(PL)) 
for i = 1:length(PL) 
[BSF_i, loc_i] = findMotifByPeVAM( LegD,PL(i)) 
BSF(i) = BSF_i; Loc( i) = Loc_i; 
end 
return [ BSF, Loc] 
In line 1, we perform leg decomposition on the time series T 
using Spikelet decomposition [10] for the given Magnitude 
Threshold MaT. We refer to this step as the first phase of our 
PeVAM algorithm. Lines 2 to 6 find the Top-1 motif pair for each 
PV-number from the given PL-List (for example, a list of integers 
from -10 to 10, excluding 0). The For-loop from lines 3 to 6 calls 
the procedure findMotifByPeVAM , as detailed in Table 2, to 
identify the top-1 motif pair for each PV-number. The results are 
stored in BSF and Loc. Finally, line 7 returns the top-1 motif pairs 
corresponding to each PV number. 
TABLE II presents the findMotifByPeVAM algorithm, which is 
central to the PeVAM process. This algorithm is divided into two 
phases: Phase 2 (lines 2 to 19) indexes and identi fies an initial tentative motif pair, and Phase 3 (lines 21 to 30) locates the exact motif.  In line 2, we construct sequences of legs for the given PV number using a bo ttom-up approach and then assign them to the 
variable 'C.' Initially we create a set of positive legs (PV number 1).    
Next, we connect each negative leg to every leg with a PV 
number of 1, where the starting point of the negative leg equals 
the ending point of the leg with a PV number of 1, in order to 
create sequences of legs with a PV number of 2. We then connect 
positive legs to every sequence wi th a PV number of 2, following 
a similar constraint to generate se quences with a PV number of 3, 
and so forth, until reaching the given PV number. This process 
continues iteratively. If the PV  number is negative, the same 
procedure applies. 
Lines 3 to 9 outline the calculation of the lower bound for the 
PV-DTW distance between each motif subsequence candidate in 
'C' and all other candidates, excluding itself. The minimum 
distance, the TopK distances, and their respective positions are 
stored in the variables ' LBmin ,' 'LB,' and 'Pair,' respectively. 
Setting the TopK parameter (e.g., 3) impacts speed minimally 
unless an excessively high value such as 1,000 is used.  Lines 10 to 19 select the lower 10% of limit evaluations, as determined by 'PruneRate,' for computin g the PV-DTW distances. The variables 
'best-so-far' and 'best-pair' are updated whenever a newly 
calculated distance is smaller than the current 'best-so-far.'  
TABLE II findMotifByPevam Algorithm  
Procedure findMotifByPeVAM( LegD,PV)  
Input: Leg Decomposition LegD , PV-number PV  
Output: pair-distance best-so-far, location motif-loc 
1 
2 3 4 
5 
6 7 8 
9 
10 11 12 
13 
14 15 16 
17 
18 19 20 
21 
22 23 
24 
25 26 27 
28 
29 
30 // Phase2: indexing and finding initial motif 
C = extractCandidateLegSequence( LegD,PV) 
TopK = 3 
// not critical for speed  
LBmin = Array(length(C )); LB = []; Pair = [] 
for i = 1:length(C ) 
[LBmin_i, LB_i, Pair_i] = computePVLB( C[i],C,TopK) 
LB = [LB,LB_i] ; Pair = [ Pair,Pair_i] ; 
LBmin(i) = min( LBall_i) 
End 
PruneRate = 0.1 // not critical for speed 
PairS = sortAndPrune( LB, Pair ,PruneRate) 
best-so-far = Inf; best-pair = [NaN,NaN] 
for i = 1:length(PairS) 
dist_i = computePVdtw( PairS(i), best-so-far)  
 if dist_i < best-so-far  
  best-so-far = dist_i  
best-pair = PairS(i) 
 end 
end 
// Phase3: finding the exact motif   
Index = sort( LBmin,‚Äùascend‚Äù) 
for i = 1:length(Index)  for j = 1:length(C) 
  dist_ij = computePVdtw( C(Index(i)),C(j),best-so-far) 
if dist_ij < best-so-far  
   best-so-far = dist_ij  
   motif-pair = [ C(Index(i)), C(j)] 
  end end 
return [ best-so
-far, best-pair] 
Phase 3 (lines 21 to 29) calcul ates the PV-DTW distances for 
each candidate motif subsequence,  sorted by their lower bounds 
in 'LBmin,' to all other subsequences except itself, in search of the 
optimal solution. Note that the earl y identification of a motif pair 
close to the optimal solution  increases the pruning rate, 
significantly accelerating the entire process. 
 
1193Efficient Discovery of Time Series Motifs KDD '24, August 25-29, 2024, Barcelona, Spain 
 
 4 EMPIRICAL EVALUATIONS 
We have designed all our experime nts to be easily reproducible 
and have created a webpage containing all relevant datasets and 
code [30]. Each experiment was conducted using a laptop 
equipped with an Intel(R) Core(TM) i7-1365U CPU @ 1.80GHz and 32GB of RAM.
 
4.1 Ability to find DTW Motifs 
Unfortunately, there are no standard benchmarks for time series motif discovery, unlike in the case of time series classification, such as with the UCR dataset [4]. The differences in motif patterns between ED and DTW are shown in  [2][3][14][25], and the spike 
patterns sandwiched between flat regions have been verified in existing works [10][11], as described in subsection 2.2. Therefore, this section focuses on handling continuous subsequences of spike 
patterns and contrasts the motif pairs identified by PeVAM with those found using the baseline al gorithm, classic Fixed-Length 
Dynamic Time Warping (F-DTW) [2][3]. Initially, using human behavior datasets from the UCI Machine Learning Repository [7], we contrast the motif pairs identi fied by PeVAM with those found 
using the baseline algorithm, F-DTW, as shown in the middle of Figure 10. When parameters are ca refully chosen, both algorithms 
can detect motif pairs.  
Figure 10: top) A time series created by tracking the left hand of 
an actor. middle-left ) Top-1 motif identified by PeVAM with an 
automated-estimated MaT of 0.02. middle-right ) Top-1 motif 
identified by F-DTW with subseque nce length of 160 (5.3 seconds). 
bottom-left ) Top-1 motif identified by PeVAM with a MaT of 0.005. 
bottom-right ) Top-1 motif identified by F-DTW with a subsequence 
length of 100, closely matching the motif pattern length identified 
by PeVAM in the middle-left . 
Specifically, the process in volves setting a magnitude 
threshold (MaT) for PeVAM and determining an appropriate 
subsequence length for F-DTW. PeVAM has an advantage in selecting the MaT parameter, leveraging recommended values 
established by the two-level kn ee finding heuristics [11]. 
Additionally, its capability for leg decomposition with 
overlapping makes PeVAM more robu st. In this case, a MaT range 
from 0.005 to 0.02 proved effective in identifying patterns akin to those depicted in the bottom-left of Figure 10. In contrast, F-DTW 
tends to favor ‚Äúdegenerat e‚Äù motifs with flat se ctions, as seen in the 
bottom-right of Figure 10. This  bias in fixed-length motif 
discovery occurs because flat re gions contribute less to the DTW 
distance, resulting in smaller distances for subsequence pairs with longer flat regions. Known as simplicity bias [6], this is a real weakness, as many human beh avior datasets contain such 
uninformative regions when the patient is resting or transitioning between behaviors. PeVAM mitigates this bias by restricting patterns to have maximum or minimum endpoints.   Next, we consider a telemetry dataset obtained by attaching a 
sensor to a wild penguin duri ng its hunting activities. One 
distinctive feature of PeVAM is its ability to identify motif pairs for each PV number, as shown in Figure 11. 
Figure 11: top) Acceleration data from a Magellanic Penguin (Z-
axis), consisting of 32,261,226 data points.  bottom ) PeVAM motifs 
with length ranges 50-75 using an auto-estimated MaT value of 
1.75. bottom left-to-right ) The top-1 PeVAM motifs with a positive 
odd PV number, with a negative odd PV number, with a positive 
even PV number, with a negative even PV number. 
PeVAM can detect motifs based on the number of upward and 
downward fluctuations, allowing it to find various-shaped motifs 
that F-DTW overlooks. Compared to F-DTW, PeVAM is somewhat limited as it only considers maximum or minimum 
endpoints. However, we argue that this tends to incline the algorithm towards naturally atomic subsequences, individual ‚Äúgestures‚Äù, ‚Äúwords‚Äù, ‚Äúbehavior s,‚Äù etc., thereby mitigating 
simplicity bias. 
Figure 12: Motifs extracted from the telemetry of a penguin with 
100,000 data points. top ) The top-1 motifs identified by F-DTW with 
lengths of 50, 100, and 150 points exhibit normalized DTW distances of 0.008, 0.009, and 0.009, respectively. middle ) PeVAM 
identified the top motifs in three length ranges‚Äî30-60, 61-110, and 111-160‚Äîwith normalized distances of 0.011, 0.013, and 0.010, respectively. bottom) The motif pairs identified by PeVAM with the 
most significant difference in subsequence lengths. 
As shown at the top of Figure 12, F-DTW primarily identifies 
smooth, trivial patterns with monotonically increasing or 
decreasing trends, illustrating simp licity bias [6]. PeVAM can also 
identify these patterns when the PV number is 1 or -1, as seen in 
the middle of Figure 12. However, by searching with various PV numbers, PeVAM can find diverse patterns, as show n in Figure 11 
and Figure 12. Additionally, by limiting the length of the legs in a motif, PeVAM avoids motifs dominated by monotonous trends. This helps exclude low-information patterns, facilitating the 
analysis of inherent system behaviors in the target data. 
We glossed over the details of the introductory example in 
Figure 1 to enhance the flow of the introduction. We will address 
this omission here. We used that  example to highlight our ability 
 
1194KDD '24, August 25-29, 2024, Barcelona, Spain Makoto Imamura & Takaaki Nakamura 
 
 
 to discover motifs at different scales. At the bottom of Figure 1, 
from left to right, we present the top motif in Set A for a PV 
number of 6, comprising subsequences of legs with a MaT ranging 
from 0.03 to 0.05. Similarly, the top motif in Set B, also depicted, 
features subsequences of legs with a MaT greater than 0.1, 
providing a comparative perspective at a different scale. The final motif pair is identified as the nearest subsequence in Set A to a 
subsequence in Set B, based on the PV-DTW  distance, utilizing 
the concept of the AB-join Matrix  Profile [21]. Notably, PeVAM 
enables the discovery of motifs at varied scales, functioning 
similarly to a bandpass filter for MaT, which extracts only spike patterns whose magnitudes are within the user-defined MaT 
range. 
4.2 The Scalability of PeVAM  
In this section, we evaluate the efficiency of PeVAM. First, we compare its runtime dependency on  time series length with our 
baseline algorithm, F-DTW [2]. We  use telemetry data from a wild 
penguin, with lengths  up to three million points and exhibiting 
varied fluctuations. Figure 13 illustrates the comparison of runtimes dependent on the length of the time series for F-DTW and PeVAM. For F-DTW, the subsequence length is set to 75, and the warping length to 25. For PeVAM, the MaT is set at 1.75 following the two-level knee finding heuristics [11], with the subsequence length varying between 50 and 75. The runtime of PeVAM is the sum of runtimes across 20 variations of PV numbers, ranging from -10 to 10. The runt ime of F-DTW increases with the 
square of the time series length, exceeding one hour for lengths of 
about 100,000. In contrast,  the time to obtain the initial solution of 
F-DTW as the Euclidean motif (hereafter referred to as 'F-DTW-initial') and the runtime of PeVAM are both considerably faster,  
around 20 seconds, for time series lengths up to 100,000.  
As the time series length surpasses one million, the runtime of 
'F-DTW-initial' exceeds  one hour. Meanwhile, the runtime of 
PeVAM is approximately three minutes for a time series length of three million, with the time for obtaining the initial solution ('PeVAM-initial') remaining at about one minute. The computational complexity for both 'F-DTW-first' and PeVAM 
theoretically increases with the square of the time series length in 
the worst-case scenario. However, PeVAM consistently maintains a speed that allows interactive applications.  
Figure 13: Runtime comparison: F-DTW in red, F-DTW initial 
(Euclidean motif discovery) in magenta, PeVAM in blue, and PeVAM initial in green. left) Runtimes for time series with lengths 
up to 100,000. right ) Runtimes with lengths up to 3,000,000. 
PeVAM's faster performance compared to F-DTW is due to its 
aggressive pruning strategy usin g the MaT parameter. The left 
side of Figure 14 shows PeVAM's runtime dependence on MaT: 20 
seconds at 1.75, but 2 minutes, 10 minutes, and 1 hour at 1.0, 0.75, and 0.5, respectively. Proper Ma T settings limit the number of 
subsequences considered, reducing  computational complexity and enhancing speed. Small fluctuations in time series segments often 
resemble noise, so pruning them out reduces the chances of including non-meaningful motifs. 
Figure 14: left) The runtime of PeVAM dependent on the MaT value 
when the PV number is set to 6. right ) The runtime for each phase 
of PeVAM, which includes 'legDecomp' (leg decomposition), 'initial' 
(finding an initial  motif), and 'total' (finding exact  motif). 
Next, we evaluate the runtime of  each phase of PeVAM: 'leg 
decomposition', 'indexing and finding an initial motif', and 
'locating the exact motif.' In Figure 14, these phases are referred 
to as 'legDecomp,' 'initial,' and 'total', respectively. In the worst-
case scenario, the computational complexity in relation to the time series length for the first tw o phases, 'legDecomp' and 'initial', 
is linear. In contrast, for the last  phase, 'total', it is quadratic. 
However, due to the pruning effe ct, the total runtime of PeVAM 
appears to be effectively constraine d, even for time series lengths 
of up to three million data points, as demonstrated in the penguin motion data.  
In the previous subsection, we  observed that the PV-DTW 
distance tends to minimize for PV numbers of 1 and -1, illustrating an example of simplicity bias [6]. As shown on the left in Figure 
15, the PV-DTW distance is normalized by the length of the Top-
1 motif across various PV numbers in the penguin motion data, which comprises three million points.  
Figure 15: left) Normalized DTW distances of top-1 motifs for PV-
numbers ranging from -10 to 10 on telemetry data that is 3,200,000 
units long. right ) Runtimes for MaT of 1.75, applied to telemetry 
data of 3,200,000 units in length, vary with different PV numbers. 
The PV-DTW distance typically ranges between 0.02 and 0.03. 
However, it significantly decreases to 0.005 for PV numbers -1 and 
1, which is approximately one-fift h smaller. Moreover, there is a 
tendency for a monotonic increase in positive PV numbers. This decrease is due to the DTW distance being smaller between monotonically increasing or decr easing subsequences with large 
endpoint differences, illustrating simplicity bias [6]. This phenomenon suggests that F-DTW, a sliding window-based fixed-length approach, may struggle to efficiently identify meaningful 
motifs in time series with many smoothly trending subsequences, even during a TopK search with a large K value. 
Figure 15.right  illustrates the time requ ired to discover motifs 
for each PV number. The runtime is longer when the PV number 
is 1 or -1 and tends to decrease as the absolute value of the PV number increases. This variation in runtime can be attributed to the increased efficiency of pruning in each leg of the motif with 
larger PV numbers, assuming the le ngth of the time series remains 
roughly the same. 
 
1195Efficient Discovery of Time Series Motifs KDD '24, August 25-29, 2024, Barcelona, Spain 
 
 Figure 16: left) The comparison of runtimes between F-DTW and 
PeVAM, based on the upsampling rate, is conducted for psyllid 
motion data with lengths of up to 100,000. right ) The runtimes of 
PeVAM with lengths up to 7,583,000. 
Another critical difference between F-DTW and PeVAM is 
their handling of the sampling rate: When the sampling rate is 
increased by a factor of N, the number of motif candidates in F-
DTW increases linearly due to th e sliding window generation of 
subsequences. In contrast, the nu mber of motif candidates in 
PeVAM remains unchanged, as it depends on fluctuation size MaT rather than time series length . Additionally, both F-DTW and 
PeVAM, the length of motif subsequences scales with the sampling rate. Consequently, th e computational complexity for 
DTW distance is ùëÇ(ùëÅ
‡¨∂), because the length of subsequences is 
proportional to the sampling rate factor. As a result, the total computation time for F-DTW in the worst-case scenario scales 
with ùëÇ(ùëÅ
‡¨∏), whereas for PeVAM, it scales with ùëÇ(ùëÅ‡¨∂). Figure 16 
illustrates how the total runtime required for motif discovery 
varies with the sampling rate. Wh ile F-DTW demonstrates a near-
quadratic increase in computation time as the sampling rate 
factorùëÅ increases, PeVAM remains approximately linear. The 
dependency of speed on the sampling rate is practically important 
because practical applications, unlike many academic research datasets, require fixed-length slid ing window approaches to select 
both the sampling rate and the window size [3][13]. 
4.3 Discussion on the accuracy of PV-DTW 
Finally, we consider the MaT depe ndency of the PV-DTW distance. 
As discussed in Section 3.1, the more distinct the peaks and valleys, the better the approximation accuracy. In Figure 6, using the Penguin data with an appropriate MaT level of 0.75, the average error is 0.4%. Conversely, if the subsequence values fluctuate randomly and the peaks and valle ys are unclear, the accuracy 
decreases. In Figure 17, the Psyllid data, which has more 
pronounced noise level fluctuations than the Penguin data, shows  up to 18% error at an inappropriate MaT level of 0.01-0.04, but an average error of 1.4% at an a ppropriate MaT level of 0.05-0.11. 
Figure 17: left) The error rates of the PV-DTW distance compared 
to the original DTW distance depend on the MaT values for 
subsequence lengths between 100 and 200 with a PV number of 6. right ) The dependency of the PV-DTW and original DTW distances 
on the MaT values for the z-normalized motif pair subsequences. 
Next, by comparing the shapes of the top-1 motifs obtained at 
each MaT level in Figure 18, we see that as MaT increases from 
0.01 to 0.04, the motifs become more distinct. At MaT levels of 0.05 to 0.1, a clear fluctuation shape indicative of sap injection behavior 
appears. While these error rates may highlight a limitation of PV-DTW, they do not imply a weakness in practical applications. The error rate (deviation between PV-DTW and the original DTW distance) indicates whether the motif is well-characterized by its peaks and valleys. Motifs without distinct peaks and valleys, like the first two images in the top row of Figure 18, are likely 
insignificant due to their randomness and lack of stable shape. By 
varying MaT and prioritizing motifs with a low error rate, we can find appropriate fluctuation scales for detecting behavior stability. This consideration suggests that  the error rate can serve as a 
useful indicator for important motif patterns with stable shapes. 
 
Figure 18: Z-normalized motif patters with various MaT ranges. top) 
From left to right, motif pairs with MaT levels of 0.01 (ranging from 
0.005 to 0.015), 0.02 (ranging from 0.015 to 0.025), and 0.04 (ranging 
from 0.03 to 0.05). Error rates of 0.15, 0.18, and 0.01. bottom ) From 
left to right, motif pairs with MaT levels of 0.06 (ranging from 0.05 to 0.07), 0.07 (ranging from 0.06 to 0.08), and 0.09 (ranging from 0.08 
to 0.1). Error rates of 0.04, 0.004, and 0.00. 
The observations in this section and the simplicity bias 
examples shown in Figure 10 and Figure 12 lead us to consider 
whether the criteria for defining useful motifs should include not 
only small DTW distances but also some form of complexity in the subsequences [6]. This is akin to the Information Criteria [1] in regression analysis, where an effective approximation should be evaluated not just by its error value but also by the simplicity 
of the regression equation. Quanti fying the complexity of motifs 
is a challenge for future work. 
5 CONCLUSIONS and FUTURE WORK 
We have developed a novel PV-DTW distance measure  and its 
cheap-to-compute lower bound, exploiting the alignment path's 
ability to capture shape similariti es, notably peaks and valleys, in 
subsequences. Our algorithm, Pe VAM, leverages these notions 
and has demonstrated effective scalability across diverse real-world datasets, adeptly identifying DTW motif pairs of varying lengths. Future work will apply PeVAM in anomaly detection and other complex time series analysis tasks.  
ACKNOWLEDGMENTS 
We are deeply thankful to Keogh's Lab for providing the 
evaluation data. We also extend our gratitude to the reviewers for 
their valuable comments, which helped us improve this paper. 
This work was supported by JSPS KAKENHI Grant Number 
23K11119 and Mitsubishi Electric. 
 
1196KDD '24, August 25-29, 2024, Barcelona, Spain Makoto Imamura & Takaaki Nakamura  
 
 
 REFERENCES 
[1] Akaike, H., "A new look at the statistical model identification," IEEE 
Transactions on Automatic Control, vol. 19, no. 6, pp. 716-723 (1974). 
[2] Alee, S., Mercer, R. Kamgar, and Keogh, E., "XXII: Matrix Profile Exact Discovery of Time Series Motifs under DTW," IEEE ICDM, pp. 900-905 (2020). 
[3] Alaee, S., Mercer, R., Kamgar, K., and Keogh, E., "Time series motifs discovery under DTW allows more robust discovery of conserved 
structure," Data Min Knowl Disc 35, pp. 863‚Äì910 (2021). 
[4] Chen, Y., Keogh, E., Hu, B., Begum, N., Bagnall, A., Mueen, A. and Batista, G., ‚ÄúThe ucr time series classification archive,‚Äù (2015). www.cs.ucr.edu/‚àº eamonn/time series data/. 
[5] Chiu, B., Keogh, E. and Lonardi, S., "Probabilistic discovery of time series Motifs," ACM SIGKDD, pp. 493-498 (2003). 
[6] Dau, H. A., and Keogh, E., "Matrix Profile V: A Generic Technique to 
Incorporate Domain Knowledge into Motif Discovery," ACM SIGKDD,  pp. 125-134 (2017). 
[7] Dua, D. and Graff, C., "The UCI Machine Learning Repository," (2019). 
http://archive.ics.uci.edu/ml  
[8] Gao, Y., Lin, J. HIME: "discovering variable-length motifs in large-
scale time series," Knowl Inf Syst 61, pp. 513‚Äì542 (2019). 
[9] Han, R., Li,Y., Gao,X., and Wang,S., "An accurate and rapid continuous wavelet dynamic time warping algorithm for end-to-end 
mapping in ultra-long nanopore se quencing," Bioinformatics 34, 17, 
pp. i722‚Äìi731 (2018). 
[10] Imamura, M. and Nakamura, T., "An Adaptive Symbolic 
Approximation for Finding Higher-Level Structure in Time Series, " 
IEEE ICDM, pp. 1120-1125 (2021). 
[11] Imamura, M. and Nakamura, T., "Parameter-free Spikelet: 
Discovering Different Length and Warped Time Series Motifs using an Adaptive Time Series Representation," ACM SIGKDD, pp. 857‚Äì866 (2023). 
[12] Imamura, M. and Nakamura, T., "A Symbolic Representation of Two-Dimensional Time Series for Arbitrary Length DTW Motif", IEEE ICDM (2023). 
[13] Imamura, M., Nakamura, T. and  Keogh, E., "Matrix Profile XXI: A 
Geometric Approach to Time Series  Chains Improves Robustness, " 
ACM SIGKDD, pp. 1114-1122 (2020). 
[14] Imani, S. and Keogh, E., "Matrix Pr ofile XVI: Time Series Semantic 
Motifs: A New Primitive for Finding Higher-Level Structure in Time Series," IEEE ICDM, pp. 329-338 (2019). 
[15] Keogh, E. and Pazzani, M., "Derivative Dynamic Time Warping," pp. 1-11, SIAM SDM (2001). 
[16] Keogh, E. and Ratanamahatana, C. A., "Exact indexing of dynamic 
time warping," KAIS 7.3, pp. 358-386 (2005). 
[17] Li, H. Liu, J. Yang, Z., Liu, R, Wu, K. and Wan, Y., "Adaptively 
constrained dynamic time warping fo r time series classification and 
clustering, " Information Sciences 534, pp. 97‚Äì116 (2020). 
[18] Linardi, M., Zhu, Y., Palpanas, T., and Keogh, E., "Matrix Profile X: 
VALMOD - Scalable Discovery of Variable-Length Motifs in Data 
Series, " ACM SIGMOD, pp. 1053‚Äì1066 (2018). 
[19] Lu, Y., Srinivas, T. V. A., Nakamura, T., Imamura, M., and Keogh, E., "Matrix Profile XXX:  MADRID: A Hyper-Anytime Algorithm to Find Time Series Anomalies of all Lengths," IEEE ICDM (2023). 
[20] Madrid, F., et al., "Matrix Profile XX: Finding and Visualizing Time Series Motifs of All Lengths using the Matrix Profile," IEEE ICBK, pp. 
175-182 (2019).  
[21] Mercer, R., Alaee, S., Abdoli, A. Singh, S., Murillo A., and Keogh, E. 
"Matrix Profile XXIII: Contrast Profile: A Novel Time Series 
Primitive that Allows Real World Classification," IEEE ICDM, pp. 
1240-1245  (2021). 
[22] Mueen, A., "Enumeration of Time Seri es Motifs of All Lengths," IEEE 
ICDM, pp. 547-556 (2013).  [23] Rakthanmanon, T., et al., "Addressing Big Data Time Series: Mining Trillions of Time Series Subsequences Under Dynamic Time Warping," TKDD 7(3): 10:1-10:31 (2013). 
[24] Sakoe, H. and Chiba, S., ‚ÄúDynamic programming algorithm optimization for spoken word recognition.‚Äù IEEE transactions on 
acoustics, speech, and signal processing 26.1, pp. 43-49 (1978). 
[25] Silva, D.F. and G. E. A. P. A. Batista, "Elastic Time Series Motifs and 
Discords," 2018 17th IEEE ICMLA, pp. 237-242 (2018). 
[26] Tan, C., Petitjean, F. and Webb, G. , "A new framework and method 
to lower bound DTW,". SIAM SDM, pp. 522-530 (2019). 
[27] Yeh C.C.M., et. al., "Time series joins, motifs, discords and shapelets: 
a unifying view that exploits the matrix profile, " Data Mining and 
Knowledge Discovery, 32(1), pp.83-123 (2018).  
[28] Zhang, L., Zhu, Y., Gao,Y. and Lin,J., "Robust Time Series Chain 
Discovery with Incremental Nearest Neighbors," IEEE ICDM, pp. 
1311-1316 (2022). 
[29] Zhu, Y. et. al., "Matrix Profile II: Exploiting a Novel Algorithm and GPUs to Break the One Hundred Million Barrier for Time Series 
Motifs and Joins," IEEE ICDM, pp. 739-748 (2016). 
[30] https://sites.google.com/view/pevammotif 
 
APPENDIX 
This appendix provides the definition of the original DTW, and 
the proofs for Proposition 2 and Proposition 3, as referenced in the main paper.  
Definition: Let X=ùë•
‡¨µ,ùë•‡¨∂,...,ùë•‡Ø° and ùëå=ùë¶‡¨µ,ùë¶‡¨∂,...,ùë¶‡Ø† be 
one dimensional time series subsequences of length ùëõ and ùëö, 
respectively, where ùëõ and ùëö are non-negative integers. Let ùê¥‡Ø°,‡Ø† 
be a set of all alignment paths for two subsequences ùëã ùëéùëõùëë  ùëå. 
DTW distance between ùëã ùëéùëõùëë  ùëå are defined as follows. 
ùê∑ùëáùëä (ùëã,ùëå)=‡∂®min
‡∞ó ‚àà ‡Æ∫‡≥ô,‡≥ò‡∑ç‡µ´ ùë• ‡Øú‚àí ùë¶‡Øù‡µØ‡¨∂
(‡Øú,‡Øù) ‚àà ‡∞ó  
Here, an alignment path  ùúã of length ùêæ is a sequence of ùêæ index 
pairs (ùëñ‡¨µ,ùëó‡¨µ), ‚Ä¶ , (ùëñ ‡ØÑ,ùëó‡ØÑ) that satisfy the following conditions. 
 (ùëñ‡¨µ,ùëó‡¨µ) = (1,1)           ( ùëñ‡ØÑ,ùëó‡ØÑ)=(ùëõ,ùëö) 
 ùëñ‡Øû‚â§ùëñ‡Øû‡¨æ‡¨µ‚â§ùëñ‡Øû+ 1     ùëó‡Øû‚â§ùëó‡Øû‡¨æ‡¨µ‚â§ùëó‡Øû+1  
This path can be computed on the cost matrix C using dynamic 
programming with the following recurrence relation and initial conditions: 
Recurrence relation: 
ùê∂(ùëñ,ùëó) = m i n ·àºùê∂(ùëñ‚àí1,ùëó) ,ùê∂(ùëñ,ùëó‚àí1) ,ùê∂(ùëñ‚àí1,ùëó‚àí1)·àΩ +‡µ´ùë•‡Øú‚àí ùë¶‡Øù‡µØ‡¨∂ 
Initial Conditions:  
1. ùê∂(1,1)  =  (ùë•‡¨µ‚àí ùë¶‡¨µ)‡¨∂  
     2. ùê∂(ùëñ,1 ) =ùê∂(ùëñ‚àí1,1)   + (ùë•‡Øú‚àí ùë¶‡¨µ)‡¨∂   ùëìùëúùëü ùëñ = 2 , 3 ,...,ùëõ  
     3. ùê∂(1,ùëó) =ùê∂(1,ùëó‚àí1) + ‡µ´ùë•‡¨µ‚àí ùë¶‡Øù‡µØ‡¨∂   ùëìùëúùëü ùëó = 2 , 3 ,...,ùëö  
Next, as a preparation for prov ing Proposition 2, we prove 
Lemma 1. 
Lemma 1: Let ùëé and ùëè be real numbers. The below equality 
holds: 
(ùëé‚àíùëè )‡¨∂+ùëè‡¨∂‚â•ùëé
2‡¨∂
 
Proof: It is sufficient to prove that  
((ùëé‚àíùëè )‡¨∂+ùëè‡¨∂)‚àíùëé
2‡¨∂
‚â•0 
 
1197Efficient Discovery of Time Series Motifs KDD '24, August 25-29, 2024, Barcelona, Spain 
 
 Expanding and rearranging the terms, we get the above 
equation follows from the following: 
(ùëé‚àíùëè )‡¨∂+ùëè‡¨∂‚àíùëé
2‡¨∂
=ùëé
2‡¨∂
‚àí2ùëéùëè+2ùëè‡¨∂=1
2(ùëé‚àí 2ùëè)‡¨∂‚â•0 
Thus, Lemma 1 is derived. 
Q.E.D. 
We obtain the following Proposition 2 by using Lemma 1. 
Proposition 2: Let ùëù‡¨µ,ùëù‡¨∂,ùëû‡¨µ, and ùëû‡¨∂ be real numbers that 
satisfy ùëù‡¨µ‚â§ùëû‡¨µ<ùëû‡¨∂‚â§ùëù‡¨∂. For all pairs of values (ùë•,ùë¶) where 
ùëû‡¨µ‚â§ùë• <ùë¶‚â§ùëû‡¨∂, the expression  (ùëù‡¨µ‚àíùë•)‡¨∂+(ùëù‡¨∂‚àíùë¶)‡¨∂ takes its 
minimum value of ‡¨µ
‡¨∂‡µ´(ùëù‡¨µ‚àíùëù‡¨∂)‚àí(ùëû‡¨µ‚àíùëû‡¨∂)‡µØ‡¨∂when ùë•=
ùëû‡¨µ ùëéùëõùëë   ùë¶=ùëû‡¨∂. This implies the following inequality holds: 
(ùëù‡¨µ‚àíùë•)‡¨∂+(ùëù‡¨∂‚àíùë¶)‡¨∂‚â•1
2‡µ´(ùëù‡¨µ‚àíùëù‡¨∂)‚àí(ùëû‡¨µ‚àíùëû‡¨∂)‡µØ‡¨∂ 
Proof: The expression (ùëù‡¨µ‚àíùë•)‡¨∂+(ùëù‡¨∂‚àíy)‡¨∂ takes its 
minimum value when ùë•=ùëû‡¨µ and ùë¶=ùëû‡¨∂. Thus, the following 
inequality es tablished: 
(ùëù‡¨µ‚àíùë•)‡¨∂+(ùëù‡¨∂‚àíy)‡¨∂‚â•(ùëù‡¨µ‚àíùëû‡¨µ)‡¨∂+(ùëù‡¨∂‚àíùëû‡¨∂)‡¨∂         (1)   
Let ùëé=(ùëù‡¨∂‚àíùëù‡¨µ‚àíùëû‡¨∂+ùëû‡¨µ) and ùëè=ùëù‡¨∂‚àíùëû‡¨∂ in Lemma 1, we 
obtain the following inequality:  
(ùëù‡¨µ‚àíùëû‡¨µ)‡¨∂+(ùëù‡¨∂‚àíùëû‡¨∂)‡¨∂‚â•12‡µ´(ùëù‡¨µ‚àíùëù‡¨∂)‚àí(ùëû‡¨µ‚àíùëû‡¨∂)‡µØ‡¨∂     (2)  
From inequalities (1) and (2), Pr oposition 2 is derived. Q.E.D. 
Next, as preparation for proving Proposition 3, we prove 
Lemma 2. 
Lemma 2:  Let P = [ ùëù‡¨µ, ùëù‡¨∂,‚Ä¶,ùëù‡Øá] be a real valued vector that 
ùëù‡¨µ‚â•ùëù‡¨∂‚Ä¶‚â•ùëù‡Øá‚â•0. The vector P is represented as the 
product of an upper triangular matrix U, which consists of 
ones and zeros, and the column vector A  = [ùëé‡¨µ, ùëé‡¨∂,‚Ä¶,ùëé‡Øá], 
where ùëé‡Øú‚â•0 for all 1‚â§ùëñ‚â§ùëÅ : Precisely, 
‡µ¶ùëù‡¨µ
ùëù‡¨∂
‚ãÆ
ùëù‡Øá‡µ™= ‡µ¶11‚ãØ 1
‚ãÆ1‚ãØ 1
00‚ã± 1
00 0 1‡µ™ ‡µ¶ùëé‡¨µ
ùëé‡¨∂
‚ãÆ
ùëé‡Øá‡µ™=ùëº‡µ¶ùëé‡¨µ
ùëé‡¨∂
‚ãÆ
ùëé‡Øá‡µ™ 
Proof: By setting  
ùëé‡Øú=ùëù‡Øú‚àíùëù‡Øú‡¨æ‡¨µ for all 1 ‚â§ùëñ‚â§ùëÅ‚àí 1, and 
ùëé‡Øú=ùëù‡Øú for ùëñ =ùëÅ,  
we obtain the above equation. 
  ùëù‡¨µ=·àæ1,1, ‚Ä¶ ,1,1 ·àø‚àô[ùëé‡¨µ,ùëé‡¨∂,‚Ä¶,ùëé‡Øá‡¨ø‡¨µ,ùëé‡Øá] 
  ùëù‡¨∂=[0,1, ‚Ä¶ ,1,1 ]‚àô[ùëé‡¨µ,ùëé‡¨∂,‚Ä¶,ùëé‡Øá‡¨ø‡¨µ,ùëé‡Øá] 
  ‚Ä¶ 
  ùëù‡Øá=[0,0, ‚Ä¶ ,0,1 ]‚àô[ùëé‡¨µ,ùëé‡¨∂,‚Ä¶,ùëé‡Øá‡¨ø‡¨µ,ùëé‡Øá] 
By expressing the inner product formula for N vectors in matrix 
form, we obtain the following equation: 
‡µ¶ùëù‡¨µ
ùëù‡¨∂
‚ãÆ
ùëù‡Øá‡µ™=‡µ¶11‚ãØ 1
‚ãÆ1‚ãØ 1
00‚ã± 1
00 0 1‡µ™ ‡µ¶ùëé‡¨µ
ùëé‡¨∂
‚ãÆ
ùëé‡Øá‡µ™  
We denote ‡µ¶11‚ãØ 1
‚ãÆ1‚ãØ 1
00‚ã± 1
0 001‡µ™ as U hereafter.  
Q.E.D. Using Lemma 2, we prove Proposition 3. 
Proposition 3:  Let P =[ùëù‡¨µ, ùëù‡¨∂,‚Ä¶,ùëù‡Øá] and Q = [ ùëù‡¨µ, ùëù‡¨∂,‚Ä¶,ùëù‡Øá] 
be vectors that ùëù‡¨µ‚â•ùëù‡¨∂‚Ä¶‚â•ùëù‡Øá‚â•0 and ùëû‡¨µ‚â•ùëû‡¨∂‚Ä¶‚â•ùëû‡Øá‚â•0, 
respectively. Let ùúé be a permutation of [ 1, 2, ‚Ä¶ ,ùëÅ], the 
permutation that minimizes the expression ‚àë (ùëù‡Øú‚àíùëû‡∞ô(‡Øú))‡Øá
‡Øú‡≠Ä‡¨µ‡¨∂ 
is the identity permutation. 
Proof: It is sufficient to prove that for all ùúé 
‡∑ç(ùëù‡Øú‚àíùëû‡∞ô(‡Øú))‡¨∂‡Øá
‡Øú‡≠Ä‡¨µ‚àí‡∑ç (ùëù‡Øú‚àíùëû‡Øú)‡¨∂‡Øá
‡Øú‡≠Ä‡¨µ‚â•0 
Considering ùúé is a permutation, we need to prove for all ùúé, 
‡∑ç(ùëù‡Øúùëû‡Øú‚àíùëù‡Øúùëû‡∞ô(‡Øú))‚â•0‡Øá
‡Øú‡≠Ä‡¨µ 
which can be written as  
‡∑ç(ùëù‡Øúùëû‡Øú‚àíùëù‡Øúùëû‡∞ô(‡Øú))‡Øá
‡Øú‡≠Ä‡¨µ 
= [ùëù‡¨µ,ùëù‡¨∂,‚Ä¶,ùëù‡Øá]‡µ¶ùëû‡¨µ
ùëû‡¨∂
‚ãÆ
ùëû‡Øá‡µ™‚àí [ùëù‡¨µ,ùëù‡¨∂,‚Ä¶,ùëù‡Øá] ‡µ¶ùëû‡∞ô(‡¨µ)
ùëû‡∞ô(‡¨∂)
‚ãÆ
ùëû‡∞ô(‡Øá)‡µ™ 
Noting that ‡µ¶ùëû‡∞ô(‡¨µ)
ùëû‡∞ô(‡¨∂)
‚ãÆ
ùëû‡∞ô(‡Øá)‡µ™=
‚é£‚é¢‚é¢‚é°ùëÜ‡∞ô(‡¨µ)
ùëÜ‡∞ô(‡¨∂)
‚ãÆ
ùëÜ‡∞ô(‡Øá)‚é¶‚é•‚é•‚é§
‡µ¶ùëû‡¨µ
ùëû‡¨∂
‚ãÆ
ùëû‡Øá‡µ™ and denoting 
‚é£‚é¢‚é¢‚é°ùëÜ‡∞ô(‡¨µ)
ùëÜ‡∞ô(‡¨∂)
‚ãÆ
ùëÜ‡∞ô(‡Øá)‚é¶‚é•‚é•‚é§
 as ùë∫‡∞ô, 
where ùëÜ‡∞ô(‡Øú) is an N-dimensional row vector with the ùúé(ùëñ)‚àíùë°‚Ñé  
element being 1 and all other el ements being 0, we get the 
following equation: 
= [ùëù‡¨µ,ùëù‡¨∂,‚Ä¶,ùëù‡Øá]‡µ¶ùëû‡¨µ
ùëû‡¨∂
‚ãÆ
ùëû‡Øá‡µ™‚àí [ùëù‡¨µ,ùëù‡¨∂,‚Ä¶,ùëù‡Øá]ùë∫‡∞ô‡µ¶ùëû‡¨µ
ùëû‡¨∂
‚ãÆ
ùëû‡Øá‡µ™ 
Applying Lemma 2 for P and Q, we obtain the following 
equation: 
=[ùëé‡¨µ, ùëé‡¨∂,‚Ä¶,ùëé‡Øá] ùëºùíë‡Øçùëº‡Ø§‡µ¶ùëè‡¨µ
ùëè‡¨∂
‚ãÆ
ùëè‡Øá‡µ™‚àí[ùëé‡¨µ,ùëé‡¨∂,‚Ä¶,ùëé‡Øá] ùëºùíë‡Øçùë∫‡∞ôùëº‡Ø§‡µ¶ùëè‡¨µ
ùëè‡¨∂
‚ãÆ
ùëè‡Øá‡µ™, 
where ùëºùíë and ùëºùíë are triangular matrixes with elements that are 
1s or 0s and ùëé‡Øú and ùëè‡Øú are nonnegative for ùëñ ranging from 1 to N. 
= [ùëé‡¨µ, ùëé‡¨∂,‚Ä¶,ùëé‡Øá]ùëºùíë‡Øç(ùë∞‚àíùë∫‡∞ô)ùëºùíí‡Øç‡µ¶ùëè‡¨µ
ùëè‡¨∂
‚ãÆ
ùëè‡Øá‡µ™‚â•0, where ùë∞ is an identity 
matrix. Considering that ùë∫‡∞ô has only one row and one column 
with the value of 1, while the rema ining elements are 0s, it follows 
that all elements of ùëºùíë‡Øç(ùë∞‚àíùë∫‡∞ô)ùëºùíí‡Øç are either zeros or ones. 
Consequent, the last inequality is valid. 
Q.E.D. 
 
1198