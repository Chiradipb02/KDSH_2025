Money Never Sleeps: Maximizing Liquidity Mining Yields in
Decentralized Finance
Wangze Ni
The Hong Kong University of Science
and Technology
Hong Kong SAR, China
wniab@cse.ust.hkYiwei Zhao
The Hong Kong Polytechnic
University
Hong Kong SAR, China
yiweizhao@polyu.edu.hkWeijie Sun
The Hong Kong University of Science
and Technology
Hong Kong SAR, China
wsunan@cse.ust.hk
Lei Chen∗
The Hong Kong University of Science
and Technology (Guangzhou)
Guangzhou, China
leichen@cse.ust.hkPeng Cheng
East China Normal University
Shanghai, China
pcheng@sei.ecnu.edu.cnChen Jason Zhang
The Hong Kong Polytechnic
University
Hong Kong SAR, China
jason-c.zhang@polyu.edu.hk
Xuemin Lin
Shanghai Jiao Tong University
Shanghai, China
xuemin.lin@gmail.com
Abstract
The popularity of decentralized finance has drawn attention to liq-
uidity mining (LM). In LM, a user deposits her cryptocurrencies into
liquidity pools to provide liquidity for exchanges and earn yields.
Different liquidity pools offer varying yields and require different
pairs of cryptocurrencies. A user can exchange a cryptocurrency for
another with some exchange costs. Thus, an LM solution consists
of exchange transactions and deposit transactions, guaranteeing
(1) each exchange transaction must exchange one cryptocurrency
for another at a specific rate (i.e., the exchange constraint); (2) the
amounts of cryptocurrencies deposited in a liquidity pool must ex-
ceed the required threshold (i.e., the minimum constraint); (3) each
deposit transaction must deposit a specific pair of cryptocurrencies
at a certain rate in a liquidity pool (i.e., the deposit constraint);
and (4) the cryptocurrencies used in the solution do not exceed
the cryptocurrencies that the user has (i.e., the budget constraint).
Selecting the most profitable LM solution is challenging due to the
vast number of candidate solutions. To address this challenge, we
define the yield maximization liquidity mining (YMLM) problem.
Given a set of liquidity pools, a set of the user’s cryptocurrencies, a
set of exchange rates, and an evaluation function, YMLM aims to
find an LM solution with maximal yields, satisfying the minimum,
exchange, deposit, and budget constraints. We prove that YMLM is
∗Also with The Hong Kong University of Science and Technology, Hong Kong SAR,
China
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ’24, August 25–29, 2024, Barcelona, Spain
©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671942
(a) Details of Liquidity Pools
 (b) Exchange Rates
Figure 1: Some Details in Example 1.
NP-hard and cannot be solved by algorithms with constant approxi-
mation ratios. To tackle YMLM, we propose two algorithms, namely
YMLM_GD and YMLM_SK, with parameterized approximation ra-
tios. Extensive experiments on both real and synthetic datasets
show that our approaches outperform the baselines in yields.
CCS Concepts
•Theory of computation →Approximation algorithms anal-
ysis; •Applied computing →Digital cash; Economics.
Keywords
Blockchain, Optimization, Liquidity Mining, Decentralized Finance
ACM Reference Format:
Wangze Ni, Yiwei Zhao, Weijie Sun, Lei Chen, Peng Cheng, Chen Jason
Zhang, and Xuemin Lin. 2024. Money Never Sleeps: Maximizing Liquidity
Mining Yields in Decentralized Finance. In Proceedings of the 30th ACM
SIGKDD Conference on Knowledge Discovery and Data Mining (KDD ’24),
August 25–29, 2024, Barcelona, Spain. ACM, New York, NY, USA, 12 pages.
https://doi.org/10.1145/3637528.3671942
1 Introduction
Cryptocurrency trading has gained high attention from both in-
dustry [ 1] and academia (e.g., data mining community [ 5,6,11,15,
17,25,26]). A popular trading method is trading via decentralized
exchanges (DEXes), which rely on liquidity mining (LM) to provide
liquidity [ 9]. For instance, Uniswap, the most popular DEX, has
received cryptocurrencies valued at $3.15B by LM.
In LM, a liquidity provider (LP) deposits two cryptocurrencies at
a required ratio into a smart contract called a liquidity pool (a pool
 
2248
KDD ’24, August 25–29, 2024, Barcelona, Spain Wangze Ni et al.
(a) Solution 1
 (b) Solution 2
Figure 2: Two Solutions of Example 1.
for short), which facilitates traders in swapping cryptocurrencies.
In LM, an LP earns yields, which is the product of her deposited
values and the pool’s yield rate. Different pools offer varying yield
rates. For more details about LM, please refer to § 2.
When an LP lacks a specific cryptocurrency for depositing, she
can exchange one cryptocurrency for another at some exchange
costs. Thus, an LM solution consists of a set of exchange and deposit
transactions. Due to the requirements of LM applications and the
LP, a valid LM solution should satisfy the deposit, minimum, budget,
andexchange constraints. The deposit constraint requires that
the amounts of the two cryptocurrencies deposited into a pool
meet a required ratio. The minimum constraint requires that
the amount of a cryptocurrency deposited into a pool exceeds
a required threshold. The budget constraint states that an LP
cannot deposit more cryptocurrencies than she has. The exchange
constraint requires that each exchange transaction exchanges one
cryptocurrency for another at a specific rate. An LP is motivated to
find a valid LM solution with maximum yields, which is challenging
due to the exponential potential solutions. Here is an example.
Example 1. Figure 1(a) shows the details of three pools. For ex-
ample, the minimum deposits of 𝑐2in𝑝1are 2 units. The ratio of
the amount of the deposited 𝑐1to the amount of the deposited 𝑐3in
𝑝2should be2
3. In this example, the deposit amounts are integers.
Thus, although the minimum deposit of 𝑐1in𝑝2is 1 unit and the
deposit ratio of 𝑝2is2
3, the minimum deposit of 𝑐3in𝑝2is 1 unit.
We will discuss the precision issue in Remark 3.1. Figure 1(b) shows
the exchange rates. For example, 5 units of 𝑐2can be exchanged for 3
units of𝑐1. The LP has 2 units of 𝑐1, 21 units of 𝑐2, and 1 unit of 𝑐3.
The values of 𝑐1,𝑐2, and𝑐3are $3, $2, and $2, respectively.
Figure 2(a) depicts a solution. Specifically, the LP makes an ex-
change transaction 𝑒𝑡1to exchange 20 units of 𝑐2for 20 units of 𝑐3.
She makes a deposit transaction 𝑑𝑡1to deposit 3 units of 𝑐1and 20
units of𝑐2in𝑝2. Similarly, she makes 𝑑𝑡2. However, this solution is
invalid. She only has 2 units of 𝑐1but uses 3 units of 𝑐1in𝑑𝑡1, violating
the budget constraint. She exchanges 20 units of 𝑐2for 20 units of 𝑐3in
𝑒𝑡1, violating the exchange constraint. She deposits 3 units of 𝑐1and 20
units of𝑐3in𝑝2, violating the deposit constraint. She deposits 1 unit of
𝑐2and 1 unit of 𝑐3in𝑝1, violating the minimum constraint. Figure 2(b)
depicts a valid solution, where the LP makes 𝑒𝑡2,𝑒𝑡3, and𝑑𝑡3. The
total yields of this solution are (2∗11+2∗11)∗0.29−(1+2)=$9.76,
where𝑒𝑡2and𝑒𝑡3has an exchange cost of $1 and $2, respectively.
Example 1 shows that there are an exponential number of candi-
date LM solutions with different yields to consider. Thus, it is impor-
tant to study how to efficiently seek an LM solution with maximum
yields. This paper formally defines the yield maximization liquidity
mining (YMLM) problem. Given a set of pools, a set of cryptocur-
rencies that an LP has, and a set of exchange rates, YMLM aims to
find an LM solution with maximum yields, satisfying the exchange,
minimum, deposit, and budget constraints. We prove that YMLM is
Figure 3: A Price Curve.
NP-hard and cannot be approximately solved with constant ratios,
unless P=NP. Thus, we propose two algorithms with parameterized
approximation ratios, namely YMLM_GD andYMLM_SK. Specifi-
cally, YMLM_SK is more efficient, while YMLM_GD gains a higher
yield. In summary, we have made the following contributions:
•In § 3, we define the yield maximization liquidity mining (YMLM)
problem. We prove that YMLM is NP-hard and cannot be solved
by algorithms with constant approximation ratios if P ≠NP;
•In § 4, we propose an effective algorithm called YMLM_GD;
•In § 5, we propose an efficient algorithm called YMLM_SK; and
•We conduct comprehensive experimental studies on real and
synthetic datasets in § 6.
In addition, we introduce background in § 2, discuss the related
works in § 7, and conclude our work in § 8.
2 Background
Decentralized Exchange . Cryptocurrencies have garnered much
attention from the data mining community [ 5,6,11,15,17,25,26].
Decentralized exchanges (DEXes) are emerging as a popular means
of trading cryptocurrencies [ 23]. DEXes use Automated Market
Maker (AMM) design instead of order books. AMM holds a set of
pools, each with sufficient volume for two cryptocurrencies, allow-
ing immediate trades from either side without waiting for a match.
Most AMMs keep the product of cryptocurrency reserves stays con-
stant after a swap. For instance, given a pool for a cryptocurrency
pair(𝑋,𝑌)with reserves 𝑥0and𝑦0, a constant product 𝑥·𝑦=𝐿2is
maintained using a price curve shown in Figure 3, where 𝐿is the
pool’s liquidity. If a trader swaps 𝛿𝑥units of𝑋for𝑌, the amount 𝛿𝑦
of𝑌received is calculated by (𝑥0+𝛿𝑥)(𝑦0−𝛿𝑦)=𝐿2. The actual
price of𝑋in terms of𝑌in the swap is 𝜌1=𝛿𝑦/𝛿𝑥=𝑦0/(𝑥0+𝛿𝑥).
Liquidity Mining . The successful execution of swap transactions
in pools requires sufficient liquidity. To attract LPs to deposit liquid-
ity, LM has been proposed, where LPs gain rewards by depositing
liquidity. Uniswap V2 is a typical LM protocol. In the rest of this
paper, we will introduce the LM mechanism using Uniswap V2 as
the basis. The ratio of the amounts of the two cryptocurrencies used in
the LM should match the current price. Consider a pool in Figure 3,
where the current price is 𝜌0. When an LP deposits Δ𝑥of𝑋andΔ𝑦
of𝑌into the pool, Δ𝑥andΔ𝑦must satisfy Δ𝑦/Δ𝑥=𝑦0/𝑥0=𝜌0.
Uniswap V3 [ 3], building upon Uniswap V2, enhances the efficiency
of liquidity utilization. In § A.1, We will introduce Uniswap V3 and
show that our approach is also compatible with it.
The LM rewards are primarily derived from the swap fees paid
by traders. The swap fees are determined by the swap amount
and the swap fee rates, which vary across different pools. The
swap fees in a pool are distributed among the LPs of the pool
based on their percentage of the deposited liquidity. Formally, the
reward𝑌is calculated by 𝑌=𝑆𝑇·𝑓𝑟·𝑉/𝑇𝑉, where𝑆𝑇is the
amounts of cryptocurrencies that are swapped when the LP deposits
their cryptocurrencies, 𝑓𝑟is the swap fee rate, 𝑉is the amount
 
2249Money Never Sleeps: Maximizing Liquidity Mining Yields in Decentralized Finance KDD ’24, August 25–29, 2024, Barcelona, Spain
of the cryptocurrencies that the LP deposits, and 𝑇𝑉is the total
amount of the cryptocurrencies that are deposited in the pool. By
convention, 𝑆𝑇·𝑓𝑟/𝑇𝑉is calculated as the yield rate of the pool [ 4].
The higher the swap amount, the higher the swap fee rate, and the
more cryptocurrencies an LP deposits, the more rewards the LP
receives. Because the daily swap amount varies, the yield rate of a
pool also fluctuates. Real-world applications typically use the swap
amount from the past 24 hours to estimate a pool’s yield rate [4].
LPs may also suffer losses. When the price of deposited cryp-
tocurrencies deviates from the initial deposit price, LPs incur losses.
However, the rewards earned by LPs are sufficient to offset po-
tential losses under normal cases. Besides, in the extreme case of
significant market volatility, LPs can withdraw their liquidity to
avoid losses. Additionally, we discuss malicious issues and privacy
concerns of LM in § A.2.
3 Problem Definition
3.1 Basic Concepts
We first define the concepts of cryptocurrency and liquidity pool.
Definition 1. A cryptocurrency is denoted by 𝑐𝑖=⟨𝑎𝑐𝑖,𝑒𝑣𝑖⟩, where
𝑎𝑐𝑖is the amount of 𝑐𝑖that a liquidity provider has, and 𝑒𝑣𝑖is the
unit value of 𝑐𝑖.
Definition 2. A liquidity pool is denoted by 𝑝𝑖=⟨𝑃𝐶𝑖,𝑑𝑟𝑖,𝑦𝑟𝑖,
𝑚𝑎𝑖⟩, where𝑃𝐶𝑖={𝑝𝑐𝑖,1,𝑝𝑐𝑖,2}is the two cryptocurrencies that
𝑝𝑖supports,𝑑𝑟𝑖is the deposit ratio of 𝑝𝑖,𝑦𝑟𝑖is the yield rate of 𝑝𝑖,
and𝑚𝑎𝑖is the minimum amount of 𝑝𝑐𝑖,1that liquidity providers
must deposit when depositing liquidity into 𝑝𝑖.
The unit value of each cryptocurrency is measured in a normal-
ized manner, such as the price in a fiat currency (e.g., USD or CNY).
Different pools may offer different yield rates, and the deposit ratio
of the cryptocurrencies may also vary [ 4,10,12,28]. Additionally,
suppose𝐶is the universe of cryptocurrencies, and 𝐴𝐶is the set of
cryptocurrency amounts that an LP has. For instance, in Example 1,
𝑎𝑐1=2. Then, we define the concept of exchange rate.
Definition 3. An exchange rate, denoted by 𝑒𝑟𝑖,𝑗, is the amount of
𝑐𝑗that a liquidity provider obtains using 1 unit of 𝑐𝑖. The exchange
cost rate𝑒𝑐𝑟𝑖,𝑗of exchanging 𝑐𝑖for𝑐𝑗is𝑒𝑐𝑟𝑖,𝑗=1−𝑒𝑟𝑖,𝑗∗𝑒𝑣𝑗
𝑒𝑣𝑖.
In practice, exchange rates are asymmetrical, i.e., 𝑒𝑟𝑖,𝑗≠1
𝑒𝑟𝑗,𝑖.
For example, in the real datasets, 1 Bitcoin can be exchanged for
16.70716463 ETH, but 1 ETH can only be exchanged for 0.05952847
Bitcoin. In other words, the exchange cost rate is 0.86%. Next, we
define the concept of mining solution as follows:
Definition 4. A mining solution 𝑆is denoted by 𝑆=⟨𝐸𝑇,𝐷𝑇⟩,
where𝐸𝑇={𝑒𝑡1,···,𝑒𝑡𝑚}is a set of exchange transactions, and
𝐷𝑇={𝑑𝑡1,···,𝑑𝑡𝑛}is a set of deposit transactions. An exchange
transaction𝑒𝑡𝑖, denoted by 𝑒𝑡𝑖=⟨𝑢𝑐𝑖,𝑢𝑎𝑖,𝑔𝑐𝑖,𝑔𝑎𝑖⟩, obtains𝑔𝑎𝑖units
of the cryptocurrency 𝑔𝑐𝑖using𝑢𝑎𝑖units of the cryptocurrency 𝑢𝑐𝑖.
A deposit transaction 𝑑𝑡𝑖, denoted by 𝑑𝑡𝑖=⟨𝑑𝑐𝑖,1,𝑑𝑎𝑖,1,𝑑𝑐𝑖,2,𝑑𝑎𝑖,2,
𝑑𝑝𝑖⟩, deposits𝑑𝑎𝑖,1units of the cryptocurrency 𝑑𝑐𝑖,1and𝑑𝑎𝑖,2units
of the cryptocurrency 𝑑𝑐𝑖,2into a pool𝑑𝑝𝑖.
For example, in Figure 2(b), 𝐸𝑇={𝑒𝑡2,𝑒𝑡3}, and𝐷𝑇={𝑑𝑡3}.
Specifically, 𝑢𝑐2=𝑐1,𝑔𝑎3=9,𝑑𝑐3,1=𝑐3,𝑑𝑎3,2=11, and𝑑𝑝3=𝑝1.
Remark 3.1 (The precision issue). The value of an exchange trans-
action or a deposit transaction is constrained by the minimum unit
in applications. In LM, usually the minimum unit is 10−8[1]. In thisTable 1: Symbols and Descriptions.
Symbol Description
𝑝𝑖=⟨𝑃𝐶𝑖,𝑑𝑟𝑖,𝑝𝑟𝑖,𝑚𝑎𝑖⟩ a liquidity pool
𝑃𝐶𝑖={𝑝𝑐𝑖,1,𝑝𝑐𝑖,2} the two cryptocurrencies in 𝑝𝑖
𝑑𝑟𝑖 the deposit ratio that 𝑝𝑖requires
𝑝𝑟𝑖 the yield rate of 𝑝𝑖
𝑚𝑎𝑖 the minimum deposit of 𝑝𝑐𝑖,1
𝑎𝑐𝑖 the amount of 𝑐𝑖that an LP has
𝐸𝑅={𝑒𝑟1,2,···,𝑒𝑟𝑛,𝑛−1}a set of exchange rates
𝑒𝑣𝑖 the unite value of 𝑐𝑖
𝑒𝑡𝑖=⟨𝑢𝑐𝑖,𝑢𝑎𝑖,𝑔𝑐𝑖,𝑔𝑎𝑖⟩ an exchange transaction
𝑢𝑐𝑖 the cryptocurrency used in 𝑒𝑡𝑖
𝑢𝑎𝑖 the amount of 𝑢𝑐𝑘used in𝑒𝑡𝑖
𝑔𝑐𝑖 the cryptocurrency obtained in 𝑒𝑡𝑖
𝑔𝑎𝑖 the amount of 𝑔𝑐𝑘obtained in𝑒𝑡𝑖
𝑑𝑡𝑖 a deposit transaction
𝑑𝑐𝑖,1 a cryptocurrency deposited in 𝑑𝑡𝑖
𝑑𝑎𝑖,1 the number of 𝑑𝑐𝑖,1deposited in 𝑑𝑡𝑖
𝑑𝑐𝑖,2 a cryptocurrency deposited in 𝑑𝑡𝑖
𝑑𝑎𝑖,2 the number of 𝑑𝑐𝑖,2deposited in 𝑑𝑡𝑖
𝑑𝑝𝑖 the pool where 𝑑𝑡𝑖deposits tokens
paper, we assume 10−8as 1 unit. Thus, the amounts (e.g., 𝑢𝑎𝑖,𝑔𝑎𝑖,
𝑑𝑎𝑖,1,𝑑𝑎𝑖,2) are all integers. Exchange transactions may occur cost
due to precision. In Figure 2(b), due to precision limitations, the LP
receives 0.3 units less of 𝑐3from𝑒𝑡2, resulting in an extra cost of
$0.6. The precision cost is determined by the unit value of a cryp-
tocurrency. In real-world applications, cryptocurrencies often have
extremely small unit values. For example, even the highest-priced
Bitcoin has a unit value of only $2.7 ·10−4. Thus, the impact of
precision costs in practice can be negligible. In § 6, we conduct the ex-
periments to test the effects of unit values. As shown in Figure 5(e),
even when the unit value reaches 100 (equivalent to a price of $10
billion for 1 Bitcoin, approximately 4000 times the current price of
Bitcoin), our algorithms still outperform the baseline algorithms.
3.2 The YMLM Problem
Based on the aforementioned concepts, we formulate the yield
maximization liquidity mining (YMLM) problem as follows:
Definition 5. Given a set 𝑃of liquidity pools, a set 𝐴𝐶of cryp-
tocurrency amounts that a liquidity provider has, and a set 𝐸𝑅of
exchange rates, the yield maximization liquidity mining (YMLM)
problem aims to find a liquidity mining solution 𝑆with maximized
yields𝑌=Í
𝑑𝑡𝑖∈𝐷𝑇((𝑑𝑎𝑖,1∗𝑒𝑣ℎ+𝑑𝑎𝑖,2∗𝑒𝑣𝑘)·𝑦𝑟𝑗)−Í
𝑒𝑡𝛼∈𝐸𝑇(𝑢𝑎𝛼∗
𝑒𝑣𝛽−𝑔𝑎𝛼∗𝑒𝑣𝛾), where𝑑𝑝𝑖=𝑝𝑗,𝑐ℎ=𝑑𝑐𝑖,1,𝑐𝑘=𝑑𝑐𝑖,2,𝑐𝛽=𝑢𝑐𝛼,
and𝑐𝛾=𝑔𝑐𝛼, satisfying
•The deposit constraint. The amounts of cryptocurrencies of
each deposit transaction should satisfy the corresponding deposit
ratio, i,e.,∀𝑑𝑡𝑖∈𝐷𝑇,𝑑𝑎𝑖,2=⌈𝑑𝑎𝑖,1·𝑑𝑟𝑗⌉, where𝑝𝑗=𝑑𝑝𝑖;
•The minimum constraint. The amounts of cryptocurrencies
of each deposit transaction should exceed the minimum deposit,
i.e.,∀𝑑𝑡𝑖∈𝐷𝑇,𝑑𝑎𝑖,1>𝑚𝑎𝑗, where𝑝𝑗=𝑑𝑝𝑖;
•The exchange constraint. The amounts of cryptocurrencies
of each exchange transaction should satisfy the corresponding
exchange rate, i.e.,∀𝑒𝑡𝑖∈𝐸𝑇,𝑔𝑎𝑖=⌊𝑢𝑎𝑖·𝑒𝑟𝑗,𝑘⌋, where𝑐𝑗=𝑢𝑐𝑖,
and𝑐𝑘=𝑔𝑐𝑖; and
•The budget constraint. For each cryptocurrency, the sum of
the amounts used in exchange transactions does not exceed the
amount that the liquidity provider has, and the total amount used
 
2250KDD ’24, August 25–29, 2024, Barcelona, Spain Wangze Ni et al.
in deposited transactions does not exceed the amount that she
has after executing exchange transactions, i.e., ∀𝑐𝑖∈𝐶,𝑎𝑐𝑖+Í
𝑔𝑐𝑘=𝑐𝑖𝑔𝑎𝑘≥Í
𝑢𝑐𝑗=𝑐𝑖𝑢𝑎𝑗, andÍ
𝑑𝑐𝑗,1=𝑐𝑖𝑑𝑎𝑗,1+Í
𝑑𝑐𝑗,2=𝑐𝑖𝑑𝑎𝑗,2
≤𝑎𝑐𝑖−Í
𝑢𝑐𝑗=𝑐𝑖𝑢𝑎𝑗+Í
𝑔𝑐𝑗=𝑐𝑖𝑔𝑎𝑗.
An LP may have multiple cryptocurrencies and deposit them
into multiple pools [ 9]. A special but practical case is that a new
investor holds only one fiat currency (e.g., USD) and wishes to
invest her money in LM to earn yields. In this case, we can consider
this fiat currency as a type of cryptocurrency. The exchange rate
between this fiat currency and other cryptocurrencies is the price
at which the cryptocurrencies are purchased with the fiat currency
on exchanges. Thus, YMLM is general and realistic.
3.3 The Hardness of the YMLM Problem
Unfortunately, we have proven that solving YMLM is difficult.
Theorem 3.1. The yield maximization liquidity mining problem
is NP-hard. If P ≠NP, then for any constant 𝜌≤1, there is no
polynomial time algorithm with approximation ratio 𝜌for YMLM.
Proof. We prove the theorem by reducing YMLM from the two-
dimensional knapsack (2D-knapsack) problem. The 2D-knapsack
problem can be described as follows: Given a set 𝐺of goods, each
with a two-dimensional size (𝑠𝑖,1,𝑠𝑖,2)and a value 𝑣𝑖, and a two-
dimensional capacity (𝑆1,𝑆2), the 2D-knapsack problem aims to
find a subset 𝑆𝐺of𝐺so that the total size of each dimension does
not exceed the capacity and the total value is maximized.
Given a 2D-knapsack problem instance, we construct a YMLM
problem instance as follows: We set each exchange rate is 0. For each
good𝑔𝑖, we construct a pool 𝑝𝑖, where𝑃𝐶𝑖={𝑐1,𝑐2},𝑑𝑟𝑖=𝑠𝑖,2
𝑠𝑖,1,
and𝑝𝑟𝑖=𝑣𝑖. The user has two cryptocurrencies, whose amounts
are𝑆1and𝑆2. Thus, the answer to the constructed YMLM problem
instance equals the answer to the 2D-knapsack problem instance.
Researchers have proved that the 2D-knapsack problem is NP-
hard and cannot be solved with any constant approximation ra-
tio [18]. Thus, YMLM is also NP-hard and cannot be solved with
any constant approximation ratio. The proof is complete. ■
Table 1 summarizes the commonly used symbols.
4 The YMLM_GD Algorithm
As proved in § 3.3, no algorithms with constant approximation ra-
tios can solve YMLM. Thus, in this section, we propose an algorithm
with a parameterized approximation ratio, namely YMLM_GD. The
time complexity of YMLM_GD is O(𝑛2·𝑚·(log𝑛+log𝑚)), where
𝑛is the number of cryptocurrencies, and 𝑚is the number of pools.
In this section, we first introduce the overview of YMLM_GD in
§ 4.1, and then theoretically analyze YMLM_GD’s approximation
ratio and time complexity in § 4.2. Additionally, we present the
pseudo-code of YMLM_GD, describe the details of YMLM_GD, and
demonstrate a running example in § B.
4.1 Overview of YMLM_GD
The actual yield gained from depositing cryptocurrencies into a
pool𝑝with a higher yield rate may be less than the actual yield
gained from depositing cryptocurrencies into a pool 𝑝′with a lower
yield rate. This is because exchanging an LP’s cryptocurrencies
for the cryptocurrencies required by 𝑝may incur higher exchange
costs. Therefore, YMLM_GD considers the exchange costs and yield
rate together when selecting pools to deposit cryptocurrencies.Briefly, YMLM_GD first constructs a set of exchange-aware de-
posit strategies. Each exchange-aware deposit strategy is associated
with a pair of source cryptocurrencies and a pool. The source cryp-
tocurrencies are exchanged for the corresponding ones in the pool.
The exchange-aware yield rate of an exchange-aware deposit strat-
egy is calculated by considering the exchange cost and the yield rate
of the pool. Then, YMLM_GD greedily selects exchange-aware de-
posit strategies with the highest yield rates to exchange and deposit
cryptocurrencies until no more transactions can be generated. We
define the concept of exchange-aware deposit strategy as follows:
Definition 6. An exchange-aware deposit strategy, denoted by
𝑒𝑑𝑡𝑖,𝑗,𝑘=⟨𝑐𝑖,𝑐𝑗,𝑝𝑘,𝑒𝑦𝑟𝑖,𝑗,𝑘⟩, exchanges 𝑐𝑖and𝑐𝑗into𝑝𝑐𝑘,1and
𝑝𝑐𝑘,2and deposits the exchanged cryptocurrencies into 𝑝𝑘with an
exchange-aware yield rate 𝑒𝑦𝑟𝑖,𝑗,𝑘.
We prove the yield rate of a strategy in the following lemma:
Lemma 4.1. The exchange-aware yield rate of an exchange-ware
deposit strategy 𝑒𝑑𝑡𝑖,𝑗,𝑘is𝑒𝑦𝑟𝑖,𝑗,𝑘=(𝑒𝑣𝑔+𝑒𝑣ℎ·𝑑𝑟𝑘)·(1+𝑦𝑟𝑘)·𝑒𝑟𝑖,𝑔·𝑒𝑟𝑗,ℎ
𝑒𝑣𝑖·𝑒𝑟𝑗,ℎ+𝑒𝑣𝑗·𝑒𝑟𝑖,𝑔·𝑑𝑟𝑘−
1, where𝑐𝑔=𝑝𝑐𝑘,1, and𝑐ℎ=𝑝𝑐𝑘,2.
Proof. Suppose𝑐𝑔and𝑐ℎare the cryptocurrencies in 𝑝𝑘, i.e.,
𝑐𝑔=𝑝𝑐𝑘,1and𝑐ℎ=𝑝𝑐𝑘,2. Suppose𝑣𝑖units of𝑐𝑖are exchanged for
𝑣𝑔units of𝑐𝑔, and𝑣𝑗units of𝑐𝑗are exchanged for 𝑣ℎunits of𝑐ℎ.
Thus,𝑣𝑔=𝑣𝑖·𝑒𝑟𝑖,𝑔, and𝑣ℎ=𝑣𝑗·𝑒𝑟𝑗,ℎ. Since𝑣𝑔units of𝑐𝑔and𝑣ℎ
units of𝑐ℎare deposite. Thus,
𝑒𝑦𝑟𝑖,𝑗,𝑘= 𝑣𝑔·𝑒𝑣𝑔+𝑣ℎ·𝑒𝑣ℎ·(1+𝑦𝑟𝑘)
𝑣𝑖·𝑒𝑣𝑖+𝑣𝑗·𝑒𝑣𝑗−1
=𝑒𝑣𝑔·𝑣𝑖·𝑒𝑟𝑖,𝑔+𝑒𝑣ℎ·𝑣𝑖·𝑒𝑟𝑖,𝑔·𝑑𝑟𝑘
𝑒𝑣𝑖·𝑣𝑖+𝑒𝑣𝑗·𝑣𝑖·𝑒𝑟𝑖,𝑔·𝑑𝑟𝑘
𝑒𝑟𝑗,ℎ·(1+𝑦𝑟𝑘)−1
= 𝑒𝑣𝑔+𝑒𝑣ℎ·𝑑𝑟𝑘·(1+𝑦𝑟𝑘)·𝑒𝑟𝑖,𝑔·𝑒𝑟𝑗,ℎ
𝑒𝑣𝑖·𝑒𝑟𝑗,ℎ+𝑒𝑣𝑗·𝑒𝑟𝑖,𝑔·𝑑𝑟𝑘−1
The lemma is proved. ■
When the exchange cost rate is higher, the exchange-aware yield
rate of a strategy is lower. Thus, Lemma 4.1 aligns our intuition.
The YMLM_GD algorithm is inspired by an observation, which
shows that in practice, the minimum deposit of a pool is small.
Observation 1. In practice, compared with the total cryptocurren-
cies that an LP has, the minimum deposit of a pool is low.
In real datasets, the minimum deposit value of the pool with the
highest profit rate is only $20.09. Meanwhile, an LP averagely de-
posits cryptocurrencies worth $25,133 [ 2,9]. Thus, to maximize the
total yield, it is more significant to focus on increasing the yield rate
of the deposited cryptocurrencies rather than increasing the amount
of the deposited cryptocurrencies. Our experimental results in Fig-
ure 10(a) and Figure 10(c) confirm the correctness of this idea.
4.2 Theoretical Analysis of YMLM_GD
We first prove the approximation ratio of YMLM_GD.
Theorem 4.1. Suppose the total value of the LP’s cryptocurren-
cies is𝑉, the minimum deposit value of the most profitable pool 𝑝𝜅
as𝜓𝑚𝑎𝑥, and the maximum exchange cost rate between any two
cryptocurrencies is 𝑒𝑐𝑟𝑚𝑎𝑥, the types of the LP’s cryptocurrencies is 𝑛.
When𝑉≥𝑛·𝜓𝑚𝑎𝑥/(1−𝑒𝑐𝑟𝑚𝑎𝑥)and(1+𝑦𝑟𝜅)·(1−𝑒𝑐𝑟𝑚𝑎𝑥)>1, the
approximation ratio of YMLM_GD is (1−𝑒𝑐𝑟𝑚𝑎𝑥)·(1−𝑛·𝜓𝑚𝑎𝑥/𝑉).
 
2251Money Never Sleeps: Maximizing Liquidity Mining Yields in Decentralized Finance KDD ’24, August 25–29, 2024, Barcelona, Spain
Proof. Let𝐸𝐷𝑇#be the strategies that YMLM_GD selects when
the remaining values of a cryptocurrency is at least𝜓𝑚𝑎𝑥
1−𝑒𝑐𝑟𝑚𝑎𝑥. Let
𝑌#be the yields obtained 𝐸𝐷𝑇#. When the remaining values of a
cryptocurrency 𝑐𝑖is at least𝜓𝑚𝑎𝑥
1−𝑒𝑐𝑟𝑚𝑎𝑥, YMLM_GD can select 𝑒𝑑𝑡𝑖,𝑖,𝜅.
Then, for any 𝑒𝑑𝑡𝑖,𝑗,𝑘in𝐸𝐷𝑇#,𝑒𝑦𝑟𝑖,𝑗,𝑘≥𝑒𝑦𝑟𝑖,𝑖,𝜅. Suppose𝑣1units of
𝑐𝑖are exchanged for 𝑣𝑔units of𝑐𝑔, and𝑣2units of𝑐𝑖are exchanged
for𝑣ℎunits of𝑐ℎ, where𝑐𝑔=𝑝𝑐𝑘,1and𝑐ℎ=𝑝𝑐𝑘,2. Then,
𝑒𝑦𝑟𝑖,𝑖,𝑘= 𝑣𝑔·𝑒𝑣𝑔+𝑣ℎ·𝑒𝑣ℎ·(1+𝑦𝑟𝑘)
𝑣1·𝑒𝑣𝑖+𝑣2·𝑒𝑣𝑖−1
≥(𝑣1·𝑒𝑣𝑖+𝑣2·𝑒𝑣𝑖)·(1−𝑒𝑐𝑟𝑚𝑎𝑥)·(1+𝑦𝑟𝑘)
𝑣1·𝑒𝑣𝑖+𝑣2·𝑒𝑣𝑖−1
=(1+𝑦𝑟𝑘)·(1−𝑒𝑐𝑟𝑚𝑎𝑥)−1.
Thus,𝑌#≥(𝑉−𝑛·𝜓𝑚𝑎𝑥
1−𝑒𝑐𝑟𝑚𝑎𝑥)·[( 1−𝑒𝑐𝑟𝑚𝑎𝑥)·(1+𝑦𝑟𝜅)−1].
Let𝑌be the yields obtained by YMLM_GD. Let 𝑌∗be the yields of
the optimal solution with the highest yields. Thus,𝑌
𝑌∗≥𝑌#
𝑉·𝑦𝑟𝜅=
(1−𝑛·𝜓𝑚𝑎𝑥
𝑉)·[(1−𝑒𝑐𝑟𝑚𝑎𝑥)·(1+𝑦𝑟𝜅)−1
𝑦𝑟𝜅]. The theorem is proved. ■
When the exchange cost rates and the minimum deposit values
increase, it becomes increasingly challenging to obtain a close-
optimal solution. Thus, Theorem 4.1 is reasonable. Next, we prove
that YMLM_GD is a polynomial-time algorithm.
Theorem 4.2. The time complexity of YMLM_GD is O(𝑛2·𝑚·
(log𝑛+log𝑚)), where𝑛is the number of cryptocurrencies and 𝑚is
the number of liquidity pools.
Proof. Since there are 𝑛cryptocurrencies and 𝑚pools, it costs
O(𝑛2·𝑚)to contrast strategies (lines 2-5). Then, the time complexity
of Quicksort isO(𝑛·𝑚2·(log𝑛+log𝑚))(line 6). The last for-loop
(lines 7-10) runsO(𝑛2·𝑚)rounds. Thus, the total time complexity
isO(𝑛2·𝑚·(log𝑛+log𝑚)). The theorem is proved. ■
In other words, YMLM_GD’s running time increases in a qua-
dratic logarithmic manner with the growth of 𝑛and in a linearithmic
manner with the growth of 𝑚.
5 The YMLM_SK Algorithm
Although YMLM_GD can effectively obtain a solution with a theo-
retical guarantee, its time complexity is high. Thus, in this section,
we propose an efficient algorithm, namely YMLM_SK. The time
complexity of YMLM_SK is O(𝑛·𝑚·log𝑚), which is smaller than
that of YMLM_GD. Additionally, YMLM_SK achieves the same
approximation ratio as YMLM_GD, although the yield obtained
by YMLM_SK is slightly smaller than that of YMLM_GD in the
experiments in § 6.
In this section, we first introduce the overview of YMLM_SK in
§ 4.1, and then theoretically analyze YMLM_SK’s approximation
ratio and time complexity in § 4.2. Additionally, we present the
pseudo-code of YMLM_SK, describe the details of YMLM_SK, and
demonstrate a running example in § C.
5.1 Overview of YMLM_SK
Briefly, YMLM_SK independently makes exchange and deposit
transactions for each cryptocurrency. For each cryptocurrency 𝑐𝑖,
YMLM_SK estimates the yield rate 𝑒𝑦𝑟𝑖,𝑖,𝑘for each strategy 𝑒𝑑𝑡𝑖,𝑖,𝑘
which solely using 𝑐𝑖. Then, for𝑐𝑖, YMLM_SK greedily selects the
strategies with the highest yield rates to make exchange and deposit
transactions using 𝑐𝑖until no more transactions can be made.In other words, YMLM_SK only explores a subset of strategies.
However, it is not trivial to design YMLM_SK. Exploring only a
subset of strategies can lead to a sacrifice in the yield of obtained
solutions. Thus, designing an algorithm that explores only a subset
of strategies needs to address two problems:
(1) Which subset do we choose?
(2)What are the algorithm’s time complexity and approximation
ratio?
The answer to the first problem is the set of strategies that
utilize a single cryptocurrency. The answer is inspired by the proof
of Theorem 4.1. When the amount of a cryptocurrency 𝑐𝑖is at least
𝜓𝑚𝑎𝑥
1−𝑒𝑐𝑟𝑚𝑎𝑥, we can exchange 𝑐𝑖for the two cryptocurrencies that the
pool requires. In other words, the approximation ratio is related to
the strategies using a single cryptocurrency. Thus, YMLM_SK only
explores the set of strategies using a single cryptocurrency. We will
prove the time complexity and approximation ratio of YMLM_SK
in § 5.2 to solve the second problem.
5.2 Theoretical Analysis of YMLM_SK
We first prove that YMLM_SK gets a solution in polynomial time.
Theorem 5.1. The time complexity of the YMLM_SK algorithm
isO(𝑛·𝑚·log𝑚), where𝑛is the number of cryptocurrencies and 𝑚
is the number of liquidity pools.
Proof. Since there are 𝑛cryptocurrencies, the first for-loop
(lines 2-10) runs 𝑛rounds. Since there are 𝑚pools, for each 𝑖,𝐸𝐷𝑇𝑖
includes𝑚strategies. Thus, the second and the third for-loop (lines
4-5, lines 7-10) both run O(𝑚)rounds. The time complexity of sort-
ing𝐸𝐷𝑇𝑖using Quicksort isO(𝑚·log𝑚)(line 6). Thus, YMLM_SK’s
time complexity is O(𝑛·𝑚·log𝑚). The theorem is proved. ■
In other words, YMLM_SK’s running time increases linearly
with the growth of 𝑛and grows in a linearithmic manner with the
increase in𝑚. Then, we prove the approximation ratio of YMLM_SK.
Theorem 5.2. Suppose the total value of the LP’s cryptocurren-
cies is𝑉, the minimum deposit value of the most profitable pool 𝑝𝜅
as𝜓𝑚𝑎𝑥, and the maximum exchange cost rate between any two
cryptocurrencies is 𝑒𝑐𝑟𝑚𝑎𝑥, the types of the LP’s cryptocurrencies is 𝑛.
When𝑉≥𝑛·𝜓𝑚𝑎𝑥/(1−𝑒𝑐𝑟𝑚𝑎𝑥)and(1+𝑦𝑟𝜅)·(1−𝑒𝑐𝑟𝑚𝑎𝑥)>1, the
approximation ratio of YMLM_SK is (1−𝑒𝑐𝑟𝑚𝑎𝑥)·(1−𝑛·𝜓𝑚𝑎𝑥/𝑉).
Proof. As shown in the proof of Theorem 4.1, for any strategy
𝑒𝑑𝑡𝑖,𝑖,𝑘, its yield rate 𝑒𝑦𝑟𝑖,𝑖,𝑘is at least(1+𝑦𝑟𝑘)·(1−𝑒𝑐𝑟𝑚𝑎𝑥)−1. Let
𝐸𝐷𝑇#be the strategies that YMLM_SK selects when the remaining
values of a cryptocurrency is at least𝜓𝑚𝑎𝑥
1−𝑒𝑐𝑟𝑚𝑎𝑥. Since YMLM_SK
greedily selects the strategies with the highest exchange-aware
yield rates, for any strategy in 𝐸𝐷𝑇#, its exchange-aware yield rate
is higher than 𝑒𝑑𝑡𝑖,𝑖,𝜅. Let𝑌be the yields obtained by YMLM_SK.
Let𝑌∗be the yields of the optimal solution with the highest yields.
Similar to the proof of Theorem 4.1, we have
(
𝑌≥(𝑉−𝑛·𝜓𝑚𝑎𝑥
1−𝑒𝑐𝑟𝑚𝑎𝑥)·[( 1−𝑒𝑐𝑟𝑚𝑎𝑥)·(1+𝑦𝑟𝜅)−1]
𝑌∗≤𝑉·𝑦𝑟𝜅
Thus,
𝑌
𝑌∗≥(1−𝑛·𝜓𝑚𝑎𝑥
𝑉)·[(1−𝑒𝑐𝑟𝑚𝑎𝑥)·(1+𝑦𝑟𝜅)−1
𝑦𝑟𝜅]
The theorem is proved. ■
 
2252KDD ’24, August 25–29, 2024, Barcelona, Spain Wangze Ni et al.
Thus, YMLM_SK has the same approximation ratio as YMLM_GD.
When an LP has more types of cryptocurrencies and exchange cost
rates increase, YMLM_SK costs more cryptocurrencies in exchange
transactions. Thus, Theorem 5.2 is reasonable.
6 Experimental Study
Like many experimental studies of approximation algorithms [ 8,20–
22,24], we aim to investigate the following four research questions
in our experimental studies:
•Q1.How do our algorithms perform on real datasets?
•Q2.What is the performance difference between YMLM_GD and
YMLM_SK?
•Q3.How do the relevant parameters affect the effectiveness and
efficiency of our algorithms?
•Q4.Do the performances of our algorithms align with our theo-
retical analyses?
•Q5.How do our algorithms perform in dynamic scenarios where
the exchange rates and pools change?
In this section, we first introduce the experimental configuration
in § 6.1. Then, we conduct experiments on real datasets in § 6.2 to
answer Q1. Next, we conduct experiments on synthetic datasets
in § 6.3 to answer Q2, Q3, and Q4. After that, we conduct long-
term experiments in § 6.4 to answer Q5. Finally, we summarize our
findings from the experiments in § 6.5.
6.1 Experimental Configuration
Testing Parameters. As defined in Definition 5, the inputs of a
YMLM problem instance include a set of pools, a set of an LP’s
cryptocurrencies, and a set of exchange rates. Additionally, as in-
troduced in § 2, in practice, exchange rates and pools may change,
and LPs will reinvest. Thus, in our experimental study, we test the
effects of various factors on these inputs, including (1)the number
of the cryptocurrency types in the cryptocurrency universe, (2)the
number of pools, (3)the total value of an LP’s cryptocurrencies,
(4)thecryptocurrency percentage, (5)the yield rates of pools, (6)
thedeposit variation ratios of pools, (7)the cryptocurrency unit
value, (8)the exchange cost rate, (9)the minimum deposit value,
(10) thefluctuation ratio, and (11) thereinvestment frequency. To
normalize different pools’ deposit ratios, we use the concept of de-
posit variation ratio. Specifically, the deposit ratio 𝑑𝑟𝑘of a pool𝑝𝑘is
𝑑𝑟𝑘=𝑒𝑣𝑗
𝑒𝑣𝑖·𝑑𝑣𝑟𝑘, where𝑑𝑣𝑟𝑘is the deposit variation ratio, 𝑐𝑖=𝑝𝑐𝑘,1,
and𝑐𝑗=𝑝𝑐𝑘,2. Additionally, we account for the fact that an LP may
not have all cryptocurrencies by using the parameter cryptocurrency
percentage𝑐𝑝to measure the proportion of cryptocurrency types
owned by an LP out of the total number of cryptocurrency types in
the universe. Moreover, we use the fluctuation ratio to measure the
variation in exchange rates and pools. The reinvestment frequency
denotes how often an LP reinvests.
Real-world datasets. We collected datasets from Binance [ 1], in-
cluding 153 pools and 81 cryptocurrencies. For more details of the
real datasets, please refer to § D.
Synthetic datasets. Since most parameters’ values in the real
datasets are given, to comprehensively test the effects of the afore-
mentioned parameters, we further generate synthetic datasets. In
synthetic datasets, we generate a universe of |𝐶|cryptocurren-
cies and𝑚pools. Based on the statistics of real datasets, we vary
|𝐶|from 10 to 1000 and 𝑚from 10 to 10K. We randomly set theTable 2: Experimental Settings.
Parameters Values (x)
𝐶 10,100, 500, 800, 1000
𝑚 10, 50, 100, 5000, 10000
[𝑒𝑐𝑟−,𝑒𝑐𝑟+](x%) [0.1, 0.1], [0.1, 25], [0.1, 50], [0.1, 75], [0.1, 100]
[𝑑𝑣𝑟−,𝑑𝑣𝑟+](x%) [10, 100], [10, 200], [10, 300], [10, 400], [10, 500]
[𝑦𝑟−,𝑦𝑟+](x%) [1, 10], [1, 25], [1, 50], [1, 75], [1, 100]
𝑉 5k, 10k, 30k, 300k, 3000k
[𝑒𝑣−,𝑒𝑣+](10𝑥) [-16, -4], [-12, -4], [-8, -4], [0, 0], [2, 2]
[𝑚𝑣−,𝑚𝑣+] [1k, 5k], [2k, 5k], [3k, 5k], [4k, 5k], [5k, 5k]
𝑐𝑝 0, 25%, 50%, 75%, 100%
𝑓𝑟 0,3%, 5%, 10%, 20%
𝑟𝑓 1, 5, 7, 10, 20
unit value of each cryptocurrency within [𝑒𝑣−,𝑒𝑣+], which varies
from[10−12,10−4]to[10−4,10−4]according to the statistics of real
datasets. The exchange cost rates are set by a uniform distribution
within[𝑒𝑐𝑟−,𝑒𝑐𝑟+]. To comprehensively test the effect of the ex-
change cost rate, we vary [𝑒𝑐𝑟−,𝑒𝑐𝑟+]from [0.1%, 0.1%] to [0.1%,
100%]. To test the effect of the distribution of cryptocurrencies, each
pool uniformly selects two cryptocurrencies in the cryptocurrency
universe. We set the yield rate of each pool, following a uniform
distribution with the range [𝑦𝑟−,𝑦𝑟+]. To comprehensively test the
effect of the yield rate, we vary [𝑦𝑟−,𝑦𝑟+]from [1%, 10%] to [1%,
100%]. We adopt a uniform distribution to set the deposit variation
ratio for each pool within [𝑑𝑣𝑟−,𝑑𝑣𝑟+], which varies from [10%,
100%] to [10%, 500%] based on the statistics of real datasets. We
set the minimum deposit value of a pool using a uniform distribu-
tion within[𝑚𝑣−,𝑚𝑣+], which is adjusted based on the statistic of
real datasets, varying from [$1K, $5K] to [$5K, $5K]. We set the
cryptocurrency set of an LP as the settings of the real datasets.
Long-term datasets. We generate datasets that span 31 days. On
the first day, pools, cryptocurrencies, and exchange rates are gener-
ated like the synthetic datasets. Each day thereafter, the unit value
of each cryptocurrency and the yield rates of each pool fluctuate
within a range of no more than 𝑓𝑟, based on the previous day’s val-
ues. The fluctuated values still fall within the corresponding range
introduced in the synthetic dataset. Exchange rates and deposit
ratios are updated based on the updated unit value of cryptocur-
rencies. The LP withdraws previously deposited cryptocurrencies
and earnings every 𝑟𝑓days and reinvests them.
Compared methods. As YMLM is NP-hard, obtaining optimal so-
lutions is impossible. Additionally, as we will discuss in § 7, we
are the first work on how to exchange and allocate cryptocur-
rencies among multiple pools to achieve maximum returns. Thus,
we propose three baseline algorithms, namely YMLM_BR (BR),
YMLM_BG (BG), and YMLM_TD (TD). We compare YMLM_GD
(GD) and YMLM_SK (SK) with these three baseline algorithms in
our experiments. Specifically,
•BRfirst exchanges a random amount of each cryptocurrency for
another random cryptocurrency. Then, for each cryptocurrency
𝑐𝑖, BR randomly selects a pool 𝑝𝑘that𝑐𝑖can be deposited and
deposits as many 𝑐𝑖as possible in 𝑝𝑘.
•BGfirst sorts pools by the yield rates. Then, BG repeatedly selects
the pool with the highest yield rate and directly deposits as many
cryptocurrencies as possible in these pools without any exchange
transactions until no cryptocurrencies can be deposited.
•TDis adapted from a greedy algorithm for the 2D-knapsack
problem. When an LP has more than two cryptocurrencies, TD
first exchanges all cryptocurrencies into the two with the lowest
 
2253Money Never Sleeps: Maximizing Liquidity Mining Yields in Decentralized Finance KDD ’24, August 25–29, 2024, Barcelona, Spain
(a) Yearly Yield of Varying 𝑉
 (b) Running Time of Varying 𝑉
 (c) Yearly Yield of Varying 𝑐𝑝
 (d) Running Time of Varying 𝑐𝑝
Figure 4: Experiments on Real Datasets.
cost. Then, TD greedily finds the pool with the highest yield
rates to make exchange and deposit transactions using the two
cryptocurrencies obtained in the first step. TD repeatedly finds
the pools to invest until no cryptocurrencies can be deposited.
Comparison metric. For each experiment, we sample 100 prob-
lem instances. We report each algorithm’s average yield and average
running time.
•Therunning time of an algorithm is estimated as the time that
the algorithm used to obtain a solution. The less the running
time is, the more efficient the algorithm is.
•Theyield of a solution is calculated as Definition 5. The higher
the yield is, the more effective the algorithm is.
Table 2 displays the settings for the real and synthetic datasets,
with default parameter values highlighted in bold. Each group of
experiments involves changing one parameter while keeping others
at their defaults. All experiments were performed using Java on an
Intel CPU running at 1.3 GHz with 32 GB of RAM.
6.2 Experiments on Real Datasets
To test the performance of our algorithms in real-world applications,
we conduct experiments on real datasets in this subsection.
The effect of an LP’s total cryptocurrency value . As shown
in Figure 4(a), as 𝑉increases, the yields obtained by BR decrease,
the yield obtained by TD first increases and then decreases, and the
yields obtained by the other three algorithms increase. The reason
is that when 𝑉gets larger, we can deposit more cryptocurrencies
into pools, which boosts the total yields. However, simultaneously,
because BR randomly makes exchange transactions, the increase
in𝑉will increase BR’s exchange costs. Similarly, as TD engages in
two rounds of exchange transactions (first converting all cryptocur-
rencies into two cryptocurrencies, then exchanging them into the
cryptocurrencies required by pools), an increase in 𝑉will sharply
raise TD’s exchange costs. Notably, GD and SK achieve similar
yields. This similarity arises due to the presence of small exchange
cost rates in real datasets (§ D), coupled with a particular pool
offering a significantly higher yield rate compared to others. Conse-
quently, both GD and SK allocate a majority of the cryptocurrencies
to this high-yielding pool. As shown in Figure 4(b), the running
time of each algorithm remains stable as 𝑉increases. This is be-
cause that the running time of each algorithm is dominated by the
number of cryptocurrencies and the number of pools, which remain
constant regardless of the growth of 𝑉.
The effect of the cryptocurrency percentage. As shown in
Figure 4(c), when 𝑐𝑝grows, the yields of the solutions obtained by
our algorithms remain stable. This is because in real datasets, one
pool offers a significantly higher yield rate than others. Thus, thecost of exchange transactions can be negligible, and the yield of a
solution is primarily determined by the value of the cryptocurren-
cies deposited in the pool with the highest yield rate. The yields
of the solutions obtained by BR and BG increase as 𝑐𝑝grows. This
occurs because when an LP has a greater variety of cryptocurren-
cies, the two baseline algorithms are more likely to deposit the
cryptocurrencies into pools with high yield rates. However, the
yields of the solutions obtained by TD decrease as 𝑐𝑝grows. This is
because as𝑐𝑝increases, TD needs to convert more cryptocurrencies
into two cryptocurrencies, significantly raising the exchange costs.
When𝑐𝑝=0, the yield obtained by BG is 0 since it does not make
any exchange transactions. When 𝑐𝑝=0, the yields obtained by
TD, GD, and SK are the same since these three algorithms operate
identically when the LP has only one type of cryptocurrency. As
shown in Figure 4(d), when 𝑐𝑝grows, the running time of each
algorithm also grows. The reason is that when an LP has a greater
variety of cryptocurrencies, there are more candidate exchange
transactions to consider, which increases the running time.
In summary ,the answer to Q1 is that our algorithms outper-
form the baseline algorithms in yields, and our algorithms boast a
fast running time of less than 1 second. However, in real datasets,
there is one pool with a significantly higher yield rate compared to
others, and the distribution of most cryptocurrencies within pools is
highly uneven. As a result, GD and SK exhibit similar effectiveness.
6.3 Experiments on Synthetic Datasets
To further test the effects of the number of cryptocurrency types in
the cryptocurrency universe, the number of pools, the yield rates of
pools, the deposit variation ratios of pools, the cryptocurrency unit
value, and the exchange cost rate, we generate synthetic datasets
and conduct experiments in this subsection. Due to the space limita-
tion, we present the results of varying 𝑑𝑣𝑟,𝑒𝑣, and𝑦𝑟in § E. We also
test the effects of the total value of an LP’s cryptocurrencies and
the cryptocurrency percentage (shown in Figure 5(i), Figure 5(j),
Figure 5(k), and Figure 5(l)), aligning the results in § 6.2.
The effect ofthenumber ofthecryptocurrency types in
thecryptocurrency universe. As shown in Figure 5(a), when |𝐶|
gets larger, the yields of the solutions obtained by all the algorithms
decrease. This is because with more cryptocurrency types in the
cryptocurrency universe, it becomes less likely for LPs to have the
same types of cryptocurrencies as those required by the pools with
high yield rates. As a result, LPs need to make exchange transac-
tions to obtain the required cryptocurrencies, reducing the yield
of the solution. Since BG does not make exchange transactions, it
cannot obtain the cryptocurrencies required by the pools with high
yield rates, and its yield drops the fastest. As shown in Figure 5(b),
 
2254KDD ’24, August 25–29, 2024, Barcelona, Spain Wangze Ni et al.
(a) Yearly Yield of Varying |𝐶|
 (b) Running Time of Varying |𝐶|
 (c) Yearly Yield of Varying 𝑚
 (d) Running Time of Varying 𝑚
(e) Yearly Yield of Varying 𝑒𝑣
 (f) Running Time of Varying 𝑒𝑣
 (g) Yearly Yield of Varying 𝑒𝑐𝑟
 (h) Running Time of Varying 𝑒𝑐𝑟
(i) Yield of Varying 𝑉
 (j) Running Time of Varying 𝑉
 (k) Yield of Varying 𝑐𝑝
 (l) Running Time of Varying 𝑐𝑝
Figure 5: Results on Synthetic Datasets.
when|𝐶|gets larger, the running time of each algorithm increases.
This trend can be attributed to the fact that as |𝐶|increases, there
are more candidate exchange transactions to consider, increasing
the running time. Specifically, the running time of GD increases in a
quadratic logarithmic manner with the growth of |𝐶|, aligning with
Theorem 4.2. The running time of SK increases linearly with the
growth of|𝐶|, aligning with Theorem 5.1. There are only 369 types
of cryptocurrencies in Binance, with only 81 types of cryptocur-
rencies involved in Binance’s liquidity mining application. When
|𝐶|=500, the running time of GD is about 0.72 s, which is less
than the block time of Ethereum (i.e., 15 s). Thus, GD’s efficiency is
applicable to real-world applications.
The effect of the number of the pools. As demonstrated in
Figure 5(c), when 𝑚is larger, the yields obtained by each algorithms
increase. The reason is that with the presence of more pools, it is
more likely to deposit cryptocurrencies into pools offering high
yield rates. Notably, GD achieves up to 44% more yields than SK
(when𝑚=100). As shown in Figure 5(d), when 𝑚is larger, the
running time of each algorithm grows. This can be attributed to the
increased number of candidate deposit transactions that need to be
considered when more pools are available. Specifically, the running
time of GD grows in a linearithmic manner with the growth of
𝑚, fitting Theorem 4.2. The running time of SK also grows in a
linearithmic manner with the growth of 𝑚, fitting Theorem 5.1.
The effect of the cryptocurrency unit value. As displayed in
Figure 5(e), the yields of the solutions obtained by all the algorithms
decrease as𝑒𝑣increases. This decline can be attributed to the grow-
ing cost associated with precision issues, as discussed in Section 3.1.However, even when 𝑒𝑣is very large, our algorithms still outper-
form the two baseline algorithms. As shown in Figure 5(f), when 𝑒𝑣
gets larger, the running time of each algorithm keeps stable. This
is because the running time of each algorithm is dominated by
the number of candidate exchange and deposit transactions, rather
than being influenced by the cryptocurrency unit values.
The effect of the exchange cost rate. As shown in Figure 5(g),
the yields of the solutions obtained by all the algorithms decrease
as𝑒𝑐𝑟increases. The underlying reason for this phenomenon is that
as the average exchange cost rate rises, the cost of exchange trans-
actions also increases, lowering yields. This experimental result
aligns with Theorem 4.1 and Theorem 5.2. As shown in Figure 5(h),
when𝑒𝑐𝑟gets larger, the running time of each algorithm keeps
stable. The reason is that the runtime of each algorithm is mainly
influenced by the number of candidate exchange transactions and
candidate deposit transactions, rather than the exchange cost rate.
In summary ,the answer to Q2 is that GD showcases superior
yield performance than SK, achieving a maximum improvement of
1.44 times when 𝑚is set to 100 (refer to Figure 5(c)). Meanwhile,
SK exhibits significant time savings, reducing the running time of
GD by up to 96% when 𝑦𝑟+is set to 100% (refer to Figure 10(d)).
The answer to Q3 is that different parameters affect algorithms
differently. For the details of a parameter’s influence, please refer
to the corresponding discussion. The answer to Q4 is that the
experimental results align with our theorem analyses. Specifically,
Figure 5(b) and Figure 5(d) align with Theorem 4.2 and Theorem 5.1.
Figure 10(a) and Figure 5(g) align with Theorem 4.1 and Figure 5.2.
 
2255Money Never Sleeps: Maximizing Liquidity Mining Yields in Decentralized Finance KDD ’24, August 25–29, 2024, Barcelona, Spain
(a) Cumulated Daily Yield of Varying 𝑓𝑟
(b) Cumulated Daily Yield of Varying 𝑟𝑓
Figure 6: Results of Long-term Experiments.
6.4 Long-term Experiment
The effect of the fluctuation ratio. As shown in Figure 6(a), as
𝑓𝑟increases, the yields of the solutions obtained by each algorithm
decrease. This is because we have set the parameter values after the
fluctuation within the range introduced in Table 2. Consequently,
as𝑓𝑟grows, both the average cryptocurrency unit value and the
average yield rate decrease. This has resulted in a decline in yields.
The effect of the reinvestment frequency. As demonstrated in
Figure 6(b), as 𝑟𝑓increases, the yields of the solutions obtained
by each algorithm decrease. The reason is that in a market with
fluctuating yields and cryptocurrency prices, the shorter the rein-
vestment interval, the better the investment can adapt to market
changes, allowing for timely placement of cryptocurrencies in pools
with higher yields.
In summary ,the answer to Q5 is that our algorithms still out-
perform the baseline algorithms in dynamic scenarios, and timely
reinvestment can mitigate the losses caused by market volatility.
6.5 Experiment Summary
In closing, we summarize our findings as follows:
•Our proposed algorithms consistently outperform the three base-
line algorithms in terms of yields;
•GD showcases superior yield performance compared to SK, achiev-
ing a maximum improvement of 1.44 times when 𝑚is set to 100
(refer to Figure 5(c));
•SK exhibits significant time savings, reducing the running time
of GD by up to 96% when 𝑦𝑟+is set to 100% (refer to Figure 10(d));
•As mentioned in the discussion of Figure 5(b), our two algorithms’
running time are acceptable for real-world applications;
•The experimental results align with our theorem analyses. Specif-
ically, Figure 5(b) and Figure 5(d) align with Theorem 4.2 and
Theorem 5.1. Figure 10(a) and Figure 5(g) align with Theorem 4.1
and Figure 5.2;
•The experimental results of Figure 10(a) and Figure 10(c) confirm
the correctness of GD’s idea in Section 4.1;
•The experimental results of Figure 5(e) confirm the correctness
of our discussion in Remark 3.1.
7 Related Works
There have been some existing works on the liquidity provision of
AMMs. Heimbach et al. [ 13] worked on the impact of LPs’ behaviors
on their liquidity mining profits and conduct an empirical study
in Uniswap V2 pools. Aoyagi [ 7] studies the global equilibrium in
AMMs that gives the optimal liquidity provision in the competition
among LPs, which exhibits a non-monotonic reaction to the op-
ponents’ liquidity provision. Fan et al. [9] compared Uniswap andSushiSwap to understand the impact of governance tokens as an
extra incentive from liquidity pools, which is shown to attract LPs
in a short term but unable to retain them. However, these studies
are not applicable to Uniswap V3 with concentrated liquidity.
As the impact of Uniswap V3 grows, many works have been
proposed to target on its liquidity mining. Heimbach et al. [ 12]
analyze the risks and returns of LPs in Uniswap V3. Their empirical
study indicates that modest returns are possible under negligible
volatility, but larger returns come at the cost of significant risks
and complicated management. Neuder et al. [ 19] studied the strate-
gic liquidity provision problem and proposed three strategies. By
assuming liquidity-independent belief of price sequences, they op-
timize the earnings for LPs with neural networks. Fan et al. [ 10]
proposed new strategies that utilize the price ranges in Uniswap
V3. Similar to Heimbach [ 12], they assume a liquidity-independent
belief over the price sequences, and allocate the LP’s liquidity to
different price ranges to maximize her profits. While these works
have proposed strategies to optimize yields in liquidity mining,
they solely focus on a single pool, disregarding the allocation of
cryptocurrency across multiple pools. Additionally, these studies do
not take into account the potential benefits of conducting exchange
transactions prior to depositing cryptocurrencies. In light of these
limitations, we present approximate algorithms that assist in mak-
ing liquidity mining decisions, aiming to maximize yields across
all available liquidity pools, considering factors such as exchange
rates and the LP’s owned cryptocurrencies.
8 Conclusion
This paper targets efficiently proposing a liquidity mining solution
with a high yield. We formally define the yield maximization liquid-
ity mining (YMLM) problem. We theoretically prove that YMLM is
NP-hard, and no algorithms solve YMLM with a constant approxi-
mation ratio. Thus, we propose two algorithms, namely YMLM_GD
and YMLM_SK, with parameterized approximation ratios. Exper-
iments on real and synthetic datasets show that our approaches
outperform the baseline algorithms in yields.
9 Acknowledgments
Lei Chen’s work is partially supported by National Key Research
and Development Program of China Grant No. 2023YFF0725100,
National Science Foundation of China (NSFC) under Grant No.
U22B2060, the Hong Kong RGC GRF Project 16213620, RIF Project
R6020-19, AOE Project AoE/E-603/18, Theme-based project TRS
T41-603/20R, CRF Project C2004-21G, Guangdong Province Science
and Technology Plan Project 2023A0505030011, Hong Kong ITC ITF
grants MHX/078/21 and PRP/004/22FX, Zhujiang scholar program
2021JC02X170, Microsoft Research Asia Collaborative Research
Grant and HKUST-Webank joint research lab grants. Xuemin Lin is
supported by NSFC U2241211, NSFC U20B2046, and 23H020101910.
Peng Cheng’s work is supported by the National Natural Science
Foundation of China under Grant No. 62102149. Chen Jason Zhang’s
work is supported by the Innovation and Technology Fund - Part-
nership Research Programme (ITF-PRP) (P0040041), Innovation
and Technology Fund - Innovation and Technology Support Pro-
gramme (ITF-ITSP) (P0048887), Research Matching Grant Scheme
(RMGS) (P0048183, P0048191), and Postdoc Matching Fund Scheme
(P0048984). Corresponding author: Peng Cheng.
 
2256KDD ’24, August 25–29, 2024, Barcelona, Spain Wangze Ni et al.
References
[1] [n.d.]. [Online] Binance. https://www.binance.com/zh-CN.
[2] [n.d.]. [Online] Sushi Analytics. https://www.sushi.com/analytics.
[3][n.d.]. [Online] Uniswap V3 Development Book . https://uniswapv3book.com/.
[4][n.d.]. [Online] Uniswap V3 Pools Listed on Defillama . https://defillama.com/
yields?project=uniswap-v3.
[5]Nazmiye Ceren Abay, Cuneyt Gurcan Akcora, Yulia R Gel, Murat Kantarcioglu,
Umar D Islambekov, Yahui Tian, and Bhavani Thuraisingham. 2019. Chainnet:
Learning on blockchain graphs with topological features. In 2019 IEEE interna-
tional conference on data mining (ICDM). IEEE, 946–951.
[6]Cuneyt Gurcan Akcora, Murat Kantarcioglu, and Yulia R Gel. 2021. Data Science
on Blockchains. In Proceedings of the 27th ACM SIGKDD Conference on Knowledge
Discovery & Data Mining. 4025–4026.
[7]Jun Aoyagi. 2020. Liquidity provision by automated market makers. Available at
SSRN 3674178 (2020).
[8]Peng Cheng, Hao Xin, and Lei Chen. 2017. Utility-aware ridesharing on road
networks. In Proceedings of the 2017 ACM International Conference on Management
of Data. 1197–1210.
[9]Sizheng Fan, Tian Min, Xiao Wu, and Cai Wei. 2023. Towards understanding
governance tokens in liquidity mining: a case study of decentralized exchanges.
World Wide Web 26, 3 (2023), 1181–1200.
[10] Zhou Fan, Francisco J Marmolejo-Cossío, Ben Altschuler, He Sun, Xintong Wang,
and David Parkes. 2022. Differential Liquidity Provision in Uniswap v3 and
Implications for Contract Design. In Proceedings of the Third ACM International
Conference on AI in Finance. 9–17.
[11] Tian Guo, Albert Bifet, and Nino Antulov-Fantulin. 2018. Bitcoin volatility
forecasting with a glimpse into buy and sell orders. In 2018 IEEE international
conference on data mining (ICDM). IEEE, 989–994.
[12] Lioba Heimbach, Eric Schertenleib, and Roger Wattenhofer. 2022. Risks and
returns of uniswap v3 liquidity providers. arXiv preprint arXiv:2205.08904 (2022).
[13] Lioba Heimbach, Ye Wang, and Roger Wattenhofer. 2021. Behavior of liquidity
providers in decentralized exchanges. arXiv preprint arXiv:2105.13822 (2021).
[14] Charles AR Hoare. 1962. Quicksort. The computer journal 5, 1 (1962), 10–16.
[15] Sihao Hu, Zhen Zhang, Shengliang Lu, Bingsheng He, and Zhao Li. 2023.
Sequence-based target coin prediction for cryptocurrency pump-and-dump. Pro-
ceedings of the ACM on Management of Data 1, 1 (2023), 1–19.
[16] Teng Hu, Xiaolei Liu, Ting Chen, Xiaosong Zhang, Xiaoming Huang, Weina Niu,
Jiazhong Lu, Kun Zhou, and Yuan Liu. 2021. Transaction-based classification
and detection approach for Ethereum smart contract. Information Processing &
Management 58, 2 (2021), 102462.
[17] Xin Huang, Wenbin Zhang, Xuejiao Tang, Mingli Zhang, Jayachander Surbiryala,
Vasileios Iosifidis, Zhen Liu, and Ji Zhang. 2021. LSTM Based Sentiment Analysis
for Cryptocurrency Prediction. In International Conference on Database Systems
for Advanced Applications. 617–621.
[18] Ariel Kulik and Hadas Shachnai. 2010. There is no EPTAS for two-dimensional
knapsack. Inform. Process. Lett. 110, 16 (2010), 707–710.
[19] Michael Neuder, Rithvik Rao, Daniel J Moroz, and David C Parkes. 2021. Strategic
liquidity provision in uniswap v3. arXiv preprint arXiv:2106.12033 (2021).
[20] Wangze Ni, Peng Cheng, and Lei Chen. 2022. Mixing transactions with arbi-
trary values on blockchains. In 2022 IEEE 38th International Conference on Data
Engineering (ICDE). IEEE, 2602–2614.
[21] Wangze Ni, Peng Cheng, Lei Chen, and Xuemin Lin. 2021. When the recur-
sive diversity anonymity meets the ring signature. In Proceedings of the 2021
International Conference on Management of Data. 1359–1371.
[22] Ravali Pochampally, Anish Das Sarma, Xin Luna Dong, Alexandra Meliou, and
Divesh Srivastava. 2014. Fusing data with correlations. In Proceedings of the 2014
ACM SIGMOD international conference on Management of data. 433–444.
[23] Geoffrey Ramseyer, Ashish Goel, and David Mazières. 2023. {SPEEDEX}: A
Scalable, Parallelizable, and Economically Efficient Decentralized {EXchange}.
In20th USENIX Symposium on Networked Systems Design and Implementation
(NSDI 23). 849–875.
[24] Jieying She, Yongxin Tong, and Lei Chen. 2015. Utility-aware social event-
participant planning. In Proceedings of the 2015 ACM SIGMOD international
conference on management of data. 1629–1643.
[25] Kyle Soska, Jin-Dong Dong, Alex Khodaverdian, Ariel Zetlin-Jones, Bryan Rout-
ledge, and Nicolas Christin. 2021. Towards understanding cryptocurrency deriva-
tives: A case study of BitMEX. In Proceedings of the Web Conference 2021. 45–57.
[26] Friedhelm Victor and Andrea Marie Weintraud. 2021. Detecting and quantifying
wash trading on decentralized cryptocurrency exchanges. In Proceedings of the
Web Conference 2021. 23–32.
[27] Lei Wu, Siwei Wu, Yajin Zhou, Runhuai Li, Zhi Wang, Xiapu Luo, Cong Wang,
and Kui Ren. 2020. Ethscope: A transaction-centric security analytics framework
to detect malicious smart contracts on ethereum. arXiv preprint arXiv:2005.08278
(2020).
[28] Xihan Xiong, Zhipeng Wang, William Knottenbelt, and Michael Huth. 2023.
Demystifying Just-in-Time (JIT) Liquidity Attacks on Uniswap V3. Cryptology
ePrint Archive (2023).
Figure 7: Illustrated mechanism for JIT attack.
A Liquidity Mining
A.1 Uniswap V3
In Uniswap V3, liquidity provision is related to the current price 𝜌0
and the price range [𝜌𝑙,𝜌𝑢]. When𝜌0<𝜌𝑙, an LP can deposit any
amount of𝑋and zero of𝑌. When𝜌0>𝜌𝑢, an LP can deposit any
amount of𝑌and zero of𝑋. When𝜌𝑙≤𝜌0≤𝜌𝑢, an LP deposits Δ𝑥
of𝑋andΔ𝑦of𝑌, whereΔ𝑦
Δ𝑥=√𝜌0−√𝜌𝑙√𝜌𝑢−√𝜌0·√𝜌𝑢·√𝜌0[3].
Uniswap V2 and Uniswap V3 are two popular AMMs. In Uniswap
V2, liquidity is evenly distributed over the entire price range be-
tween 0 and infinity, leading to low capital efficiency. Uniswap V3
solves this by allowing LPs to concentrate their liquidity around
preferred price ranges, improving capital efficiency. Uniswap V3
only needs to maintain enough reserves in a range to cover price
movements, while still operating like a constant product curve with
greater reserves (namely virtual reserves ) within the range. For ex-
ample, as shown in Figure 3, when the price increases from 𝜌0to
𝜌𝑢, the virtual reserve of 𝑋decreases from 𝑥0=𝐿√𝜌0to𝑥𝑢=𝐿√𝜌𝑢
along the constant product curve. Thus, without the need to provide
entire𝑥0reserves at current price, LPs within range [𝜌𝑙,𝜌𝑢]merely
need to deposit real reserve 𝑥𝑟=𝐿√𝜌0−𝐿√𝜌𝑢for𝑋, and similarly
deposit𝑦𝑟=𝐿√𝜌0−𝐿√𝜌𝑙for𝑌.
Deposit ratios are different when depositing liquidity into differ-
ent price ranges within the same Uniswap V3 pool. However, we
can treat a pool with different price ranges as different pools. Then,
the deposit ratio of a pool is fixed. Notably, if the current price falls
outside the price range, the deposit ratio is 0. Thus, our definition
of a pool is general and compatible with both Uniswap V2 and V3.
A.2 Malicious Issues and Privacy Concerns
Current malicious issues faced by liquidity mining can be cat-
egorized into 3 types: code vulnerability, market volatility, and
Just-in-Time (JIT) attack [ 28]. LPs face threats from the code vul-
nerability from smart contracts or even phishing contracts. To avoid
such risks, LPs are suggested to utilize some tools [ 16,27] to detect
malicious smart contracts. Additionally, in extreme cases, large
market volatility can also damage the profits of LPs by enlarging
the impermanent loss. However, as mentioned in Section 2, we can
perform stop-loss strategies like withdrawing liquidity promptly
to defend against such risk, which are minimal in general cases.
Besides, adversaries may make JIT attacks to reduce LPs’ rewards,
as shown in Figure 7. Specifically, 𝑡𝑥𝑠𝑤𝑎𝑝 is a swap transaction with
a large amount in a pool 𝑝. When adversaries observe 𝑡𝑥𝑠𝑤𝑎𝑝 in the
public mempool, they make two transactions and bribery miners to
ensure that these transactions are executed right before and after
𝑡𝑥𝑠𝑤𝑎𝑝 . The first transaction 𝑡𝑥𝑑𝑒𝑝𝑜𝑠𝑖𝑡 deposits cryptocurrencies
into𝑝. The second transaction 𝑡𝑥𝑤𝑖𝑡ℎ𝑑𝑟𝑎𝑤 withdraws cryptocurren-
cies from𝑝and retrieve the reward of deposited cryptocurrencies.
 
2257Money Never Sleeps: Maximizing Liquidity Mining Yields in Decentralized Finance KDD ’24, August 25–29, 2024, Barcelona, Spain
Algorithm 1: The YMLM_GD algorithm.
Input: a set𝑃of liquidity pools, a set 𝑄𝐶of
cryptocurrencies quantities, a set 𝐸𝑅of exchagne
rates, and an evaluation function E()
Output: a liquidity mining solution 𝑆
1initialize𝑆,𝐸𝐷𝑇=∅;
2foreach𝑐𝑖∈𝐶do
3 foreach𝑐𝑗∈𝐶do
4 foreach𝑝𝑘∈𝑃do
5 generate an exchange-aware deposit strategy
𝑒𝑑𝑡𝑖,𝑗,𝑘and add𝑒𝑑𝑡𝑖,𝑗,𝑘into𝐸𝐷𝑇 ;
6sort𝐸𝐷𝑇 by a Quicksort procedure [14];
7foreach𝑒𝑑𝑡𝑖,𝑗,𝑘∈𝐸𝐷𝑇 do
8 if𝑒𝑑𝑡𝑖,𝑗,𝑘can be used then
9 use as many 𝑐𝑖and𝑐𝑗as possible to make exchange
and deposit transactions according to 𝑒𝑑𝑡𝑖,𝑗,𝑘;
10 update𝑆;
11return𝑆;
Figure 8: The Solution Obtained by YMLM_GD.
Adversaries can profit from the swap fees of 𝑡𝑥𝑠𝑤𝑎𝑝 without in-
ventory risk. Meanwhile, adversaries’ deposited cryptocurrencies
dilute other LPs’ deposited, reducing their reward. However, the
JIT attack only impacts the rewards of LPs and do not jeopardize
the safety of their deposited cryptocurrencies.
There are also privacy concerns associated with liquidity min-
ing. Blockchain works as a public ledger where all transactions are
transparent, raising privacy concerns for LPs. On the blockchain,
operations from LPs like depositing and withdrawing liquidity are
visible to everyone, allowing others to retrieve privacy information
like how much funds LPs have invested, etc. However, LPs can
protect their privacy by using some methods, such as using ring sig-
natures to conceal the sender of a transaction [ 21], and employing
mixing techniques to obfuscate transaction amounts [ 20]. Third-
party platforms used for liquidity mining can also access users’
privacy information. To avoid this, users can deposit cryptocurren-
cies directly to pools and use aforementioned privacy protection
methods to keep their information confidential.
B Description of YMLM_GD
Inspired by the aforementioned basic ideas, we design YMLM_GD
whose pseudo-code is shown in Algorithm 1. We first initialize the
LM solution 𝑆and𝐸𝐷𝑇 as empty (line 1). Then, we construct theAlgorithm 2: The YMLM_SK algorithm.
Input: a set𝑃of pools, a set 𝑄𝐶of cryptocurrencies
quantities, and a set 𝐸𝑅of exchagne rates
Output: a liquidity mining solution 𝑆
1initialize𝑆;
2foreach𝑐𝑖∈𝐶do
3 initialize𝐸𝐷𝑇𝑖;
4 foreach𝑒𝑑𝑡𝑖,𝑖,𝑗∈𝐸𝐷𝑇𝑖do
5 calculate𝑒𝑦𝑟𝑖,𝑖,𝑗;
6 sort𝐸𝐷𝑇𝑖by𝑒𝑦𝑟𝑖,𝑖,𝑗using Quicksort [14];
7 foreach𝑒𝑑𝑡𝑖,𝑖,𝑗∈𝐸𝐷𝑇𝑖do
8 if𝑎𝑐𝑖is enough to deposit in 𝑝𝑗then
9 use as many 𝑐𝑖as possible to make exchange and
deposit transactions to deposit in 𝑝𝑗;
10 update𝑆;
11return𝑆;
Figure 9: The Solution Obtained by YMLM_SK.
set𝐸𝐷𝑇 of exchange-aware deposit strategies (lines 2-5). Next, we
use Quicksort [ 14] to sort strategies in descending order of their
exchange-aware yield rates (line 6). After that, we try to use each
strategy to make exchange and deposit transactions (lines 7-10).
Specifically, we first verify if the existing quantities of 𝑐𝑖and𝑐𝑗
are sufficient for conducting exchange and deposit transactions
according to 𝑒𝑑𝑡𝑖,𝑗,𝑘satisfying the exchange, deposit, and minimum
constraints in Definition 5 (line 8). If 𝑒𝑑𝑡𝑖,𝑗,𝑘can be used, we use as
many𝑐𝑖and𝑐𝑗as possible to make exchange and deposit transac-
tions by𝑒𝑑𝑡𝑖,𝑗,𝑘(line 9) and update 𝑆accordingly (line 10). Finally,
we return𝑆as the result (line 12). Here is a running example.
Example 2. We run YMLM_GD to solve the problem instance
in Example 1, and the obtained solution is shown in Figure 8. We
first calculate the exchange-aware yield rates. For example, 𝑒𝑦𝑟3,2,1=
0.29,𝑒𝑦𝑟2,2,1=0.22,𝑒𝑦𝑟2,3,3=0.21and𝑒𝑦𝑟1,2,1=0.20. Among all
strategies,𝑒𝑑𝑡3,2,1achieves the highest exchange-aware yield rate.
However, since 𝑎𝑐3cannot satisfy the minimum constraint, we cannot
use𝑒𝑑𝑡3,2,1to make any transactions. Then, we select 𝑒𝑑𝑡2,2,1and
make𝑒𝑡4and𝑑𝑡4. Similarly, we select 𝑒𝑑𝑡2,3,3to make𝑑𝑡5and select
𝑒𝑑𝑡1,2,1to make𝑒𝑡5and𝑑𝑡6. The total yields of this solution is $9.44.
C Description of YMLM_SK
Algorithm 2 shows the pseudo-code of YMLM_SK. We first initialize
the LM solution 𝑆as empty (line 1). Then, we make exchange
and deposit transactions for each cryptocurrency (lines 2-10). We
calculate the exchange-aware yield rate for each strategy in 𝐸𝐷𝑇𝑖
(lines 4-5), where 𝐸𝐷𝑇𝑖are the strategies solely using 𝑐𝑖. We use
 
2258KDD ’24, August 25–29, 2024, Barcelona, Spain Wangze Ni et al.
(a) Yearly Yield of Varying 𝑚𝑣
 (b) Running Time of Varying 𝑚𝑣
 (c) Yearly Yield of Varying 𝑦𝑟
 (d) Running Time of Varying 𝑦𝑟
Figure 10: Results of Varying 𝑚𝑣and𝑦𝑟(Synthetic).
Quicksort [ 14] to sort strategies in 𝐸𝐷𝑇𝑖in descending order of
their exchange-aware yield rates (line 6). If the remaining amount
𝑎𝑐𝑖is enough to deposit as a strategy 𝑒𝑑𝑡𝑖,𝑖,𝑗satisfying the exchange,
deposit, and minimum constraints, we use as many 𝑐𝑖as possible
to make transactions (lines 8-10). Finally, we return 𝑆as the result
(line 11). Here is a running example.
Example 3. We run YMLM_SK to solve the problem instance in
Example 1, and the result is shown in Figure 9. Since 𝑎𝑐1is only enough
for𝑒𝑑𝑡1,1,2, we select𝑒𝑑𝑡1,1,2and make𝑒𝑡6as well as𝑑𝑡7. Then, since
𝑒𝑑𝑡2,2,1has the highest exchange-aware yield rate in 𝐸𝐷𝑇 2, we make
an exchange transaction 𝑒𝑡7and𝑑𝑡8. Since𝑎𝑐3is not enough for any
strategy in𝐸𝐷𝑇 3, we do not make any transaction solely using 𝑐3.
The total yields of this solution are $8.44.
D The description of real datasets
We collected datasets from Binance [ 1]. In the real datasets, the
pool set includes 153 different pools, and the cryptocurrency uni-
verse includes 81 different cryptocurrencies. The transaction unit
is10−8. The smallest unit value of a cryptocurrency is $2.7·10−4,
and the highest unit value of a cryptocurrency is $7·10−14. The
highest exchange cost rate is 18%. The most popular cryptocur-
rency is involved in 73 pools (i.e., 48%), the second most popular
cryptocurrency is involved in 21 pools (i.e., 14%), while 41 cryp-
tocurrencies (i.e., 51%) are involved in only one pool, indicating a
skewed distribution. The highest yield rate of a pool is 24.02%, the
second highest yield rate of a pool is 6.34%, and the smallest yield
rate of a pool is 0.01%. In other words, the distribution of yield rates
is also skewed. The deposit variation ratios range from 28% to 256%,
and the minimum deposit values vary from $0.14 to $2487. As LPs’
owned cryptocurrencies are private, there are no public datasets
available. Thus, we simulate the set of an LP’s cryptocurrencies.
By [9], the average value of an LP’s cryptocurrencies is $25133.
Thus, we vary the value of an LP’s cryptocurrencies from $5000 to
$3 million. To comprehensively test the effect of the number of an
LP’s cryptocurrency types, we vary 𝑐𝑝from 0 to 100%. Specifically,
when𝑐𝑝=0, an LP has a single cryptocurrency.
E Additional Experiments
The effect of the minimum deposit value. As demonstrated in
Figure 10(a), the yields of the solutions obtained by all the algo-
rithms decrease as 𝑚𝑣increases. This decline can be attributed to
the increasing difficulty of meeting the minimum constraint as the
average minimum deposit value rises. Consequently, there will be
more cryptocurrencies that cannot be deposited into pools, lower-
ing the yield of the solution. This experimental result aligns with
(a) Yield of Varying 𝑑𝑣𝑟
 (b) Running Time of Varying 𝑑𝑣𝑟
Figure 11: Results of Varying 𝑑𝑣𝑟(Synthetic).
Theorem 4.1 and Theorem 5.2. As shown in Figure 10(b), when 𝑚𝑣
gets larger, the running time of each algorithm keeps stable. The rea-
son is that the running time of each algorithm is mainly influenced
by the number of candidate exchange and deposit transactions.
However, an increase in the average minimum deposit value does
not impact on the number of these candidate transactions.
The effect of the yield rate. As shown in Figure 10(c), when
the average yield rate increases, the yields of the solutions obtained
by all the algorithms increase as 𝑚increases. This positive cor-
relation is attributed to the fact that a higher average yield rate
increases the likelihood of depositing cryptocurrencies into pools
with higher yield rates. Additionally, the yields of all the algorithms
are more sensitive to the change of the pools’ yield rates than
the change of the minimum deposit values in Figure 10(a). This
is because in our settings, which are based on statistics from real
datasets, the minimum deposit value is small compared to the total
value of the cryptocurrencies owned by an LP. This experimental
result supports GD’s idea in Section 4.1. As shown in Figure 10(d),
the increase on the average yield rate does not affect the running
time of each algorithm. The reason is that the primary factor in-
fluencing the running time of each algorithm is the number of
candidate exchange and deposit transactions, rather than the yield
rates. Notably, SK can save at most 96% of the running time of GD
(when𝑦𝑟+=100).
The effect of the deposit variation ratio. As shown in Fig-
ure 11(a), the yields of the solutions obtained by all the algorithms
keep stable as 𝑑𝑣𝑟increases. This stability can be attributed to the
fact that the minimum constraint is associated with the minimum
deposit value rather than the deposit variation ratio. As shown in
Figure 11(b), when 𝑑𝑣𝑟is larger, the running time of each algorithm
is stable. The reason is that the running time of each algorithm
is determined by the number of candidate exchange and deposit
transactions, not affected by 𝑑𝑣𝑟.
 
2259