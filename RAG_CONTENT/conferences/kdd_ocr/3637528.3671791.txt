The Heterophilic Snowflake Hypothesis:
Training and Empowering GNNs for Heterophilic Graphs
Kun Wang✾∗
wk520529@mail.ustc.edu.cn
University of Science and Technology
of China (USTC)
Hefei, ChinaGuibin Zhang✾∗
bin2003@tongji.edu.cn
Tongji University
Shanghai, ChinaXinnan Zhang
zhan9359@umn.edu
University of Minnesota
Twin Cities, USA
Junfeng Fang
fjf@mail.ustc.edu.cn
University of Science and Technology
of China (USTC)
Hefei, ChinaXun Wu
wuxun21@mails.tsinghua.edu.cn
Tsinghua University
Beijing, ChinaGuohao Li
guohao.li@kaust.edu.sa
Oxford University
Oxford, UK
Shirui Pan
s.pan@griffith.edu.au
Griffith University
Queensland, AustriliaWei Huang✉
weihuang.uts@gmail.com
RIKEN AIP
Tokyo, JapanYuxuan Liang✉
yuxliang@outlook.com
The Hong Kong University of Science
and Technology (Guangzhou)
Guangzhou, China
ABSTRACT
Graph Neural Networks (GNNs) have become pivotal tools for a
range of graph-based learning tasks. Notably, most current GNN
architectures operate under the assumption of homophily, whether
explicitly or implicitly. While this underlying assumption is fre-
quently adopted, it is not universally applicable, which can result
in potential shortcomings in learning effectiveness. In this paper,
for the first time, we transfer the prevailing concept of “one node
one receptive field" to the heterophilic graph. By constructing a
proxy label predictor, we enable each node to possess a latent pre-
diction distribution, which assists connected nodes in determining
whether they should aggregate their associated neighbors. Ulti-
mately, every node can have its own unique aggregation hop and
pattern, much like each snowflake is unique and possesses its own
characteristics. Based on observations, we innovatively introduce
the Heterophily Snowflake Hypothesis and provide an effective
solution to guide and facilitate research on heterophilic graphs
and beyond. We conduct comprehensive experiments including (1)
main results on 10 graphs with varying heterophily ratios across
10 backbones; (2) scalability on various deep GNN backbones (SGC,
JKNet, etc.) across various large number of layers (2,4,6,8,16,32 lay-
ers); (3) comparison with conventional snowflake hypothesis; (4)
efficiency comparison with existing graph pruning algorithms. Our
∗Kun Wang and Guibin Zhang are co-first authors. ✉denotes corresponding authors.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ’24, August 25–29, 2024, Barcelona, Spain
©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08. . . $
https://doi.org/10.1145/3637528.3671791observations show that our framework acts as a versatile operator
for diverse tasks. It can be integrated into various GNN frame-
works, boosting performance in-depth and offering an explainable
approach to choosing the optimal network depth. The source code
is available at https://github.com/bingreeky/HeteroSnoH.
CCS CONCEPTS
•Computer systems organization →Neural networks; •The-
ory of computation →Sparsification and spanners.
KEYWORDS
Graph Neural Network, Heterophilic Graph, Graph Pruning
ACM Reference Format:
Kun Wang ✾, Guibin Zhang ✾, Xinnan Zhang, Junfeng Fang, Xun Wu, Guo-
hao Li, Shirui Pan, Wei Huang ✉, and Yuxuan Liang ✉. 2024. The Heterophilic
Snowflake Hypothesis: Training and Empowering GNNs for Heterophilic
Graphs. In Proceedings of the 30th ACM SIGKDD Conference on Knowledge
Discovery and Data Mining (KDD ’24), August 25–29, 2024, Barcelona, Spain.
ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/3637528.3671791
1 INTRODUCTION
Graph Neural Networks (GNNs) [ 21,26,58] have become the de
facto standard for various graph representation learning tasks, such
as node classification [ 2,45], link prediction [ 63,64], and graph
classification [ 19,62]. The superior capabilities of GNNs can be at-
tributed to their message passing paradigm [ 58]. Through iterative
information aggregation and updating, the central node captures
rich information by interacting with its neighboring nodes based
on the connected graph structure [47, 58, 67].
Among the various landscape of GNN architectures and designs,
the homophily assumption [ 31,66,69] serves as a foundational pil-
lar, suggesting that edges predominantly link nodes with identical
labels and analogous node features. Despite its appealing success,
3164
KDD ’24, August 25–29, 2024, Barcelona, Spain Kun Wang et al.
Early Stop!Layer 1
Layer 2
Layer 3𝒩ℋ𝟏(𝟏):𝟎.𝟗
Aggr
𝒩ℋ𝟏(𝟐):𝟎.𝟖
Aggr
𝒩ℋ𝟏(𝟑):𝟎.𝟕𝟏
Aggr
𝒩ℋ𝟐(𝟏):𝟎.𝟓
Aggr
𝒩ℋ𝟐(𝟐):𝟎.𝟏
Early Stop!𝒩ℋ𝟐(𝟑):𝟎.𝟏
𝒩ℋ𝟐(𝟏):𝟎.𝟕
Aggr
𝒩ℋ𝟐(𝟐):𝟎.𝟓
Early Stop!𝒩ℋ𝟐(𝟑):𝟎.𝟐Aggr
Snowflakes:
Figure 1: The algorithm workflow of Heterophilic Snowflake Hy-
pothesis (Hetero-S) and Heterophily-aware Early Stopping (HES).
the performance of current GNNs has dropped sharply as the ho-
mophily of the graph decreases. Specifically, within heterophilic
graphs, a discrepancy is often observed between the labels of neigh-
boring nodes and the central node, a phenomenon referred to as
the local structure discrepancy issue [ 5,36,66,70]. We ascribe the
observed performance degradation to the uniform message pass-
ing framework, in which that the central node initially aggregates
messages from its local neighboring nodes, subsequently updating
the ego node (see Figure 1 left hand).
However, non-euclidean data frequently display heterophily,
which can be observed across diverse domains. For instance, when
users engage with content on Netflix, the people with diverse pref-
erences might be subjected to similar recommendation algorithms,
owing to their interaction with identical video content. The poten-
tial of heterophilic graphs is vast, holding promise in both academic
and industrial spheres, such as social networks [ 14], transporta-
tion systems [ 51,68], and recommendation platforms [ 56,57]. In a
heterophilic context, this mechanism introduces two primary and
challenging limitations:
•In graph topology, local neighbors refer to nearby nodes, often
overlooking distant yet informative nodes. In heterophilic, nodes
sharing structural and semantic characteristics can be more dis-
tantly positioned [32, 33].
•A consistent aggregation and update method often neglects varia-
tions in information from alike/unalike neighbors. In heterophilic
graphs, achieving discerning node representations necessitates
customized message passing to capture distinctive patterns.
Given the above emerging challenges, there has been a shifting
focus towards exploring heterophily in GNNs. This research area
includes a wide range from delving into heterophilic graph sampling
to the evolution of intricate algorithms. The growing interest in
heterophilic graph learning can be attributed to its vast applicability.
From a macro perspective, existing heterophilic GNNs can be
broadly classified into two categories, i.e.,non-local neighbor ex-
tension andGNN architecture refinement [66]. The concept of
non-local neighbor extension in heterophilic GNNs involves broad-
ening the receptive field beyond local neighbors. This is achieved
through strategies like high-order neighbor information mixing
[3,25,53,70] and potential neighbor discovery [ 17,34,38,61], en-
hancing representation by capturing distant but relevant node fea-
tures. With the second class, GNN architecture refinement focuses
on enhancing the expressive capability of GNNs for heterophilicgraphs by optimizing AGGREGATE and UPDATE function [ 58].
Through strategies such as adaptive message aggregation [ 20,46],
ego-neighbor separation [ 44,70], and layer-wise operation [ 7,9,60],
the refinement aims to produce distinguishable and discriminative
node representations.
Recently, a novel paradigm, the Snowflake Hypothesis (SnoH) [ 49],
rooted in the concept of “one node, one receptive field” has gained
significant attention for its efficacy in addressing the over-smoothing
[40] and over-fitting [ 5,30] issues in GNNs. This hypothesis draws
inspiration from the intricate and distinctive patterns exhibited
by individual snowflakes, assuming that each node can possess its
unique receptive field. It posits that for an 𝐿-layer GNN, every node
in the graph harbors an optimal receptive field width denoted as
𝑘(1≤𝑘≤𝐿). During the message passing process from 1to𝐿
hops, each node merely aggregates information from the preceding
𝑘hops, after which they cease to aggregate information from the
neighborhood (referred to as “node early stopping ”).
Intuitively, the snowflake hypothesis demonstrates even greater
vitality and significance in the context of heterophilic graphs: (1)
One concept benefits all. The idea behind the snowflake hypoth-
esis can be seamlessly integrated with any heterophilic GNNs de-
signs, showcasing exceptional versatility. Whether it is for non-local
neighbor extension or GNN architecture refinement, the snowflake
can easily be incorporated as a plugin and demonstrates strong com-
patibility. (2) Enhanced pruning requirement. In heterophilic
graphs, given the higher probability of central nodes having differ-
ent labels than surrounding nodes, the need for pruning aggregation
channels becomes even more critical than in homogeneous graphs.
This pruning aids nodes in selectively aggregating information and
updating themselves effectively.
However, the original SnoH and its implementations appear to ex-
hibit limitations when applied to heterophilic graphs. Firstly, SnoH
relies on either gradient information orcosine similarity comparison
for node early stopping. These heterophily-unaware approaches
do not adequately integrate into heterophilic scenarios. Secondly,
SnoH typically demonstrates convincing performance only in deep
GNNs, which contradicts the prevailing focus on shallow designs
for heterophilic GNNs. These necessitates bespoke strategies for
heterophilic graphs. To handle the distinct characteristics between
homophilic and heterophilic graphs, we introduce a Heterophily-
aware Early Stopping (HES) strategy. HES benefits from two key
aspects, thereby overcoming the limitations of SonH:
▶HES employs a proxy label predictor, generating pseudo-label
probability distributions for different nodes [ 11,22]. In this way,
we can scrutinize the probability distributions of two connected
nodes and determine the probabilities where two nodes are pre-
dicted to have the same label. This value can further represent
the homophily score between two nodes, subsequently serving
as a replacement for the original adjacent matrix.
▶By analyzing the variation in the heterophilic ratio across each
layer, we are able to appropriately determine the depth for early
stopping. This approach contrasts with SonH, which primarily
exhibits efficacy in deeper GNN configurations.
Subsequently, by determining whether the heterophily of nodes
increases before and after aggregation, we implement early stop-
ping at the node receptive field level, thereby ensuring the efficacy
3165The Heterophilic Snowflake Hypothesis:
Training and Empowering GNNs for Heterophilic Graphs KDD ’24, August 25–29, 2024, Barcelona, Spain
of information aggregation. For the first time, we validate the
existence of “snowflakes” in heterophilic graphs, underscoring the
significance of the “one node, one receptive field" paradigm in such
scenarios. We introduce a universal solution to this issue, which
stands out from previous designs due to its generality and model-
agnostic nature. Remarkably, HES can seamlessly integrate with
virtually arbitrary heterophilic designs, enhancing both its training
and inference speeds. We summarize our contributions as follows:
•We conceptualize “one node one receptive field” as heterophilic
snowflake hypothesis in the heterophilic graph scenario. To
achieve this target, we develop the heterophily-aware early stop-
ping strategy, and offer theoretical analysis from the graph neural
tangent kernel (GNTK) and stochastic block model (SBM) per-
spective to provide high-level insights of ours paradigm.
•Hetero-S finds broad applicability and HES can aid various back-
bones in discovering optimal receptive fields for each node across
diverse datasets. We verify HES on 10 GNN backbones across
over 16 graph benchmarks. Experiments demonstrate that for all
prevailing backbones, HES can facilitate substantial performance
enhancements, ranging from 0.34% ∼31.86% in homophilic set-
tings and from 0.68% ∼21.73% in heterophilic settings.
•Similar to the conventional snowflake hypothesis, HES can scale
up to deep GNNs effectively without any bells and whistles. Con-
cretely, HES mitigates the performance degradation caused by
excessive aggregation of heterophilic information, resulting in
performance improvements ranging from 0.46% ∼10.37% in 16-
layer configurations and from 1.13% ∼7.92% in 32-layer configu-
rations. These experimental results demonstrate the potential of
HES to be extended to large and densely connected graphs.
•More observations. (I) Hetero-S has been empirically observed
to exhibit comparable or even superior performance to the origi-
nal snowflake hypothesis on both homophilic and heterophilic
settings. In particular, Hetero-S demonstrates performance im-
provements ranging from 0.51% ∼8.44% on MixHop and JKNet in
comparison to SnoH. (II) The snowflakes ( ❄)achieves the high-
est multiply-accumulate operations (MACs) saving (25% ∼45%of
the baseline) compared to SOTA graph pruning algorithms [ 8,35],
without any performance compromise.
2 PRELIMINARIES
2.1 Notations
We consider an attributed graph denoted as G={V,E}, where
VandErepresent the sets of nodes and edges, respectively. The
feature matrix ofGis denoted as X∈R𝑁×𝐷, where𝑁=|V|
is the number of nodes in the graph and 𝐷is the dimension of
node features. We use x𝑖=X[𝑖,·]to denote the 𝐷-dimensional
feature vector corresponding to node 𝑣𝑖∈V. An adjacency matrix
A∈R𝑁×𝑁, serves to represent the connections between nodes,
where A[𝑖,𝑗]=1if(𝑣𝑖,𝑣𝑗)∈E and0otherwise. To learn the node
representations in a graph G, most GNNs adhere to the following
paradigm of neighborhood aggregation and message passing:
h(𝑙)
𝑖=COMB
h(𝑙−1)
𝑖,AGGR{h(𝑘−1)
𝑗:𝑣𝑗∈N(𝑣𝑖)}
,0≤𝑙≤𝐿(1)
where𝐿is the number of GNN layers, h(0)
𝑖=x𝑖denotes the feature
vector of𝑣𝑖andh(𝑙)
𝑖(1≤𝑙≤𝐿)denotes the node embeddingof𝑣𝑖at the𝑙-th GNN layer. AGGR andCOMB represent functions
used for aggregating neighborhood information and combining
ego- and neighbor-representations, respectively. In the general
node classification setting, after the graph convolution operations,
GNN uses a linear mapping to map the node embedding h(𝑙)
𝑖to the
corresponding prediction probability value z𝑖, and eventually get
the model prediction ˆ𝑦𝑖:
z𝑖=softmax(h(𝑙)
𝑖W),and ˆ𝑦𝑖=arg max{z𝑖}, (2)
where Wis a learnable matrix, z𝑖∈R𝐶signifies the probabilities
of categorizing 𝑣𝑖into each of the 𝐶categories.
2.2 Heterophily in Graph Neural Networks
Following the previous heterophilic GNNs [ 38], we define the node-
and graph-level homophily ratio as follows:
node-level:H(𝑖)
node=|{𝑣𝑗|𝑣𝑗∈N(𝑣𝑖), 𝑦𝑖=𝑦𝑗}|
|N(𝑣𝑖)|, (3)
graph-level:Hnode=1
|V|∑︁
𝑣𝑖∈VH(𝑖)
node, (4)
whereN(𝑣𝑖)denotes the 1-hop neighbor of 𝑣𝑖andV(𝑣𝑖)denotes
the 1-hop neighbors of 𝑣𝑖. Specifically,H(𝑖)
noderepresents the average
proportion of neighbors that share the same class with node 𝑣𝑖, and
Hnode represents the global homophily by computing the average
of node homophily. Conversely, the heterophily ratio at the node
and graph level can be expressed as eH(𝑖)
node=1−H(𝑖)
nodeandeHnode=
1−H node. In general, graphs that exhibit strong homophily tend
to haveHnode values approaching 1, whereas those characterized
by pronounced heterophily often have values near 0.
It’s essential to note that H(𝑖)
nodesolely reflects the heterophily
within the 1-hop neighborhood of 𝑣𝑖. Furthermore, we extend this
definition to the k-hop neighborhood:
NH𝑘
𝑖=|{𝑣𝑗|𝑣𝑗∈N(𝑘)(𝑣𝑖), 𝑦𝑖=𝑦𝑗}|
|N(𝑘)(𝑣𝑖)|, (5)
whereN(𝑘)(𝑣𝑖)={𝑣𝑗|1≤ShortestPath(𝑣𝑗,𝑣𝑖)≤𝑘}represents
the k-hop neighborhood of 𝑣𝑖.
3 MOTIVATION
In this section, we prudently introspect the heterophily in differ-
ent graphs and put forward the motivation of HES strategy. We
start from the empirical observations. Concretely, we select both a
heterophilic graph (Squirrel) and a homophilic graph (CS), and com-
puteNH𝑘(1≤𝑘≤6)for each node. As shown in Figure 2 (a,b),
we list the following two observations: Obs.1: The homophily ratio
of nodes in Squirrel significantly declines as the hop increases at a
faster rate compared to those in CS; Obs.2: In both types of graphs,
the distribution of node homophily ratios is diverse. Even when the
receptive field size extends to 6 layers (i.e., 6-hop neighborhood),
there exist nodes with homophily ratios approaching 1.
Insights & Reflections. These observations naturally align with
the concept of “one node one receptive field." In both types of graph
data, the k-hop homophily distributions of different nodes exhibit
significant variation. This prompts the question: Is it feasible to
3166KDD ’24, August 25–29, 2024, Barcelona, Spain Kun Wang et al.
Figure 2: The algorithm workflow of Heterophilic Snowflake Hy-
pothesis (Hetero-S) and Heterophily-aware Early Stopping (HES).
determine the appropriate receptive field for each node based on its k-
hop homophily distribution? Going beyond this insight, we conduct
theempirical experiments on Squirrel and CS with a 6-layer
GNN. We determine their receptive field as follows:
R𝑖=max
1≤𝑗≤𝑘(𝑗· 1[NH𝑗
𝑖≤𝜖]), (6)
whereR𝑖denotes the determined receptive filed for 𝑣𝑖and𝜖is
a pre-defined homophily threshold. After obtaining the receptive
field, we then reformulate the aggregation operations as follows:
h(𝑙)
𝑖= 
COMB
h(𝑙−1)
𝑖,AGGR{h(𝑘−1)
𝑗:𝑣𝑗∈N(𝑣𝑖)}
,0≤𝑙<R𝑖;
COMB
h(𝑙−1)
𝑖,∅
,R𝑖≤𝑙≤𝐿(7)
It is noteworthy that, beyond the R𝑖-th layer of GNN, node 𝑣𝑖ceases
to aggregate information from its neighbors, thus achieving early
stopping of the receptive field. Further, Figure 2 (c,d) demonstrates
the performance of GCN on Squirrel and CS with different ho-
mophily thresholds, which characterizes a 2.12%↑under𝜖=0.3
on Squirrel, and a 1.34%↑under𝜖=0.2on CS. This confirms that
early stopping of node receptive fields can indeed assist GNNs in
learning more refined node representations.
4 METHODOLOGY
Considering the aforementioned observation and gained motiva-
tions, we aim to identify an appropriate receptive field for each
node. Analogous to the conventional snowflake hypothesis, we
introduce the “Heterophily Snowflake Hypothesis (Hetero-S)" for
the first time in heterophilic graphs settings:Heterophilic Snowflake Hypothesis (Hetero-S): For an𝐿-layer
GNN on a heterophilic graph, each node possesses an optimal receptive
field; training the GNN by aggregating information only from neigh-
bors within this optimal receptive field minimizes the inclusion of
excessive heterophilic information, yielding optimal representations.
More formally, consider an 𝐿-layer GNN, when optimized with sto-
chastic gradient descent (SGD) on heterophilic graphs G={A,X},
the GNN reaches a minimum validation loss and obtains a test
accuracy of 𝜑. Furthermore, let’s assume the existence of a prun-
ing algorithm guided by the Hnode, which ensures that each node
𝑣𝑖has a unique optimal receptive field size of 𝑘𝑖(1≤𝑘𝑖≤𝐿),
allowing it to be early stopped at the 𝑘𝑖-th GNN layer, i.e., set
N(𝑘+1)(𝑣𝑖)=···=N(𝐿)(𝑣𝑖)=∅. This approach helps nodes
avoid over-aggregation of heterophilic information, leading to a
test accuracy of 𝜑′. The Hetero-S posits that there exists optimal 𝑘𝑖
for each𝑣𝑖to satisfy that 𝜑′>𝜑(note as ❄).
To achieve this target, we can naturally resort to the implementa-
tion in Sec. 3. However, in practical scenarios (e.g., semi-supervised
settings), a question arises regarding receptive field operation: when
only partial nodes have known labels, how can we estimate the ho-
mophily ratio for each node within a 𝑘-hop neighborhood?
4.1 Proxy Label Predictor
As depicted above, in semi-supervised scenarios, we only know a
small fraction of labels in a heterophilic graph. Towards this end,
we formulate a GNN prediction process as a combination of two
processes, i.e.,𝑌={AGGR⋄COMB}⋄𝑓𝑌. After the aggregation and
combination process, {AGGR⋄COMB}, nodes are mapped into a latent
space characterized by distinguishability. This mapping ensures
that nodes with the same label are positioned in similar locations,
facilitating the identification of their relational patterns. Moreover,
by employing an oracle function, we can effectively predict the
outcome𝑌, leveraging the structured information encapsulated
in this latent space. This process enhances the model’s ability to
discern and categorize nodes, significantly improving the accuracy
and efficiency of our predictions. Upon reviewing previous work
[37], we first present a lemma:
Lemma 4.1. Assuming thatNH𝑘
𝑖for𝑣𝑖decreases w.r.t 𝑘in pro-
portion to𝜁(𝜁>1), meaning that as the receptive field expands, 𝑣𝑖
aggregates more heterophilic information. Under such circumstances,
when employing receptive field stopping, there exists 𝑘≥2satisfy-
ing the condition that 𝜑({𝐴𝐺𝐺𝑅⋄𝐶𝑂𝑀𝐵}(𝑘)⋄𝑓𝑌)>𝜑({𝐴𝐺𝐺𝑅⋄
𝐶𝑂𝑀𝐵}(𝑘+𝜋)⋄𝑓𝑌), where𝜑(·)is the performance metric, {𝐴𝐺𝐺𝑅⋄
𝐶𝑂𝑀𝐵}(𝑘)signifies aggregating information solely from the 𝑘-hop
neighborhood, and 𝜋∈N+.
With this in mind, we construct a proxy label predictor P𝑌to
determine label-wise graph aggregation [ 11,22]. Concretely, we
resort to a simple predictive model (here we can use MLP and
GNN, and we place ablation results in Sec. 5.5) to obtain pseudo
probability label ˜z𝑖with cross-entropy loss:
min
ΘLCE(G𝑡𝑟,Θ)=−1
|V𝑡𝑟|∑︁
𝑣𝑖∈V𝑡𝑟˜𝒛𝑖log(𝒛𝑖), (8)
whereG𝑡𝑟denotes the training nodes ( V𝑡𝑟) and graph structure,
andΘdenotes network parameters. Different from previous work
3167The Heterophilic Snowflake Hypothesis:
Training and Empowering GNNs for Heterophilic Graphs KDD ’24, August 25–29, 2024, Barcelona, Spain
Training Graph(s)𝒗𝒊 𝒗𝒋1-hop nodes of 𝒗𝒊𝒗𝒊 1-hop nodes of 𝒗𝐣 2-hop nodes of 𝒗𝐣𝒗𝐣
𝒗𝒊
𝒗𝒋
Proxy label predictor⊗⊗Outer product
⊗𝑆𝑖1=𝑡𝑟(𝒫𝑖1)𝒗𝟏
𝒗𝑵
𝑆𝑗𝑁=𝑡𝑟(𝒫𝑗𝑁)Homophily mask 𝑺∈ℝ𝑵×𝑵𝒗𝒊 𝒗𝒋0.23
0.380.120.07
0.09
0.090.20
𝒗𝒋𝑺𝟎𝑺𝟏𝑺𝟐𝑨⊙𝑺𝟏1-hop
2-hop
3-hop
Heterophily Filtering
𝑨⊙𝑺𝟐
𝑨⊙𝑺𝟑
PruningAdmirable 
accuracyScalable
depth Efficient
inference + +One node 
one receptive
Pruned 
Graph𝒢𝑠2 𝒢𝑠1<
Input 
GraphAccuracyImprovement
Sparsity
Identifying Receptive field 
for each node 
Figure 3: The pipeline of our HES framework. For each node, we utilize a proxy model to evaluate the homophily strength of its edges, which is
further used to estimate its multi-hop homophily ratio. Based on the homophily strength at each hop, we perform receptive field-level early
stopping to determine a unique receptive field for each node.
[11,22,48], we derive a pseudo probability distribution solely to
determine the appropriate size of the receptive field.
4.2 Training Homophily Mask
After obtaining the node soft labels, we proceed to define the ho-
mophily mask denoted as S, where S𝑖𝑗, for edge(𝑖,𝑗)∈E , represents
the homophily strength of edge (𝑖,𝑗),i.e., the likelihood that 𝑣𝑖and
𝑣𝑗share the same label.
To obtain the expression for S𝑖𝑗, we calculate the label distribu-
tion for nodes 𝑣𝑖and𝑣𝑗by computing the outer product of their
respective predicted probability distributions.
𝑆𝑖𝑗=𝑡𝑟∼𝒛𝑖⊗∼𝒛𝑗
=𝑡𝑟©­­­
«∼𝒛1,1···∼𝒛1,𝐶
.........
∼𝒛𝐶,1···∼𝒛𝐶,𝐶ª®®®
¬=∑︁
𝜇=1→𝐶∼𝒛𝜇,𝜇 (9)
where ˜𝑧𝛼,𝛽denotes the probability that node 𝑣𝑖belong to cate-
gory𝛼, while node 𝑣𝑗is associated with category 𝛽.⊗represents the
out-product. Then we can formulate the 𝑆via following equation:
S=©­­
«𝑆1,1···𝑆1,𝑁
.........
𝑆𝑁,1···𝑆𝑁,𝑁ª®®
¬(10)
Note that Sis parameterized by the proxy model P𝑌. The shapes
ofSandAare identical, in which we can co-optimize the weight Θ
and the Sfrom end to end by utilizing objective Lopt:
Lopt=LCE({S⊙A,X},Θ)=LCE
opt𝑆
min
Θ𝑡𝑟G𝑡𝑟(P𝑌)
⊙A,X
; Θ
(11)
whereLCEdenotes cross-entropy loss, we optimize ( opt)Sby func-
tion opt𝑆
min
ΘtrEG𝑡𝑟(R𝑌)
with minimized empirical risk E.4.3 Early Stopping Based on Hop Heterophily
After multiple rounds of training and optimization with Equation
11, we obtain a relatively accurate mask, denoted as ¤S. In the context
of GNNs, multi-layer aggregation assists the model in capturing
neighbor relationships at varying distances. Here, we employ ¤Sto
replace Afor capturing more distant neighbor relationships. Con-
cretely, we use¤S(𝑘)=¤S𝑘∈R𝑁×𝑁to further represent the 𝑘-hop
neighbor aggregation expression of homophily ratio. Subsequently,
we calculate the row sum values for each hop, excluding self-loops:
𝑠𝑒𝑡n∑︁
row\diag¤S(𝑘)o
={¤S(𝑘)
1,¤S(𝑘)
2...¤S(𝑘)
𝑁}, (12)
where¤S(𝑘)
𝑖represents the normalized row sum of the 𝑖-th row in
¤S(𝑘), where the summation excludes the self-loop represented by
row{𝑘,𝑘}in the𝑘-th row of the matrix.
if¤𝑆(𝑘)
𝑖>𝜌¤𝑆(𝐸𝑆)
𝑖
thenD𝑜
N(𝐸𝑆)(𝑣𝑖)=N(𝐸𝑆+1)(𝑣𝑖)=···=∅
,(13)
where𝜌denotes the filtering threshold. While it is possible to as-
sign a distinct threshold for each node, for simplicity, we employ
a uniform𝜌across all nodes to filter the receptive field (the sen-
sitivity analysis on 𝜌is placed in Appendix G). D𝑜denotes an
intervention that forcefully assigns an aggregation status. We em-
ploy heterophily-aware early stopping at 𝐸𝑆-th layer, which can
ensure that each node possesses a unique receptive field size.
4.4 Theoretical Analysis
We provide a theoretical guarantee for heterophily snowflake hy-
pothesis through graph neural tangent kernel (GNTK) [ 12,23].
Generally, during training, the NTK is deterministic and static [ 24],
thus GNTK can be used to describe the training behavior of an
3168KDD ’24, August 25–29, 2024, Barcelona, Spain Kun Wang et al.
infinitely-wide graph neural network. In this work, we use GNTK
to study the training dynamics of an infinitely-wide GNN with node
classification task. We provide the definition of GNKT as follows:
𝐾(𝑢,𝑢′)=𝐿∑︁
𝑙=1𝜕𝑓(𝑢)
𝜕𝜃(𝑙)𝜕𝑓(𝑢′)
𝜕𝜃(𝑙)≜𝐿∑︁
𝑙=1𝐾(𝑢,𝑢′)(𝑙)(14)
where𝑢and𝑢′are indexes of nodes in the graph, and 𝜃(𝑙)is the set
of all trainable parameters in 𝑙-th layer. According to Equation (14),
we need to calculate the GNTK at each layer, which follows the
recursive relation: K(𝑙)=G(𝑙)K(𝑙−1), where G(𝑙)=ˆA(𝑙)Γ(ˆA(𝑙))
is𝑙-th layer propagation matrix for the GNTK with ˆA=D−1A,
Γdenotes the transpose operation. Our target is to check if the
smallest eigenvalue of GNTK is greater than zero or not. According
to [22], when the smallest eigenvalue of GNTK is greater than
zero, the training loss can be minimized to zero, implying
successful optimization. Inversely, if the smallest eigenvalue of is
zero, then we would say that the GNN cannot be trained successfully.
To study the eigenvalue of GNTK, we introduce a generative model
named Stochastic Block Model (SBM) [ 1,18], which has been used
in the theoretical analysis of GNNs. Then the following Lemma
gives the smallest eigenvalue of the GNTK:
Lemma 4.2. Consider Ais a probability adjacency matrix sam-
pled from a SBM 𝜓(𝑁,𝑝,𝑞), wherein it is postulated that there are
various clusters interconnected with an internal connection prob-
ability of𝑝, and the inter-cluster connectivity rate is 𝑞. We can
conclude the expected smallest eigenvalue of the GNTK is given by
EA∼𝜓(𝑁,𝑝,𝑞)[𝜆]=Π𝐿
𝑖=11−𝑝
(𝑁−1)𝑝+𝑁𝑞+1.
In SBM,𝑝and𝑞can be deemed as the expectation of the adja-
cency matrix. With this in mind, we observe the K(𝑙)=G(𝑙)K(𝑙−1)=
···=G(𝑙)···G(1)K(0). Subsequently, we can express the general
probabilistic form of K(𝑙):
K(𝑙)=ˆA(𝑙)Γ(ˆA(𝑙))ˆA(𝑙−1)Γ(ˆA(𝑙−1))··· ˆA(1)Γ(ˆA(1))K(0)(15)
where𝑙-th adjacency matrix ˆA(𝑙)is further characterized in proba-
bilistic form, and the density of ˆA(𝑙)is correlated with the magni-
tude of𝑝(𝑙)and𝑞(𝑙). We observe that with the increasing depth of
GNN, early stopping of the receptive field can assist in the hierar-
chical decrement of 𝑝and𝑞. Consider a simple binary classification
scenario with a balanced distribution, where each category con-
sists of𝑁nodes. The eigenvalues of matrix EA∼𝜓(𝑁,𝑝,𝑞)[G]are as
follows:
𝜆0=1,𝜆1=(𝑁−1)𝑝−𝑁𝑞+1
(𝑁−1)𝑝+𝑁𝑞+1,𝜆2=···𝜆2𝑁−1=1−𝑝
(𝑁−1)𝑝+𝑁𝑞+1
(16)
Generally, the probability of connection between nodes with the
same class label is higher than that of different classes, i.e.,𝑝>𝑞.
Hence, the inequality (1−𝑝)<(𝑁−1)𝑝−𝑁𝑞+1is always
satisfied. Therefore, the smallest eigenvalue of the SBM is given by
1−𝑝
(𝑁−1)𝑝+𝑁𝑞+1. Considering in subsequent layers, the HES algorithm
is applied such that 𝑝and𝑞remain attenuation while heterophilic
nodes are pruned (the decay rate of 𝑝is slower), the product of the
smallest eigenvalues is given by:
Π𝐿
𝑖=11−𝑝(𝑖)
(𝑁−1)𝑝(𝑖)+𝑁𝑞(𝑖)+1=Π𝐿
𝑖=1©­­
«1−𝑁
𝑝(𝑖)+𝑞(𝑖)
 1−𝑝(𝑖)+𝑁 𝑝(𝑖)+𝑞(𝑖)ª®®
¬(17)Consider𝑝>𝑞and p,q are both functions of 𝑁. Here, we conduct a
case study where both 𝑝and𝑞decay quadratically with 𝑖. Without
loss of generality, we assume 𝑝=1/((𝑁−1)∗𝑖2)and𝑞=1/(𝑁∗𝑖2).
We observe that, under these conditions, the GNTK eventually
diverges to√
2𝑁csch(√
2𝜋)sin(𝜋/√
𝑁), which concludes the proof.
See details in Appendix J.
5 EXPERIMENTS
In this section, we conduct extensive experiments to answer the
following research questions (RQ):
•RQ1. Can Hetero-S boost the performance of prevailing ho-
mophilic & heterophilic GNNs on heterophilic graphs?
•RQ2. Does Hetero-S facilitate heterophilic GNNs to extend to
more deep network structures?
•RQ3. Can Hetero-S genuinely achieve graph sparsity and ac-
celerate computations compared to mainstream graph pruning
algorithms [4, 8, 15, 16, 29]?
•RQ4. How sensitive is Hetero-S to its key components?
To provide answers to these questions, we orchestrate the experi-
ments including Main experiments, Depth scalability exper-
iments, Comparative analysis with traditional Snowflake
Hypotheses (SnoH) andEfficiency comparison with pruning
algorithms four parts. Detailed descriptions can be found in Ap-
pendix C. Through these experiments, we anticipate drawing clear
conclusions regarding the efficacy of Hetero-S.
5.1 Experiment Setup
Datasets. We verify Hetero-S across 10 graph benchmarks, includ-
ing citation networks: Cora, CiteSeer, and PubMed [ 26]; WebKB
networks: Cornell, Texas, and Wisconsin [ 38]; Wikipedia-derived
networks: Chameleon and Squirrel [ 42]; the actor co-occurrence
network Actor [ 38]; the heterogenous information network DBLP
[52]. Appendix A offers a comprehensive overview of dataset de-
tails. Note that we choose both highly homophily graphs with
Hnode>0.8and heterophilic graphs with Hnode>0.1.
Backbones. We select three categories of GNN designs, includ-
ing the non-local neighbor extension, GNN architecture refinement
as stated in Section 1, along with some general GNN backbones.
Specifically, for non-local neighbor extension, we choose Mixhop
[3] and GPNN [ 61]. For GNN architecture refinement designs, we
opt for backbones like GAT [ 46], H2GCN [ 70], GCNII [ 7], Geom-
GCN [ 38], JKNet [ 60], and MGNN [ 10]. Lastly, we choose some
general-purpose GNNs, such as GCN [ 26] and GIN [ 59], to further
validate the universality of our algorithm.
5.2 Main Results (RQ1)
We initially investigate the presence and identifiability of the het-
erophily snowflake hypothesis (Hetero-S) through the heterophily-
aware early stopping (HES) mechanism. We evaluate HES in con-
junction with selected GNN backbones across 10 graph benchmarks.
Our tests span not only the standard homophilic datasets but also
extend to heterophilic graphs. From the Table 1 and Figure 4, we
list the following Observations:
Obs.1. The snowflake ( ❄) broadly exist under 2∼8layer back-
bones settings. As shown in Table 1, upon implementing the HES
algorithm, the model consistently achieved performance improve-
ments. For instance, under the MGNN+Cora setup, the model at 8
3169The Heterophilic Snowflake Hypothesis:
Training and Empowering GNNs for Heterophilic Graphs KDD ’24, August 25–29, 2024, Barcelona, Spain
Table 1: Qantitative performance for different layers, we report the average results of FIVE runs and record the results after adding Hetero-S
(+❄). “8❄” in
 column denotes 8-th layer GNN with HES shows the best performance. OOM represents out-of-memory.
Lay
ers 2 4 6 8
 2
4 6 8
 2
4 6 8
Cora (Hno
de=0.57) Citeseer (Hnode=0.74) PubMed (Hnode=0.80)
GCN/
+❄ 81.60 82.10/82.7383.20/84.0083.90/85.10 8❄ 72.80 73.20/73.40 73.80/73 .40 73.20/74.20 8❄ 87.70 87.90/88.5087.40/88.1287.50/87.984❄
GIN/ +❄ 73.60 78.30/79.7081.10/81.3078.80/82.10 8❄ 60.51 68.47/72.9673.08/73.5072.60/74.50 8❄ 87.60 86.37/88.1888.51/89.3788.45/88.706❄
GAT/ +❄ 82.70 83.52/84.2885.31/85.4283.40/85.19 6❄ 73.78 75.15/75.9874.21/74.30 74.15/73.80 4❄ 87.40 85.12/85.5285.10/85.5084.32/85.08 2
Mixhop/ +❄ 85.20 82.80/84.0782.10/82.8082.16/83.90 2 76.98 75.90/77.2575.50/77.8874.30/77.10 6❄ 77.20 77.30/77.4075.70/76.7073.20/77.284❄
Geom-GCN/ +❄ 85.35 21.02/86.7719.42/81.2414.67/78.99 4❄ 78.42 29.98/67.4325.66/68.4712.04/64.26 2 85.95 73.22/87.0343.66/80.3840.58/74.634❄
H2GCN/ +❄ 77.05 75.74/76.5287.14/87.8385.76/87.98 8❄ 78.02 76.42/78.2575.64/78.1875.46/78.24 8❄ 88.54 87.74/88.6686.02/88.7285.28/88.526❄
GCNII/ +❄ 84.40 79.50/84.8576.30/81.5047.90/73.60 4❄ 74.6073.32/72.89 71.70/72.6654.79/57.99 2 86.50 85.57/87.2584.00/84.9282.53/84.604❄
GPNN/ +❄ 81.20 80.73/82.8043.70/78.9946.49/62.18 4❄ 74.20 73.30/74.8173.80/74.3872.50/73.64 4❄ 88.66 89.60/89.7140.70/88.1940.70/85.104❄
JKNet/ +❄ 83.00 82.51/83.3780.50/83.1981.60/83.39 4❄ 74.19 73.28/74.4272.60/73.8873.10/74.05 4❄ 88.78 88.20/89.4188.78/88.0687.70/88.904❄
MGNN/ +❄ 66.80 63.60/74.7273.81/75.2779.30/84.88 8❄ 43.90 53.30/70.4669.50/78.3377.08/79.30 8❄ 89.20 90.07/90.2088.30/89.4788.27/89.164❄
T
exas (Hnode=0.11) Wisconsin (Hnode=0.21) Cornell (Hnode=0.22)
GCN/
+❄ 68.42 73.68/78.9568.42/71.0560.53/63.16 4❄ 56.86 41.48/50.9847.06/60.7852.94/54.90 6❄ 36.84 34.21/44.7439.47/47.3734.21/39.476❄
GIN/ +❄ 63.16 71.02/76.3273.68/76.3277.84/78.85 8❄ 62.75 45.10/54.0854.88/58.8252.17/62.84 8❄ 34.21 28.95/36.2726.77/38.4236.84/37.206❄
GAT/ +❄ 60.53 60.53/65.7957.89/65.7960.53/63.16 6❄ 52.94 51.79/54.9049.62/56.8650.26/54.33 6❄ 36.84 31.58/39.7626.32/34.2126.38/36.844❄
Mixhop/ +❄ 92.11 89.47/94.8686.44/89.68 78.95/76.32 4❄ 80.39 82.35/84.3174.51/82.9368.63/80.28 4❄ 73.68 52.63/68.9950.80/64.3239.47/65.70 2
Geom-GCN/ +❄ 66.53 60.84/66.9843.17/60.3443.08/58.26 4❄ 64.51 61.88/66.9236.87/54.2236.87/55.92 4❄ 60.54 24.78/48.9924.78/52.9624.78/46.71 2
H2GCN/ +❄ 89.54 68.52/92.0273.43/92.2873.78/89.26 6❄ 76.42 72.75/78.2368.73/76.4172.48/78.62 8❄ 55.7665.45/63.5265.24/63.02 44.62/57.464❄
GCNII/ +❄ 72.68 71.65/73.6865.79/68.7363.16/63.894❄ 45.10 49.02/51.3845.77/49.8642.71/45.104❄ 73.68 52.63/68.4950.00/69.7239.47/66.10 2
GPNN/ +❄ 78.95 60.53/84.2160.53/83.1873.66/78.06 4❄ 66.67 70.59/71.28 72.35/70.16 68.39/76.91 8❄ 50.00 52.83/63.24 50.06/49.66 49.72/52.474❄
JKNet/ +❄ 74.89 78.95/84.2184.07/84.3084.07/89.88 8❄ 47.60 60.38/62.9460.38/64.9956.17/63.82 6❄ 34.21 42.17/47.2543.66/50.0744.89/48.656❄
MGNN/ +❄ 84.21 86.84/92.3188.37/89.6484.21/93.09 8❄ 72.55 84.31/86.2782.35/88.7780.17/86.20 6❄ 55.26 68.18/71.22 65.99/71.08 65.03/70.834❄
Squirr
el(Hnode=0.22) Chameleon (Hnode=0.23) Actor (Hnode=0.22)
GCN/
+❄ 55.83 53.51/56.20 51.01/51.87 49.76/53.74 4❄ 67.1163.82/63.39 59.65/63.38 57.89/60.31 2 29.9826.64/25.67 27.50/28.60 26.83/28.22 2
GIN/ +❄ 46.69 43.26/47.9343.23/46.8939.48/44.86 4❄ 63.82 62.28/66.8960.31/64.0458.11/61.62 4❄ 29.34 29.87/30.83 23.95/25.46 24.41/25.68 4❄
GAT/ +❄ 60.42 46.11/47.5519.31/28.4121.33/26.33 2 69.74 70.61/70.83 66.89/66.23 61.84/63.77 4❄ 28.09 27.57/27.8725.26/25.8625.13/26.58 2
Mixhop/ +❄ 54.76 56.20/56.88 54.84/53.67 52.55/52.87 4❄ 66.45 64.69/69,0863.38/66.0462.67/65.89 4❄ 32.63 31.25/34.8035.72/36.6835.20/35.286❄
Geom-GCN/ +❄ 38.44 36.47/40.3331.42/38.6727.00/36.92 4❄ 60.75 61.42/63.9255.73/59.1254.32/58.46 4❄ 31.59 22.64/32.2622.64/33.4022.64/28.216❄
H2GCN/ +❄ 27.3527.94/27.0430.07/28.21 OOM 6❄ 55.8655.92/53.82 53.07/55.2451.24/56.04 8❄ 33.24 32.66/33.74 33.58/33.35 33.02/33.474❄
GCNII/ +❄ 40.61 37.94/43.99 33.24/30.58 28.43/29.66 4❄ 66.89 54.39/54.6944.36/48.46 46.49/29.77 2 31.84 24.61/24.6724.93/26.8524.47/24.80 2
GPNN/ +❄ 43.04 27.95/38.7418.54/29.4718.54/28.61 2 64.47 50.66/65.5548.03/52.7729.39/45.08 4❄ 24.67 25.00/25.6324.67/24.8822.18/25.094❄
JKNet/ +❄ 47.36 59.75/61.0858.69/61.2257.83/61.48 8❄ 64.25 70.18/72.37 70.83/69.44 70.61/70.93 4❄ 28.09 27.17/29.8727.57/30.0428.09/29.656❄
MGNN/ +❄ 41.79 45.44/48.7641.31/43.7939.00/40.28 4❄ 58.33 64.25/64.7961.18/62.80 61.40/59.72 4❄ 30.53 35.99/37.6535.92/37.23 37.17/37.08 4❄
AccuracyCornell + GCN Cornell + JKNet
Squirrel + GCNEpoch Epoch
Squirrel + JKNetAccuracy
Wisconsin + GCNEpoch
Accuracy
Epoch
 EpochWisconsin + JKNetEpoch
Figure 4: The original baselines and + ❄results across Cornell, Squir-
rel and Wisconsin three benchmarks on 8-layer settings.
layers remarkably outperformed the 2-layer baseline by 18.08%. This
phenomenon was also observed across MGNN+Citeseer, JKNet+Texas,H2GCN+Wisconsin, and many others, where performance enhance-
ments ranged from 2.02% ∼14.99% over the original 2-layer configu-
rations. These findings substantiate the validity of our “snowflake
hypothesis" in heterophily graphs.
Obs.2. HES algorithm showcases the great flexibility to var-
ious backbones and consistently presents superior perfor-
mance. The introduction of HES consistently results in perfor-
mance enhancements across nearly all tested models and data com-
binations. Specifically, with GCN and GIN on homophily graphs like
Cora, Citeseer, and PubMed, the models exhibit a ∼1% performance
improvement. This trend is even more pronounced in heterophilic
graphs where, for example, GCN+Texas/Wisconsin shows an av-
erage performance increase of 5.94% across 2∼8layers. These
consistent improvements across various configurations confirm the
effectiveness of our proposed HES.
Obs.3. Graph-specific and GNN-specific analyses. Take a de-
tailed look and analysis of heterophilic graphs combined with tailor-
made GNN architectures, we observed that HES contributes signifi-
cantly to performance gains. For instance, MGNN on 6 datasets with
H𝑛𝑜𝑑𝑒 <0.5, such as Texas and Squirrel, can yield performance
improvements close to 10%. H2GCN+Texas achieves an increase
of approximately 15%∼20%. Further scrutiny of Figure 4 reveals
that +❄feature significantly bolsters the robustness of our train-
ing process. Moreover, this enhancement facilitates the discovery
of superior dependable subgraphs, particularly within the deeper
layers of the network. We showcase more training visualizations
in Appendix D.
3170KDD ’24, August 25–29, 2024, Barcelona, Spain Kun Wang et al.
DBLP
 CS
Actor
 Chameleon
Figure 5: The JKNet and + ❄results across CS, DBLP, Actor and
Chameleon four benchmarks on 2, 4, 8, 16, 32-layer settings.
5.3 Extend Hetero-S to Deep GNNs (RQ2)
To provide a scalable solution for large and densely connected
heterophilic graphs, we extend the HES algorithm to deep GNN
contexts. Specifically, we select ResGCN [ 30], JKNet [ 60], GCNII
[7] and SGC [ 54] as backbones and conduct tests on 2 homophilic
and 2 heterophilic graphs, assessing performance at depths of up
to 32 layers. For homophilic graphs, we opt for CS and DBLP [ 43],
whoseHnode is 0.81 and 0.82, respectively. For heterophilic graphs,
we choose Actor (Hnode=0.22) and Chameleon ( Hnode=0.23), We
list the following observations:
Obs.4. Hetero-S consistently boost GNNs at all depths. As
illustrated in Figure 5, the blue line represents the enhanced model
performance with the addition of HES, while the red line depicts
the original baseline. We observed that incorporating the HES al-
gorithm leads to performance gains in both homophilic and het-
erophilic graph contexts. Notably, for the Chameleon dataset, the
integration of the HES algorithm resulted in a performance increase
of nearly 2.9% against the JKNet baseline.
Obs.5. Hetero-S can assist the “top-student” backbones. An
intriguing observation is that JKNet does not exhibit significant
performance degradation with the deepening of both homophilic
and heterophilic graphs. However, even for the specifically deep-
ened network JKNet, HES still demonstrates exceptional auxiliary
performance, further proving the importance of early stopping in
receptive fields. We have placed additional experimental results in
Appendix E, from which we can draw similar conclusions.
Additionally, the conventional SnoH [ 49] is specially designed
for deepening GNNs on homophilic graphs, and we provide further
comparisons between Hetero-S and SnoH in Appendix F.5.4 Compare With Pruning Methods (RQ3)
In this section, we compare HES with current SOTA pruning meth-
ods, UGS [ 8] and DSpar [ 4]. We attempt to understand whether
Hetero-S can (1) achieve satisfactory sparsity without compromis-
ing performance, and (2) genuinely accelerate GNN computations.
As shown in Table 2 and Figure 6, we can list the observations:
85
7984
83
82
81
80Cora
2007M2918M
Baseline
Hetero-S
UGS
DSpar
2
GCN LayersAccuracy(%)
4 6 8 163552M4866M
7962M56
4454
52
50
48
46Squirrel
12210M
16062M
Baseline
Hetero-S
UGS
DSpar
2
GCN LayersAccuracy(%)
4 6 8 1619606M
22740M
36559M1468M1244M1196M
1666M1579M1405M 1733M
1946M1895M
3052M2801M2412M6230M
10187M
9150M
12357M5748M
9744M7694M
10092M
163078M11027M
Figure 6: Summary of performance (y-axis) at different graph and
GNN layers (x-axis) on Cora and Squirrel. The size of markers rep-
resents the inference MACs ( =1
2FLOPS) of each sparse GCN on
the corresponding sparsified graphs. Black circles ( •) indicate the
baseline. Blue circles ( •) are DSpar. Orange circles ( •) represent the
UGS. Red stars ( ★) are established by Hetero-S.
0bs.7. Hetero-S consistently achieves the highest sparsity. As
shown in Table 2, with the GNN layers deepening, both UGS and
DSpar experience a drastic decline in extreme sparsity. In contrast,
Hetero-S demonstrates enhanced sparsity capabilities, surpassing
UGS and DSpar by 23.96% and 19.96% on Squirrel+16-layer GCN.
Obs.8. On both datasets, Hetero-S achieved the smallest in-
ference MACs, nearly only 25%-45% of the original baseline.
Specifically, on the Cora+16-layer GCN, we observe that Hetero-S
can achieve comparable or even better performance than UGS and
DSpar, with only 8.04% and 4.89% MACs, respectively. Furthermore,
our algorithm consistently improves performance across various
GCN depths, especially in deeper layers. Hetero-S surpassed UGS
by approximately 2.3% ∼2.8% on Cora and was able to reliably train
16 layers on Squirrel, outperforming the baseline by nearly 6.2%.
Table 2: The extreme graph sparsity that HES, UGS, and DSpar are
capable of achieving, at which GCN suffers no performance degra-
dation compared with the original baseline.
Dataset Method 2 4 6 8 16
CoraUGS 18.55 14.26 14.26 9.75 N/A
DSpar 23.50 21.00 13.00 10.00 7.50
HES 25.18 28.37 30.75 31.98 34.25
SquirrelUGS 14.26 9.75 5.00 5.00 N/A
DSpar 17.00 12.00 7.00 4.00 4.00
HES 19.11 19.77 20.50 22.89 23.96
5.5 Ablation Study (RQ4)
Since our performance is contingent on the predictive accuracy
of the proxy models, we select multiple proxy models to observe
the impact of different proxy predictors on the final prediction
3171The Heterophilic Snowflake Hypothesis:
Training and Empowering GNNs for Heterophilic Graphs KDD ’24, August 25–29, 2024, Barcelona, Spain
results. Concretely, we choose 4-layer GCN and 3-layer GAT, SGC
and MLP as proxy predictors to comprehensively verify the model
performance. As shown in Table 3, we can make observations:
Table 3: Ablation study on different proxy models.
Dataset GCN GAT SGC MLP
Cora 82.89±0.92 82.11±1.24 82.66±0.58 82.73±0.63
Citeseer 73.34±0.82 72.97±1.53 73.79±1.04 73.40±0.93
Texas 77.41±3.52 75.81±4.96 77.64±2.54 78.95±2.87
Squirrel 55.58±1.72 55.16±1.63 56.17±1.20 56.20±1.54
Chameleon 62.97±0.98 63.96±1.22 63.08±0.95 63.39±0.89
Avg. Rank 2.8 3.4 2.2 1.6
Obs.9. HES Shows limited sensitivity to proxy model selec-
tion. Across all five datasets, the performance variance of snowflakes
obtained using different proxy models ranged narrowly between
0.78%and 1.31%. Specifically, the overall performance ranking is
MLP > SGC > GCN > GAT, so we leverage a 3-layer MLP for the
unified experimental setup in all experiments.
6 RELATED WORK
Our research primarily focuses on the domain of GNNs and is highly
pertinent to two specific areas. Due to space constraints, we have
included the comprehensive related work in the appendix I.
Graph Pooling & Clustering devote to reducing the computa-
tional burden of GNNs by applying pruning or compressing meth-
ods [ 6,8,13,13,19,50], which are highly relevant to our research.
We divide existing techniques into two categories. (1) Sampling-
based methods aims at selecting the most expressive nodes or edges
from the original graph to construct a new subgraph [ 19,28,39,65].
Though efficient, the dropping of nodes/edges sometimes results
in severe information loss and isolated subgraphs, which may crip-
ple the performance of GNNs [ 55]. (2) Clustering-based methods
learns how to cluster the whole nodes in the original graph to pro-
duces a informative small graph [ 41,55,62], which can remedy the
aforementioned information loss problem.
Heterophilic GNNs. Existing heterophilic GNNs primarily fall
into two categories: non-local neighbor extension andGNN archi-
tecture refinement [66]. The former emphasizes expanding the
neighborhood scope, achieved via high-order neighbor information
mixing [ 3,25,53,70] and potential neighbor discovery [ 34,38,61].
The latter, delves into enhancing GNNs’ expressive power specifi-
cally for heterophilic graphs. Strategies include adaptive message
aggregation [ 20,46], ego-neighbor separation [ 44,70], and layer-
wise operations [ 7,9,60] to optimize node representation quality.
It’s worth emphasizing that our work shares similarities with that
of [48], as both approaches utilize proxy models to discern het-
erogeneity. However, our objective is specifically geared towards
pruning the receptive fields that influence aggregation, granting our
approach greater versatility. Additionally, our method can better
aid in model storage and expedite training.
7 CONCLUSION
In this paper, we first propose the “one node one receptive field”
concept in heterophilic graph modeling. We further establish the
heterophily snowflake hypothesis philosophy for GNNs. To achieve
this, we adopt heterophily-aware early stopping to let certain nodeshave their own receptive fields. In general, we consistently ob-
serve “snowflakes" across numerous deep architectures. Further-
more, upon testing virtually every type of heterogenous design, we
have discovered that our algorithm adeptly integrates with various
frameworks, significantly enhancing their performance.
8 ACKNOWLEDGMENT
Yuxuan Liang is funded by Guangzhou-HKUST (GZ) Joint Funding
Program (No. 2024A03J0620).
REFERENCES
[1]Emmanuel Abbe. 2017. Community detection and stochastic block models: recent
developments. The Journal of Machine Learning Research 18, 1 (2017), 6446–6531.
[2]Sami Abu-El-Haija, Amol Kapoor, Bryan Perozzi, and Joonseok Lee. 2020. N-
gcn: Multi-scale graph convolution for semi-supervised node classification. In
uncertainty in artificial intelligence. PMLR, 841–851.
[3]Sami Abu-El-Haija, Bryan Perozzi, Amol Kapoor, Nazanin Alipourfard, Kristina
Lerman, Hrayr Harutyunyan, Greg Ver Steeg, and Aram Galstyan. 2019. Mixhop:
Higher-order graph convolutional architectures via sparsified neighborhood
mixing. In international conference on machine learning. PMLR, 21–29.
[4]Anonymous. 2023. Graph Lottery Ticket Automated. In Submitted to The Twelfth
International Conference on Learning Representations. https://openreview.net/
forum?id=nmBjBZoySX under review.
[5]Deli Chen, Yankai Lin, Wei Li, Peng Li, Jie Zhou, and Xu Sun. 2020. Measuring
and relieving the over-smoothing problem for graph neural networks from the
topological view. In Proceedings of the AAAI conference on artificial intelligence,
Vol. 34. 3438–3445.
[6]Jie Chen, Tengfei Ma, and Cao Xiao. 2018. Fastgcn: fast learning with graph
convolutional networks via importance sampling. arXiv preprint arXiv:1801.10247
(2018).
[7]Ming Chen, Zhewei Wei, Zengfeng Huang, Bolin Ding, and Yaliang Li. 2020.
Simple and deep graph convolutional networks. In International conference on
machine learning. PMLR, 1725–1735.
[8]Tianlong Chen, Yongduo Sui, Xuxi Chen, Aston Zhang, and Zhangyang Wang.
2021. A unified lottery ticket hypothesis for graph neural networks. In Interna-
tional Conference on Machine Learning. PMLR, 1695–1706.
[9]Eli Chien, Jianhao Peng, Pan Li, and Olgica Milenkovic. 2020. Adaptive universal
generalized pagerank graph neural network. arXiv preprint arXiv:2006.07988
(2020).
[10] Guanyu Cui and Zhewei Wei. 2023. MGNN: Graph Neural Networks Inspired by
Distance Geometry Problem. In Proceedings of the 29th ACM SIGKDD Conference
on Knowledge Discovery and Data Mining. 335–347.
[11] Enyan Dai, Shijie Zhou, Zhimeng Guo, and Suhang Wang. 2022. Label-Wise
Graph Convolutional Network for Heterophilic Graphs. In Learning on Graphs
Conference. PMLR, 26–1.
[12] Simon S Du, Kangcheng Hou, Russ R Salakhutdinov, Barnabas Poczos, Ruosong
Wang, and Keyulu Xu. 2019. Graph neural tangent kernel: Fusing graph neural
networks with graph kernels. Advances in neural information processing systems
32 (2019).
[13] Talya Eden, Shweta Jain, Ali Pinar, Dana Ron, and C Seshadhri. 2018. Provable
and practical approximations for the degree distribution using sublinear graph
samples. In Proceedings of the 2018 World Wide Web Conference. 449–458.
[14] Wenqi Fan, Yao Ma, Qing Li, Yuan He, Eric Zhao, Jiliang Tang, and Dawei Yin.
2019. Graph neural networks for social recommendation. In The world wide web
conference. 417–426.
[15] Junfeng Fang, Wei Liu, Yuan Gao, Zemin Liu, An Zhang, Xiang Wang, and
Xiangnan He. 2023. Evaluating Post-hoc Explanations for Graph Neural Networks
via Robustness Analysis. In Thirty-seventh Conference on Neural Information
Processing Systems. https://openreview.net/forum?id=eD534mPhAg
[16] Junfeng Fang, Xiang Wang, An Zhang, Zemin Liu, Xiangnan He, and Tat-Seng
Chua. 2023. Cooperative Explanations of Graph Neural Networks. In WSDM.
ACM, 616–624.
[17] Guoji Fu, Peilin Zhao, and Yatao Bian. 2022. 𝑝-Laplacian Based Graph Neural
Networks. In International Conference on Machine Learning. PMLR, 6878–6917.
[18] Thorben Funke and Till Becker. 2019. Stochastic block models: A comparison of
variants and inference methods. PloS one 14, 4 (2019), e0215296.
[19] Hongyang Gao and Shuiwang Ji. 2019. Graph u-nets. In international conference
on machine learning. PMLR, 2083–2092.
[20] Johannes Gasteiger, Aleksandar Bojchevski, and Stephan Günnemann. 2018.
Predict then propagate: Graph neural networks meet personalized pagerank.
arXiv preprint arXiv:1810.05997 (2018).
[21] Will Hamilton, Zhitao Ying, and Jure Leskovec. 2017. Inductive representation
learning on large graphs. Advances in neural information processing systems 30
(2017).
3172KDD ’24, August 25–29, 2024, Barcelona, Spain Kun Wang et al.
[22] Zijian Hu, Zhengyu Yang, Xuefeng Hu, and Ram Nevatia. 2021. Simple: Similar
pseudo label exploitation for semi-supervised classification. In Proceedings of the
IEEE/CVF Conference on Computer Vision and Pattern Recognition. 15099–15108.
[23] Wei Huang, Yayong Li, Weitao Du, Jie Yin, Richard Yi Da Xu, Ling Chen, and
Miao Zhang. 2021. Towards deepening graph neural networks: A GNTK-based
optimization perspective. arXiv preprint arXiv:2103.03113 (2021).
[24] Arthur Jacot, Franck Gabriel, and Clément Hongler. 2018. Neural tangent ker-
nel: Convergence and generalization in neural networks. Advances in neural
information processing systems 31 (2018).
[25] Di Jin, Zhizhi Yu, Cuiying Huo, Rui Wang, Xiao Wang, Dongxiao He, and Ji-
awei Han. 2021. Universal graph convolutional networks. Advances in Neural
Information Processing Systems 34 (2021), 10654–10664.
[26] Thomas N Kipf and Max Welling. 2016. Semi-supervised classification with graph
convolutional networks. arXiv preprint arXiv:1609.02907 (2016).
[27] Boris Knyazev, Graham W Taylor, and Mohamed Amer. 2019. Understanding
attention and generalization in graph neural networks. Advances in neural
information processing systems 32 (2019).
[28] Junhyun Lee, Inyeop Lee, and Jaewoo Kang. 2019. Self-attention graph pooling.
InInternational conference on machine learning. PMLR, 3734–3743.
[29] Namhoon Lee, Thalaiyasingam Ajanthan, and Philip HS Torr. 2018. Snip:
Single-shot network pruning based on connection sensitivity. arXiv preprint
arXiv:1810.02340 (2018).
[30] Qimai Li, Zhichao Han, and Xiao-Ming Wu. 2018. Deeper insights into graph
convolutional networks for semi-supervised learning. In Thirty-Second AAAI
Conference on Artificial Intelligence.
[31] Xiang Li, Renyu Zhu, Yao Cheng, Caihua Shan, Siqiang Luo, Dongsheng Li, and
Weining Qian. 2022. Finding global homophily in graph neural networks when
meeting heterophily. In International Conference on Machine Learning. PMLR,
13242–13256.
[32] Derek Lim, Felix Hohne, Xiuyu Li, Sijia Linda Huang, Vaishnavi Gupta, Omkar
Bhalerao, and Ser Nam Lim. 2021. Large scale learning on non-homophilous
graphs: New benchmarks and strong simple methods. Advances in Neural Infor-
mation Processing Systems 34 (2021), 20887–20902.
[33] Derek Lim, Xiuyu Li, Felix Hohne, and Ser-Nam Lim. 2021. New benchmarks for
learning on non-homophilous graphs. arXiv preprint arXiv:2104.01404 (2021).
[34] Meng Liu, Zhengyang Wang, and Shuiwang Ji. 2021. Non-local graph neural
networks. IEEE transactions on pattern analysis and machine intelligence 44, 12
(2021), 10270–10276.
[35] Zirui Liu, Kaixiong Zhou, Zhimeng Jiang, Li Li, Rui Chen, Soo-Hyun Choi, and
Xia Hu. 2023. DSpar: An Embarrassingly Simple Strategy for Efficient GNN
Training and Inference via Degree-Based Sparsification. Transactions on Machine
Learning Research (2023).
[36] Sitao Luan, Chenqing Hua, Qincheng Lu, Jiaqi Zhu, Mingde Zhao, Shuyuan
Zhang, Xiao-Wen Chang, and Doina Precup. 2022. Revisiting heterophily for
graph neural networks. Advances in neural information processing systems 35
(2022), 1362–1375.
[37] Xiaojun Ma, Junshan Wang, Hanyue Chen, and Guojie Song. 2021. Improving
graph neural networks with structural adaptive receptive fields. In Proceedings of
the Web Conference 2021. 2438–2447.
[38] Hongbin Pei, Bingzhe Wei, Kevin Chen-Chuan Chang, Yu Lei, and Bo Yang.
2020. Geom-gcn: Geometric graph convolutional networks. arXiv preprint
arXiv:2002.05287 (2020).
[39] Ekagra Ranjan, Soumya Sanyal, and Partha Talukdar. 2020. Asap: Adaptive struc-
ture aware pooling for learning hierarchical graph representations. In Proceedings
of the AAAI Conference on Artificial Intelligence, Vol. 34. 5470–5477.
[40] Yu Rong, Wenbing Huang, Tingyang Xu, and Junzhou Huang. 2019. Dropedge:
Towards deep graph convolutional networks on node classification. arXiv preprint
arXiv:1907.10903 (2019).
[41] Kashob Kumar Roy, Amit Roy, AKM Mahbubur Rahman, M Ashraful Amin,
and Amin Ahsan Ali. 2021. Structure-Aware Hierarchical Graph Pooling using
Information Bottleneck. In 2021 International Joint Conference on Neural Networks
(IJCNN). IEEE, 1–8.
[42] Benedek Rozemberczki, Carl Allen, and Rik Sarkar. 2021. Multi-scale attributed
node embedding. Journal of Complex Networks 9, 2 (2021), cnab014.
[43] Oleksandr Shchur, Maximilian Mumme, Aleksandar Bojchevski, and
Stephan Günnemann. 2019. Pitfalls of Graph Neural Network Evaluation.
arXiv:1811.05868 [cs.LG]
[44] Susheel Suresh, Vinith Budde, Jennifer Neville, Pan Li, and Jianzhu Ma. 2021.
Breaking the limit of graph neural networks by improving the assortativity
of graphs with local mixing patterns. In Proceedings of the 27th ACM SIGKDD
Conference on Knowledge Discovery & Data Mining. 1541–1551.
[45] Petar Velickovic, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro
Lio, and Yoshua Bengio. 2017. Graph attention networks. stat1050 (2017), 20.
[46] Petar Veličković, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro
Lio, and Yoshua Bengio. 2017. Graph attention networks. arXiv preprint
arXiv:1710.10903 (2017).
[47] Clement Vignac, Andreas Loukas, and Pascal Frossard. 2020. Building pow-
erful and equivariant graph neural networks with structural message-passing.Advances in neural information processing systems 33 (2020), 14143–14155.
[48] Junfu Wang, Yuanfang Guo, Liang Yang, and Yunhong Wang. 2023. Heterophily-
Aware Graph Attention Network. arXiv preprint arXiv:2302.03228 (2023).
[49] Kun Wang, Guohao Li, Shilong Wang, Guibin Zhang, Kai Wang, Yang You, Xi-
aojiang Peng, Yuxuan Liang, and Yang Wang. 2023. The Snowflake Hypoth-
esis: Training Deep GNN with One Node One Receptive field. arXiv preprint
arXiv:2308.10051 (2023).
[50] Kun Wang, Yuxuan Liang, Xinglin Li, Guohao Li, Bernard Ghanem, Roger Zim-
mermann, Huahui Yi, Yudong Zhang, Yang Wang, et al .2023. Brave the Wind
and the Waves: Discovering Robust and Generalizable Graph Lottery Tickets.
IEEE Transactions on Pattern Analysis and Machine Intelligence (2023).
[51] Kun Wang, Zhengyang Zhou, Xu Wang, Pengkun Wang, Qi Fang, and Yang
Wang. 2022. A2DJP: A two graph-based component fused learning framework
for urban anomaly distribution and duration joint-prediction. IEEE Transactions
on Knowledge and Data Engineering (2022).
[52] Xiao Wang, Houye Ji, Chuan Shi, Bai Wang, Yanfang Ye, Peng Cui, and Philip S Yu.
2019. Heterogeneous graph attention network. In The world wide web conference.
2022–2032.
[53] Yu Wang and Tyler Derr. 2021. Tree decomposed graph neural network. In
Proceedings of the 30th ACM international conference on information & knowledge
management. 2040–2049.
[54] Felix Wu, Amauri Souza, Tianyi Zhang, Christopher Fifty, Tao Yu, and Kilian
Weinberger. 2019. Simplifying graph convolutional networks. In International
conference on machine learning. PMLR, 6861–6871.
[55] Junran Wu, Xueyuan Chen, Ke Xu, and Shangzhe Li. 2022. Structural Entropy
Guided Graph Hierarchical Pooling. In International Conference on Machine Learn-
ing. PMLR, 24017–24030.
[56] Shiwen Wu, Fei Sun, Wentao Zhang, Xu Xie, and Bin Cui. 2022. Graph neural
networks in recommender systems: a survey. Comput. Surveys 55, 5 (2022), 1–37.
[57] Shu Wu, Yuyuan Tang, Yanqiao Zhu, Liang Wang, Xing Xie, and Tieniu Tan. 2019.
Session-based recommendation with graph neural networks. In Proceedings of
the AAAI conference on artificial intelligence, Vol. 33. 346–353.
[58] Zonghan Wu, Shirui Pan, Fengwen Chen, Guodong Long, Chengqi Zhang, and
S Yu Philip. 2020. A comprehensive survey on graph neural networks. IEEE
transactions on neural networks and learning systems 32, 1 (2020), 4–24.
[59] Keyulu Xu, Weihua Hu, Jure Leskovec, and Stefanie Jegelka. 2018. How powerful
are graph neural networks? arXiv preprint arXiv:1810.00826 (2018).
[60] Keyulu Xu, Chengtao Li, Yonglong Tian, Tomohiro Sonobe, Ken-ichi
Kawarabayashi, and Stefanie Jegelka. 2018. Representation learning on graphs
with jumping knowledge networks. In International conference on machine learn-
ing. PMLR, 5453–5462.
[61] Tianmeng Yang, Yujing Wang, Zhihan Yue, Yaming Yang, Yunhai Tong, and Jing
Bai. 2022. Graph pointer neural networks. In Proceedings of the AAAI conference
on artificial intelligence, Vol. 36. 8832–8839.
[62] Zhitao Ying, Jiaxuan You, Christopher Morris, Xiang Ren, Will Hamilton, and Jure
Leskovec. 2018. Hierarchical graph representation learning with differentiable
pooling. Advances in neural information processing systems 31 (2018).
[63] Muhan Zhang and Yixin Chen. 2018. Link prediction based on graph neural
networks. Advances in neural information processing systems 31 (2018).
[64] Muhan Zhang and Yixin Chen. 2019. Inductive matrix completion based on graph
neural networks. arXiv preprint arXiv:1904.12058 (2019).
[65] Zhen Zhang, Jiajun Bu, Martin Ester, Jianfeng Zhang, Zhao Li, Chengwei Yao,
Dai Huifen, Zhi Yu, and Can Wang. 2021. Hierarchical multi-view graph pooling
with structure learning. IEEE Transactions on Knowledge and Data Engineering
(2021).
[66] Xin Zheng, Yixin Liu, Shirui Pan, Miao Zhang, Di Jin, and Philip S Yu. 2022.
Graph neural networks for graphs with heterophily: A survey. arXiv preprint
arXiv:2202.07082 (2022).
[67] Jie Zhou, Ganqu Cui, Shengding Hu, Zhengyan Zhang, Cheng Yang, Zhiyuan Liu,
Lifeng Wang, Changcheng Li, and Maosong Sun. 2020. Graph neural networks:
A review of methods and applications. AI open 1 (2020), 57–81.
[68] Zhengyang Zhou, Gengyu Lin, Kuo Yang, LEI BAI, Yang Wang, et al .2022. GReTo:
Remedying dynamic graph topology-task discordance via target homophily. In
The Eleventh International Conference on Learning Representations.
[69] Jiong Zhu, Ryan A Rossi, Anup Rao, Tung Mai, Nedim Lipka, Nesreen K Ahmed,
and Danai Koutra. 2021. Graph neural networks with heterophily. In Proceedings
of the AAAI conference on artificial intelligence, Vol. 35. 11168–11176.
[70] Jiong Zhu, Yujun Yan, Lingxiao Zhao, Mark Heimann, Leman Akoglu, and Danai
Koutra. 2020. Beyond homophily in graph neural networks: Current limitations
and effective designs. Advances in neural information processing systems 33 (2020),
7793–7804.
3173The Heterophilic Snowflake Hypothesis:
Training and Empowering GNNs for Heterophilic Graphs KDD ’24, August 25–29, 2024, Barcelona, Spain
A DATASETS AND BACKBONES
DESCRIPTIONS.
A detailed description of the datasets and the backbones to enhance
the understanding of our experimental design is placed in the Arxiv
version.
B ALGORITHM TABLE
Algorithm 1: Algorithm workflow of HES
Input :G=(A,X), GNN model 𝑓Θ, Proxy modelP𝑌,
Epoch number 𝑄, GNN layer count 𝐿
1foriteration i in{1,2,···,𝑄}do
2 Forward proxy model and compute ˜Z←P𝑌(A,X)
/* Obtain Homophily mask S */
3 foredge (i,j) inEdo
4𝑆𝑖𝑗←trace(˜𝑧𝑖⊗˜𝑧𝑗)
5 Compute𝑘-hop homophily mask ¤S(𝑘)=¤S𝑘∈R𝑁×𝑁
6 Compute the row sum of homophily masks
𝑠𝑒𝑡{Í
row\diag¤S(𝑘)}={¤S(𝑘)
1,¤S(𝑘)
2...¤S(𝑘)
𝑁}
7 forlayer l in{1,2,···,𝐿}do
/* Note that for presentation clarity, we compute
embeddings for each node individually here. */
8 fornode𝑣𝑖inVdo
9 if¤𝑆(𝑙)
𝑖≤𝜌¤𝑆(1)
𝑖then
/* Before receptive early stopping */
10 h(𝑙)
𝑖←
COMB
h(𝑙−1)
𝑖,AGGR{h(𝑙−1)
𝑗:𝑣𝑗∈N(𝑣𝑖)}
11 else
/* After receptive early stopping */
12 h(𝑙)
𝑗←COMB
h(𝑙−1)
𝑖,∅
13 Compute loss function Eq. 8 and Eq. 11
14 Backward to update GNN 𝑓Θand proxy modelP𝑌
C EXPERIMENTAL SETTINGS
In this section, we report our experimental settings according to
the research questions.
•Main experiments (RQ1). In this setup, we integrate Hetero-S
into mainstream heterophilic GNNs, focusing on non-local neigh-
bor extensions (2 backbones), GNN architecture refinements (6
backbones) and general designs (2 backbones).
•Depth scalability experiments (RQ2). We delve into varying
depths of GNN architectures. The aim is to determine whether the
inclusion of Hetero-S enables these GNNs to maintain or enhance
performance as the network goes deeper, avoiding issues like
vanishing gradients or over-smoothing.
•Comparative analysis with traditional Snowflake Hypothe-
ses (RQ3). Here, we juxtapose Hetero-S with its predecessors,
SnoHv1 and SnoHv2, on heterophilic graphs. The experiment
is tailored to elucidate if Hetero-S presents a more harmonious
alignment with the intricacies of heterophily, potentially leading
to better model interpretations and results.•Efficiency comparison with pruning algorithms (RQ4). We
compare Hetero-S with current SOTA graph sparsification meth-
ods (e.g., UGS [ 8], SNIP [ 29], DSpar [ 35]) with a focus on two key
aspects: (1) whether Hetero-S can achieve the desired sparsity
without performance compromise, and (2) whether Hetero-S can
genuinely accelerate model computations.
D ADDITIONAL RESULTS TO ANSWER RQ1.
In this section, we present additional experiments to answer RQ1.
We have included new experimental results for the DBLP dataset
and provided further training details for selected datasets. Due to
the page limit, we place the detailed appendix in this link.
E ADDITIONAL RESULTS TO SNSWER RQ2.
In this section, we showcase the additional experimental results on
DBLP, CS, Chameleon and Actor four graph bechmark. As shown
in Figure 7, Incorporating the HES algorithm consistently enhances
performance across GCN, GCNII, and SGC models. For example,
the GCN+DBLP model reveals a significant performance peak at a
depth of 8 layers, indicating an optimal balance between model com-
plexity and learning capability. The GCN+CS model consistently
performs well, particularly at lower layer counts, suggesting that
the HES algorithm captures the essential representational features
efficiently, even without deeper network architectures. Moreover,
the GCNII variants benefit more markedly from the integration with
the HES algorithm, especially evident in the Actor and Chameleon
benchmarks. The enhanced performance indicates that the HES
algorithm’s approach to leveraging heterogeneity in data aligns
exceptionally well with the sophisticated architectures of GCNII.
Furthermore, the SGC models also show improvements in perfor-
mance, indicating the HES algorithm’s robustness across different
levels of model complexity. This reaffirms its utility as a versatile
enhancer of graph network effectiveness. Notably, the performance
boosts are not solely dependent on depth but also show a trend of
incremental gains with increasing complexity, up to a point where
performance begins to plateau or slightly decline, highlighting the
HES algorithm’s subtle influence on model.
F PERFORMANCE COMPARISON WITH
CONVENTIONAL SNOH
In this section, we focus on a systematic examination of the perfor-
mance merits and limitations of HES, in contrast to conventional
“snowflake” settings, and the results are available here.
G PARAMETER SENSITIVITY ANALYSIS
In this section, we detail how we determine the filtering threshold
𝜌in all experiments and how 𝜌influences the performance of HES.
In practice, we want to avoid both excessively large 𝜌, as it could
lead to premature removal of too large a receptive field during
early stopping, resulting in suboptimal model performance, and
excessively small 𝜌, as they could cause central nodes to absorb too
much heterophilic information from multi-hop neighbors. There-
fore, we search the most suitable 𝜌in a limited range {1e-2, 1e-4,
1e-6, 1e-8, 1e-16} for all experiments. To further demonstrate how
sensitive our method is to 𝜌, we test the performance of HES on
Squirrel/Chameleon with different filtering threshold settings. As
3174KDD ’24, August 25–29, 2024, Barcelona, Spain Kun Wang et al.
GCN+DBLP
 GCN+CS
GCN+Chameleon
 GCN+Actor
GCNII+DBLP
 GCNII+CS
GCNII+Cha
meleon
GCNII+Actor
SGC+DBLP
 SGC+CS
SGC+Chame
leon
SGC+Actor
Figure 7: The GCN, GCNII, SGC and +❄ results across CS, DBLP, Actor and Chameleon four benchmarks on 2, 4, 8, 16, 32-layer settings.
shown in Table 4, we can observe (1) the optimal performance of
HES requires an appropriate choice of 𝜌. Generally, as 𝜌increases,
HES’s performance often initially improves (corresponding to in-
creased removal of receptive fields), then declines (corresponding
to excessive removal of receptive fields); (2) Overall, HES is rela-
tively insensitive to the choice of 𝜌. For instance, on GCN, HES
performance varies by no more than 1.04% and 1.34%.
Table 4: Parameter sensitivity on filtering threshold 𝜌. We report
the performance with HES under 4-layer settings with different 𝜌.
Squirrel 1e-2 1e-4 1e-6 1e-8 1e-16
GCN+❄ 55.18 56.20 55.52 55.78 54.74
MixHop+❄ 55.42 56.88 55.46 55.20 54.82
JKNet+❄ 59.77 60.11 60.08 60.02 58.55
MGNN+❄ 45.65 46.81 47.85 47.23 47.56
Chameleon 1e-2 1e-4 1e-6 1e-8 1e-16
GCN+❄ 62.25 63.11 63.38 63.23 62.34
MixHop+❄ 67.74 69.04 68.78 69.08 67.22
JKNet+❄ 70.17 70.38 72.37 71.69 70.55
MGNN+❄ 60.19 62.09 61.76 61.92 60.83
H CASE STUDY
In this section, we endeavor to investigate the efficacy of Hetero-S
from a micro-perspective through the analysis of two case studies.
We choose the superpixel graphs of MNIST [ 27] and Squirrel as
benchmarks to observe the visualized outcomes. The detailed results
are in this link.
I RELATED WORK
More discussions on related work can also be found here.
J PROOF
In this subsection, we present a detailed proof. The notation
EA∼𝑆𝐵𝑀(𝑝,𝑞)[·]represents the expected pattern of the adjacency
matrix. As depicted in main part, considering in subsequent layers,
the HES algorithm is applied such that 𝑝remains constant whileheterophilic nodes are pruned, thus reducing 𝑞, the product of the
smallest eigenvalues of EA∼𝜓(𝑁,𝑝,𝑞)[G]is given by:
Π𝐿
𝑖=11−𝑝(𝑖)
(𝑁−1)𝑝(𝑖)+𝑁𝑞(𝑖)+1=Π𝐿
𝑖=1©­­
«1−𝑁
𝑝(𝑖)+𝑞(𝑖)
 1−𝑝(𝑖)+𝑁 𝑝(𝑖)+𝑞(𝑖)ª®®
¬
(18)
Consider the case 𝑝>𝑞are both functions of 𝑁,𝑖, and suppose
𝑝=1/((𝑁−1)∗𝑖2),𝑞=1/(𝑁∗𝑖2). In this scenario, as the layer depth
increases, both 𝑝and𝑞undergo decay, yet maintain the condition
𝑝>𝑞. Consequently, the product of the smallest eigenvalues can
be expressed as:
Ψ(𝐿)=Π𝐿
𝑖=1(𝑁−1)𝑖2−1
(𝑁−1)𝑖2+2(𝑁−1)(19)
While the network goes infinitely deep, a.k.a,𝐿→∞ , the infinite
product of the smallest eigenvalues can be calculated as follows:
Ψ(𝐿)=Π𝐿
𝑖=1(𝑁−1)𝑖2−1
(𝑁−1)(𝑖2+2)
=√
2𝜋csch(√
2𝜋)(1−1√
𝑁−1)𝐿(1+1√
𝑁−1)𝐿1
Γ(𝐿−𝑖√
2+1)Γ(𝐿+𝑖√
2+1)
≈√
2𝑁csch(√
2𝜋)sin(𝜋/√
𝑁)
(20)
where csch(·)denotes the hyperbolic cosecant function, Γ(·)de-
notes the Gamma function and (𝑎)𝐿=𝑎(𝑎+1)...(𝑎+𝐿−1)denotes
the Pochhammer Symbol. When the network goes infinitely deep,
the value of the infinite product asymptotically approaches a non-
zero value√
2𝑁csch(√
2𝜋)sin(𝜋/√
𝑁), which concludes the proof.
We posit that this phenomenon is not solely confined to bi-
nary classification contexts. Even in multi-class scenarios, a similar
pattern is observed. Utilizing the HES algorithm, we can adeptly fa-
cilitate the divergence of the GNTK, as opposed to its convergence
to zero, thereby enhancing the efficacy of network training.
3175