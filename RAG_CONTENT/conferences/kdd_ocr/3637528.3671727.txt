Efficient and Effective Anchored Densest Subgraph Search: A
Convex-programming based Approach
Xiaowei Ye
Beijing Institute of Technology
Beijing, China
yexiaowei@bit.edu.cnRong-Hua Li
Key Laboratory of Intelligent Supply
Chain Technology, Longgang District,
Shenzhen; Beijing Institute of
Technology, Beijing, China
lironghuabit@126.comLei Liang
Ant Group
Hangzhou, China
leywar.liang@antgroup.com
Zhizhen Liu
Ant Group
Hangzhou, China
zhizhen.lzz@antgroup.comLonglong Lin
Southwest University
Chongqing, China
longlonglin@swu.edu.cnGuoren Wang
Beijing Institute of Technology
Beijing, China
wanggrbit@gmail.com
Abstract
The quest to identify local dense communities closely connected
to predetermined seed nodes is vital across numerous applications.
Given the seed nodes 𝑅, the R-subgraph density of a subgraph 𝑆is
defined as traditional graph density of 𝑆with penalties on the nodes
in𝑆\𝑅. The state-of-the-art (SOTA) anchored densest subgraph
model, which is based on R-subgraph density, is designed to address
the community search problem. However, it often struggles to effi-
ciently uncover truly dense communities. To eliminate this issue,
we propose a novel NR-subgraph density metric, a nuanced measure
that identifies communities intimately linked to seed nodes and also
exhibiting overall high graph density. We redefine the anchored
densest subgraph search problem through the lens of NR-subgraph
density and cast it as a Linear Programming (LP) problem. This al-
lows us to transition into a dual problem, tapping into the efficiency
and effectiveness of convex programming-based iterative algorithm.
To solve this redefined problem, we propose two algorithms: FDP,
an iterative method that swiftly attains near-optimal solutions, and
FDPE , an exact approach that ensures full convergence. We perform
extensive experiments on 12 real-world networks. The results show
that our proposed algorithms not only outperform the SOTA meth-
ods by 3.6~14.1 times in terms of running time, but also produce
subgraphs with superior internal quality.
CCS Concepts
•Theory of computation →Graph algorithms analysis.
Keywords
Densest subgraph, Community search, Graph mining
ACM Reference Format:
Xiaowei Ye, Rong-Hua Li, Lei Liang, Zhizhen Liu, Longlong Lin, and Guoren
Wang. 2024. Efficient and Effective Anchored Densest Subgraph Search:
A Convex-programming based Approach. In Proceedings of the 30th ACM
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ’24, August 25–29, 2024, Barcelona, Spain
©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671727SIGKDD Conference on Knowledge Discovery and Data Mining (KDD ’24),
August 25–29, 2024, Barcelona, Spain. ACM, New York, NY, USA, 12 pages.
https://doi.org/10.1145/3637528.3671727
1 Introduction
The global community search problem is a fundamental network
analysis task, which aims at uncovering allcommunities with
strong internal cohesiveness [ 10,18,32,38,41]. A notable vari-
ant of this problem is the local community search, which focuses
on discovering a specific community that is highly correlated with
the user-initiated seed nodes. The significance of the local com-
munity search is underscored by its diverse practical applications,
such as recommender systems [ 22,50], detecting spammers [ 47],
inferring user attributes [ 35], and identifying protein complexes
[40]. Therefore, the body of research dedicated to the local commu-
nity search spans over a decade and encompasses numerous studies
[3, 8, 15, 16, 19, 26, 29, 39, 42, 44–46, 49].
Global community search is concerned with optimizing certain
global properties to ensure high-quality target communities. For
instance, the densest subgraph search is a representative model
within this domain. Given a graph 𝐺(𝑉,𝐸), a subgraph 𝑆is con-
sidered the densest when it exhibits the maximum graph density
(𝜌(𝑆)=|𝐸(𝑆)|
|𝑆|), signifying an exceptionally interconnected com-
munity. In contrast to the global community search problem, local
community search problems incorporate the principle of locality,
which evaluates the degree of overlap with the predetermined seed
nodes. To illustrate, we assume that 𝑅is the seed set, the local con-
ductance [39,46] of a community 𝑆is assessed based on the overlap
score between 𝑆and𝑅[46]. The state-of-the-art (SOTA) model is
theAnchored Densest Subgraph [16], which optimizes R-subgraph
density metric (Definition 2.1) and forces the nodes in 𝐴⊆𝑅(𝐴
is a given parameter) are included in the result. Unlike traditional
density measures, R-subgraph density imposes a penalty on nodes
that fall outside 𝑅, reinforcing the significance of the seed nodes in
determining the community structure.
Although R-subgraph density accounts for the relationship be-
tween the identified local community and the seed set, it often
suffers from the dilemma that the identified communities do not
retain favorable global properties well. For instance, as illustrated
in Figure 1(b) with 𝑅={𝑢1,𝑢2,𝑢3}, the subgraph that maximizes
the R-subgraph density is the seed set 𝑅itself. This situation ex-
emplifies a limitation that the subgraph identified with the largest
3907
KDD ’24, August 25–29, 2024, Barcelona, Spain Xiaowei Ye et al.
𝑢7𝑢2𝑢3 𝑢4
𝑢5 𝑢6 𝑢0𝑢1
Maximum R -subgraph density
Maximum NR -subgraph density
(a)𝑅={𝑢3},𝐴={𝑢3}
𝑢7𝑢2𝑢3 𝑢4
𝑢5 𝑢6 𝑢0𝑢1
Maximum NR -subgraph densityMaximum R -subgraph density (b)𝑅={𝑢1,𝑢2,𝑢3},𝐴={𝑢3}
Figure 1: Our motivation: The red nodes are the seed nodes 𝑅.
The traditional R-subgraph density metric makes it hard for
the subgraphs (in green boxes) to contain nodes with large
degrees even though these nodes are very much related to 𝑅.
The proposed metric NR-subgraph density has no this limita-
tion, and can identify the more reasonable and interpretive
community around 𝑅(in blue boxes).
R-subgraph density may fail to be a cohesive community (i.e., poor
graph density). The reason why R-subgraph density has this short-
coming is that each node 𝑢in𝑆\𝑅has a penalty of the degree of 𝑢.
Thus, the nodes with large degrees are not expected to be included
in the subgraph with large R-subgraph density. The absence of large
degrees nodes makes the subgraphs with large R-subgraph den-
sity sparse. In Figure 1 (a) and Figure 1(b), the subgraphs with the
maximum largest R-subgraph density fail to identify {𝑢0,𝑢1,...,𝑢 5}
because the nodes out of 𝑅have large degrees. To address the limi-
tations of existing local density metrics such as R-subgraph density,
we propose an innovative metric named NR-subgraph density (Sec-
tion 3.1). In NR-subgraph density, the penalty of each node 𝑢in
𝑆\𝑅is the number of neighbors in the community 𝑆instead of
the whole graph like R-subgraph density. Thus, for a community
𝑆with high NR-subgraph density, the nodes are naturally related
to𝑅. Further, NR-subgraph density is a closer lower bound to the
traditional density when compared to R-subgraph density (Theo-
rem 3.3), making subgraphs that achieve high NR-subgraph density
demonstrate high traditional density. As a consequence, this cor-
relation confirms that NR-subgraph density is valid in identifying
densely connected communities.
While NR-subgraph density offers a compelling advantage in
community search, the search for the subgraph with the maximum
NR-subgraph density and anchored nodes 𝐴raises significant chal-
lenges. Firstly, incorporating the requirement that certain nodes
𝐴⊆𝑅must be included in the resulting subgraph introduces a
layer of complexity not encountered in traditional global optimiza-
tion problems. This requirement complicates the problem formu-
lation as one that is amenable to convex optimization approaches.
Secondly, the well-known Frank-Wolfe algorithm [ 28], which is
adept at solving the densest subgraph problem in a global context,
does not readily translate to the local domain where NR-subgraph
density operates. To overcome these challenges, in this paper, we
formulated the anchored densest subgraph search problem based
on NR-subgraph density as a convex programming problem. In
particular, this transformation allows us to leverage the powerful
Frank-Wolfe optimization method, ultimately leading to the devel-
opment of the FDP algorithm (Algorithm 5.2). Impressively, FDP
can reach a nearly optimal solution within just a few iterations.
On top of that, we introduce an exact algorithm FDPE (Algorithm
2), which continues to run FDP until convergence is achieved. We
develop a maximum-flow algorithm to verify whether FDP hasconverged to the optimum. FDPE necessitates the execution of
the maximum-flow algorithm a small number of times. Both FDP
andFDPE exhibit local time and space complexity, rendering them
highly scalable and exceedingly efficient for processing large-scale
datasets. We highlight our main contributions as follows:
One novel NR-subgraph density metric. We present a new NR-
subgraph density metric, a significant advancement that refines
the community search problem by incorporating the concept of
locality while still capturing essential global cohesive properties
within network structures. This metric adds a nuanced perspective
to the identification of communities in relation to a set of seed
nodes, offering a more targeted approach to community detection.
Two Efficient algorithms. We formulate the anchored densest
subgraph problem based on NR-subgraph density as a Linear Pro-
gramming ( LP) problem. This formulation leads to the transforma-
tion of the LPproblem into its dual form, allowing us to develop
two novel and efficient algorithms: the Frank-Wolfe based FDP
algorithm, which iterates to near-optimal solutions, and FDPE , an
exact algorithm that operates until true convergence is achieved.
This contribution is crucial as it presents a methodology that over-
comes the computational limitations encountered in prior models
and offers a more efficient optimization framework.
Extensive experiments. To validate the effectiveness and ef-
ficiency of our proposed metrics and algorithms, we have con-
ducted extensive experiments on 12 real-world networks. The re-
sults demonstrate that: (1) FDP outperforms the SOTA methods by
at least one order of magnitude, and (2) FDPE can also be several
times faster than the SOTA methods. Furthermore, the subgraphs
identified with the largest NR-subgraph density exhibit high qual-
ity, reinforcing the effectiveness of our novel NR-subgraph density
metric. These experimental results decisively demonstrate that
FDP andFDPE are not only efficient but also effective. For repro-
ducibility purpose, the source code of our work is available at
https://github.com/LightWant/nrdensity.
2 Preliminaries
We consider an unweighted and undirected graph 𝐺(𝑉,𝐸), where
𝑉is the set of nodes and 𝐸is the set of edges. The graph comprises
𝑛=|𝑉|nodes and𝑚=|𝐸|edges. Each edge 𝑒(𝑢,𝑣)is a connection
between𝑢and𝑣. The neighbors of 𝑢in graph𝐺(𝑉,𝐸)is𝑁(𝑢,𝑉).
Given a node set 𝑆, we denote 𝐺(𝑆,𝐸(𝑆))as the induced subgraph
of𝑆, where𝐸(𝑆)={𝑒(𝑢,𝑣)|𝑒∈𝐸,𝑢∈𝑆,𝑣∈𝑆}. We abuse 𝑆
to represent 𝐺(𝑆,𝐸(𝑆))if the context is clear. The density of a
subgraph𝑆is defined as 𝜌(𝑆)=|𝐸(𝑆)|
|𝑆|. Below, we introduce the
definition of R-subgraph density [ 16], which was used for detecting
the anchored densest subgraph.
Definition 2.1 (R-subgraph density [ 16]).Given a graph 𝐺(𝑉,𝐸)
and a set of nodes 𝑅⊆𝑉, the R-subgraph density of a node set
𝑆⊆𝑉is
𝜌𝑅(𝑆)=2|𝐸(𝑆)|−Í
𝑢∈𝑆\𝑅|𝑁(𝑢,𝑉)|
|𝑆|. (1)
R-subgraph density incorporates the seed set 𝑅to evaluate the lo-
calized density of a subgraph. With the penalty itemÍ
𝑢∈𝑆\𝑅|𝑁(𝑢,𝑉)|,
the nodes with large |𝑁(𝑢,𝑉)|tends not to be included in the sub-
graphs with large R-subgraph density. For example, as shown in
Figure 1(a), the subgraph with the maximum R-subgraph density is
simply𝑆={𝑢3}, yielding a R-subgraph density value of 𝜌𝑅(𝑆)=0.
3908Efficient and Effective Anchored Densest Subgraph Search: A Convex-programming based Approach KDD ’24, August 25–29, 2024, Barcelona, Spain
The subgraphs that include nodes with a larger number of neigh-
bors have a negative R-subgraph density value. For instance, if 𝑆
is expanded to include 𝑢1,𝑢2,𝑢3, and𝑢4, the R-subgraph density
drops to𝜌𝑅(𝑆)=2×5−(3+4+4)
4=−1
4. Figure 1(b) has a similar trend.
Anchored Densest Subgraph Search ( ADSS [16]).Given a graph
𝐺(𝑉,𝐸)and two node sets 𝐴,𝑅with𝐴⊆𝑅⊆𝑉,ADSS is to find the
subgraph𝑆∗
ADSScontaining𝐴, satisfying𝑆∗
ADSShas the maximum
R-subgraph density. Formally, we have
𝑆∗
ADSS=arg max
𝑆:𝐴⊆𝑆⊆𝑉𝜌𝑅(𝑆) (2)
Frank-Wolfe method. The Frank-Wolfe method is widely used for
constrained primal-dual convergence problems [ 28]. Several previ-
ous works [ 11,33,34,43] have employed the Frank-Wolfe method
for the densest subgraph problem, which seeks a subgraph with the
highest density, as denoted by arg max𝑆⊆𝑉𝜌(𝑆). This problem is
modeled as a convex optimization problem in these studies, with the
Frank-Wolfe algorithm being utilized to locate the optimal solution.
Algorithms based on the Frank-Wolfe method are both efficient and
effective in identifying the densest subgraph, which are recognized
as the current SOTA methods for the densest subgraph problem.
3 A new local density metric
The subgraph with the maximum R-subgraph density often omits
nodes that have a large number of neighbors, leading to the sub-
graph with the maximum R-subgraph density being a sparse com-
munity. Further, the ADSS problem is very hard to model as a con-
vex programming problem due to the penalty item of R-subgraph
density and anchored nodes, resulting in the efficient Frank-Wolfe
method not being applied. To overcome these issues, we propose a
new local density metric, called NR-subgraph density in Definition
3.1. The new metric does not repel high-degree nodes and the ADSS
problem based on the NR-subgraph density is a convex program-
ming problem. Moreover, we show that the subgraph identified
based on the NR-subgraph density is denser than that based on the
R-subgraph density in our empirical results.
Definition 3.1 (NR-subgraph density). Given a graph 𝐺(𝑉,𝐸)and a
node set𝑅⊆𝑉, the NR-subgraph density of a node set 𝑆⊆𝑉is
𝜌+
𝑅(𝑆)=2|𝐸(𝑆)|−Í
𝑢∈𝑆\𝑅|𝑁(𝑢,𝑆)|
|𝑆|(3)
Compared to R-subgraph density, NR-subgraph density modifies
the neighborhood function by shifting from 𝑁(𝑢,𝑉)to𝑁(𝑢,𝑆),
placing a stronger emphasis on the internal structure of the sub-
graph, thus enhancing the measure of density.
Example 3.2. In Figure 1, based on the new NR-subgraph density
metric, we can identify the subgraph 𝑆∗={𝑢0,𝑢1,...,𝑢 5}as having
the maximum NR-subgraph density for both seed sets 𝑅={𝑢3}
and𝑅={𝑢1,𝑢2,𝑢3}. Specifically, in Figure 1(a), the NR-subgraph
density value for 𝑆∗when𝑅={𝑢3}is calculated as 𝜌+
𝑅(𝑆∗)=
2×12−(4+3+4+4+4)
6=5
6. Similarly, in Figure 1(b), when 𝑅={𝑢1,𝑢2,𝑢3},
the NR-subgraph density for 𝑆∗is𝜌+
𝑅(𝑆∗)=2×12−(4+4+4)
6=2. In
Figure 1(a), the community with the highest R-subgraph density
has a conductance of 5, whereas that of NR-subgraph density is
1. It is similar in Figure 1(b). These examples clearly illustrate the
superiority of our new metric.
Anchored Densest Subgraph Search based on NR-subgraph
density ( ADSS+ ).Given a graph 𝐺(𝑉,𝐸)and two node sets 𝐴and𝑅with𝐴⊆𝑅⊆𝑉,ADSS+ is to find the subgraph 𝑆∗
ADSS+
containing𝐴, satisfying 𝑆∗
ADSS+has the maximum NR-subgraph
density. Formally, we have
𝑆∗
ADSS+=arg max
𝑆:𝐴⊆𝑆⊆𝑉𝜌+
𝑅(𝑆). (4)
For any given subgraph 𝑆, we can easily derive that 2𝜌(𝑆)≥
𝜌+
𝑅(𝑆) ≥𝜌𝑅(𝑆), as detailed in Theorem 3.3. This indicates that
NR-subgraph density serves as a more precise lower bound of the
graph density in comparison to R-subgraph density, tightening the
correlation between the local and overall density metrics. Due to the
space limits, all the missing proofs can be found in the Appendix.
Theorem 3.3. For any subgraph 𝑆,2𝜌(𝑆)≥𝜌+
𝑅(𝑆)≥𝜌𝑅(𝑆)holds.
Remark. It is worth remarking that if there are nodes in the set
difference𝑆\𝑅that are connected to nodes in 𝑉\𝑆, we can deduce
that𝜌+
𝑅(𝑆)>𝜌𝑅(𝑆). This is because there will be at least one
node satisfying|𝑁(𝑢,𝑆)|<|𝑁(𝑢,𝑉)|. Clearly, such a condition is
easy to meet in practice, making our metric is strictly better than
the NR-subgraph density. Empirical results from our experiments
demonstrate that 𝜌(𝑆∗
ADSS+)is significantly larger than 𝜌(𝑆∗
ADSS).
4 An LPformulation
In this section, we show that the ADSS+ can be formulated as a
linear program problem, denoted by LP. The optimal solution of LP
can be directly correlated with the optimal subgraph 𝑆∗. Specifically,
we establish the following LPfor the ADSS+ problem based on the
NR-subgraph density metric.
[LP] max∑︁
𝑒∈𝐸𝑤𝑒𝑥𝑒 𝑠.𝑡.
𝐶0:𝑤𝑒=∑︁
𝑢∈𝑒1[𝑢∈𝑅] ∀ 𝑒∈𝐸
𝐶1:𝑥𝑒=min𝑢∈𝑒𝑦𝑢,∀𝑒∈𝐸
𝐶2:∑︁
𝑢∈𝑉𝑦𝑢=1
𝐶3:𝑦𝑢=max
𝑣∈𝑉𝑦𝑣∀𝑢∈𝐴
𝐶4:𝑥𝑒≥0,𝑦𝑢≥0∀𝑒∈𝐸,∀𝑢∈𝑉(5)
Below, we explain the relationship between LPandADSS+.
Lemma 4.1. Given a subgraph 𝑆, we have𝜌+
𝑅(𝑆)·|𝑆|=Í
𝑒∈𝐸(𝑆)𝑤𝑒,
where𝑤𝑒is defined in 𝐶0ofLP.
Lemma 4.1 gives the meaning of 𝑤𝑒inLP.𝑤𝑒is the weight
of edge𝑒in the definition of NR-subgraph density. NR-subgraph
density is the total weight of edges divided by the number of nodes,
which is a classic form of weighted density.
Lemma 4.2. Let𝑦be a feasible solution of LP. Let𝑥be the vector
produced by 𝑦, i.e.𝑥𝑒=min𝑢∈𝑒𝑦𝑢(𝐶1ofLP). If𝑆={𝑢|𝑦𝑢>0}, we
have𝐸(𝑆)={𝑒|𝑥𝑒>0}.
Lemma 4.2 establishes that any feasible solution of the linear
program LPcorresponds to a subgraph. More precisely, the nodes of
the subgraph are represented by the positive entries in the solution
vector𝑦. This correlation also elucidates the purpose of constraint
𝐶3within LP.𝐶3forces the nodes in the set of anchored nodes 𝐴
having positive entries, ensuring that 𝐴is included in 𝑆.
Lemma 4.3. Given a subgraph 𝑆that𝐴⊆𝑆, there exists a feasible
solution of LPto make the value of the objective function be 𝜌+
𝑅(𝑆).
3909KDD ’24, August 25–29, 2024, Barcelona, Spain Xiaowei Ye et al.
Lemma 4.3 gives a map from a subgraph 𝑆to a feasible solution
LP. The value of the objective function with respect to (w.r.t.) the
mapped feasible solution is exactly the NR-subgraph density of 𝑆.
Lemma 4.4. Given a feasible solution 𝑦with the objective function
value𝑣𝑦, there exists at least a subgraph 𝑆⊆𝑉such that𝜌+
𝑅(𝑆)≥𝑣𝑦.
Leveraging Lemma 4.3 and Lemma 4.4, we can establish that
there exists a one-to-one correspondence (i.e., bijection) between
the optimal solution of the linear program LPand the optimal
subgraph𝑆∗, as shown in Theorem 4.5. This bijection ensures that
each optimal solution to LPuniquely maps to an optimal subgraph
𝑆∗, and vice versa.
Theorem 4.5. Assuming that 𝑦∗is the optimal solution of LP, we
can derive that 𝑦∗⇔𝑆∗
ADSS+.
Designing an efficient algorithm to solve LPdirectly is not straight-
forward. To circumvent this challenge, we have developed a Frank-
Wolfe based approach to converge on the optimal solution 𝑦∗. This is
achieved by applying the Frank-Wolfe method to the dual problem
ofLP, allowing us to compute the solution indirectly but efficiently.
5 The Frank-Wolfe based algorithm
In this section, we propose a Frank-Wolfe based approximation
algorithm FDP.FDP is tailored to find an approximate solution of
LPfrom the dual perspective. A key advantage of FDP is that its
time and space complexity are linear w.r.t. the size of the subgraph
𝑅′which is such that each node in 𝑅′has at least one neighbor in
𝑅. On top of that, we also develop an exact algorithm to solve the
ADSS+ problem by integrating FDP with a novel maximum-flow
based technique, named FDPE . The time and space complexity of
FDPE is also local to the size of 𝑅′.
5.1 DP: The Dual of LP
Here, we derive the dual of LPthat was previously formulated in
Equation 5.
Theorem 5.1. LetLPbe the linear program in Equation 5, the
dual of LPis formalized as follows.
[DP] min∥𝑟+𝛽∥𝑠.𝑡.
𝐷0: 𝑟𝑢=∑︁
𝑒:𝑢∈𝑒𝛼𝑒
𝑢∀𝑢∈𝑉
𝐷1: 𝛼𝑒
𝑢≥0∀𝑢∈𝑒∈𝐸
𝐷2:∑︁
𝑢∈𝑒𝛼𝑒
𝑢=𝑤𝑒∀𝑒∈𝐸
𝐷3: 𝛽𝑢=0∀𝑢∉𝐴
𝐷4:𝑟𝑢+𝛽𝑢=max
𝑢∈𝑉(𝑟𝑢+𝛽𝑢) ∀𝑢∈𝐴(6)
Below, we provide some properties of DP. Let𝛼∗and𝛽∗be the
optimal solution of DP. Let𝑟∗be the vector computed from 𝛼∗
according to 𝐷0ofDP. Let𝑆∗represent𝑆∗
ADSS+for short.
Lemma 5.2. For each𝑢∉𝐴, we have𝛽∗𝑢=0.
Lemma 5.2 is easy to prove by 𝐷3. Thus, the nodes in 𝑆∗\𝐴are
all zeros in𝛽∗.
Theorem 5.3. Let𝑟be a feasible solution of DP, we can derive
that max𝑢∈𝑉𝑟𝑢is the upper bound of 𝜌+
𝑅(𝑆∗).
Theorem 5.3 can help to bound the error of the proposed FDP
algorithm, which will be explained in Section 5.2.Algorithm 1: Frank-Wolfe Based Algorithm (FDP)
Input: The graph𝐺(𝑉,𝐸),𝑅,𝐴, number of iterrations 𝑇
Output: ˆ𝑆∗: the approximation solution of 𝑆∗;𝜖: the error bound
such that𝜌+
𝑅(𝑆∗)/𝜌+
𝑅(ˆ𝑆∗)≤1+𝜖
1𝑟(𝑢)← 0,∀𝑢∈𝑉;
2𝛽(𝑢)← 0,∀𝑢∈𝑉;
3for𝑡←1,2,...,𝑇 do
4 foreach𝑒∈𝐸with𝑤𝑒>0do
5𝑈𝑚𝑖𝑛←arg min𝑢∈𝑒𝑟(𝑢)+𝛽(𝑢);
6𝑟(𝑢)←𝑟(𝑢)+𝑤𝑒/|𝑈𝑚𝑖𝑛|,∀𝑢∈𝑈𝑚𝑖𝑛;
7𝑣𝑚𝑎𝑥←max𝑢∈𝑉(𝑟(𝑢)+𝛽(𝑢));
8 for𝑢∈𝐴do
9𝛽(𝑢)←𝑣𝑚𝑎𝑥−𝑟(𝑢);
10Sort𝑉by𝑟(𝑢)+𝛽(𝑢);
11Denote by𝑉𝑖the previous 𝑖nodes of𝑉;
12ˆ𝑆∗=arg max𝑉𝑖𝜌+
𝑅(𝑉𝑖);/*implemented in linear time. */
13𝜖=max𝑢∈𝑉𝑟(𝑢)/𝑇
𝜌+
𝑅(ˆ𝑆∗)−1;
14return ˆ𝑆∗,𝜖;
Theorem 5.4. The optimal solution of DPmaps to𝑆∗.
Combining Theorem 5.3 and 5.4, we obtain a clear understanding
of𝑟∗+𝛽∗. (1) The nodes in the anchored set 𝐴have the maximum
value in𝑟∗+𝛽∗(according to 𝐷4and the proof of Theorem 5.4
in appendix). (2) For the nodes in 𝑆∗\𝐴, they also achieve the
maximum value in 𝑟∗+𝛽∗, with𝛽∗𝑢=0. (3) Nodes that are not part
of the optimal subgraph 𝑆∗have a smaller value in 𝑟∗+𝛽∗.
Compared to LP,DPapproaches the ADSS+ problem from a
different mathematical angle. In DP,𝛼𝑒𝑢represents the allocation
of weight𝑤𝑒to node𝑢.𝛽𝑢serves as an adjustment to ensure in-
clusion of nodes from the anchored set 𝐴in the solution. 𝛽can
be understood as a mechanism that adjusts the “attractiveness” or
“penalty” for the anchored nodes.
5.2 FDP: Frank-Wolfe Based Algorithm
The key idea of our algorithm lies in the fact that minimizing the
norm min∥𝑟+𝛽∥is equivalent to minimizing the square of the norm
min∥𝑟+𝛽∥2=Í
𝑢(𝑟𝑢+𝛽𝑢)2. It is a well-understood principle that
the more evenly distributed the values of 𝑟+𝛽are, the smaller
the sum of their squares will be. Therefore, our goal is to evenly
distribute the weight of edges among the nodes (by computing 𝛼and
𝑟) while adjust the weight for the anchored set 𝐴(by computing 𝛽).
We strive to balance the total assigned weight across all nodes ( 𝑟𝑢+
𝛽𝑢) as evenly as possible. This evenly distributed weight assignment
leads to the desired minimization of min∥𝑟+𝛽∥2.
With the above observations, we design Algorithm 1 to show
how Frank-Wolfe based algorithm FDP works. Algorithm 1 inputs a
graph𝐺(𝑉,𝐸), an integer𝑇, and outputs an(1+𝜖)-approximation of
the subgraph with the maximum NR-subgraph density. Algorithm 1
maintains two vectors 𝑟and𝛽(line 1 and line 2). Notably, the
algorithm opts for vector 𝑟in place of𝛼. To make the distribution
of𝑟+𝛽as even as possible, Algorithm 1 tries to assign the weight to
the nodes with the smallest value of 𝑟𝑢+𝛽𝑢. According to 𝐷2ofDP,
the weight of edge 𝑒can only be assigned to the nodes in 𝑒. As a
result, the weight of each edge 𝑒is averagely assigned to the nodes
in𝑒with the smallest 𝑟(𝑢)+𝛽(𝑢)(lines 4-6). To make sure the nodes
in𝐴are contained in the result, update them to the maximum value.
3910Efficient and Effective Anchored Densest Subgraph Search: A Convex-programming based Approach KDD ’24, August 25–29, 2024, Barcelona, Spain
It is also an implementation of 𝐷4ofDP(lines 7-9). Then, the nodes
with the larger weight are ranked higher (line 10). The nodes with
larger rank has larger priority to be in the result (line 12). Note that
𝜌+
𝑅(𝑉𝑖)can be computed in constant time from 𝜌+
𝑅(𝑉𝑖−1), thus the
time complexity of line 12 is linear. At last, the largest entry of 𝑟/𝑇
is treated as an upper bound of 𝜌+
𝑅(𝑆∗), which we will also describe
in Lemma 5.6 (line 13). Next, we give the technical analysis of FDP.
Correctness. We analyzed the correctness of FDP as follows.
Lemma 5.5. ˆ𝑆∗is the node set returned by Algorithm 1, 𝐴⊆ˆ𝑆∗.
Lemma 5.6. 𝜖is the decimal returned by Algorithm 1, we have
that𝜖is a correct error bound.
Lemma 5.7. Algorithm 1 is an implementation of the Frank-Wolfe
method for DP.
Theorem 5.8. Algorithm 1 is a correct solver of DP.
Proof sketch : By Lemmas 5.5, 5.6 and 5.7, we can prove the theorem.
Local complexity. The time and space complexity of Algorithm 1
is local, i.e. it is independent of the whole graph.
Theorem 5.9. Let𝐸′be the set of edges with at least one node in
𝑅, and let𝑚′=|𝐸′|. Let𝑛′be the number of nodes in the subgraph
induced by𝐸′. The time complexity of Algorithm 1 is 𝑂(𝑇𝑚′). The
space complexity of Algorithm 1 is 𝑂(𝑛′+𝑚′).
Theorem 5.9 shows that the time complexity of the Algorithm 1 is
upon𝑅. Consequently, Algorithm 1 does not necessitate the loading
of the complete network in implementation, which demonstrates
efficiency in both time and space.
Guarantees on convergence in sub-linear iterations. We ana-
lyze the expected number of iterations to reach a required qualified
solution. The result is that FDP converges fast because the fact that
𝑤𝑒≤2, by which we can bound the curvature constant (details see
Appendix B, Theorem B.1) of the objective function.
Lemma 5.10. Let𝑚′be the count of edges with at lest one side
in𝑅. The curvature constant of the objective function of DPis
𝐶𝑓=Í
𝑒𝑤𝑒2≤4𝑚′.
Theorem 5.11. Let𝑓be the objective function of DP. Let𝛼∗and
𝛽∗be the optimal solution. Let 𝑡be the number of iterations. In FDP,
it has𝑓(𝛼(𝑡),𝛽(𝑡))−𝑓(𝛼∗,𝛽∗)≤𝐶𝑓
𝑡≤4𝑚′
𝑡.
Theorem 5.11 indicates that FDP has a nice converge rate. Indeed,
as shown in our experiments (Section 6), FDP can achieve a near-
optimal solution in only one iteration.
In practice, the performance of our proposed algorithms depends
on the quality of the seed set, which is a common problem for the
local community search algorithms. The seeds serve as the starting
nodes for the detection and expansion into full communities. The
effectiveness of these algorithms is affected by how well the seed
nodes represent the communities of interest.
5.3 FDPE: FDPBased Exact Algorithm
In this subsection, we propose a FDP based exact algorithm, named
FDPE (Algorithm 2). As shown in Theorem 5.8, FDP can reach the
exact result when 𝑇is sufficiently large. Therefore, FDPE embodies
an iterative process that continues to execute FDP until conver-
gence is attained, yielding an accurate result.Algorithm 2: FDP Based Exact Algorithm (FDPE)
Input: The graph𝐺(𝑉,𝐸),𝑅,𝐴, number of iterations 𝑇
Output:𝑆∗: the subgraph with the maximum 𝜌+
𝑅(𝑆)
1𝐸′←{𝑒∈𝐸|𝑤𝑒>0};
2repeat
3 ˆ𝑆∗,𝜖←FDP(𝐺,𝑅,𝐴,𝑇);
4until isStableSubset( ˆ𝑆∗) and
maxflow(ˆ𝑆∗,𝑅,𝐴,𝐸′)=Í
𝑢∈ˆ𝑆∗|𝑁(𝑢,𝑅∩ˆ𝑆∗)|;
5return ˆ𝑆∗;
𝑢3
𝑢5𝑢1
s t ∞1
122
11
1
1minimum cut
𝑢3
𝑢5𝑢1𝑹∩෢𝑺∗
A
Figure 2: An example of the flow network
To verify the optimality of the subgraph ˆ𝑆∗identified by FDP,
FDPE employs the “stable subset” technique [ 17] (the details of
the stable subset are stated in Appendix C) along with a newly
proposed technique based on maximum flow. The role of the stable
subset technique is to ensure that the true optimal subgraph 𝑆∗is
contained within the candidate subgraph ˆ𝑆∗. Following this contain-
ment check, FDPE applies the maximum-flow based technique to
ascertain whether there is any subgraph 𝑆′strictly contained within
ˆ𝑆∗that has a higher NR-subgraph density, i.e., 𝜌+
𝑅(𝑆′)>𝜌+
𝑅(ˆ𝑆∗). If
no such subgraph 𝑆′exists and ˆ𝑆∗is confirmed to be a stable subset,
it can be concluded that ˆ𝑆∗is exactly𝑆∗.
Maximum-flow based checker. We design a network whose
minimum cut can judge whether ˆ𝑆∗has denser subgraphs. Let 𝐸′
be the set of edges with 𝑤𝑒>0and𝑒⊂ˆ𝑆∗. Given ˆ𝑆∗, the flow
network has|ˆ𝑆∗|+2nodes including the source node 𝑠, the sink
node𝑡and ˆ𝑆∗. Note that𝐴⊆ˆ𝑆∗by Lemma 5.5. The edges are built
by the following way.
•From𝑠to each𝑢∈𝐴, link an edge with infinity capacity.
•From𝑠to each𝑢∈ˆ𝑆∗\𝐴, link an edge with |𝑁(𝑢,ˆ𝑆∗∩𝑅)|.
•For each edge 𝑒(𝑢,𝑣)∈𝐸′, link an edge from 𝑢to𝑣with
capacity𝑤𝑒if𝑣∈𝑅, and link an edge from 𝑣to𝑢with
capacity𝑤𝑒if𝑢∈𝑅.
•From each𝑢∈ˆ𝑆∗to𝑡, link an edge with capacity 𝜌+
𝑅(ˆ𝑆∗).
Theorem 5.12. Let𝑓(ˆ𝑆∗)be the minimum cut of the proposed
network. We can derive that ˆ𝑆∗has no subgraph with larger NR-
subgraph density if 𝑓(ˆ𝑆∗)=Í
𝑢∈ˆ𝑆∗|𝑁(𝑢,ˆ𝑆∗∩𝑅)|.
Example 5.13. Figure 2 is an example of the flow network for
the graph in Figure 1 when ˆ𝑆∗={𝑢1,𝑢3,𝑢5},𝑅={𝑢1,𝑢2,𝑢3}and
𝐴={𝑢3}. From𝑠to𝑢3, the edge capacity is infinity since 𝑢3∈𝐴.
Both𝑢1and𝑢5have one neighbor in ˆ𝑆∗∩𝑅, so the capacity of(𝑠,𝑢 1)
and(𝑠,𝑢 5)is1. For the edge 𝑒(𝑢1,𝑢3)with𝑤𝑒=2, link an edge from
𝑢1to𝑢3and an edges from 𝑢3to𝑢1because both 𝑢1and𝑢3are in𝑅.
Since the NR-subgraph density of ˆ𝑆∗is1, each node link an edge to 𝑡
with capacity 1. We observe that 𝑓(ˆ𝑆∗)=Í
𝑢∈ˆ𝑆∗|𝑁(𝑢,ˆ𝑆∗∩𝑅)|=3,
and thus there is no denser subgraph in ˆ𝑆∗.
The maximum-flow is well known to compute the minimum
cut. We utilize the push-and-relabel maximum-flow algorithm in
3911KDD ’24, August 25–29, 2024, Barcelona, Spain Xiaowei Ye et al.
Table 1: The statistical information of the datasets
Networks 𝑛 𝑚 Description
WikiV 7,115 100,762 Social network
Epinion 75,879 405,740 Social network
Gowalla 196,591 950,327 Social network
Amazon 403,394 2,443,408 Co-purchase
DBLP 425,957 1,049,866 Collaboration
Berkstan 685,230 6,649,470 Web graph
Youtube 1,157,827 2,987,625 Social network
Pokec 1,632,803 22,301,964 Social network
Skitter 1,696,415 11,095,298 Internet topology
Orkut 3,072,627 117,185,083 Social network
ComLiveJ 4,036,538 34,681,189 Social network
Friendster 65,608,366 1,806,067,135 Social network
implementation. When the flow network has 𝑛nodes, the time
complexity of the push-and-relabel algorithm is 𝑂(𝑛3). Thus, the
time complexity of the maxflow in line 4 of Algorithm 2 is 𝑂(|ˆ𝑆∗|3).
Discussion. In practice, the number of iterations within lines 2-4 of
Algorithm 2 tends to be a small constant. This efficiency stems from
the fact that nodes within the optimal subgraph 𝑆∗quickly achieve
the highest ranks (as the nodes with the largest ranks are selected to
form ˆ𝑆∗in line 12 of FDP). Consequently, FDPE typically requires
only a limited number of executions of the maximum flow algorithm
to reach convergence. The experimental results also show that FDP
converges fast and thus FDPE only requires a small number of call
of maximum flow algorithm.
6 Experiments
We conduct extensive experiments to answer the following Re-
search Questions. RQ1: Can we identify local communities with
higher quality than the start-of-the-art metrics by our proposed
NR-subgraph density (Definition 3.1)? RQ2: How much our pro-
posed FDP (Algorithm 1) and FDPE (Algorithm 2) improve in terms
of running time or quality compared to other existing algorithms?
RQ3: Whether our algorithms are sensitive to the parameters. RQ4:
How fast does FDP converge?
6.1 Experimental Setup
Datasets. We evaluate our solutions on 12real-world networks (Ta-
ble 1) sourced from the Stanford Network Analysis Project (SNAP)
[31], spanning various domains (e.g., social networks and collabo-
ration networks). Note that the largest dataset Friendster with over
65 million nodes and 1.8 billion edges.
Generations of 𝐴and𝑅.To create the seed sets 𝐴and𝑅, we em-
ploy the same strategy introduced in prior work [ 16]. This process
commences by randomly selecting a node 𝑢from the vertex set 𝑉.
The set𝐴is then constituted by randomly choosing nodes from the
immediate and secondary neighbors of 𝑢, typically fixing the size of
𝐴at 8. The set 𝑅is constructed through several random walks from
𝐴. The number and length of walks are determined by drawing
random integers within the range of [3,10]. For each network in
our study, we generate 500 distinct (𝐴,𝑅)pairs, with the average
cardinality of 𝑅across all networks being 254. Unless otherwise
stated, the results presented are derived from the mean metrics
computed over these 500 pairs.
Algorithms. We implemented FDP (Algorithm 1) and FDPE (Al-
gorithm 2) in C++. For comparative purposes, we also incorporate
theLA[16] and FS[46] algorithms into our analysis. Each of these
algorithms accepts a graph along with subsets 𝐴and𝑅, where𝐴⊆𝑅⊆𝑉, to output a community inclusive of 𝐴and confined
to𝑅. The LAseeks to optimize the R-subgraph density metric,
while FStargets the improvement of local conductance, defined
as|𝐸(𝑆,𝑆)|Í
𝑢∈𝑅∩𝑆𝑑(𝑢)−𝜖Í
𝑢∈𝑅∩𝑆𝑑(𝑢)−Í
𝑢∈𝑅\𝑆𝑝𝑢𝑑(𝑢), with𝑑(𝑢)represent-
ing the degree of node 𝑢. For consistency with previous studies
[16], we standardize parameters by setting 𝑝𝑢=0and𝜖=1to
ensure a balanced comparison. Both LAandFSare based on the
maximum flow algorithm. Since LAandFSare originally available
in Julia [ 16,46], we reimplemented them in C++ to ensures compar-
ing all algorithms under the same programming language. Our C++
implementations consistently outperform their Julia counterparts.
6.2 Experimental Results
Exp-1: Running Time and Memory Cost. The running time of
LA,FS,FDP, and FDPE across 12 real-world networks is shown
in Figure 3(a). The results indicate that FDP consistently outper-
forms the other algorithms in terms of speed, being on average
14.1×,85.1×, and 3.9×faster than LA,FS, and FDPE , respectively.
The efficiency of FDP can be attributed to its localized edge scan-
ning around the set 𝑅, circumventing the computationally intensive
maximum-flow algorithm required by LA,FS, and FDPE . While
FDPE is not as rapid as FDP, it still significantly surpasses LAand
FSin speed on 10 of the networks, exhibiting comparable perfor-
mance on the remaining two, WikiV andAmazon . This is credited
to the number of iterations of FDPE is typically low (as per lines
2-4 of Algorithm 2). Overall, these findings highlight the superior
performance of our proposed algorithms in terms of running time.
Figure 3(b) shows the memory consumption of the evaluated
algorithms, measured using the “massif” tool within Valgrind [ 37].
Our observations indicate that LAandFSexhibit comparable mem-
ory overheads. This similarity can be attributed to their analogous
search strategies, which incrementally expand the search space
from𝑅to its neighboring nodes [ 16,46]. On the other hand, FDP
demonstrates a marginally lower memory usage compared to FDPE ,
the difference that stems from FDPE ’s additional requirement to
maintain the weight assignment vector 𝛼as discussed in Section 5.3.
Notably, both FDP andFDPE realize up to an order of magnitude
reduction in memory consumption when contrasted with LAand
FS. These results confirm the memory efficiency of our algorithms.
Exp-2: Community Quality. The quality analysis of the identified
community is shown in Figure 4. Four distinct effectiveness metrics
are stated as follows.
•Density: Recall that the density of a subgraph 𝑆is𝜌(𝑆)=|𝐸(𝑆)|
|𝑆|.
Figure 4(a) reveals that FDP and FDPE consistently report sub-
graphs with the highest density, averaging 6.1×and5.4×greater
than those identified by LAand FS, respectively. These results
demonstrate the high effectiveness of our NR-subgraph density
metric.
•Conductance: A subgraph 𝑆with lower conductance, defined asÍ
𝑢∈𝑆|𝑁(𝑢,𝑉\𝑆)|
min{Í
𝑢∈𝑆|𝑁(𝑢,𝑉)|,Í
𝑣∈𝑉\𝑆|𝑁(𝑣,𝑉)|}[32], is indicative of a superior
community. As shown in Figure 4(b), FShas the lowest conduc-
tance, which is in expectation because FSfind the subgraph which
optimizes the local conductance [ 46]. Both FDP andFDPE surpass
LA, with conductance measures that are 23%lower.
•Size: Similar to [ 16], we also compare the sizes of the communities
identified by different algorithms. The average sizes of the commu-
nities found by the algorithms are depicted in Figure 4(c). Despite
3912Efficient and Effective Anchored Densest Subgraph Search: A Convex-programming based Approach KDD ’24, August 25–29, 2024, Barcelona, Spain
WikiEpinionGowallaAmazonDBLPBerkstanYoutubePokecSkitterOrkutComLiveJFriendster100101102103104LA
FS
FDP
FDPE
(a) Time (ms)
WikiEpinionGowallaAmazonDBLPBerkstanYoutubePokecSkitterOrkutComLiveJFriendster101102103104 LA
FS
FDP
FDPE (b) Memory (MB)
Figure 3: Running time (ms) and memory cost comparison (MB)
WikiEpinionGowallaAmazonDBLPBerkstanYoutubePokecSkitterOrkutComLiveJFriendster01020304050 LA
FS
FDP
FDPE
(a) Density (the larger, the better)
WikiEpinionGowallaAmazonDBLPBerkstanYoutubePokecSkitterOrkutComLiveJFriendster0.00.20.40.60.81.0LA
FS
FDP
FDPE (b) Conductance (the smaller, the better)
WikiEpinionGowallaAmazonDBLPBerkstanYoutubePokecSkitterOrkutComLiveJFriendster050100150200544471248 259
LA
FS
FDP
FDPE
(c) Size
WikiEpinionGowallaAmazonDBLPBerkstanYoutubePokecSkitterOrkutComLiveJFriendster0.00.10.20.30.4LA
FS
FDP
FDPE (d) Locality to 𝑅(the larger, the better)
Figure 4: Community quality comparison
FSidentifying some exceptionally large subgraphs, their sparsity
is evident from Figure 4(a). When compared to LA, the subgraphs
discovered by FDP andFDPE are, on average, 2.4×larger. We also
note that all the communities identified by various algorithms are
small compared to the original graph, indicating the locality of all
the compared local community search algorithms.
•Locality to 𝑅:The locality metric,|𝑆∩𝑅|
|𝑆∪𝑅|, assesses how local
a subgraph 𝑆is to the set 𝑅. In Figure 4(d), both FDP andFDPE
demonstrate 1.6×higher locality compared to LAand a marginal
0.8%improvement over FS. Since FSis designed to optimize the local
conductance, it can outperform our method in terms of conductance.
However, the conductance achieved by FSis only slightly smaller
by 0.063 on average. Our solution’s subgraph density can exceed
FS’s by up to 5 times. These results indicate that our solution can
found much denser subgraphs than FS, with conductance slightly
increased.
In short, these findings validate the rationality and superiority
of the proposed NR-subgraph density metric. Communities with
the high NR-subgraph density values correlate with high-quality
communities, as evidenced by our comprehensive analysis.
Exp-3: Sensitivity Analysis with Varying 𝑇.The sensitivity
of the running time of FDP is depicted in Figure 5(a). This figure
illustrates results for 6 representative networks, with analogous
patterns observed across the others. Remarkably, FDP exhibits ro-
bust performance against different 𝑇. The running time increases
1 2 4 8 16
T12481632Time (ms)
Wiki
GowallaDBLP
YoutubeSkitter
ComLiveJ(a) running time
12345
T0.960.970.980.991.00ρ+
R(̂S*)/ρ+
R(S*)
Wiki
GowallaDBLP
YoutubeSkitter
ComLiveJ (b) the convergence rate (𝜌+
𝑅(ˆ𝑆∗)
𝜌+
𝑅(𝑆∗))
Figure 5: Sensitivity analysis with varying 𝑇
100 200 300 400 500 600
Size of R100101102103104105Time (ms)LA
FS
FDP
FDPE
(a)Pokec
100 200 300 400 500 600
Size of R101102103104Time (ms)LA
FS
FDP
FDPE (b)Orkut
Figure 6: Running time analysis for different |𝑅|sizes
only marginally, even as 𝑇is doubled. This negligible sensitivity
can largely be attributed to the locality of the time complexity of
FDP that it only scans the edges with one side in 𝑅(lines 3-9 of
Algorithm 1). Moreover, Figure 5(b) shows the convergence behav-
ior of FDP with varying 𝑇, where convergence is quantified using
3913KDD ’24, August 25–29, 2024, Barcelona, Spain Xiaowei Ye et al.
100 200 300 400 500 600
Size of R100101DensityLA
FS
FDP
FDPE
(a)Pokec
100 200 300 400 500 600
Size of R10−1100101102DensityLA
FS
FDP
FDPE (b)Orkut
Figure 7: Community quality analysis for different |𝑅|Sizes
Table 2: The value of the upper bound of error 𝜖
Networks𝑇
1 2 4 8 16
WikiV 0.24 0.13 0.07 0.04 0.03
Gowalla 0.43 0.26 0.18 0.14 0.12
DBLP 0.44 0.31 0.25 0.22 0.20
Youtube 0.56 0.32 0.20 0.15 0.12
Skitter 0.18 0.11 0.07 0.05 0.04
ComLiveJ 0.16 0.11 0.09 0.08 0.08
the ratio𝜌+
𝑅(ˆ𝑆∗)
𝜌+
𝑅(𝑆∗). The figure presents results from 6 networks, with
comparable trends across the remaining datasets. As depicted, FDP
achieves over 96%approximation of the optimal solution by the
first iteration. This rapid convergence is credited to the efficient
initial weight distribution, where during the first iteration, weights
are allocated to 𝑆∗(lines 4-6 of Algorithm 1), and nodes outside
𝑆∗typically receive lower weights. Hence, FDP can approach an
near-optimal approximation within a small number of iterations.
Exp-4: Running Time Analysis for Different |𝑅|Sizes. The
impact of varying the seed set size ( |𝑅|) on the running time is
illustrated in Figure 6. We use datasets Pokec andOrkut as exam-
ples, with similar patterns observed across other datasets. Each data
point in Figure 6 correlates to a unique (𝐴,𝑅)pair. As expected, an
increase in|𝑅|leads to a corresponding rise in running time for all
algorithms. Notably, FDP consistently exhibits the fastest running
time. Moreover, the running time of FDP remains remarkably stable
across different|𝑅|sizes. For instance, on the Pokec network with
|𝑅|ranging between 290and310, the running time of FDP fluctu-
ates narrowly between 6𝑚𝑠and9𝑚𝑠. This stability can be attributed
to the time complexity of FDP being primarily dependent on the
local edges surrounding 𝑅. While FDPE operates at a slower pace
compared to FDP, it still outperforms LAandFSin96%of the cases
onPokec and95%onOrkut , demonstrating its relative scalability
and efficiency. Hence, these results give preliminary evidence that
both FDP andFDPE scale well when varying seed set sizes.
Exp-5: Community Quality Analysis for Different |𝑅|Sizes.
The influence of seed set size ( |𝑅|) on community quality is depicted
in Figure 7 for Pokec andOrkut networks, with consistent behavior
noted across other datasets. In the figure, each point corresponds to
an execution instance with a specific pair of 𝐴and𝑅. The results re-
veals that communities identified by FDP andFDPE exhibit greater
density than those found by LAandFSin over 99% of the cases
evaluated. This finding demonstrates that both FDP andFDPE can
consistently uncover denser communities than other baselines.
Exp-6: Evaluating the Error Bound 𝜖.FDP provides an 𝜖value,
serving as the error upper bound (line 14 of Algorithm 1). Due to
space limits, we detail the 𝜖outcomes for 6 networks in Table 2.
(a) R-subgraph density by LA
 (b) NR-subgraph density by FDP
Figure 8: Case studies. Local communities (red nodes) are
computed by LAandFDPon the Zachary karate club network,
where𝑅is composed of the green nodes.
Remarkably, even with a single iteration ( 𝑇=1),𝜖remains below 1,
suggesting that FDP achieves at least 2-approximation. As excepted,
𝜖diminishes with increasing 𝑇. For instance, on the WikiV network
with𝑇=16,𝜖reaches as low as 0.03, indicating an upper bound of
approximation ratio of𝜌+
𝑅(𝑆∗)
𝜌+
𝑅(ˆ𝑆∗)≤1.03. The empirical results confirm
that𝜖is a reliable indicator of the accuracy of FDP in practice.
Exp-7: Case Studies. To further show the effectiveness of our FDP,
we compare the performance of LAandFDP on the well-known
and widely-used Zachary karate club network [ 1]. The details of
the datasets are in Appendix E. LAidentifies a community compris-
ing only 5 members (red in Figure 8(a)) closely connected to the
seed nodes (depicted in green). These members tend to have lower
degrees, which aligns with the tendency of R-subgraph density
to exclude nodes with higher degrees. In contrast, FDP is capa-
ble of discovering a broader community that includes all 10 mem-
bers in the vicinity of the seed nodes (Figure 8(b)), which aligns
with the known group assignments present in the publicly avail-
able datasets within the PyTorch framework (see source code for
torch _geometric.datasets.karate, community 0). Indeed, it appears
more reasonable to include these 10 members into a community, as
all of them are densely connected to the seeds. The conductance
of the subgraph with the maximum R-subgraph density and NR-
subgraph density is 0.44 and 0.27, demonstrating the superiority of
our NR-subgraph density. This result exemplifies the potential of
FDP for effective local community detection and related applica-
tions.
7 Conclusion
This work presents a step forward in detecting local dense commu-
nities within networks. The proposed NR-subgraph density metric
considers both the local connectivity to the seed set and the global
graph density. We formulate the problem of the anchored densest
subgraph search based on NR-subgraph density as a Linear Pro-
gramming problem, which can be converted into its dual to facilitate
the use of convex programming techniques. The proposed FDP and
FDPE algorithms harness the efficiency and convergence properties
of the Frank-Wolfe optimization method. The extensive experiments
conducted on 12 real-world networks have demonstrated the high
performance and utility of our algorithms. Both FDP andFDPE are
not only substantially faster than existing methods but also uncover
subgraphs with exceptional internal quality. These results stand as
a testament to the practicality and effectiveness of our approach
for local community detection.
3914Efficient and Effective Anchored Densest Subgraph Search: A Convex-programming based Approach KDD ’24, August 25–29, 2024, Barcelona, Spain
8 Acknowledgment
This work was partially supported by (I) the National Key Research
and Development Program of China 2021YFB3301301, (II) NSFC
Grants U2241211 and 62072034. Ring-Hua Li is the corresponding
author of this paper.
References
[1]2017. Zachary karate club network dataset – KONECT. http://konect.cc/
networks/ucidata-zachary
[2]Esra Akbas and Peixiang Zhao. 2017. Truss-based Community Search: a Truss-
equivalence Based Indexing Approach. Proc. VLDB Endow. 10, 11 (2017), 1298–
1309.
[3]Morteza Alamgir and Ulrike von Luxburg. 2010. Multi-agent Random Walks for
Local Clustering on Graphs. In ICDM 2010. IEEE Computer Society, 18–27.
[4]Aris Anagnostopoulos, Luca Becchetti, Adriano Fazzone, Cristina Menghini, and
Chris Schwiegelshohn. 2020. Spectral Relaxations and Fair Densest Subgraphs.
InCIKM. 35–44.
[5]Reid Andersen and Kumar Chellapilla. 2009. Finding Dense Subgraphs with Size
Bounds. In WAW, Vol. 5427. Springer, 25–37.
[6] Reid Andersen and Kevin J. Lang. 2006. Communities from seed sets. In WWW
2006. ACM, 223–232.
[7]Nicola Barbieri, Francesco Bonchi, Edoardo Galimberti, and Francesco Gullo.
2015. Efficient and effective community search. Data Min. Knowl. Discov. 29, 5
(2015), 1406–1433.
[8]Yuchen Bian, Yaowei Yan, Wei Cheng, Wei Wang, Dongsheng Luo, and Xiang
Zhang. 2018. On Multi-query Local Community Detection. In ICDM 2018. IEEE
Computer Society, 9–18.
[9]Digvijay Boob, Yu Gao, Richard Peng, Saurabh Sawlani, Charalampos E.
Tsourakakis, Di Wang, and Junxing Wang. 2020. Flowless: Extracting Dens-
est Subgraphs Without Flow Computations. In WWW. 573–583.
[10] Lijun Chang and Lu Qin. 2019. Cohesive Subgraph Computation Over Large
Sparse Graphs. In ICDE. 2068–2071.
[11] Moses Charikar. 2000. Greedy approximation algorithms for finding dense
components in a graph. In APPROX 2000, Vol. 1913. Springer, 84–95.
[12] Chandra Chekuri, Kent Quanrud, and Manuel R. Torres. 2022. Densest Subgraph:
Supermodularity, Iterative Peeling, and Flow. In SODA. SIAM, 1531–1555.
[13] Jiyang Chen, Osmar R. Zaïane, and Randy Goebel. 2009. Local Community
Identification in Social Networks. In ASONAM 2009. IEEE Computer Society,
237–242.
[14] Wanyun Cui, Yanghua Xiao, Haixun Wang, Yiqi Lu, and Wei Wang. 2013. Online
search of overlapping communities. In SIGMOD. ACM, 277–288.
[15] Wanyun Cui, Yanghua Xiao, Haixun Wang, and Wei Wang. 2014. Local search of
communities in large graphs. In SIGMOD. ACM, 991–1002.
[16] Yizhou Dai, Miao Qiao, and Lijun Chang. 2022. Anchored Densest Subgraph. In
SIGMOD ’22. ACM, 1200–1213.
[17] Maximilien Danisch, T.-H. Hubert Chan, and Mauro Sozio. 2017. Large Scale
Density-friendly Graph Decomposition via Convex Programming. In WWW 2017.
ACM, 233–242.
[18] Luca Donetti and Miguel A Munoz. 2004. Detecting network communities: a
new systematic and efficient algorithm. Journal of Statistical Mechanics: Theory
and Experiment 2004, 10 (2004), P10012.
[19] Yixiang Fang, Xin Huang, Lu Qin, Ying Zhang, Wenjie Zhang, Reynold Cheng,
and Xuemin Lin. 2020. A survey of community search over big graphs. VLDB J.
29, 1 (2020), 353–392.
[20] Yixiang Fang, Kaiqiang Yu, Reynold Cheng, Laks V. S. Lakshmanan, and Xuemin
Lin. 2019. Efficient Algorithms for Densest Subgraph Discovery. Proc. VLDB
Endow. 12, 11 (2019), 1719–1732.
[21] Uriel Feige, Guy Kortsarz, and David Peleg. 2001. The Dense k-Subgraph Problem.
Algorithmica 29, 3 (2001), 410–421.
[22] Fabio Gasparetti, Giuseppe Sansonetti, and Alessandro Micarelli. 2021. Commu-
nity detection in social recommender systems: a survey. Appl. Intell. 51, 6 (2021),
3975–3995.
[23] Andrew V Goldberg. 1984. Finding a maximum density subgraph. (1984).
[24] Kun Guo, Xintong Huang, Ling Wu, and Yuzhong Chen. 2022. Local community
detection algorithm based on local modularity density. Applied Intelligence 52, 2
(2022), 1238–1253.
[25] Elfarouk Harb, Kent Quanrud, and Chandra Chekuri. 2022. Faster and Scalable
Algorithms for Densest Subgraph and Decomposition. In NeurIPS.
[26] Kun He, Yiwei Sun, David Bindel, John E. Hopcroft, and Yixuan Li. 2015. Detecting
Overlapping Communities from Local Spectral Subspaces. In ICDM 2015. IEEE
Computer Society, 769–774.
[27] Xin Huang, Laks V. S. Lakshmanan, Jeffrey Xu Yu, and Hong Cheng. 2015. Ap-
proximate Closest Community Search in Networks. Proc. VLDB Endow. 9, 4 (2015),
276–287.
[28] Martin Jaggi. 2013. Revisiting Frank-Wolfe: Projection-Free Sparse Convex Opti-
mization. In ICML 2013, Vol. 28. 427–435.
[29] Isabel M. Kloumann and Jon M. Kleinberg. 2014. Community membership
identification from small seed sets. In SIGKDD 2014. ACM, 1366–1375.[30] Tommaso Lanciano, Atsushi Miyauchi, Adriano Fazzone, and Francesco Bonchi.
2023. A Survey on the Densest Subgraph Problem and its Variants. CoRR
abs/2303.14467 (2023).
[31] Jure Leskovec and Andrej Krevl. 2014. SNAP Datasets: Stanford Large Network
Dataset Collection. http://snap.stanford.edu/data.
[32] Longlong Lin, Ronghua Li, and Tao Jia. 2023. Scalable and Effective Conductance-
Based Graph Clustering. In AAAI. 4471–4478.
[33] Chenhao Ma, Reynold Cheng, Laks V. S. Lakshmanan, and Xiaolin Han. 2022.
Finding Locally Densest Subgraphs: A Convex Programming Approach. Proc.
VLDB Endow. 15, 11 (2022), 2719–2732.
[34] Chenhao Ma, Yixiang Fang, Reynold Cheng, Laks V. S. Lakshmanan, and Xiaolin
Han. 2022. A Convex-Programming Approach for Efficient Directed Densest
Subgraph Discovery. In SIGMOD ’22. ACM, 845–859.
[35] Alan Mislove, Bimal Viswanath, P. Krishna Gummadi, and Peter Druschel. 2010.
You are who you know: inferring user profiles in online social networks. In
WSDM. ACM, 251–260.
[36] Atsushi Miyauchi, Tianyi Chen, Konstantinos Sotiropoulos, and Charalampos E.
Tsourakakis. 2023. Densest Diverse Subgraphs: How to Plan a Successful Cocktail
Party with Diversity. In SIGKDD. 1710–1721.
[37] Nicholas Nethercote and Julian Seward. 2007. Valgrind: a framework for heavy-
weight dynamic binary instrumentation. In PLDI. ACM, 89–100.
[38] Mark EJ Newman. 2004. Fast algorithm for detecting community structure in
networks. Physical review E 69, 6 (2004), 066133.
[39] Lorenzo Orecchia and Zeyuan Allen Zhu. 2014. Flow-Based Algorithms for Local
Graph Clustering. In SODA 2014. SIAM, 1267–1286.
[40] Palla, Gergely, Derényi, Imre, Farkas, Illés, Vicsek, and Tamás. 2005. Uncovering
the overlapping community structure of complex networks in nature and society.
Nature 435, 7043 (2005), 814–818.
[41] Lior Rokach and Oded Maimon. 2005. Clustering methods. In Data mining and
knowledge discovery handbook. 321–352.
[42] Mauro Sozio and Aristides Gionis. 2010. The community-search problem and
how to plan a successful cocktail party. In SIGKDD. ACM, 939–948.
[43] Bintao Sun, Maximilien Danisch, T.-H. Hubert Chan, and Mauro Sozio. 2020.
KClist++: A Simple Algorithm for k-Clique Densest Subgraphs in Large Graphs.
Proc. VLDB Endow. 13, 10 (2020), 1628–1640.
[44] Hanghang Tong and Christos Faloutsos. 2006. Center-piece subgraphs: problem
definition and fast solutions. In SIGKDD. ACM, 404–413.
[45] Twan van Laarhoven and Elena Marchiori. 2016. Local Network Community
Detection with Continuous Optimization of Conductance and Weighted Kernel
K-Means. J. Mach. Learn. Res. 17 (2016), 147:1–147:28.
[46] Nate Veldt, Christine Klymko, and David F. Gleich. 2019. Flow-Based Local Graph
Clustering with Better Seed Set Inclusion. In SDM. SIAM, 378–386.
[47] Baoning Wu and Kumar Chellapilla. 2007. Extracting Link Spam using Biased
Random Walks from Spam Seed Sets. In AIRWeb, Vol. 215. 37–44.
[48] Yubao Wu, Ruoming Jin, Jing Li, and Xiang Zhang. 2015. Robust Local Community
Detection: On Free Rider Effect and Its Elimination. Proc. VLDB Endow. 8, 7 (2015),
798–809.
[49] Yubao Wu, Xiang Zhang, Yuchen Bian, Zhipeng Cai, Xiang Lian, Xueting Liao,
and Fengpan Zhao. 2018. Second-order random walk-based proximity measures
in graph analysis: formulations and algorithms. VLDB J. 27, 1 (2018), 127–152.
[50] Xiwang Yang, Harald Steck, and Yong Liu. 2012. Circle-based recommendation
in online social networks. In SIGKDD. ACM, 1267–1275.
A Related work
Seeds based local community search. Given a seed set or ref-
erence set𝑅, the seeds based local community search problem
(or the seed expansion problem) is to detect a community that is
highly correlated to 𝑅[6,13,29,45]. There are three categories of
related methods, metric optimization [ 16,39,45,46], random walk
[3,8,26,29,44,49] and cohesive subgraph search (see survey [ 19]).
Metric optimization based algorithms are designed to identify
communities that score highly on a specific quality metric. These
metrics are broadly classified into two types: conductance and den-
sity. Additional metrics, such as local modularity [ 24], are not be
suitable for application to large-scale networks due to computa-
tional constraints or scalability issues. As a result, they are not
addressed in this discussion. Conductance-based metrics evaluate
the community by its cut and volume. The "cut" represents the
number of outbound edges and the volume reflects the aggregate
degree of all community members. An example is the local conduc-
tance metric, which assesses community quality by considering the
cut alongside a volume that incorporates local penalties [ 39,46].
3915KDD ’24, August 25–29, 2024, Barcelona, Spain Xiaowei Ye et al.
Density-based metrics, on the other hand, measure the community
by the ratio of the "sum of weights, " influenced by the seed set 𝑅, to
the size of the community [ 16,48]. The state-of-the-art metric in
seed-based local community search, R-subgraph density [ 16], exem-
plifies this approach. Similarly, our NR-subgraph density belongs
to the density-based category, offering a nuanced perspective on
community connectedness and relevance to the seeds.
Random walk-based algorithms initiate random walks from the
seed nodes set 𝑅. They can discover multiple communities when
the seeds are not confined to a single community [ 3,8]. Despite
this strength, random walk-based methods have faced criticism
for identifying communities with tenuous links to the seed set 𝑅
[16]. Various efforts have been made to refine these algorithms
and enhance the relevance of the detected communities to the
seeds [ 8,49]. These improvements aim to balance the exploratory
nature of random walks with the need for communities that are
meaningfully connected to the initial set of interest.
Cohesive subgraph search [ 19] use the cohesive structures as
the cohesiveness and connectivity metrics of community, such as
𝑘-core [ 7,42],𝑘-truss [ 2,27] and𝑘-clique [ 14]. However, it has been
noted [ 16] that communities identified using cohesive subgraph
search often contain a significant number of nodes that are not
relevant to the seed set 𝑅. This tendency to include extraneous nodes
limits the effectiveness of these methods for certain applications.
Consequently, cohesive subgraph search has not been selected as
a baseline in our work or in previous studies [ 16,46] within the
context of seed-based local community search.
Densest subgraph. The densest subgraph problem and its varia-
tions have been widely studied for over five decades (see survey
[30]). Densest subgraph search is to find a subgraph that maxi-
mize a measure of density. The traditional measure is the edge
density. There are also a lot of variants of the density measure.
Densest at-least(most)-k-subgraph is the densest subgraph with
size at least(most) 𝑘[5]; Densest𝑘-subgraph is the densest subgraph
with size𝑘[21]; Fair densest subgraph is the densest subgraphs
that has equal colors [ 4,36]; Higher-order density is defined as the
ratio of the count of a given motif and the subgraph size [ 20,43].
Our NR-subgraph density is a kind of density by weighted edges,
which is based on the seeds set 𝑅.
Existing methods for the densest subgraph and its variants are
mainly in two kinds: binary-search and maximum-flow based al-
gorithms [ 16,23] and programming-based algorithms [ 9,11,12,
17,25,43]. Binary-search and maximum-flow based algorithms
use binary-search to find a possible density and use maximum-
flow to check whether the possible density is optimal [ 16,23].
Programming-based algorithms model the densest subgraph prob-
lem into programming problem and utilize programming solver
(such as Frank-Wolfe method [ 17,43]) or peeling-based algorithms
[9, 11, 12] to find the exact or approximate optimal solution.
B The Frank-Wolfe method
The Frank-Wolfe method is widely recognized for its application
to constrained primal-dual convergence problems, with its efficacy
underpinned by the provision of duality gap certificates [ 28]. A
notable advantage of the Frank-Wolfe algorithm is its projection-
free nature that there is no need to verify the feasibility of interim
solutions at each iteration.
The essence of the Frank-Wolfe method is to iteratively approxi-
mate the optimal solution by solving a linear optimization problemAlgorithm 3: The Frank-Wolfe method [28]
Input: A convex programming problem with objective function 𝑓and domainD;
Number of iterations 𝑇.
Output: A feasible solution ˆ𝛼∗∈D with𝑓(ˆ𝛼∗)−𝑓(𝛼∗)≤𝑂(1
𝑇)
1Let𝛼(0)∈D ;
2for𝑡←1,2,...,𝑇 do
3 Compute ˆ𝛼:=arg min𝛼∈D⟨𝛼,▽𝑓(𝛼(𝑡−1))⟩;
4𝛼(𝑡):=(1−𝛾𝑡)·𝛼(𝑡−1)+𝛾𝑡·ˆ𝛼
5return𝛼(𝑇);
over the feasible domain D, as depicted in line 3 of Algorithm 3.
Each solution ˆ𝛼obtained from this process is inherently feasible,
thereby obviating the necessity for any additional projection onto
D. The algorithm then updates the current solution by taking a
step in the direction of ˆ𝛼with a step size 𝛾𝑡(line 4).
By unifying a collection of greedy approximations, the Frank-
Wolfe algorithm successively narrows the gap to the optimal solu-
tion, as proven in [ 28]. The details of the Frank-Wolfe framework
are meticulously outlined in Algorithm 3, where each iteration re-
fines the answer, converging towards optimality while avoiding
the computational burden of projection steps.
The convergence rate of the Frank-Wolfe method is determined
by the curvature constant, which is defined based on the Bergman
divergence.
Theorem B.1 (curvature constant [ 28]).The curvature con-
stant of𝑓overDis
𝐶𝑓= sup
𝛼1,𝛼3∈D,
𝛾∈[0,1],
𝛼2=𝛼1+𝛾(𝛼3−𝛼1)2
𝛾2(𝑓(𝛼2)−𝑓(𝛼1)−⟨𝛼2−𝛼1,∇𝑓(𝛼1)⟩).
Theorem B.2 (convergence rate [ 28]).The Frank-Wolfe method
with step size 𝛾𝑡=1
𝑡,𝑡=1,2,3,...satisfies
𝑓(𝛼(𝑡))−𝑓(𝛼∗)≤𝐶𝑓
𝑡.
C Stable subset [17].
We present the concept of stable subset in Definition C.1.
Definition C.1 (stable subset [ 17]).A subset𝑆is a stable subset
with respect to a feasible solution (𝛼,𝛽)with𝑟=𝛼+𝛽, if (a) For
all𝑢∈𝑆and𝑣∉𝑆,𝑟(𝑢)>𝑟(𝑣); (b) For all𝑒that intersects both 𝑆
and𝑉\𝑆,𝛼𝑒𝑢=0,∀𝑢∈𝑒∩𝑆.
As shown in Definition C.1, a subset 𝑆is stable when the nodes
in𝑆have the largest ranking in 𝑟and receive weights only from
𝐸(𝑆). And the remaining nodes 𝑉\𝑆receive weights from 𝐸\𝐸(𝑆).
By theorem 5.3, we know that the maximum rank is an upper bound
of NR-subgraph density. Similarly, we can derive that the minimum
rank is an lower bound. Since the minimum rank of 𝑆is larger than
the maximum rank of 𝑉\𝑆, we can derive that 𝑆∗⊆𝑆.
Theorem C.2. When ˆ𝑆∗is a stable subset, 𝑆∗⊆ˆ𝑆∗.
In implementing FDPE , we handle the vector 𝛼where each 𝛼𝑒𝑢
represents the weight node 𝑢receives from edge 𝑒. For the edges that
intersect ˆ𝑆∗and𝑉\ˆ𝑆∗, our approach assigns their weights entirely to
𝑉\ˆ𝑆∗to refresh𝛼. This reassignment yields an updated rank vector
𝑟′, derived from the refreshed 𝛼values. Should ˆ𝑆∗prove a stable
subset relative to 𝑟′, it implies that the true optimal subgraph 𝑆∗is
contained within ˆ𝑆∗. The stability check, denoted isStableSubset in
3916Efficient and Effective Anchored Densest Subgraph Search: A Convex-programming based Approach KDD ’24, August 25–29, 2024, Barcelona, Spain
line 4 of Algorithm 2, therefore runs in time proportional to 𝑂(|𝐸′|),
with𝐸′specified in line 1 of Algorithm 2. This ensures the time
complexity of verifying stability is tied directly to the size of the
edge set𝐸′.
D Missing Proofs
The proof of Theorem 3.3.
Proof. To prove the lemma, we need to prove that 2|𝐸(𝑆)|≥
2|𝐸(𝑆)|−Í
𝑢∈𝑆\𝑅|𝑁(𝑢,𝑉)| ≥ 2|𝐸(𝑆)|−Í
𝑢∈𝑆\𝑅|𝑁(𝑢,𝑆)|. Since
𝑆⊆𝑉, we have|𝑁(𝑢,𝑆)|≤|𝑁(𝑢,𝑉)|. Thus, we can complete the
proof. □
The proof of Lemma 4.1.
Proof. From the definition of 𝜌+
𝑅(𝑆), we have
𝜌+
𝑅(𝑆)·|𝑆|=2|𝐸(𝑆)|−∑︁
𝑢∈𝑆\𝑅|𝑁(𝑢,𝑆)|
=∑︁
𝑢∈𝑆|𝑁(𝑢,𝑆)|−∑︁
𝑢∈𝑆\𝑅|𝑁(𝑢,𝑆)|
=∑︁
𝑢∈𝑆∩𝑅|𝑁(𝑢,𝑆)|=∑︁
𝑒∈𝐸(𝑆)𝑤𝑒(7)
□
The proof of Lemma 4.3.
Proof. We construct a vector 𝑦that𝑦𝑢=1
|𝑆|if𝑢∈𝑆and𝑦𝑢=0
if𝑢∉𝑆. It is easy to derive that 𝑦is a feasible solution of LP. Then
we have𝑥𝑒=1
|𝑆|for𝑒∈𝐸(𝑆)and𝑥𝑒=0for𝑒∉𝐸(𝑆). Thus,
the objective function has a value ofÍ
𝑒∈𝐸(𝑆)𝑤𝑒
|𝑆|. Combined with
Lemma 4.1, we can complete the proof. □
The proof of Lemma 4.4.
Proof. Suppose𝜌+
𝑅(𝑆)<𝑣𝑦for all subgraph 𝑆⊆𝑉, and we
haveÍ
𝑒∈𝐸(𝑆)𝑤𝑒<𝑣𝑦|𝑆|according to Lemma 4.1, for all subgraph
𝑆⊆𝑉.
𝑣𝑦=∑︁
𝑒∈𝐸𝑤𝑒·𝑥𝑒<𝑣𝑦∫1
0∑︁
𝑒:𝑥𝑒=𝑧𝑧·|𝑆(𝑧)|𝑑𝑧≤𝑣𝑦,
which is a contradiction. The last inequality comes from 𝐶2ofLP,
which restricts|𝑆(𝑧)|≤⌊1
𝑧⌋for all𝑧∈(0,1]. Let𝑧+be continues
value larger than 𝑧.𝑆(𝑧)is defined as the set of nodes with 𝑧=
𝑦𝑢<𝑧+. □
The proof of Theorem 4.5.
Proof. Let𝑣∗be the objection function value of 𝑦∗. By Lemma 4.3,
we have𝜌+
𝑅(𝑆∗
ADSS+)≤𝑣∗. Furthermore, according to Lemma 4.4,
we have𝜌+
𝑅(𝑆∗
ADSS+)≥𝑣∗. As a result, 𝑣∗=𝜌+
𝑅(𝑆∗
ADSS+).□
The proof of Theorem 5.1.
Proof. The condition 𝐶0defines𝑤𝑒, which are constants. The
condition𝐶1can be rewrite into 2|𝐸|inequations 𝑤𝑒≤𝑦𝑢,∀𝑢∈
𝑒∈𝐸. For each inequation, we introduce a variable 𝛼𝑒𝑢≥0that
𝛼𝑒𝑢·𝑥𝑒≤𝛼𝑒𝑢·𝑦𝑢,∀𝑢∈𝑒∈𝐸. Similarly, we introduce 𝑛variables
𝛽according to 𝐶3ofLP, and we get 0<𝛽𝑢𝑦𝑢,∀𝑢∈𝐴and0=
𝛽𝑢𝑦𝑢,∀𝑢∉𝐴. Sum them together and we get
∑︁
𝑒∈𝐸 ∑︁
𝑢∈𝑒𝛼𝑒
𝑢!
𝑥𝑒≤∑︁
𝑢∈𝑉 
𝛽𝑢+∑︁
𝑒:𝑢∈𝑒𝛼𝑒
𝑢!
𝑦𝑢.Introducing conditions 𝐷0and𝐷2, the ineuqation becomes
∑︁
𝑒∈𝐸𝑤𝑒𝑥𝑒≤∑︁
𝑢∈𝑉(𝑟𝑢+𝛽𝑢)𝑦𝑢.
The left part of the inequation is the objective function of LP.
We need to find the minimum value of the right part and make the
minimum value be as large as possible due to the duality.
According to 𝐶2ofLP, we have∥𝑦∥≤1. As a consequence, we
get the objective function of DP
∑︁
𝑢∈𝑉(𝑟𝑢+𝛽𝑢)𝑦𝑢=⟨𝑟+𝛽,𝑦⟩≤∥𝑟+𝛽∥·∥𝑦∥≤∥𝑟+𝛽∥.
According to 𝐶3ofLP, the nodes in 𝐴has the minimum positive
value of𝑦. Then, we can deduce 𝐷4because the right part is the
form of summary of product of 𝑟+𝛽and𝑦. □
The proof of Theorem 5.3.
Proof. Let𝑟𝑚𝑎𝑥=max𝑢∈𝑉𝑟𝑢and𝑥𝑚𝑎𝑥=max𝑢∈𝑉(𝑟𝑢+𝛽𝑢).
We prove that 𝑟𝑚𝑎𝑥=𝑥𝑚𝑎𝑥. For the nodes 𝑢∉𝐴with𝑟𝑢=𝑟𝑚𝑎𝑥,
we have𝛽𝑢=0because only the nodes in 𝐴may have a positive 𝛽,
and we can derive that 𝑟𝑚𝑎𝑥=𝑥𝑚𝑎𝑥. When∀𝑢∉𝐴,𝑟𝑢<𝑟𝑚𝑎𝑥, we
can infer that 𝛽𝑢=0for the node in 𝐴with𝑟𝑢=𝑟𝑚𝑎𝑥. So we have
𝑟𝑚𝑎𝑥=𝑥𝑚𝑎𝑥.
At last, we can prove the theorem by linear programming duality
𝑟𝑚𝑎𝑥=𝑥𝑚𝑎𝑥≥∥𝑟∗+𝛽∗∥≥𝜌+
𝑅(𝑆∗)
. □
The proof of Theorem 5.4.
Proof. Let(𝛼∗,𝛽∗)be the optimal solution of DP. Let𝑟∗be the
vector computed by 𝛼∗. We prove that the nodes in 𝑆∗have the
largest entry in 𝑟∗+𝛽∗. By Lemma 4.1, we know that the total
weight in𝑆∗isÍ
𝑒∈𝐸(𝑆∗)𝑤𝑒. According to 𝐷0and𝐷2, we haveÍ
𝑢∈𝑆∗𝑟∗(𝑢)+𝛽∗(𝑢)≥Í
𝑒∈𝐸(𝑆∗)𝑤𝑒. Since the objective function
is to minimize∥𝑟∗+𝛽∗∥, we infer that the nodes in 𝑆∗has the same
value of𝑟∗+𝛽∗. Otherwise, we can re-assign the weight to reach a
more even distribution of 𝑟∗+𝛽∗and a smaller value of the objective
function. Thus, the nodes in 𝑆∗are the maximum in 𝑟∗+𝛽∗and the
nodes in𝑉\𝑆∗have smaller value in 𝑟∗+𝛽∗. At last, we can find
𝑆∗from𝑟∗+𝛽∗by extracting the entries with the largest value. □
The proof of Lemma 5.6.
Proof. Let𝑟be the vector computed by Algorithm 1. We prove
that max𝑢∈𝑆∗𝑟(𝑢)
𝑇≥𝜌+
𝑅(𝑆∗). According to Lemma 4.1, we know
that the total weight in 𝑆∗isÍ
𝑒∈𝐸(𝑆∗)𝑤𝑒. In Algorithm 1, the
weight in𝐸(𝑆∗)can only be assigned to the nodes in 𝑆∗. Thus, we
have
𝜌+
𝑅(𝑆∗)=Í
𝑒∈𝐸(𝑆∗)𝑤𝑒
|𝑆∗|≤Í
𝑢∈𝑆∗𝑟(𝑢)
𝑇|𝑆∗|≤max
𝑢∈𝑆∗𝑟(𝑢)
𝑇.
At last, we can prove that
𝜌+
𝑅(𝑆∗)
𝜌+
𝑅(ˆ𝑆∗)≤max𝑢∈𝑆∗𝑟(𝑢)/𝑇
𝜌+
𝑅(ˆ𝑆∗)≤max𝑢∈𝑉𝑟(𝑢)/𝑇
𝜌+
𝑅(ˆ𝑆∗)=1+𝜖
. □
The proof of Lemma 5.7.
3917KDD ’24, August 25–29, 2024, Barcelona, Spain Xiaowei Ye et al.
Proof. Let𝑟(𝑡)and𝛽(𝑡)be the vector in the 𝑡𝑡ℎiteration of
Algorithm 1 (line 3). Let 𝑥(𝑡)=𝑟(𝑡)+𝛽(𝑡). Let𝑠(𝑡)=𝑥(𝑡)−𝑥(𝑡−1),
i.e. the updated value during the 𝑡𝑡ℎiteration. We have that
𝑥(𝑡)
𝑡=𝑥(𝑡−1)+𝑠(𝑡)
𝑡=(1−1
𝑡)𝑥(𝑡−1)
𝑡−1+1
𝑡𝑠(𝑡−1).
In the𝑡𝑡ℎiteration of Algorithm 1 (lines 4-9), 𝑟/𝑡and𝛽/𝑡is a feasible
solution of DPwith𝛾𝑡=1
𝑡.
Let(𝛼,𝛽)be a feasible solution of DP. Let𝑟be the vector com-
puted by𝛼by𝐷0ofDP. The objective function of DPcan be seen
as𝑓(𝛼,𝛽)=Í
𝑢∈𝑉(𝑟𝑢+𝛽𝑢)2. Further, the derivation is
▽𝑓(𝛼,𝛽)=2∑︁
𝑢∈𝑉(𝑟𝑢+𝛽𝑢).
According to line 3 of Algorithm 3, we need to compute the sub-
problem
arg min
(𝛼,𝛽)∈D⟨𝑟+𝛽,▽𝑓(𝛼(𝑡−1)
𝑡−1,𝛽(𝑡−1)
𝑡−1)⟩.
This is exactly what FDP do in lines 4-9 of Algorithm 1. FDP solves
this subproblem by the basic 𝐵&𝐵method. It divides the subproblem
into problems of making the distribution be as even as possible on
the edges.
At last, we can conclude that lines 1-9 of Algorithm 1 is an
implementation of the Frank-Wolfe method. □
The proof of Lemma 5.10.
Proof. Since𝑤𝑒≤2, we haveÍ
𝑒𝑤𝑒2≤4𝑚′.□
The proof of Theorem 5.12.
Proof. Let𝑆and𝑇be a cut of the flow network that 𝑠∈𝑆and
𝑡∈𝑇. Let𝑆′=𝑆\{𝑠}and𝑇′=𝑇\{𝑡}. We have ˆ𝑆∗=𝑆′∪𝑇′.
The cut is composed of three types of edge from 𝑆to𝑇. The first
type of edge is from 𝑠to𝑇′. The summary of the first type of edge
isÍ
𝑢∈𝑇′|𝑁(𝑢,ˆ𝑆∗∩𝑅)|. The second type of edge links from 𝑆′to
𝑇′, with summary of capacityÍ
𝑒(𝑢,𝑣):𝑢∈𝑆′,𝑣∈𝑇′𝑤𝑒. The third type
edges links from 𝑆′to𝑡, with summary of capacity |𝑆′|𝜌+
𝑅(ˆ𝑆∗). At
last, we can derive that
𝑓(ˆ𝑆∗)=∑︁
𝑢∈𝑇′|𝑁(𝑢,ˆ𝑆∗∩𝑅)|+∑︁
𝑒(𝑢,𝑣):𝑢∈𝑆′,𝑣∈𝑇′𝑤𝑒+|𝑆′|𝜌+
𝑅(ˆ𝑆∗).
Then, we have
𝑓(ˆ𝑆∗)−∑︁
𝑢∈ˆ𝑆∗|𝑁(𝑢,ˆ𝑆∗∩𝑅)|
=−∑︁
𝑢∈𝑆′|𝑁(𝑢,ˆ𝑆∗∩𝑅)|+∑︁
𝑒(𝑢,𝑣):𝑢∈𝑆′,𝑣∈𝑇′𝑤𝑒+|𝑆′|𝜌+
𝑅(ˆ𝑆∗)
=∑︁
𝑢∈𝑆′
|𝑁(𝑢,𝑇′∩𝑅)|−|𝑁(𝑢,ˆ𝑆∗∩𝑅)|
+|𝑆′|𝜌+
𝑅(ˆ𝑆∗)
=−∑︁
𝑢∈𝑆′|𝑁(𝑢,𝑆′∩𝑅)|+|𝑆′|𝜌+
𝑅(ˆ𝑆∗)
=−(2|𝐸(𝑆′)|−∑︁
𝑢∈𝑆′\𝑅|𝑁(𝑢,𝑆′)|)+|𝑆′|𝜌+
𝑅(ˆ𝑆∗)(8)
When𝑓(ˆ𝑆∗)−Í
𝑢∈ˆ𝑆∗|𝑁(𝑢,ˆ𝑆∗∩𝑅)|<0, we can state that there is
a𝑆′denser than ˆ𝑆∗because𝜌+
𝑅(𝑆′)=2|𝐸(𝑆′)|−Í
𝑢∈𝑆′\𝑅|𝑁(𝑢,𝑆′)|
|𝑆′|>
𝜌+
𝑅(ˆ𝑆∗).When𝑓(ˆ𝑆∗)=Í
𝑢∈ˆ𝑆∗|𝑁(𝑢,ˆ𝑆∗∩𝑅)|, we have𝑆′=ˆ𝑆∗.
Thus, we can complete the proof. □E Details of case study
The network is made up of a university karate club, where each
node represents a member of the club, and each edge represents
a tie between two members of the club. The network represents a
conflict that arose within a karate club at a US university, which
eventually led to the club splitting into two factions. The dataset is
often used to test community detection algorithms, which aim to
identify groups within the network that are more densely connected
with each other than with the rest of the network. The initial club
was led by the individual labeled "Mr. Hi", but a disagreement led
to the formation of a rival faction under the leadership of a student
named "John A". The case study focuses on the subgroup led by
"John A". "John A" and one of his group members serve as the seeds
to identify individuals affiliated with them.
F Supplemental Experiments
On the image network FLICKER ( 𝑛=105938,𝑚=2316948), LA/FDP/
FDPE takes 125.48/3.67/10.54 ms respectively, and reports sub-
graphs with average density 4.95/52.28/50.88 and average conduc-
tance of 0.98/0.85/0.85 respectively.
On the hyperlink network Notre-Dame ( 𝑛=325729,𝑚=1117563),
LA/FDP/FDPE takes 5.83/0.46/1.69 ms respectively, and reports sub-
graphs with average density 3.51/8.22/8.22 and average conductance
of 0.88/0.88/ 0.88 respectively.
On the road network USAROAD ( 𝑛=23947347,𝑚=28854312),
LA/FDP/FDPE takes 16.81/14.38/ 24.73 ms respectively, and reports
subgraphs with average density 0.34/1.07/1.07 and average conduc-
tance of 0.75/0.20/0.20 respectively.
3918