Paths2Pair: Meta-path Based Link Prediction in Billion-Scale
Commercial Heterogeneous Graphs
Jinquan Hang
JD Logistics
Beijing, China
Rutgers University
Piscataway, NJ, USA
jinquan.hang@rutgers.eduZhiqing Hong
Rutgers University
Piscataway, NJ, USA
zhiqing.hong@rutgers.eduXinyue Feng
Rutgers University
Piscataway, NJ, USA
xinyue.feng@rutgers.edu
Guang Wang‚àó
Florida State University
Tallahassee, FL, USA
guang@cs.fsu.eduGuang Yang
Rutgers University
Piscataway, NJ, USA
gy121@cs.rutgers.eduFeng Li
JD Logistics
Beijing, China
lifeng47@jd.com
Xining Song
JD Logistics
Beijing, China
songxining1@jd.comDesheng Zhang
Rutgers University
Piscataway, NJ, USA
desheng@cs.rutgers.edu
ABSTRACT
Link prediction, determining if a relation exists between two en-
tities, is an essential task in the analysis of heterogeneous graphs
with diverse entities and relations. Despite extensive research in
link prediction, most existing works focus on predicting the re-
lation type between given pairs of entities. However, it is almost
impractical to check every entity pair when trying to find most
hidden relations in a billion-scale heterogeneous graph due to the
billion squared number of possible pairs. Meanwhile, most methods
aggregate information at the node level, potentially leading to the
loss of direct connection information between the two nodes. In
this paper, we introduce Paths2Pair, a novel framework to address
these limitations for link prediction in billion-scale commercial
heterogeneous graphs. (i) First, it selects a subset of reliable en-
tity pairs for prediction based on relevant meta-paths. (ii) Then, it
utilizes various types of content information from the meta-paths
between each selected entity pair to predict whether a target rela-
tion exists. We first evaluate our Paths2Pair based on a large-scale
dataset, and results show Paths2Pair outperforms state-of-the-art
baselines significantly. We then deploy our Paths2Pair on JD Logis-
tics, one of the largest logistics companies in the world, for business
expansion. The uncovered relations by Paths2Pair have helped JD
Logistics identify 108,709 contacts to attract new company cus-
tomers, resulting in an 84% increase in the success rate compared to
the state-of-the-practice solution, demonstrating the practical value
‚àóGuang Wang is the corresponding author.
This work is licensed under a Creative Commons Attribution
International 4.0 License.
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
¬©2024 Copyright held by the owner/author(s).
ACM ISBN 979-8-4007-0490-1/24/08.
https://doi.org/10.1145/3637528.3671563of our framework. We have released the code of our framework at
https://github.com/JQHang/Paths2Pair.
CCS CONCEPTS
‚Ä¢Information systems ‚ÜíData mining; Computational ad-
vertising; ‚Ä¢Computing methodologies ‚ÜíNeural networks.
KEYWORDS
Heterogeneous Graphs; Link Prediction; Graph Neural Networks
ACM Reference Format:
Jinquan Hang, Zhiqing Hong, Xinyue Feng, Guang Wang, Guang Yang,
Feng Li, Xining Song, and Desheng Zhang. 2024. Paths2Pair: Meta-path
Based Link Prediction in Billion-Scale Commercial Heterogeneous Graphs.
InProceedings of the 30th ACM SIGKDD Conference on Knowledge Discovery
and Data Mining (KDD ‚Äô24), August 25‚Äì29, 2024, Barcelona, Spain. ACM, New
York, NY, USA, 11 pages. https://doi.org/10.1145/3637528.3671563
1 INTRODUCTION
Heterogeneous graphs (HGs) [ 36,42,45] have become an important
and effective data structure to represent complex real-world scenar-
ios [11,46,52]. HGs are featured by their varied types of nodes and
edges, making them suitable for modeling complex relationships in
diverse fields like social networks [ 14,50,54] and recommendation
systems [ 4,24,49]. In recent years, lots of research has focused on
the link prediction task in HGs [ 27,41,53]. This task aims to predict
the existence of hidden edges between two nodes, leveraging the
known edges and attributes of nodes and edges. In this paper, we
aim to solve an industrial link prediction problem: finding compa-
nies‚Äô key personnel. The problem setting is illustrated in Figure 1.
This problem is vital because finding the key personnel to contact in
target companies is the initial step for service providers to expand
their business and advertise their products.
5082
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Jinquan Hang et al.
Known Non -
Target RelationsKnown Key 
Personnel RelationHidden Key 
Personnel Relation
Company Person Company 
Account Delivery 
Region
How can we efficiently 
find hidden key personnel 
relations?
Figure 1: Illustration of finding key personnel.
Generally, there are two types of link prediction models that can
potentially address our problem. The first type includes unsuper-
vised graph embedding models like TransE [ 2], TransH [ 44], and
Metapath2Vec [ 5]. These models create embedding for each node
and edge in a graph, which helps predict complex relations between
nodes. They can also be integrated with methods [ 21,29] that prune
the search space to quickly identify the target edge. However, they
need to be aware of all the nodes from the start, making them less
suitable for tasks involving constantly changing data. The second
type involves supervised graph neural network models such as
RGCN [ 32], HGT [ 18], and MAGNN [ 10], which learn from existing
target edges. They are ideal for learning from partially labeled data
and predicting on unlabeled data [ 13,22]. Despite the effectiveness,
these models face efficiency limitations in finding all target edges
because they need to check ùëÇ(ùëÅ2)pairs in a graph with ùëÅnodes.
Typically, there is considerable potential to infer hidden target
edges within a graph from the known edges. As Figure 2 illustrates,
there is a strong correlation between the type 2 edge ("A ‚ÜíC", "F
‚ÜíD") and the meta-path [ 35] "type 1 node‚Üítype 2 node‚Üítype 3
node ". Although nodes of type 1 and type 3 can form four distinct
pairs, only those two pairs that align with the aforementioned
meta-path qualify as our target edges. Thus, selecting a subset of
pairs based on highly relevant meta-paths can greatly improve the
efficiency, i.e., reduce the pairs to check from ùëÇ(ùëÅ2)toùëÇ(ùëòùëÅ),
whereùëòis the average number of neighbor nodes find by highly
relevant meta-paths. Moreover, other meta-path instances like "F
‚ÜíC‚ÜíD", can also be helpful for pinpointing which pairs in our
selected subset are likely to have target edges. Therefore, as in
Figure 2, we propose a solution for hidden link prediction in a large-
scale heterogeneous graph: first, we aim to find the meta-paths that
are related to target edges and select a subset of node pairs based
on them, and, we then can combine the meta-paths between each
node pairs to further determine the existence of hidden edges.
However, when trying to implement our solution as shown in
Figure 2, there are two main challenges:
‚Ä¢(i) Efficient Searching of Relevant Meta-paths. In the real world,
since numerous types of nodes and edges can form a giant array
of meta-paths, it is not feasible to check all meta-paths manu-
ally. Although there are many automatic methods for finding
meta-paths [ 23,28,39], most of them operate during the training
process to explore and identify better ones. However, exploring
large-scale data in this way is challenging due to efficiency issues.
Limitation
Our Solution
1. Select reliable pairs by 
relevant meta -path.2. Aggregate information 
directly to pair level.
F D F D F DE
CHigh 
Probability
2. Most methods overlook 
direct pair node connections.1. Impractical to check 
every pair.
A D A D F C F C
F D F DTraditional Link Prediction Method
Already 
Known
A C A CLow 
ProbabilityA D A D
Low 
ProbabilityF C F C
High 
ProbabilityF D F D
Traditional Link Prediction Method
Already 
Known
A CLow 
ProbabilityA D
Low 
ProbabilityF C
High 
ProbabilityF D
Problem: How to find h idden type 2 edge?
F DC
F DCA Heterogeneous Graph 
with Hidden Edge
Hidden 
Type 2 EdgeA C
D FB
EA C
D FB
E
Type 1 NodeType 1 Node
Type 2 NodeType 2 Node
Type 3 NodeType 3 Node
Known
Type 1 Edge
Known
Type 2 EdgeKnown
Type 2 EdgeFigure 2: The motivation of our solution.
Therefore, how to identify relevant meta-paths in our large-scale
graphs automatically and efficiently remains a challenge.
‚Ä¢(ii) Effective Integration of Inter-Pair Meta-Paths. In real data,
meta-paths between two nodes are complex and contain business
information critical to link predictions. However, most existing
methods usually gather information from each node‚Äôs neighbors
and then combine this information to make predictions [ 10,32].
This process can miss some complex relations between the two
nodes. Therefore, finding a method that fully uses the information
in meta-paths between node pairs remains a challenge.
To address these challenges, we propose a novel framework,
Paths2Pair, which consists of two main components: (i) A K-Hop
PairPath Finder module. In this module, we can capture all k-hop
meta-paths by effectively integrating k-hop sampling and meta-
path sampling. Given the scale of our data and the complexity of
the associated computations, we only use operations supported by
distributed relational databases, enabling us to achieve large-scale
application. (ii) A PairPaths2Link module. In this module, we present
a model that directly aggregates information to the pair level for
link prediction. Specifically, we first aggregate information from
the same type of meta-paths to the corresponding pairs, and then
combine the information from various meta-paths associated with
each pair to perform link prediction. Based on these two modules,
we first identify meta-paths relevant to known target edges and
then train the PairPaths2Link model with pairs sharing the same
head nodes as the known target edges. Next, we use the highly
relevant meta-paths to select potential pairs from the entire graph
and apply the trained PairPaths2Link model to predict hidden target
edges among these selected pairs.
In summary, this paper makes the following contributions.
‚Ä¢To the best of our knowledge, we are the first to study the na-
tionwide link prediction problem utilizing billion-scale heteroge-
neous data for finding key personnel. We design, develop, and
deploy a billion-scale heterogeneous graph covering more than
360 cities with 1.4 billion nodes and 9.1 billion edges, and design
a link prediction model to find the key personnel relationship.
5083Paths2Pair: Meta-path Based Link Prediction in Billion-Scale Commercial Heterogeneous Graphs KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Meta -Path
Node Type 1
Node Type 3Node Type 2B A
FC
E DHeterogeneous Graph
Node Type 1
Node Type 3Node Type 2B A
FC
E DHeterogeneous Graph
A E D
A E F
B E D
B E F
B C FMeta -Path Instances
Figure 3: An example of a 2-hop meta-path.
‚Ä¢We propose a novel method that can take advantage of distributed
systems to efficiently find relevant meta-paths of the target edge.
Additionally, we provide a model that can take advantage of
information from various meta-paths between each pair and
various edges and nodes along each meta-path for link prediction.
‚Ä¢We performed comprehensive experiments using real-world datasets
against multiple baselines, finding our framework outperforms
baseline models by over 15% in average precision. Moreover, we
deploy our framework on JD Logistics for nationwide business
expansion and have achieved 84% improvement in real-world
A/B testing compared with the state-of-the-practice method.
2 PRELIMINARY
In this section, we provide formal definitions for key terms related
to heterogeneous graphs [34] and define our problem.
Definition 2.1. Heterogeneous Graph (HG). A heterogeneous
graph is a graph consisting of different types of entities (i.e., nodes)
and/or different types of relations (i.e., edges), which can be formally
defined asùêªùê∫=(ùëâ,ùê∏). Specifically, within ùêªùê∫: Each node ùë£ùëñ‚ààùëâ
has an associated node type ùëú=ùúô(ùë£ùëñ),ùëú‚ààùëÇ. Each edgeùëíùëñùëó‚ààùê∏has
an associated edge type ùëô=ùúì(ùëíùëñùëó),ùëô‚ààùêø. There is a heterogeneity
in the types of nodes or edges, represented as |ùëÇ|+|ùêø|>2.
Definition 2.2. Meta-path. Nodes can be interconnected through
various sequences of edges in a heterogeneous graph. Meta-paths
are introduced to capture higher-order relations among nodes. A
meta-pathùëÉis a path on a heterogeneous graph ùêªùê∫denoted in
the form of ùëú1ùëô1‚àí‚Üíùëú2ùëô2‚àí‚Üí¬∑¬∑¬∑ùëôùëö‚àí1‚àí‚àí‚àí‚àí‚Üíùëúùëö, whereùëúandùëôare node
types and edge types, respectively. The number of edges ùëö‚àí1is
the meta-path‚Äôs hop count.
Definition 2.3. Meta-path Instance. Given a meta-path ùëÉin a
heterogeneous graph, a meta-path instance ùëùofùëÉis defined as a
sequence of nodes and edges in the graph that follows the schema
defined byùëÉ.
An example of a 2-hop meta-path is illustrated in Figure 3. There
are three types of nodes. For the meta-path "type 1 node ‚Üítype 2
node‚Üítype 3 node ", there are six meta-path instances that satisfy
this type, i.e., "A‚ÜíE‚ÜíD, A‚ÜíE‚ÜíF, B‚ÜíE‚ÜíD, B‚ÜíE‚ÜíF,
B‚ÜíC‚ÜíF."
Problem Definition: Given a large-scale heterogeneous graph ùêªùê∫=
(ùëâ,ùê∏)containing various types of nodes ùëú‚ààùëÇand edgesùëô‚ààùêø, along
with some known target edges ùê∏tgt
kn, we aim to identify hidden target
03
05
Edge Index 0602Anonymized 
Account IDDelivery 
RegionAnonymized Person ID
01
07
CompanyDistrict Sub-district04
08
NodeFigure 4: The overall structure of our graph.
edgesùê∏tgt
hdwith high efficiency and effectiveness. Specifically, our goal
is to identify key personnel in a large HG at JD Logistics to improve
the business revenue.
3 DATA DESCRIPTION
Our data mainly comes from JD Logistics, which can be represented
as a heterogeneous graph with 4 types of 1 billion nodes and 7
types of 10 billion edges as illustrated in Figure 4. In Appendix
A.1, we provide the feature count of each type of node and edge. In
addition to the information shown in the graph, JD Logistics has
also provided some encrypted data from some companies engaged
in partnership contracts from October 1, 2022, to November 30, 2023.
This data includes encrypted information about people who signed
the contracts for these companies and the dates these contracts
were signed. In the following, we represent these people as the key
personnel of their respective companies.
Privacy protection. To enhance privacy, all key identifiers (e.g.,
people, accounts, delivery regions, companies) have been encrypted.
Data Structure. Traditional graph neural network platforms like
PyG[ 9] and DGL[ 40] need to load the entire graph into mem-
ory, which cannot work well for our huge data. To address this
challenge, we drew inspiration from some newer distributed plat-
forms, such as AliGraph [ 47,55] and Galileo [ 19], which construct
graphs in the form of tables that can be accepted by distributed
relational databases and then utilize operations supported by dis-
tributed systems to process large-scale graph data. Specifically,
we used two types of tables to construct our graph: Edge Tables
E=[¬∑¬∑¬∑,Eidx,¬∑¬∑¬∑] and Node Tables V=[¬∑¬∑¬∑,Vtyp,¬∑¬∑¬∑], where
idx‚àà[1,2,¬∑¬∑¬∑,7]indicates the edge index and typ‚àà{Person, Ac-
count, Delivery, Company }indicates the node type. Below are the
detailed formats of these tables:
‚Ä¢Edge Table: Each edge table Eidxcontains three types of columns:
head node ID, tail node ID and edge features. We denote head
and tail node IDs with Eidx.head andEidx.tail, and edge feature
columns with Eidx.feats.
‚Ä¢Node Table: Each node table Vtypcontains two types of columns:
node ID and node features. We refer to the node ID column with
Vtyp.nodeID and the node feature columns with Vtyp.feats.
Additionally, in later computations, we will generate numerous
tables Prelated to each meta-path ùëÉ. We will call these tables as
5084KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Jinquan Hang et al.
"path table." Each row in a path table Prepresents an instance of the
corresponding meta-path ùëÉ. Below is the details of the path table.
‚Ä¢Path Table: Each path table Pcontains two types of columns:
node ID and edge features. Since path tables are derived from
joining multiple edge tables, we denote node IDs column for
nodeùëúfrom edge table Eidxwith P.ùëôùëú
idx, and edge feature columns
from edge table EidxasP.ùëôfeats
idx. For example, if the meta-path
ùëÉ=ùëú1ùëô1‚àí‚Üíùëú2¬∑¬∑¬∑ùëôùëö‚àí1‚àí‚àí‚àí‚àí‚Üíùëúùëö, the corresponding columns in Pwill
be [P.ùëôùëú1
1,P.ùëôfeats
1,P.ùëôùëú2
1,¬∑¬∑¬∑,P.ùëôfeats
ùëö‚àí1,P.ùëôùëúùëö
ùëö‚àí1]. For the start node‚Äôs
ID column P.ùëôùëú1
1and end node‚Äôs ID column P.ùëôùëúùëö
ùëö‚àí1, we will also
represent them as P.start andP.end.
Moreover, we use a special edge table Etgt
knto store the known
target edges representing key personnel relations. Our strategies
for preventing data leakage are detailed in Appendix A.2.
‚Ä¢Known Target Edge Table: This table contains three columns:
Etgt
kn.head ,Etgt
kn.tail, and Etgt
kn.date. The Etgt
kn.head column stores the
partnered company, the Etgt
kn.tailcolumn records the correspond-
ing key personnel, and the Etgt
kn.date column contains the first
day of the month they start cooperation with JD Logistics.
4 METHODOLOGY
In this section, we show the detailed design of Paths2Pair. As shown
in Figure 5, Paths2Pair includes three stages. In the first stage, based
on the known target edges, we identify all the potential meta-paths
relevant to the target edges. Subsequently, in the second stage, we
train a model to predict the existence of target edges. In the third
stage, we first select a subset of reliable pairs based on relevant
meta-paths discovered in the first stage. Then, utilizing the model
in the second stage, we assess these chosen pairs to determine their
likelihood of containing a hidden target edge.
4.1 Relevant Meta-paths Discovery
In this stage, we aim to find all types of meta-paths related to the
target edges and determine their match rates to the target edges.
This approach is motivated by our observation that target edges
may relate to various meta-paths within heterogeneous graphs.
By pinpointing these meta-paths, we are able to narrow down the
prediction scope by selecting reliable node pairs and then utilize
these identified meta-paths to enhance the prediction of target edge
existence between these pairs.
K-Hop Pair-Paths Finder. There are two main sampling methods
for heterogeneous graphs: k-hop and meta-path sampling. K-hop
[38] sampling can automatically find each node‚Äôs k-hop neighbor
nodes but can‚Äôt return which meta-paths connect them. Meta-path
sampling [ 7,43] finds neighbors along specific paths but needs these
paths to be set in advance. To find all meta-paths related to a target
edge, we propose a new method, K-Hop Pair-Paths Finder, which
combines the strengths of the previous two methods, enabling the
automatic identification of all possible k-hop meta-paths starting
from the head node of known target edges and filters them by their
match rate to the target edge.
The pseudo-code of K-Hop Pair-Paths Finder is shown in Algo-
rithm 1, with the inputs and outputs described below:
Pall,MatchRates =K-Hop_Pair-Paths_Finder (E,Etgt
kn,ùëòhop
max). (1)Algorithm 1 K-Hop Pair-Paths Finder.
Require: Edge tables E; known target edges Etgt
kn; max hopùëòmax.
Ensure: All relevant meta-paths Pallstart from Etgt
kn.head with corre-
sponding match rates MatchRates toEtgt
kn.
1:Pall‚Üê[]
2:MatchRates‚Üê{}
3:Pseed‚Üê[Etgt
kn.head]
4:typtgt
tail‚ÜêNodeType(Etgt
kn.tail)
5:forùëò=1toùëòmaxdo
6: Pnew‚Üê[]
7: foreach Pbase‚ààPseeddo
8: typpath‚ÜêNodeType(Pbase.end)
9: foreach Eidx‚ààEand each col join‚àà{head,tail}do
10: typjoin‚ÜêNodeType(Eidx.coljoin)
11: iftyppath=typjointhen
12: Pnext‚ÜêPbase Z
Pbase.end=E idx.coljoinEidx
13: Pnew.append(P next)
14: coladd‚Üêtailifcoljoin=head else head
15: typadd‚ÜêNodeType(Eidx.coladd)
16: iftypadd=typtgt
tailthen
17: rate=MatchRate(Pnext,Etgt
kn)
18: ifrate>0then
19: Pall.append(P next)
20: MatchRates[Pnext]‚Üê rate
21: Pseed‚ÜêPnew
22:return Pall,MatchRates
whereùëòhop
maxis the max hop count for meta-paths, Pall=[¬∑¬∑¬∑,Pall
ùëñ,¬∑¬∑¬∑,
Pall
ùëÅùëù]is the path tables for all the relevant meta-paths we find. ùëÅùëù
is the relevant meta-paths count. The match rate of each path table
Pall
ùëñis stored in MatchRates[Pall
ùëñ]and is calculated as follows:
MatchRate(Pall
ùëñ,Etgt
kn)=Pall
ùëñZ
Pall
ùëñ.start=Etgt
kn.head‚àßPall
ùëñ.end=Etgt
kn.tailEtgt
kn
Pall
ùëñ.(2)
where Zmeans the inner join operation, |¬∑|denotes the number
of rows in the table.
Our overall approach in Algorithm 1 is as follows: we begin with
set all head nodes Etgt
kn.head of the known target edges as the unique
0-hop meta-paths. Then, we iterative obtain all meta-paths from 1
toùëòmaxhops in length. To find all relevant ùëò-hop meta-paths, we
sequentially try to join ( Z) all possible edges Eidx‚ààEto the end
node Pbase.endof each (ùëò‚àí1)-hop meta-path Pbase‚ààPseed. For
those meta-paths whose end node type typaddmatches the target
edge‚Äôs tail node type typtgt
tail, we calculate their match rates with
the known target edges. We also explain each line‚Äôs operations in
Appendix A.3.
Furthermore, all data operations in Algorithm 1 are based on
relational algebra, i.e., join. This choice is driven by our data being
stored in distributed relational databases due to its scale. Relational
algebra enables us to leverage distributed computing systems for
operations on these databases, thus facilitating our computations
on a billion-scale heterogeneous graph.
5085Paths2Pair: Meta-path Based Link Prediction in Billion-Scale Commercial Heterogeneous Graphs KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
K-Hop 
Pair-Path Finder
Relevant 
Meta -Path TypesAll Instances of Relevant 
Meta -PathsStage 1: Relevant  Meta -Paths Discovery
Known Company -
Key Personnel EdgesInput Data
Sort & Divide Base 
on Match RateSequential 
Meta -Path 
Features
Billion -Scale 
Heterogeneous 
GraphP P
P PP P
P PStage 2: Link Prediction Model Training
PairPaths2Link
Loss Function
Pair2Paths 
MappingMeta -Paths for Each 
Selected PairSelected Pairs 
with Label
P P
P P
Trained Model 
ParametersP PMain Meta -Paths
P P
P
Auxiliary Meta -Paths
P
PPP
P
PNegative:
PPositive:
P P
Negative:
PPositive:
P P
Stage 3: Hidden Target Edges PredictionMeta -Path 
SamplingSampling Results
Main Meta -Paths
Auxiliary Meta -PathsPairPaths2LinkMeta -Paths for Each 
Selected Pair
Pair2Paths 
MappingSelected Pairs 
without Label
Output DataHidden Company -Key 
Personnel Edges and 
Associated Probability
0.90.9
0.80.8
0.10.1Sequential 
Meta -Path 
Features
Figure 5: The overall structure of our framework.
Sort & Divide Based on Match Rate. Next, we sort the path tables
in the list Pallbased on their match rate and divide them into two
types: main meta-paths and auxiliary meta-paths. The method for
sorting the meta-paths based on their match rate is as follows:
Ptrain=SORT(Pall,by=MatchRates,order =descending). (3)
where Ptrain=[¬∑¬∑¬∑,Ptrain
ùëñ,¬∑¬∑¬∑], We record the corresponding type
of each meta-path in Ptrainasptrain=[¬∑¬∑¬∑,ùëÉtrain
ùëñ,¬∑¬∑¬∑]. And the
topùëòmain meta-paths as used as main meta-paths Pmain=Ptrain[:
ùëòmain], while others are used as auxiliary meta-paths.
4.2 Link Prediction Model Training
In this stage, we aim to further identify target edges from the node
pairs selected by main meta-paths. We observed that there can be
numerous meta-paths associated with the target edge between node
pairs, each with distinct features of nodes and edges. By effectively
integrating this information, we can accurately determine whether
a target edge exists between node pairs.
Most existing link prediction methods [ 10,26,32] aggregate
neighbor nodes‚Äô information into each node and then combine the
embedding of the two nodes for prediction. This approach, however,
may overlook some details about the direct connections between
two nodes. To address this issue, we developed a new model called
Pair-Paths2Link. This model can continuously aggregate informa-
tion at the pair level, allowing it to fully utilize the direct connec-
tions between two nodes for link prediction. The model‚Äôs detailed
structure is shown in Figure 6. Next, we will outline the details of
this model.
Meta -Path Level AggregationTransformerB AMeta -Path Type:
Transformer
Attention
Pair Level AggregationTransformer & Flatten 
Concatenate & MLP
Link Prediction ResultRelevant 
Meta -Paths
EmbeddingTarget Pair With Relevant Meta -paths
Node & Edge Feature ProjectionBB AA B AFigure 6: Pair-Paths2Link.
Selected Pairs with Label. We first union the pairs linked by any
kind of main meta-paths Pmainfrom stage 1 to serve as samples:
Pairtrain=UNION([¬∑¬∑¬∑,SELECT(Pmain
ùëñ,[start,end]),¬∑¬∑¬∑]).(4)
where Pairtrain‚ààRùëÅpair
train√ó2represents the set of pairs connected
by main meta-paths, with ùëÅpair
trainbeing the total number of such
5086KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Jinquan Hang et al.
pairs. The function SELECT(Pmain
ùëñ,[start,end]) extracts the start
and end columns of the ùëñ-th main meta-path. UNION combines the
results from each meta-path and removes any duplicates.
Next, we generate the label Yfor each pair. If two nodes are
linked by a target edge, they form a positive sample pair. If not,
they form a negative sample.
Y[ùëñ]=(
1ifPairtrain[ùëñ]‚ààùê∏tgt
0otherwise(5)
where Y‚ààRùëÅpair
train,Pairtrain[ùëñ]theùëñ-th pair in Pairtrainandùëå[ùëñ]is
the label for it.
Pair2Paths Mapping. Next, we need to construct a mapping be-
tween each pair and each meta-path instance. The inputs and out-
puts of this module can be expressed as follows:
Emap=Pair2PathsMapping (Pair,P) (6)
where Pair is a table containing pairs of node IDs, P=[¬∑¬∑¬∑,Pùëñ,¬∑¬∑¬∑]
is a list of path tables, Emap=[¬∑¬∑¬∑,Emap
ùëñ,¬∑¬∑¬∑] is a list of edge tables.
Each edge table Emap
ùëñmaps each pair in Pair to instances in the
path table Pùëñ.
To realize this module. First, we use the row number of each pair
and each meta-path instance as their ID column.
Pair.PairID =Row_Num(),Pmap
ùëñ.PathID =Row_Num() (7)
Then, we append the corresponding pair‚Äôs ID to each meta-path
instance.
Pmap
ùëñ=Pùëñ Z
Pùëñ.start=Pair.head‚àßPùëñ.end=Pair.tailPair (8)
where Pmap
ùëñ‚ààRùëÅmap
ùëñ√óùëÅcol
ùëñ,ùëÅmap
ùëñis the instance number of the ùëñ-th
meta-path that can link to pairs in the pair table Pair,ùëÅcol
ùëñis the
number of columns in each instance.
Then, by using the Pmap
ùëñ.PairID andPmap
ùëñ.PathID columns, we
construct the edge table Emap
ùëñ‚ààRùëÅmap
ùëñ√ó2. Each row in this table
represents a connection between a pair in Pair and a meta-path
instance in Pmap, as shown in the equation:
Emap
ùëñ=SELECT(Pmap
ùëñ,[PairID,PathID]) (9)
After obtaining the mapping edge table Emap
ùëñfor each meta-path
and pair, we can then get the desired output Emap=[¬∑¬∑¬∑,Emap
ùëñ,¬∑¬∑¬∑].
And the mapping relation between PairtrainandPtrainwill be as
follows:
Etrain
map=Pair2PathsMapping (Pairtrain,Ptrain). (10)
Sequential Meta-Path Features. Since path table Ptain
ùëñonly has
node IDs and edge features and cannot distinguish columns from
different nodes or edges, which makes it hard for the model to
use all kinds of information from it well. To address this issue, we
use this module to change it into a different form. The inputs and
outputs of this module can be expressed as follows:
Xpair,Lseq=SeqMetaPathFeat(Pair,P,V) (11)
where Xpair=[Xnode
head,Xnode
tail]is the features for each head and tail
node in pair table Pair,Lseq=[¬∑¬∑¬∑,Lseq
ùëñ,¬∑¬∑¬∑],Lseq
ùëñ=[Xnodeùëú1,¬∑¬∑¬∑,
Xedge
ùëôùëõ,¬∑¬∑¬∑,Xnodeùëúùëö]is the features for each node ùëúand edgeùëôin the
ùëñ-th relevant meta-path.To obtain the features Xnodeùëú for each node of type ùëúfrom the
ùëñ-th meta-path, we use their node IDs listed in the path table Pùëñto
retrieve their corresponding features from the node table Vùëú.
Xnode
ùëú=Pùëñ.ùëú Z
Pùëñ.ùëú=Vùëú.nodeIDVùëú (12)
We can similarly retrieve features for nodes in the pair table.
To obtain the features Xedge
ùëôfor each edge of type ùëôfrom the
ùëñ-th meta-path, we extract the corresponding feature columns from
each path table Pùëñbased on their column names Eùëô.feats.
Xedge
ùëô=SELECT(P,Eùëô.feats) (13)
After obtaining the all the nodes and edges features for table
Pair and each path table Pùëñ, we can directly transfer them to the
desired output Xpair
tain,Lseq
tain=SeqMetaPathFeat(Pairtain,Ptain,V).
Pair-Paths2Link. Based on the information from pairs Xpair, meta-
paths between pairs Lseq, and the mapping edges between pairs
and meta-paths Emap. Our Model Pair-Paths2Link comprehensively
combines these information, and makes the link prediction for each
pair. The inputs and outputs of our model are shown as follows:
Y=Pair-Paths2Link(Xpair,Lseq,Emap). (14)
where Y‚ààRùëÅpairis the number of pairs in Xpair.
Next, we will provide a detailed description for each component
in Pair-Paths2Link as shown in Figure 6.
Node & Edge Feature Projection. Different types of node and
edge have varying features, which means the feature vectors Xnodeùëúùëñ
andXedge
ùëôùëñdiffer in length. To address this, we use a multi-layer per-
ceptron block, MLP typ, to convert the raw vectors into embedding
with a standard dimension.
Hseq
ùëñ=Stack(MLPùëú1(Xnode
ùëú1),MLPùëô1(Xedge
ùëô1),¬∑¬∑¬∑,MLPùëúùëö(Xnode
ùëúùëö))(15)
where Hseq
ùëñ‚ààRùëÅmap
ùëñ√ó(2ùëö‚àí1)√óùëë‚Ñérepresent the transformed fea-
ture vectors for the sequential features of the ùëñ-th meta-path Lseq
ùëñ=
[Xnodeùëú1,Xedge
ùëô1,Xnodeùëú2,¬∑¬∑¬∑,Xnodeùëúùëö],ùëÅmap
ùëñdenotes the number of meta-
path instances, and ùëë‚Ñéis the standardized embedding length.
Meta-Path Level Aggregation. Next, we want to aggregate the
information of each kind of meta-path to their corresponding pairs.
Since some recent papers [ 3,48,51] have shown that using the
encoder layer of the transformer can better extract information
from sequential nodes, we also use this structure to first generate
the embedding for each meta-path. We provide the formula as
follows:
Q=WùëÑ
MetaHseq
ùëñ,K=Wùêæ
MetaHseq
ùëñ,V=Wùëâ
MetaHseq
ùëñ,
HMetaAtt
ùëñ =softmax(QKùëá
‚àöÔ∏Å
ùëëùëò)V+Hseq
ùëñ,
HMeta
ùëñ=MLP Meta(Flatten23(HMetaAtt
ùëñ))(16)
where WùëÑ
Meta,Wùêæ
Meta,Wùëâ
Meta‚ààRùëë‚Ñé√óùëë‚Ñéare trainable parameters
for each kind of meta-path, HMetaAtt
ùëñ‚ààRùëÅmap
ùëñ√ó(2ùëö‚àí1)√óùëë‚Ñéis the
updated embedding for each type of nodes and pairs on the meta-
path. Flatten23 means merge the second and third dimensions of the
matrix HMetaAtt
ùëñto a new shape ùëÅmap
ùëñ√ó((2ùëö‚àí1)¬∑ùëë‚Ñé).MLP Meta are
modules shared for the same type of meta-path, HMeta
ùëñ‚ààRùëÅmap
ùëñ√óùëë‚Ñé
is the embedding for each instance of the ùëñ-th meta-path.
Next, we want to aggregate the information from meta-paths to
their corresponding pairs. However, since one pair may connected
5087Paths2Pair: Meta-path Based Link Prediction in Billion-Scale Commercial Heterogeneous Graphs KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
to different numbers of meta-paths, we first generate an attention
weight for each path, based on their embedding.
AttMeta
ùëñ=MLP(HMeta
ùëñ) (17)
Based on AttMeta
ùëñ, we then can generate the adjacent matrix
between each pair and each instance of ùëñ-th meta-path.
AdjMeta
ùëñ[Emap
ùëñ.head[ùëó],Emap
ùëñ.tail[ùëó]]=AttMeta
ùëñ[ùëó] (18)
where AdjMeta
ùëñ‚ààRùëÅpair√óùëÅmap
ùëñ.
Next, we aggregate the embedding from the same type of meta-
paths to pairs.
Hpair
ùëñ=AdjMeta
ùëñ¬∑HMeta
ùëñ (19)
where Hpair
ùëñ‚ààRùëÅpair√óùëë‚Ñéis the embedding of the ùëñ-th meta-path.
Pair Level Aggregation. We then stack meta-paths embedding as
follows:
Hpair=Stack(Hpair
1,¬∑¬∑¬∑,Hpair
ùëñ,¬∑¬∑¬∑,Hpair
ùëÅùëù) (20)
where Hpair‚ààRùëÅpair√óùëÅùëù√óùëë‚Ñé.
Since different types of meta-paths may have a mutual influence
between them. So we continue to use the transformer encoder [ 37]
layer to first obtain the mutual influence between different types
of meta-paths.
Q=WùëÑ
PairHpair,K=Wùêæ
PairHpair,V=Wùëâ
PairHpair
HMut=softmax(QKùëá
‚àöÔ∏Å
ùëëùëò)V+Hpair(21)
We combine embeddings from various meta-paths with the fea-
tures of both nodes in each pair to form the final embedding for
each pair. An MLP model is then used for the final link prediction.
Y=MLP Pair(Flatten23(HMut)‚äïXnode
head‚äïXnode
tail). (22)
where‚äïdenotes the concatenation operation.
Referencing equations from 15 to 22, we obtain the prediction re-
sult for training samples as Ytrain=Pair-Paths2Link(Xpair
train,Lseq
train,
Emap
train). With the labels Yfor each pair, we employ the log loss
function to compute the loss and train the model.
L=‚àí1
ùëÅpair
train(Yùëáln Y train+(1‚àíY)ùëáln(1‚àíYtrain)) (23)
4.3 Hidden Target Edge Prediction
Through the first two stages, we have identified all types of meta-
pathsùëÉtrain
ùëñ‚ààptrainassociated with the target path and a model
capable of detecting node pairs with hidden edges among those
selected by the main meta-paths. We first use traditional meta-path
sampling methods to directly acquire all relevant meta-paths Pmeta.
ifùëÉtrain
ùëñ=ùëú1ùëô1‚àí‚Üíùëú2ùëô2‚àí‚Üí¬∑¬∑¬∑ùëôùëö‚àí1‚àí‚àí‚àí‚àí‚Üíùëúùëö, then the meta-path sampling
result for this meta-path will be
Pmeta
ùëñ=Eùëô1Z
ùê∏ùëô1.ùëú2=ùê∏ùëô2.ùëú2ùê∏ùëô2¬∑¬∑¬∑Zùê∏ùëôùëö‚àí1. (24)
The meta-path sampling results for all the relevant meta-paths
can be represented as Pmeta=[¬∑¬∑¬∑,Pmeta
ùëñ,¬∑¬∑¬∑]. Then, based on the
main meta-paths Pmeta-main
ùëñ=Pmeta[:,ùëòmain]we select a subset of
node pairs for prediction.
Pairpred=UNION([¬∑¬∑¬∑,SELECT(Pmeta-main
ùëñ,[start,end]),¬∑¬∑¬∑]) (25)Based on the Pair2PathsMapping introduced in Equation 6, we
can get the mapping relation between PmetaandPairpred.
Epred-map=Pair2PathsMapping (Pairpred,Pmeta) (26)
Then, we obtain our model‚Äôs required inputs using the SeqMeta-
PathFeat introduced in Equation 11.
Xpred-pair,Lpred-seq=SeqMetaPathFeat(Pairmeta,Pmeta,V) (27)
Finally, we can use the trained model Pair-Paths2Link introduced
in Equation 14 to make predictions for all selected pairs.
Ypred=Pair-Paths2Link(Xpred-pair,Lpred-seq,Epred-map) (28)
5 EXPERIMENT
We design our experiments around these key research questions:
‚Ä¢RQ1: Is our model more effective than other baselines?
‚Ä¢RQ2: What is the performance of K-Hop Pair-Paths Finder?
‚Ä¢RQ3: How do the modules in our model affect its performance?
‚Ä¢RQ4: How do model hyperparameters influence the performance?
5.1 Experimental Setup
Datasets. Details for the raw dataset used can be found in Section
3. We split the data into training set, validation set, and test set in
chronological order. Specifically, the data from October 1, 2022, to
May 31, 2023, is used as the training set; the data from June 1, 2023,
to July 31, 2023, is used as the validation set; and the data from
August 1, 2023, to September 30, 2023, is used as the test set.
Baselines. We compared our approach with seven popular baseline
models, which are: (i) Multilayer Perceptron (MLP) [ 31], (ii) Rela-
tional Graph Convolutional Networks (R-GCNs) [ 32], (v) Metapath
Aggregated Graph Neural Network (MAGNN) [ 10], (iv) Heteroge-
neous Graph Transformer (HGT) [ 18], (vi) Simple-HGN [ 25] (iii)
Heterogeneous Graph Propagation Network (HPN) [ 20], and (vii)
Simple and Efficient Heterogeneous Graph Neural Network (Se-
HGNN) [ 48]. Apart from MLP, these graph neural networks (GNN)
fall into two categories: those based on k-hop sampling (R-GCNs,
HGT, Simple-HGN) and those that are based on meta-path sampling
(HPN, MAGNN, SeHGNN). k-hop sampling is conducted layer by
layer, aggregating information from the previous layer at each step;
whereas meta-path sampling is carried out along predefined paths,
aggregating information across the nodes and edges along these
paths. For models based on k-hop neighbors, we sample across all
relations in the graph and use these sampling results as input. For
models based on meta-path neighbors, we use main meta-paths as
their predefined meta-paths, as auxiliary meta-paths have too many
neighbor nodes, leading to out-of-memory issues when included.
Training Configuration. For our model, we set ùëòmaxequals to 4,
ùëòmain equals to 5 and the hidden layer dimensions ùëë‚Ñéin our model
were set to 256, and the learning rate was set to 1e-5. In each batch,
4000 samples were randomly selected for training. For other models,
we use the same hidden layer dimension and the best learning rate.
For models based on k-hop neighbors, two graph neural network
layers were employed, while default structures were applied for
those using meta-path neighbors. In all the GNN models, we limited
samples to 20 per edge type per hop.
5088KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Jinquan Hang et al.
Table 1: Performance on contracted customer prediction.
Model AUC AP Hit@1 Hit@3 Hit@5
MLP 0.825 0.400 0.679 0.888 0.917
R-GCN 0.882 0.519 0.661 0.903 0.932
MAGNN 0.904 0.472 0.664 0.929 0.950
HGT 0.892 0.544 0.718 0.909 0.936
Simple-HGN 0.911 0.497 0.639 0.922 0.945
HPN 0.899 0.541 0.741 0.926 0.947
SeHGNN 0.912 0.432 0.688 0.925 0.947
Paths2Pair 0.948 0.634 0.761 0.940 0.958
1 2 3 4
Hop Count05101520253035Meta-path Type Count
(a) Type Count
1 2 3 4
Hop Count6k7k8k9kCovered Pair Count
 (b) Cover Count
1 2 3 4
Hop Count0.000.050.100.150.20Relevant Score
 (c) Match Rate
1 2 3 4
Hop Count1234Meta-Path Count
 (d) Path Count
Figure 7: Meta-path and target edge relevance.
Evaluation Metrics. Following existing studies [ 10,32], we evalu-
ate the performance of all the models using Area Under the Curve
(AUC), Average Precision (AP), and Hits @ k (Hit@k).
5.2 Overall Performance (RQ1)
To answer RQ1, we compare the performance of our framework
(Paths2Pair) with other methods, and the results are shown in Table
1. We can see that the MLP performs the worst, potentially indicat-
ing that information from neighbor nodes can effectively help our
link prediction task. Our Paths2Pair significantly outperforms other
GNN models (more than 15% of improvement in average precision),
suggesting that in scenarios where there are rich meta-paths be-
tween node pairs, comprehensively considering information across
various meta-paths between node pairs can more effectively accom-
plish link prediction.
5.3 K-Hop Pair-Paths Finder Analysis (RQ2)
To answer RQ2, we conduct multiple experiments as shown in
Figure 7. In Figure 7(a), we first verify that there are various types
of relevant meta-paths. We found that the number of relevant meta-
paths quickly grows with the increase in hop count.
In Figure 7(b), we display the number of target edges covered
by meta-paths at each hop. We found that we can already cover
more than 7,000 target edges at 2 hops, which is good enough for
model training. With the increase in hop count, we can cover even
more target edges. Since we choose ùëòmain=5, the match rate of
main meta-paths will be around 0.05, which means we can reduce
the number of pairs to predict from ùëÅ2to around 20√óùëÅ, and 20 is
much smaller than ùëÅ.
However, this does not mean we can use all the relevant meta-
paths for pair selection. As shown in Figure 7(c), the match rate
of meta-paths decreases significantly with more hops. Therefore,Table 2: Ablation study.
Ablated Module AUC AP Hit@1 Hit@3 Hit@5
Node Feature 0.917 0.403 0.544 0.937 0.955
Edge Feature 0.930 0.524 0.709 0.935 0.956
Mutual Influence 0.904 0.576 0.656 0.933 0.948
Aux Meta-Path 0.924 0.599 0.732 0.941 0.954
1 2 3 4
Hop Count0.900.910.920.930.940.95AUC
(a) Max Hop Count
32 64 128 256 512
Hidden Layer Size0.860.880.900.920.940.96AUC
 (b) Hidden Layer
30 60 120 240
Time (days)0.910.920.930.940.950.96AUC
 (c) Data Length
Figure 8: Hyperparameter analysis.
it is reasonable for us to only use the top ùëòmain meta-paths with
higher match rates to select a subset of pairs. In Figure 7(d), we
verify that we can have various meta-paths between two nodes.
We can see that the average number of meta-paths between node
pairs increases with the increase in the hop count. Each pair can
use more than 4 meta-paths for link prediction on average.
5.4 Ablation Study (RQ3)
To answer RQ3, we conduct ablation studies by removing different
modules from our model to evaluate their impact. The results are
presented in Table 2. The first row shows the results of remov-
ing node features from the meta-path, the second row shows the
results of removing edge features from the meta-path, the third
row shows the results of removing the module (Equation 21) that
considers interactions between different meta-paths, and the fourth
row shows the results of dropping all auxiliary meta-paths. These
results indicate that all these four modules contribute to the final
performance and removing any module would impact performance
significantly.
5.5 Hyperparameter Analysis (RQ4)
To answer RQ4, we analyze the values of three key hyperparame-
ters in our model. First, Figure 8(a) shows the performance change
with the maximum number of hops in meta-paths. The results re-
veal that increasing the number of hops improves the performance.
However, due to the exponential increase in computational com-
plexity with the increase of hops, we set the maximum number of
hops to 4. Second, Figure 8(b) presents the performance change with
the dimension of the hidden layers. The results indicate that the per-
formance becomes similar for dimensions beyond 128. We choose
256 for a slightly better performance. Third, Figure 8(c) presents
the performance change with the time span of the samples. The
evaluation is valuable because utilizing samples from the distant
past may not yield better results for some tasks due to changing
conditions. The results demonstrate that, for our task, samples from
5089Paths2Pair: Meta-path Based Link Prediction in Billion-Scale Commercial Heterogeneous Graphs KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Table 3: Real world A/B test result.
Model Contacts Interested People Interest Rate
SoP 18,529 450 2.43%
Ours 13,250 591 4.46% = 2.43%√ó(1 + 84%)
Phase 2 
Expanded Testing
Phase 3 
DeploymentPhase 1 
A/B Testing
Figure 9: Three-phase real-world deployment results.
the past year contribute to the final performance, hence we used
all available samples for model training.
6 REAL-WORLD DEPLOYMENT
To further evaluate the impact brought by our hidden link prediction
framework Paths2Pair, we conduct a three-phase deployment at JD
Logistics, one of the largest logistics platforms [ 15‚Äì17] that covers
more than 360 cities and 500 million users in China. We present
our nationwide deployment results in Figure 9. Paths2Pair serves
as the key component to discovering high-potential companies that
will sign a contract with JD Logistics. Based on the prediction of
Paths2Pair, we share the results with customer service staff for
customer acquisition.
Phase 1: A/B Testing. From October 15 2023 to November 1, 2023,
we first did an A/B test with the current SoP method. JD Logistics
first gives a range of companies, then randomly uses the SoP method
and our method to choose potential customers to contact. The
overall result is shown in Table 3, and we can see that our method
helps the JD Logistics increase 84% of interest rate.
Phase 2: Expanded Testing. Motivated by the promising results,
we then gradually expanded the scope of deployment, and our
Paths2Pair still maintained a similar high performance, i.e., 80% of
average increase in interest rate.
Phase 3: Nationwide Deployment. Based on the stable perfor-
mance, we eventually conducted a nationwide deployment, pre-
dicting the customer key personnel with Paths2Pair in more than
360 cities. Until 2023.12.15, JD Logistics has contacted 108,709 key
personnel of company customers based on the prediction results
from Paths2Pair, with over 3,000 expressing interest in cooperation.7 RELATED WORK
7.1 Heterogeneous Graph Link Prediction
Link prediction [ 26], one of the primary tasks in graph-based learn-
ing [ 6], aims to predict whether a link (edge) should exist between
two nodes in a graph. In the heterogeneous graph, link prediction
becomes more complex than in the homogeneous graph due to var-
ious types of edges and nodes it contains. Unsupervised heteroge-
neous graph link prediction methods, like TransE [ 2], TransH [ 44],
Node2Vec [ 12], and DeepWalk [ 30], create embeddings for each
node and relationship in a graph, which helps predict complex re-
lations between nodes by mapping them onto a continuous vector
space. However, these methods need to be aware of all the nodes
from the start, which is not ideal for tasks with ever-changing
data. Supervised heterogeneous graph link prediction methods, like
RGCN [ 32], HGT [ 18], and HPN [ 20], primarily learn the mech-
anisms of information propagation within known graphs. These
methods are mostly inductive because the principles of informa-
tion transfer remain consistent across different graphs. However,
they typically aggregate information from neighbor nodes to each
node first, and then combine information from two nodes to predict
links. This process can result in the loss of some direct connection
information that is transferred between the two nodes.
7.2 Link Prediction Search Space Pruning
Most link prediction methods focus on predicting edges based on
two given nodes. However, when the task involves identifying
hidden edges throughout the entire graph without specified nodes,
most existing methods[ 18,20,22,32,38,48] need to calculate the
probability among all possible node pairs. These methods become
impractical in large-scale graphs due to the vast search space. Only
a few methods[ 1,8,29] work for pruning the search space of link
prediction. However, they [ 8,33] can either be applied solely to
homogeneous graphs consisting of only one node type and edge
type, or they [ 21,29] require generating embedding for all node
pairs in the graph, which becomes impractical for billion-scale
graphs due to inefficiency.
8 CONCLUSION
In this paper, we propose a framework for discovering hidden target
edges in billion-scale heterogeneous graphs. Specifically, we first
introduced a method to efficiently find meta-paths that are relevant
to the target edge and select a subset of pairs for hidden link pre-
diction. We then proposed a new model for better link prediction.
Results on real-world datasets show that our framework achieves
superior performance compared to multiple state-of-the-art meth-
ods. Moreover, our framework has been deployed at JD Logistics
for nationwide customer acquisition.
ACKNOWLEDGMENTS
We thank all the reviewers for their insightful feedback to improve
this paper. This work is partially supported by the National Science
Foundation under Grant No. 2047822, 2411151, 2003874, 1952096,
and 1951890.
5090KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Jinquan Hang et al.
REFERENCES
[1]Caleb Belth, Alican B√ºy√ºk√ßakir, and Danai Koutra. 2022. A hidden challenge of
link prediction: which pairs to check? Knowl. Inf. Syst. 64, 3 (2022), 743‚Äì771.
[2]Antoine Bordes, Nicolas Usunier, Alberto Garcia-Dur√°n, Jason Weston, and Ok-
sana Yakhnenko. 2013. Translating embeddings for modeling multi-relational
data. In NIPS (Lake Tahoe, Nevada). 2787‚Äì2795.
[3]Chen Cai, Truong Son Hy, Rose Yu, and Yusu Wang. 2023. On the Connection
Between MPNN and Graph Transformer. arXiv (2023).
[4]Mengru Chen, Chao Huang, Lianghao Xia, Wei Wei, Yong Xu, and Ronghua
Luo. 2023. Heterogeneous Graph Contrastive Learning for Recommendation. In
WSDM (Singapore). 544‚Äì552.
[5]Yuxiao Dong, Nitesh V Chawla, and Ananthram Swami. 2017. metapath2vec:
Scalable Representation Learning for Heterogeneous Networks. In KDD ‚Äô17. ACM,
135‚Äì144.
[6]Zheng Dong, Xin Huang, Guorui Yuan, Hengshu Zhu, and Hui Xiong. 2021.
Butterfly-core community search over labeled graphs. Proc. VLDB Endow. 14, 11
(jul 2021), 2006‚Äì2018.
[7]Chenguang Du, Kaichun Yao, Hengshu Zhu, Deqing Wang, Fuzhen Zhuang,
and Hui Xiong. 2023. Seq-HGNN: Learning Sequential Node Representation on
Heterogeneous Graph. In SIGIR.
[8]Liang Duan, Shuai Ma, Charu C. Aggarwal, Tiejun Ma, and Jinpeng Huai. 2017.
An Ensemble Approach to Link Prediction. TKDE 29, 11 (2017), 2402‚Äì2416.
[9]Matthias Fey and Jan E. Lenssen. 2019. Fast Graph Representation Learning with
PyTorch Geometric. In ICLR.
[10] Xinyu Fu, Jiani Zhang, Ziqiao Meng, and Irwin King. 2020. MAGNN: Metapath
Aggregated Graph Neural Network for Heterogeneous Graph Embedding. In
WWW (Taipei, Taiwan). 2331‚Äì2341.
[11] Di Ge, Zheng Dong, Yuhang Cheng, and Yanwen Wu. 2024. An enhanced spatio-
temporal constraints network for anomaly detection in multivariate time series.
Knowledge-Based Systems 283 (2024), 111169.
[12] Aditya Grover and Jure Leskovec. 2016. node2vec: Scalable Feature Learning for
Networks. In KDD (San Francisco, California, USA). 855‚Äì864.
[13] Will Hamilton, Zhitao Ying, and Jure Leskovec. 2017. Inductive representation
learning on large graphs. NeurIPS 30 (2017).
[14] Jinquan Hang, Zheng Dong, Hongke Zhao, Xin Song, Peng Wang, and Hengshu
Zhu. 2022. Outside In: Market-aware Heterogeneous Graph Neural Network for
Employee Turnover Prediction. In WSDM ‚Äô22. ACM, Virtual Event, 353‚Äì362.
[15] Zhiqing Hong, Guang Wang, Wenjun Lyu, Baoshen Guo, Yi Ding, Haotian Wang,
Shuai Wang, Yunhuai Liu, and Desheng Zhang. 2022. CoMiner: nationwide
behavior-driven unsupervised spatial coordinate mining from uncertain delivery
events. In SIGSPATIAL (Seattle, Washington). Article 10, 10 pages.
[16] Zhiqing Hong, Haotian Wang, Yi Ding, Guang Wang, Tian He, and Desheng
Zhang. 2024. SmallMap: Low-cost Community Road Map Sensing with Uncertain
Delivery Behavior. UBICOMP 8, 2, Article 50 (may 2024), 26 pages.
[17] Zhiqing Hong, Heng Yang, Haotian Wang, Wenjun Lyu, Yu Yang, Guang Wang,
Yunhuai Liu, Yang Wang, and Desheng Zhang. 2022. FastAddr: real-time abnormal
address detection via contrastive augmentation for location-based services. In
SIGSPATIAL (Seattle, Washington). Article 64, 10 pages.
[18] Ziniu Hu, Yuxiao Dong, Kuansan Wang, and Yizhou Sun. 2020. Heterogeneous
Graph Transformer. In WWW (Taipei, Taiwan). 2704‚Äì2710.
[19] JDGalileo. 2021. Galileo Repository. https://github.com/JDGalileo/galileo
[20] Houye Ji, Xiao Wang, Chuan Shi, Bai Wang, and Philip S. Yu. 2023. Heterogeneous
Graph Propagation Network. TKDE 35, 1 (2023), 521‚Äì532.
[21] Unmesh Joshi and Jacopo Urbani. 2020. Searching for Embeddings in a Haystack:
Link Prediction on Knowledge Graphs with Subgraph Pruning (WWW ‚Äô20).
2817‚Äì2823.
[22] Thomas N. Kipf and Max Welling. 2017. Semi-Supervised Classification with
Graph Convolutional Networks. In ICLR.
[23] Y. Li, Y. Jin, G. Song, Z. Zhu, C. Shi, and Y. Wang. 2021. GraphMSE: Efficient
Meta-path Selection in Semantically Aligned Feature Space for Graph Neural
Networks. In AAAI, Vol. 35. 4206‚Äì4214.
[24] Qi Liu, Zheng Dong, Chuanren Liu, Xing Xie, Enhong Chen, and Hui Xiong.
2014. Social Marketing Meets Targeted Customers: A Typical User Selection and
Coverage Perspective. In ICDM. 350‚Äì359.
[25] Qingsong Lv, Ming Ding, Qiang Liu, Yuxiang Chen, Wenzheng Feng, Siming He,
Chang Zhou, Jianguo Jiang, Yuxiao Dong, and Jie Tang. 2021. Are We Really
Making Much Progress? Revisiting, Benchmarking and Refining Heterogeneous
Graph Neural Networks. In KDD (Virtual Event, Singapore). 1150‚Äì1160.
[26] Anasua Mitra, Priyesh Vijayan, Sanasam Ranbir Singh, Diganta Goswami, Srini-
vasan Parthasarathy, and Balaraman Ravindran. 2022. Revisiting Link Prediction
on Heterogeneous Graphs with a Multi-view Perspective. In ICDM. 358‚Äì367.
[27] Trung-Kien Nguyen, Zemin Liu, and Yuan Fang. 2023. Link Prediction on Latent
Heterogeneous Graphs. In WWW (Austin, TX, USA). 263‚Äì273.
[28] Wentao Ning, Reynold Cheng, Jiajun Shen, Nur Al Hasan Haldar, Ben Kao, Xiao
Yan, Nan Huo, Wai Kit Lam, Tian Li, and Bo Tang. 2022. Automatic Meta-Path
Discovery for Effective Graph-Based Recommendation (CIKM ‚Äô22). 1563‚Äì1572.
[29] Benjamin Pachev and Benjamin Z. Webb. 2018. Fast link prediction for large
networks using spectral embedding. J. Complex Networks 6, 1 (2018), 79‚Äì94.[30] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. 2014. DeepWalk: online learning
of social representations. In KDD (New York, New York, USA). 701‚Äì710.
[31] Frank Rosenblatt. 1958. The perceptron: a probabilistic model for information
storage and organization in the brain. Psychological Review 65, 6 (1958), 386‚Äì408.
[32] Michael Schlichtkrull, Thomas N Kipf, Peter Bloem, Rianne Van Den Berg, Ivan
Titov, and Max Welling. 2018. Modeling relational data with graph convolutional
networks. In ESWC. Springer, Heraklion, Crete, Greece, 593‚Äì607.
[33] Dongjin Song, David A. Meyer, and Dacheng Tao. 2015. Top-k Link Recommen-
dation in Social Networks. In ICDM. 389‚Äì398.
[34] Yizhou Sun and Jiawei Han. 2013. Mining Heterogeneous Information Networks:
A Structural Analysis Approach. SIGKDD Explor. Newsl. 14, 2 (2013), 20‚Äì28.
[35] Yizhou Sun, Jiawei Han, Xifeng Yan, Philip S. Yu, and Tianyi Wu. 2011. Path-
Sim: Meta Path-Based Top-K Similarity Search in Heterogeneous Information
Networks. 4 (2011), 992‚Äì1003.
[36] Yizhou Sun, Jiawei Han, Xifeng Yan, Philip S. Yu, and Tianyi Wu. 2022. Hetero-
geneous Information Networks: the Past, the Present, and the Future. Proc. VLDB
Endow. 15, 12 (2022), 3807‚Äì3811.
[37] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones,
Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is All
You Need (NIPS‚Äô17). 6000‚Äì6010.
[38] Petar Veliƒçkoviƒá, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro
Li√≤, and Yoshua Bengio. 2018. Graph Attention Networks. In ICLR.
[39] G. Wan, B. Du, S. Pan, and G. Haffari. 2020. Reinforcement Learning Based
Meta-Path Discovery in Large-Scale Heterogeneous Information Networks. In
AAAI, Vol. 34. 6094‚Äì6101.
[40] Minjie Wang, Da Zheng, Zihao Ye, Quan Gan, Mufei Li, Xiang Song, Jinjing
Zhou, Chao Ma, Lingfan Yu, Yu Gai, Tianjun Xiao, Tong He, George Karypis,
Jinyang Li, and Zheng Zhang. 2019. Deep Graph Library: A Graph-Centric,
Highly-Performant Package for Graph Neural Networks. arXiv (2019).
[41] Ping Wang, Khushbu Agarwal, Colby Ham, Sutanay Choudhury, and Chan-
dan K. Reddy. 2021. Self-Supervised Learning of Contextual Embeddings for Link
Prediction in Heterogeneous Networks (WWW ‚Äô21). 2946‚Äì2957.
[42] Xiao Wang, Deyu Bo, Chuan Shi, Shaohua Fan, Yanfang Ye, and Philip S. Yu.
2020. A Survey on Heterogeneous Graph Embedding: Methods, Techniques,
Applications and Sources. IEEE Transactions on Big Data 9 (2020), 415‚Äì436.
[43] Xiao Wang, Houye Ji, Chuan Shi, Bai Wang, Yanfang Ye, Peng Cui, and Philip S
Yu. 2019. Heterogeneous Graph Attention Network. In WWW (San Francisco,
CA, USA). 2022‚Äì2032.
[44] Zhen Wang, Jianwen Zhang, Jianlin Feng, and Zheng Chen. 2014. Knowledge
graph embedding by translating on hyperplanes. In AAAI (Qu√©bec City, Qu√©bec,
Canada). 1112‚Äì1119.
[45] C. Yang, Y. Xiao, Y. Zhang, Y. Sun, and J. Han. 2022. Heterogeneous Network
Representation Learning: A Unified Framework With Survey and Benchmark.
TKDE 34 (2022), 4854‚Äì4873.
[46] Guang Yang, Yuequn Zhang, Jinquan Hang, Xinyue Feng, Zejun Xie, Desheng
Zhang, and Yu Yang. 2023. CARPG: Cross-City Knowledge Transfer for Traffic
Accident Prediction via Attentive Region-Level Parameter Generation. In CIKM
(Birmingham, United Kingdom). 2939‚Äì2948.
[47] Hongxia Yang. 2019. AliGraph: A Comprehensive Graph Neural Network Plat-
form. In Proceedings of the 25th ACM SIGKDD International Conference on Knowl-
edge Discovery & Data Mining, KDD 2019, Anchorage, AK, USA, August 4-8, 2019,
Ankur Teredesai, Vipin Kumar, Ying Li, R√≥mer Rosales, Evimaria Terzi, and
George Karypis (Eds.). ACM, 3165‚Äì3166.
[48] Xiaocheng Yang, Mingyu Yan, Shirui Pan, Xiaochun Ye, and Dongrui Fan. 2023.
Simple and Efficient Heterogeneous Graph Neural Network. In AAAI (Washing-
ton, DC, USA).
[49] Yang Yang, Chubing Zhang, Xin Song, Zheng Dong, Hengshu Zhu, and Wenjie
Li. 2023. Contextualized Knowledge Graph Embedding for Explainable Talent
Training Course Recommendation. ACM Trans. Inf. Syst. 42, 2, Article 33 (sep
2023), 27 pages.
[50] Yuyang Ye, Zheng Dong, Hengshu Zhu, Tong Xu, Xin Song, Runlong Yu, and
Hui Xiong. 2023. MANE: Organizational Network Embedding With Multiplex
Attentive Neural Networks. TKDE 35, 4 (2023), 4047‚Äì4061.
[51] Seongjun Yun, Minbyul Jeong, Raehyun Kim, Jaewoo Kang, and Hyunwoo J Kim.
2019. Graph Transformer Networks. In NeurIPS, Vol. 32.
[52] Chuxu Zhang, Dongjin Song, Chao Huang, Ananthram Swami, and Nitesh V.
Chawla. 2019. Heterogeneous Graph Neural Network. In KDD (Anchorage, AK,
USA). 793‚Äì803.
[53] Han Zhang, Yu Hao, Xin Cao, Yixiang Fang, Won-Yong Shin, and Wei Wang. 2021.
Relation Prediction via Graph Neural Network in Heterogeneous Information
Networks with Missing Type Information (CIKM ‚Äô21). 2517‚Äì2526.
[54] Yiming Zhang, Lingfei Wu, Qi Shen, Yitong Pang, Zhihua Wei, Fangli Xu, Ethan
Chang, and Bo Long. 2023. Graph Learning Augmented Heterogeneous Graph
Neural Network for Social Recommendation. ACM Trans. Recomm. Syst. 1, 4,
Article 16 (oct 2023), 22 pages.
[55] Rong Zhu, Kun Zhao, Hongxia Yang, Wei Lin, Chang Zhou, Baole Ai, Yong Li, and
Jingren Zhou. 2019. AliGraph: a comprehensive graph neural network platform.
Proceedings of the VLDB Endowment 12, 12 (2019), 2094‚Äì2105.
5091Paths2Pair: Meta-path Based Link Prediction in Billion-Scale Commercial Heterogeneous Graphs KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
A APPENDIX
A.1 Node and Edge Feature Count
The feature count of each kind of edge are shown in Table 4, and
the feature count of each kind of node are shown in Table 5.
Table 4: The feature count of each type of edge.
Edge Index 1 2 3 4 5 6 7 8
Feature Count 120 120 120 2 39 4 47 10
Table 5: The feature count of each type of node.
Node Type Person Account Delivery Region Company
Feature Count 96 44 59 24
A.2 Data Leakage Prevention
To avoid using information obtained after key personnel‚Äôs com-
pany started cooperation with JD Logistics during training, we
constructed 12 heterogeneous graphs ùêªùê∫=[E,V], each based on
data available up to the first day of each month, from 2022.10.01
to 2023.09.01. For every known target edge, we exclusively relied
on the heterogeneous graph corresponding to its date Etgt
kn.date to
gather information during training.
A.3 K-Hop Pair-Paths Finder
Below, we will explain each line‚Äôs operations in Algorithm 1.
(i) Line 1-4: In these four lines, we initialize four variables. Pall
(line 1) is an empty list that will be used to store all path tables cor-
responding to meta-paths relevant to the target edges. MatchRates
(line 2) is a mapping function designed to keep track of the match
rates for each meta-path in Pall.Pseed(line 3), initially set with the
head nodes of the target edges to represent all 0-hop meta-paths,
is dynamically updated to store ( ùëò‚àí1)-hop meta-paths to help us
compute all ùëò-hop meta-paths. typtgt
tail(line 4) denotes the type of
the tail nodes of the target edges.
(ii) Line 5-13: To obtain all ùëò-hop meta-paths for ùëòfrom 1 toùëòmax,
we process each possible ùëòin ascending order (line 5) and use a list
Pnewto store the path tables of ùëò-hop meta-paths (line 6). Then, we
sequentially retrieve all the path tables for (ùëò‚àí1)-hop meta-paths
Pbase‚ààPseed(line 7). We identify the end node type typpathof each(ùëò‚àí1)-hop meta-path (line 8). Next, we traverse different types
of existing edges Eidxin both directions (line 9) and get the head
node type typjoin(line 10). If the edge‚Äôs head node type matches
the end node type of the (ùëò‚àí1)-hop meta-path Pbase(line 11), we
can form a new ùëò-hop meta-path Pnext(line 12) by joining these
two tables. The path table for this new meta-path is then recorded
inPnew(line 13).
(iii) Line 14-20: In these seven lines, we calculate and store the
match rates between each meta-path Pnextand the target edge Etgt
kn.
First, we obtain the tail node column name coladd(line 14) of the
meta-path Pnext, and based on this, we determine the corresponding
node type typadd(line 15). If this type matches the tail node type
typtgt
tailof the target edge (line 16), we then calculate the match
rate between the meta-path and the target edge using Equation 2
(line 17). If the match rate is greater than 0 (line 18), we add this
meta-path to Pall(line 19) and record its match rate (line 20).
(iv) Line 21: We update Pseedwith Pnewto ensure that Pseed
always corresponds to all (ùëò‚àí1)-hop meta-paths.
Algorithm 1 K-Hop Pair-Paths Finder.
Require: Edge tables E; known target edges Etgt
kn; max hopùëòmax.
Ensure: All relevant meta-paths Pallstart from Etgt
kn.head with corre-
sponding match rates MatchRates toEtgt
kn.
1:Pall‚Üê[]
2:MatchRates‚Üê{}
3:Pseed‚Üê[Etgt
kn.head]
4:typtgt
tail‚ÜêNodeType(Etgt
kn.tail)
5:forùëò=1toùëòmaxdo
6: Pnew‚Üê[]
7: foreach Pbase‚ààPseeddo
8: typpath‚ÜêNodeType(Pbase.end)
9: foreach Eidx‚ààEand each col join‚àà{head,tail}do
10: typjoin‚ÜêNodeType(Eidx.coljoin)
11: iftyppath=typjointhen
12: Pnext‚ÜêPbase Z
Pbase.end=E idx.coljoinEidx
13: Pnew.append(P next)
14: coladd‚Üêtailifcoljoin=head else head
15: typadd‚ÜêNodeType(Eidx.coladd)
16: iftypadd=typtgt
tailthen
17: rate=MatchRate(Pnext,Etgt
kn)
18: ifrate>0then
19: Pall.append(P next)
20: MatchRates[Pnext]‚Üê rate
21: Pseed‚ÜêPnew
22:return Pall,MatchRates
5092