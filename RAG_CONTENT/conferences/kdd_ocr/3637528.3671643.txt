Harvesting Efficient On-Demand Order Pooling from Skilled
Couriers: Enhancing Graph Representation Learning for Refining
Real-time Many-to-One Assignments
Yile Liang
Meituan
Beijing, China
yileliang0412@163.comJiuxia Zhao
Meituan
Beijing, China
zhaojiuxia@meituan.comDonghui Li
Meituan
Beijing, China
lidonghui03@meituan.com
Jie Feng‚àó
Tsinghua University
Beijing, China
fengj12ee@hotmail.comChen Zhang‚Ä†
Tsinghua University
Beijing, China
zhangchen0715@gmail.comXuetao Ding
Meituan
Beijing, China
dingxuetao@meituan.com
Jinghua Hao
Meituan
Beijing, China
haojinghua@meituan.comRenqing He
Meituan
Beijing, China
herenqing@meituan.com
ABSTRACT
The recent past has witnessed a notable surge in on-demand food
delivery (OFD) services, offering delivery fulfillment within dozens
of minutes after an order is placed. In OFD, pooling multiple or-
ders for simultaneous delivery in real-time order assignment is a
pivotal efficiency source, which may in turn extend delivery time.
Constructing high-quality order pooling to harmonize platform ef-
ficiency with the experiences of consumers and couriers, is crucial
to OFD platforms. However, the complexity and real-time nature of
order assignment, making extensive calculations impractical, signif-
icantly limit the potential for order consolidation. Moreover, offline
environment is frequently riddled with unknown factors, posing
challenges for the platform‚Äôs perceptibility and pooling decisions.
Nevertheless, delivery behaviors of skilled couriers (SCs) who
know the environment well, can improve system awareness and
effectively inform decisions. Hence a SC delivery network (SCDN)
is constructed, based on an enhanced attributed heterogeneous
network embedding approach tailored for OFD. It aims to extract
features from rich temporal and spatial information, and uncover
the latent potential for order combinations embedded within SC
trajectories. Accordingly, the vast search space of order assignment
can be effectively pruned through scalable similarity calculations of
low-dimensional vectors, making comprehensive and high-quality
‚àóCorresponding author.
‚Ä†This work was fulfilled when Chen Zhang interned at Meituan.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
¬©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671643pooling outcomes more easily identified in real time. In addition,
the acquired embedding outcomes highlight promising subspaces
embedded within this space, i.e., scale-effect hotspot areas, which
can offer significant potential for elevating courier efficiency.
SCDN has now been deployed in Meituan dispatch system. On-
line tests reveal that with SCDN, the pooling quality and extent
have been greatly improved. And our system can boost couriers‚Äô
efficiency by 45-55% during noon peak hours, while upholding the
timely delivery commitment.
CCS CONCEPTS
‚Ä¢Computing methodologies ‚ÜíPlanning for deterministic actions .
KEYWORDS
on-demand food delivery, order pooling, many-to-one assignment
problem, graph representation learning
ACM Reference Format:
Yile Liang, Jiuxia Zhao, Donghui Li, Jie Feng, Chen Zhang, Xuetao Ding,
Jinghua Hao, and Renqing He. 2024. Harvesting Efficient On-Demand Order
Pooling from Skilled Couriers: Enhancing Graph Representation Learning
for Refining Real-time Many-to-One Assignments. In Proceedings of the
30th ACM SIGKDD Conference on Knowledge Discovery and Data Mining
(KDD ‚Äô24), August 25‚Äì29, 2024, Barcelona, Spain. ACM, New York, NY, USA,
12 pages. https://doi.org/10.1145/3637528.3671643
1 INTRODUCTION
1.1 Backgrounds
In recent years, there has been a remarkable upsurge in the wide-
spread adoption of on-demand food delivery (OFD) services world-
wide. With a mere few clicks, consumers can enjoy delicious meals
without stepping out, all delivered right to their doorstep within
just a few dozen minutes. This trend is attributable to the overarch-
ing shifts in technological innovation, including the popularity of
5363
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yile Liang et al.
apps and online platforms, and the growing dependence on third-
party services for OFD. Global revenues for OFD sector were about
$90 billion in 2018, rose to $294 billion in 2021, and are expected to
exceed $466 billion by 2026 [ 16]. Meituan Waimai, China‚Äôs pioneer-
ing OFD platform has witnessed remarkable growth over the last
decade. In 2023, the platform handles over 70 million orders daily,
encompassing an extensive reach across almost 3,000 cities, coun-
ties and regions throughout China. 6.24 million couriers earned
income via Meituan, with over 1 million actively engaged daily.
In OFD, orders are placed continuously by consumers from var-
ious locations. In response, the platform promptly gathers these
newly initiated orders, channels them to merchants, and assigns
dedicated couriers for pick-up and delivery within the promised
delivery time. The platforms act as intermediaries, linking a multi-
tude of consumers, merchants and couriers within the ecosystem,
and strike a balance between gains and losses among these stake-
holders to achieve sustained growth and prosperity [ 14]. Among
these, consumers desire prompt services, merchants seek to main-
tain food freshness, couriers aim to fulfill enough orders to earn a
decent income in a safe environment, while OFD platforms focus
on boosting efficiency to reduce costs and increase profits.
Figure 1: A courier‚Äôs concurrent execution and route se-
quence of four orders.
In this context, couriers often engage in concurrent execution
of multiple delivery tasks, including order pick-up and delivery. A
pivotal efficiency source in OFD is to pool multiple orders
for simultaneous delivery of a single courier in order as-
signment, leveraging shared pick-up and delivery behaviours and
travelling distances, enabling couriers serve more orders within
committed delivery time limits. Facilitating comprehensive order
pooling can effectively reduce delivery costs and enhance OFD
sustainability[ 23,24]. Figure 2(a) presents a high-quality order
pooling example, where the courier‚Äôs pickup points are highly
concentrated, and the delivery destinations are aligned along a
coherent route, enabling the courier to fulfill the deliveries with
remarkable efficiency. However, unreasonable order pooling may
result in detours and prolonged delivery times, severely undermin-
ing the stakeholders‚Äô experiences. Figure 2(b) illustrates a scenario
in which unreasonable order pooling negatively impacts a courier‚Äôs
route, leading to an inefficient delivery trajectory.
In Meituan Waimai, the dispatch system conducts city-level batch
order assignments every 30 seconds[ 14]. In each dispatch cycle, the
system identifies available couriers for new orders, and assesses
the matching degree (MD) between them, including convenience
of route, over-time risk, and courier acceptance willingness. This
evaluation process demands massive computations for pick-up and
delivery route planning (PDRP) to simulate courier‚Äôs behaviors
after accepting orders [ 5]. Subsequently, through the resolution of
(a) High-quality order pooling.
 (b) Unreasonable order pooling.
Figure 2: Order pooling examples.
a multi-objective many(order)-to-one(courier) assignment (MOA)
problem, the system matches orders with the most suitable couriers
to optimize the overall MD scores.
Constructing comprehensive and high-quality order pool-
ing in order assignments stands as a key issue for OFD plat-
forms to harmonize platform efficiency with stakeholder experi-
ence. Practically, there are two primary methods to facilitate com-
prehensive and high-quality order pooling in order assignments
during each dispatch cycle. The first approach entails identifying
suitable order combinations among all the pending orders, such
as those with shared pick-up/delivery tasks or minimal detours,
aiming to increase the ratio of MOA outcomes. The second ap-
proach focuses on matching orders with couriers whose existing
assignments can share pick-up/delivery tasks or travel routes with
the new orders, thereby optimizing the delivery process.
1.2 Challenges
However, OFD‚Äôs distinct features present considerable challenges.
(1) Computational complexity in real time. On one hand,
the MD scores based on PDRP outcomes, are non-additive . Specif-
ically, the MD score of assigning multiple orders concurrently to
a courier, is not equivalent to the sum of the scores of assigning
each order individually to the same courier. Hence, to model the
MOA problem and to obtain sufficient order combination results
usually demands massive MD score calculations, which suffers from
combinatorial explosion, as depicted in Figure 3. The MOA problem
details can be found in Appendix A. For some big cities in China
during noon peak, there amounts to over 3 thousand orders1to
be assigned in each dispatch cycle, while each order can retrieve
hundreds of couriers available for delivery on average. Assuming
at most 5 orders assigned to a courier, and the average courier can-
didates for a order (combination) is 100, the calculation volume is
(ùê∂1
3000+ùê∂2
3000+ùê∂3
3000+ùê∂4
3000+ùê∂5
3000)√ó100. On the other hand, the
MOA problem itself is categorized as an NP-hard integer program-
ming problem, known for its extremely vast search space. Crafting
online algorithms that perform effectively for the MOA is an excep-
tionally challenging task[ 3,15,35]. Moreover, the fast movement
of couriers requires assignment decisions be made within a mere
10 seconds. This imperative time frame ensures the consistency of
1It is the order volume in several geographically adjacent areas within a city, not the
total order volume for the entire city.
5364Harvesting Efficient On-Demand Order Pooling from Skilled Couriers KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
courier status between the information acquisition phase and the
actual assignment moment.
Consequently, the platform tends to favor one(order)-to-one(courier)
assignments during each dispatch cycle, a strategy that reduces
computational volume and complexity, albeit at the expense of
comprehensive order pooling.
Figure 3: Calculation volume and search space for modeling
and solving MOA problems in each dispatch cycle.
(2) Limited system awareness on the ‚Äúlast mile" offline
environment. In OFD, the "last mile" offline environment is highly
intricate and dynamic [ 34], encompassing unforeseen road closures,
unknown natural obstacles, and pandemic-related lockdowns. OFD
platforms are unable to fully access these extensive, finely-detailed
spatiotemporal data during large-scale decision-making, due to
insufficient map precision and digital capabilities, along with com-
putational and storage constraints. Consequently, order pooling
decisions based on coarse data and limited awareness, may not
be reasonable, potentially harming courier experiences, causing
delivery delays, and reducing delivery efficiency.
1.3 Related Work
Prior research on order pooling algorithms primarily focused on
batching issues in traditional warehouse management [ 1,19,30].
However, the more relaxed time constraints of warehouse batching
algorithms, typically in minutes, or even hours, are not well-suitable
for the urgency required in OFD.
In recent years, research pertaining to OFD has gradually gained
traction. The prevalent method for order pooling batches orders
based on geographical proximity and closeness of their promised
delivery time [ 22]. However, while these criteria-based batching
rules are straightforward, they limit the scope for consolidation. An
exact algorithm for order batching and assignment is proposed in
[31], under the unrealistic assumption of perfect information about
the arrival of orders. The study in [ 9] produces monthly OFD task
groupings offline to facilitate order consolidation, However, their
effectiveness is heavily reliant on order structure stability. Work in
[10,11] achieve order consolidation using iterative clustering on
an order graph, but the batching algorithm‚Äôs complexity and com-
putational load hinder real-time processing. Similar work in [ 24]
leverages additional decomposition mechanisms to reduce com-
putational cost, yet it falls short of enabling real-time application
despite notable performance gains. To satisfy the need for solutions
within seconds, XGBoost models are built through supervised learn-
ing on historical order assignment results in [ 29,32], to promote
combined order assignments. However, the consolidation results
struggle to break through the constraints of historical decisions,
resulting in limited effectiveness.1.4 Motivations
In light of the limitations present in existing work, it‚Äôs worth noting
that OFD platforms are equipped with a vast fleet of couriers, and
extensive data on courier behaviors, especially from the skilled ones,
which offer insights for high-efficiency and quality delivery ser-
vices and enhance system intelligence. Skilled couriers (SCs) often
possess a comprehensive grasp of the offline environment, includ-
ing order distribution and road logistics, and continually improve
their delivery skills to adapting to complex conditions. Moreover,
our couriers can reject or transfer system-assigned orders, lever-
aging their expertise to optimize routes, minimizing detours and
overtime. Additionally, the platform gathers courier preferences
for pick-up and delivery locations via their apps, promoting effi-
cient operations with fewer bottlenecks. Thus SCs‚Äô behaviours
of order selection, route sequence and feedback can provide
the system superior courier-oriented pooling outcomes and
help improve decision quality.
In the past decade, the work on word representation learning
has achieved cutting-edge results [ 7,17,20,25]. Neural language
models replace traditional high-dimensional and sparse word vec-
tors with low-dimensional and dense embeddings, which assume
that frequently co-occurring words share stronger statistical depen-
dencies. Recently, graph representation learning (GRL) methods
[4,13] have increasingly been applied in various fields, including
e-commerce [ 6,8,28], job search [ 12,21], ride-sharing [ 26,27],
to discover diverse types of recommendations on the Web. These
approaches have had a major impact in both academia and industry.
Drawing on prior achievements and the principle that orders
frequently combined together in SCs‚Äô routes tend to yield
top-tier pooling results, this paper aims to using GRL methods
to uncover the latent potential for order pooling embedded
within the SCs‚Äô behaviour data. Therefore, through scalable
low-dimension vector calculations, instead of massive and time-
consuming PDRP computations, we effectively prune the MOA
problem‚Äôs search space, shown in Figure 3, meanwhile extract
small-scale and isolated subspaces promising for high-quality order
consolidation results, facilitating real-time, effective order pooling.
1.5 Contributions
Accordingly, a systemic solution framework, named as SC delivery
network (SCDN), is proposed. The novel contributions are:
(1) Graph Modelling: We construct a delivery network from
SC route sequences, with flow unit (FU) as nodes linked by SC
behavior sequences. An FU is a directed vector from pick-up areas
of interest (AOI2)[36] to delivery AOI. Orders of an FU share the
same pick-up and delivery AOIs. The network is formulated as an
attributed multiplex heterogeneous network (AMHEN), with
FU nodes featuring multiple attributes for temporal and spatial
information, and links representing two different types of courier
behaviors, namely pick-up and delivery.
(2) Learning Algorithm: Based on GATNE [ 2], an effective
GRL method for AMHEN, an enhanced attributed heterogeneous
network embedding (EATNE) approach tailored for OFD is derived
to obtain FU embeddings. First, given the fact that couriers move
2AOIs are defined as non-overlapping irregular polygons that comprehensively divide
and cover the space
5365KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yile Liang et al.
within a confined region3in a city, a region-congregated nega-
tive sampling mechanism is proposed as an enhancement over
traditional randomized negative sampling to improve algorithm
performance. Second, we employ a customized margin ranking
loss instead of cross-entropy used by GATNE, aiming to refine
embedding quality. Last, to address dispersed order distribution
and limited FU coverage in SC behaviors, we build a cold start mit-
igation mechanism, using geographic information to generate
embeddings of FUs previously unseen, thus broadening coverage.
(3) MOA Search Space Refinement and OFD Application:
Utilizing FU embedding, we reconstruct the order combination and
courier recall mechanisms within Meituan‚Äôs dispatch system, facili-
tating superior real-time order pooling. Our use of SCDN refines
order structure profiles and pinpoints scale-effect hotspots within
MOA‚Äôs vast search space, uncovering independent and small-scale
subspaces for thorough and high-quality order pooling. Accord-
ingly, an innovative delivery mode is developed to enhance courier
efficiency without compromising service reliability.
To our knowledge, this is the first application of GRL methods in
achieving real-time order pooling in OFD, now deployed in Meituan
Waimai‚Äôs dispatch system. Online tests shows significant improve-
ment in order pooling. The total MD score of the MOA problem is
improved by 5.3%, indicating more efficient order assignments with
reduced detours and overtime risks. The newly-built mode cut the
average incremental pick-up time for couriers4during noon peak
by 51% and delivery time by 21%. These enhancements have led
to a 45-55% boost in efficiency, maintaining consistent work hours
and on-time delivery standards.
2 GRAPH REPRESENTATION LEARNING
APPROACH
In this section, we will detail the step-by-step process by which the
FU embeddings are acquired.
2.1 AMHEN Construction
The AMHEN is constructed based on SC route sequences as de-
scribed below. The definition of SC and selection criteria of SC
route sequences are introduced in Appendix B.
We first divide a SC‚Äôs route sequence into distinct sessions , using
the rest or no action interval as a separator, presently set to 30 min-
utes. Then we transform the route sessions into FU sequences via
replacing the orders in the sessions with their FUs. Since couriers
participate in both pick-up and delivery actions during order fulfil-
ment, there are two kinds of FU sequences: one based on pick-up
behavior and the other on delivery, as shown in Figure 4. Diverse
couriers‚Äô FU sequences may incorporate some common FUs.
To capture shared experiences of SCs, by treating FU as nodes
and their connections in the FU sequence as links, we can integrate
all the FU sequences into a unified yet heterogeneous graph . More-
over, it is crucial to utilize the rich temporal and spatial information
to enhance learning accuracy, e.g. average historical order amount
3A circular area with a diameter of 3-5 km, and the courier‚Äôs designated residence as
the center.
4defined as the interval between picking up the current order and the preceding one
in the courier‚Äôs route.
Figure 4: Illustration of AMHEN Construction, including 2
sessions. Session A contains 3 orders for FUs DE, FB and FC.
The pick-up FU sequence is DE->FC->FB. And the delivery FU
sequence is DE->FB->FC. Session B follows the same process.
and delivery distance of each FU, which makes the above graph an
AMHEN . More about node attributes is in Appendix C.
Denote AMHEN by ùê∫=(ùëâ,ùê∏,ùê¥), whereùëâis the FU node set,
ùê¥is the attribute set for all nodes. FU node ùë£ùëñ‚ààùëâowns fruitful
attributes xùëñ‚ààùê¥to describe its crucial characters. ùê∏=(ùê∏ùëù,ùê∏ùëë)is
the set of edges, which contains two types: pick-up and delivery.
Specifically, there may be two types of edges between the FU nodes
ùë£ùëñandùë£ùëó, whereùëíùëù
ùëñùëó‚ààùê∏ùëùindicates a pick-up edge and ùëíùëë
ùëñùëó‚ààùê∏ùëëa
delivery one. If two orders, belonging to FU nodes ùë£ùëñandùë£ùëó, are
successively picked up by the same SC, there exists a pick-up edge
ùëíùëù
ùëñùëóconnecting ùë£ùëñandùë£ùëó. Similarly, a delivery edge ùëíùëë
ùëñùëóindicates
there exist orders of FU nodes ùë£ùëñandùë£ùëóthat are consecutively
delivered by the same SC. Hence, an AMHEN is constructed by
merging massive records from tens of thousands of SCs.
2.2 Graph Representation Learning Model
Treating the AMHEN as input, we apply the model in GATNE [ 2]
to produce node vector representation, i.e. FU embedding, which
can be regarded as the aggregation of various node attributes and
topology information in the graph, as depicted in Figure 5.
We divide the whole embedding of node ùë£ùëñon each edge type
ùúèinto two parts, base embedding and edge embedding. The base
embedding bùëñis defined as a parameterized function of its attributes
xùëñasbùëñ=h(xùëñ), where his a transformation function, while the
k-th level edge embedding u(ùëò)
ùëñ,ùúè‚ààRùë†,(1‚â§ùëò‚â§ùêæ)of nodeùë£ùëñon
edge typeùúèis aggregated from the edge embeddings of neighbors:
u(ùëò)
ùëñ,ùúè=aggregatorn
u(ùëò‚àí1)
ùëó,ùúè,‚àÄùë£ùëó‚ààNùëñ,ùúèo
, (1)
whereùúè‚àà{ùëù,ùëë}indicates the edge type, ùë†is the dimension of edge
embeddings, andNùëñ,ùúèis the neighbors of node ùë£ùëñon edge type ùúè.
The initial edge embedding u(0)
ùëñ,ùúèis parameterized as the function of
attributes xùëñ:u(0)
ùëñ,ùúè=gùúè(xùëñ), where gùúèis a transformation function.
The aggregator function is mean operation in practice.
We denote the ùêæ-th level edge embedding u(ùêæ)
ùëñ,ùúèbyuùëñ,ùúè. Then the
pick-up edge embedding uùëñ,ùëùand the delivery edge embedding uùëñ,ùëë
of nodeùë£ùëñare combined as Uùëñ= uùëñ,ùëù,uùëñ,ùëë. Given that the pick-
up edge and delivery edge have different impacts, self attention
5366Harvesting Efficient On-Demand Order Pooling from Skilled Couriers KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
mechanism is used to calculate the weights aùëñ,ùúè‚àà
aùëñ,ùëù,aùëñ,ùëë	
.
aùëñ,ùúè=softmax w‚ä§
ùúètanh(WùúèUùëñ)‚ä§, (2)
where wùúè‚ààRùëëùëé,Wùúè‚ààRùëëùëé√óùë†are trainable parameters for edge
typeùúè. Thus, the overall embedding of node ùë£ùëñfor pick-up edge
vùëñ,ùëùand delivery edge vùëñ,ùëëcan be computed as:
vùëñ,ùëù=h(xùëñ)+ùõºùëùaùëñ,ùëùM‚ä§
ùëùuùëñ,ùëù+ùõΩùëùgùëùxùëñ, (3)
vùëñ,ùëë=h(xùëñ)+ùõºùëëaùëñ,ùëëM‚ä§
ùëëuùëñ,ùëë+ùõΩùëëgùëëxùëñ, (4)
whereùõºùëùandùõºùëëindicate importance of pick-up and delivery edge
embeddings, respectively, characterizing how pick-up and delivery
behaviors affect courier efficiency. Mùëù,Mùëë‚ààRùë†√óùëëare trainable
parameters. ùõΩùëùandùõΩùëëcontrol the importance of node attributes.
The FU embedding vùëñis the average of vùëñ,ùëùandvùëñ,ùëë. The detailed
implementation of EATNE can be found in Appendix D.
Figure 5: Illustration of the GRL Model.
2.3 Model Optimization
The positive data for training is generated by a meta-path-based
random walk method and skip-gram model [ 17]. Given a set of
pick-up FU sequences ùëÜ, supposing that random walk with length
ùëôonùëÜfollows a path ùëÜùëù= ùë£ùë†1,...,ùë£ùë†ùëô, the pick-up context of ùë£ùë†ùë°
is denoted as ùê∂ùëÜùëù
ùë£ùë†ùë°=
ùë£ùë†ùëòùë£ùë†ùëò‚ààùëÜùëù,ùëò‚àíùë°|‚â§ùëê,ùë°‚â†ùëò	, whereùëêis
the size of the sampling window. Thus, given a node ùë£ùëñand its all
pick-up contexts, we can generate a positive pick-up data set DùëÉùëù
of positive pairs ( ùë£ùëñ,ùë£ùëó), which indicates SCs frequently pool the
orders of these FU together. Similarly, we can generate a positive
data setDùëÉ
ùëëfrom the delivery FU sessions.
Negative Sampling. Since couriers usually move within a con-
fined region, negative samples from different regions are so easy for
the model to distinguish in the whole training stage which makes
the learning inefficient. Therefore, the negative data sets DùëÅùëù,DùëÅ
ùëë
are constructed by random sampling from pick-up and delivery
FU pairs in the same delivery region but excluding positive pairs,
respectively. In other words, we select k-hop (k>2) neighbors of the
FU node that share the same confined region as the challenging
negative samples to enable the effective training of the proposed
model. Traditional GATNE uses randomized negative sampling, yet
ignores the regional effects in OFD. We find that the performance
of GATNE decreases as the negative sampling scope expands and
the effect becomes almost random as it reaches the city size.Margin Ranking Loss. The learning task is to make the repre-
sentation of positive FU pairs lying nearby in the embedding space,
and the negative pairs different. However, achieving this with cross-
entropy can be challenging. Therefore, a customized optimization
objective based on margin ranking loss is proposed to maximize
the distance between positive and negative samples in Equation
5, whereùõæùëÉùëù,ùõæùëÉ
ùëë,ùõæùëÅùëùandùõæùëÅ
ùëëare hyperparmeters representing the
weights of various data sets, ùëöùëùandùëöùëëare the minimum distance
between negative pairs for pick-up and delivery, and cosrepresents
the cosine similarity between FU embeddings.
ùêø=ùõæùëÉùëù
|ùê∑ùëÉùëù|‚àëÔ∏Å
(ùë£ùëñ,ùë£ùëó)‚ààùê∑ùëÉ
ùëù(1‚àícos(vùëñ,ùëù,vùëó,ùëù))
+ùõæùëÉ
ùëë
|ùê∑ùëÉ
ùëë|‚àëÔ∏Å
(ùë£ùëñ,ùë£ùëó)‚ààùê∑ùëÉ
ùëë(1‚àícos(vùëñ,ùëë,vùëó,ùëë))
+ùõæùëÅùëù
|ùê∑ùëÅùëù|‚àëÔ∏Å
(ùë£ùëñ,ùë£ùëó)‚ààùê∑ùëÅ
ùëùmax 0,cos(vùëñ,ùëù,vùëó,ùëù)‚àíùëöùëù
+ùõæùëÅ
ùëë
|ùê∑ùëÅ
ùëë|‚àëÔ∏Å
(ùë£ùëñ,ùë£ùëó)‚ààùê∑ùëÅ
ùëëmax
0,cos(vùëñ,ùëë,vùëó,ùëë)‚àíùëöùëë
, (5)
2.4 Embedding Coverage Improvement
SC behaviors cover only 60% FUs. To compensate for the loss, we
construct an extended delivery network based on geographical
adjacency, shown in Figure 6. The criterion for judging spatial
adjacency between FUs is the pick-up AOIs should be same5and the
distance between delivery point is less than a threshold (currently
1km). If no adjacent FUs found, we will relax it to only consider
the same pick-up AOI as a fallback. Then the embeddings of FUs
previously unseen, can be estimated by aggregating the embeddings
of their existing neighboring FUs in the network constructed above.
This increases FU embedding coverage to over 80%.
Figure 6: Illustration of spatial adjacency relationship in the
extended delivery network.
5The emphasis on the same pick-up points is due to existing data analysis and courier
feedback.
5367KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yile Liang et al.
3 APPLICATION AND DEPLOYMENT
3.1 Model Deployment
As introduced above, FU embeddings are learned from SC behav-
ior data using EATNE. Different models are created for diverse
scenarios, like weekday/weekend and peak/idle time, due to their
significant differences in order structure. Moreover, to accelerate
training in big cities, we use community detection algorithms to
partition the city network into separate regional groups for parallel
training at regional group level.
The models are trained using 4 weeks of data across the country.
They are trained for less than 2 weeks on 4 NVIDIA Tesla V100
GPUs with 32GB of memory each, and the models get updated
every 2 weeks.
3.2 Information Mining
Leveraging the FU embeddings, we‚Äôve created a set of indices.
(1) High-quality pooling probability (HPP) quantifies how
well multiple orders can be consolidated together, sharing common
pick-up and delivery times and travel distances. Since two FUs that
consecutively appear in the SC behavior sequence often possess
the above traits, this metric is calculated by the cosine similarity be-
tween the FU embeddings of these orders, reflecting the frequency
of consecutive co-occurrence of the two FUs in SC behavior data.
ùëùùëñùëó=ùëêùëúùë†(vùëñ,vùëó),‚àÄùëñ,ùëó‚ààùëâ (6)
Orders with high HPP values can be consolidated and assigned to
the same courier to achieve efficient delivery.
(2) FU efficiency indicator (FEI) measures how much an or-
der in this FU improves efficiency, based on how likely it is to be
combined with orders from other FUs to form an efficient delivery
sequence. It is calculated by the weighed aggregate of HPPs for the
FU and its neighbouring FUs that share same or nearby pick-up or
delivery AOIs. The weights are determined by the order volume of
those neighboring FUs.
ùúÇùëñ=‚àëÔ∏Å
ùëó‚ààùëâùëñùëùùëñùëó√óùë§ùëñùëó,‚àÄùëñ‚ààùëâ (7)
The higher FEI values, the more likely for the order to be efficiently
pooled with other orders, thus improving courier efficiency. FEI
values are normalized at the city level for ease of comparisons.
(3) Scale-effect hotspot (SEH) for OFD refers to a local net-
work of geographically proximate FUs, wherein the marginal cost
and time of delivery for couriers fulfilling orders in this network
progressively diminishes, allowing for comprehensive order con-
solidation within promised delivery time. In accordance, FUs in an
SEH should have high FEI values, and any pair of FUs in the same
SEH exhibit a relatively high HPP. And the total order volume for
each SEH should exceed certain criteria.
ùëÜ=
ùëñ‚ààùëâùúÇùëñ>ùëá‚ÑéùëüùëíùúÇ;
ùëùùëñùëó>ùëá‚Ñéùëüùëíùëù,‚àÄùëñ,ùëó‚ààùëÜ
(8)
3.3 Deployment in Dispatch System
The above information, including FU embeddings, FEI, SEH, are in-
troduced in the system via offline features. As either low-dimensional
vectors or scalars, they are performance-friendly to the real-timestorage of the system. The main system framework is shown in
Figure 7.
Figure 7: The main execution process of the dispatch system
in each dispatch cycle.
3.3.1 Order Combination and Courier Recall. The MOA problem of
our system is now solved by well-crafted constructive heuristics, i.e.
imitation learning-enhanced iterated matching algorithm (ILIMA)
[3], since metaheuristic algorithms with in-depth search fail to
meet the real-time requirements [ 35]. Meanwhile, a few orders are
combined in mutually exclusive groups based on the closeness of
their origins and destinations, as well as promised delivery time,
before MD score evaluation. However, the real-time performance
severely restricts the search depth of the algorithm, resulting in
insufficient and suboptimal order pooling.
With SCDN, we develop scalable mechanisms for courier recall
and order combination, which can cut down the MOA search space,
and let us focus our limited computation time on promising areas.
Generally, orders with high HPP are formed as favorable combi-
nations in advance, which can greatly expand the proportion of
combined orders. Order combinations with low HPP and couriers
whose on-hand orders mostly share low HPP with the new order
are filtered out. Hence, we can facilitate high-quality order pooling
in real time, without obvious increase in score calculation volume
and computation time.
Order Combination. Based on HPP, high-quality order combi-
nations can be identified and incorporated into ILIMA as expanding
decision entities rather than single orders. As illustrated in Figure 8,
on one hand, order combinations with very low HPP can be pruned
to avoid unnecessary score calculation. On the other hand, since
top-tier order combinations found by high HPP should be pooled
to the same courier, other combinations containing partial orders,
and conflicting orders themselves can be removed from the search
space. It can guide ILIMA to search deeply and effectively without
obviously increasing score calculation volume.
Courier Recall. When retrieving available couriers for an order
(combination), we calculate the average value of HPP between it
and the courier‚Äôs on-hand orders, to quickly estimate MD between
the order (combination) and the courier, instead of time-consuming
score calculations. For the on-hand orders already picked up by the
courier, its FU can be considered as the FU starting from the AOI
where the courier is currently located and ending at its delivery AOI.
This further helps to prune the MOA search space and reduce real-
time computational pressure while maintaining solution quality, as
shown in Figure 9.
5368Harvesting Efficient On-Demand Order Pooling from Skilled Couriers KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Figure 8: Order combination mechanism pruning MOA
search space using HPP information. For example, for can-
didate orders A, B, C, and combinations AB, AC, BC, if AB
and AC have higher HPP, then only AB, AC, B and C are pre-
served for MD evaluation, while A and BC can be eliminated.
Figure 9: Courier recall mechanisms pruning MOA search
space using HPP information.
The implementation details of order combination and courier
recall mechanisms can be found in Appendix F.
3.3.2 Highly Efficient Delivery Mode. SEHs identified by SCDN,
essentially represent small-scale subspaces deeply embedded within
the MOA search space, where thorough and high-quality order
pooling outcomes can be found, as shown in Figure 10. Then a new
delivery mode can be built, wherein a dedicated group of couriers
is assigned to each SEH, as opposed to receiving assignments in the
entire region. Accordingly, the original large-scale MOA problem,
initially solved within a vast search space shown in Figure 3, can
be effectively decomposed into a collection of small-scale MOA
problems, defined within much smaller and independent
subspaces, paving the way for comprehensive and in-depth
real-time searching. This approach serves to continually enhance
the courier efficiency potential.
In the delivery mode, order assignments for each SEH are con-
ducted as follows:
(1) Hourly SEH Identifications. SEHs for certain time periods
in a city are found using binary programming (BP), which cate-
gorizes FUs with high FEI within a specified time period into a
number of mutually exclusive sets. It aims to maximize the aver-
age HPP among FUs within each set, with FU quantities and total
historical order volume in each set as constraints. Practically, in
some mega cities like Beijing, SEHs in peak periods are determinedevery 30 minutes to capture the changes in order structure. The BP
problems for SEH identification can be solved via genetic algorithm
[18] within 10 minutes. More information is in Appendix G.
Figure 10: Promising MOA search subspace described by SEH.
(2) Real-time Parallel MOA Solutions. Order assignment for
SEH is a scaled-down MOA problem. Given the limited area and
stable order structure for SEH in a certain time period, the behav-
ioral patterns of mode couriers are highly certain, thus simplifying
the MD evaluation. In reality, we evaluate the MD via a weighted
sum of average order increments for pick-up and delivery AOIs
in a courier‚Äôs route after the new order acceptance for SEH, in-
stead of time-intensive PDRP calculations to simulate couriers‚Äô
routes. Hence we can evaluate the MD between any promising
order combinations and candidate couriers in real time, and solve
the completely-modeled MOA problem for each SEH using a Hill-
Climbing heuristic algorithm [ 33] in parallel, helping to pool orders
effectively and thoroughly. Orders outside SEHs keep the existing
assignment rules.
4 EXPERIMENTAL EVALUATION
4.1 Model Performance Evaluation
4.1.1 Model Learning Performance. Link prediction task is used to
evaluate the performance of EATNE, with AUC, F1 score and PR as
evaluation criteria. The experiments are conducted on a real-world
dataset collected from Meituan delivery platform, using a single
Linux server with NVIDIA Tesla V100 GPU with 32GB memory. The
dataset contains 28,000 SC behavior records from 28 days in Beijing,
China, forming a delivery network with about 70,000 FUs. For each
edge type, the test set is generated with 10% randomly chosen
positive edges and an equal number of negative edges, selected by
regional negative sampling. Parameter details are in Appendix E.
First we examine the effectiveness of EATNE. Figure 11 shows
that the original GATNE is hard to converge in this situation. While
EATNE, armed with regional negative sampling and margin loss,
produces superior outcomes in addition to converging much faster.
Next the performance of EATNE in various graph configurations is
investigated. Table 1 shows that optimal performance is achieved
by graphs with pick-up and delivery edges and node attributes,
proving the validity of the proposed ANHEN. Notably, pick-up con-
nections are more important than delivery ones, indicating pick-up
behaviours have a greater effect on courier efficiency. Moreover,
adding node attributes is highly impactful, highlighting order struc-
ture‚Äôs key role in affecting courier efficiency.
5369KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yile Liang et al.
Figure 11: The convergence curve for different algorithms.
Table 1: Model performance under different graph settings
Node
Attr.Pick-up
EdgeDelivery
EdgeAUC F1 PR
‚úì ‚úì ‚úì 0.79 0.72 0.75
‚úó ‚úì ‚úì 0.64 0.60 0.59
‚úì ‚úó ‚úì 0.74 0.69 0.71
‚úì ‚úì ‚úó 0.76 0.71 0.73
4.1.2 FU Embedding Effectiveness. To evaluate the effectiveness of
FU embeddings, we examine the training results via the data of the
same district in Beijing. First, by performing DBSCAN clustering
on learned embeddings, we evaluate if geographical similarity is
encoded. Figure 12, which shows resulting 33 clusters, confirms the
FUs from close locations are clustered together in the hidden space.
Figure 12: FU embedding clusters of a district in Beijing on
map (left) and after T-SNE (right).
Next we demonstrate high-quality pooling potential can be cap-
tured by FU embedding similarity, i.e. HPP. Figure 13(a) shows four
cases of FU pairs with high HPP, including (1) FU pair with pick-up
and delivery AOIs located closely, (2) nearby parallel FU pair, (3)
FU pair where one runs alongside the other, and (4) head-to-tail FU
pair, with the tail one pointing high-order-density AOIs, leading to
less courier empty run time6after completing deliveries. Orders in
these FU pairs can be pooled for simultaneous delivery to improve
courier efficiency. Meanwhile, we also identify FU pairs with low
HPP. Figure 13(b) illustrates four cases of this situation, including
(1) FU pair with the same delivery AOI but pick-up AOIs located far
6Empty run time refers to the empty cruising time before carriers deliver next orders.apart, (2) reverse parallel FU pair, (3) FU pair where one FU runs
alongside the other but points a low-order-density AOI, leading to
longer courier empty run time, and (4) head-to-tail FU pair that also
leads to a low-order-density area. These FU pairs are unlikely to be
efficiently pooled together and may undermine courier efficiency.
(a) FU pairs with high similarity.
(b) FU pairs with low similarity.
Figure 13: FU pair cases in different similarity levels.
4.2 Order Combination and Courier Recall
The proposed method, ILIMA + SCDN, is evaluated against the
current online implementation, which utilizes ILIMA with ruled
batching method, and MNDS, a metaheuristic algorithm used in [ 3].
Experiments are conducted in a mid-sized Chinese city, involving
around 500 orders and 2,500 couriers in a dispatch cycle during
noon peak.
The comparison results on both computational cost and solution
quality are presented in Table 2. The ILIMA+SCDN approach en-
hances the total MD score of MOA solutions by 5.3% compared to
ILIMA+Rule method, without incurring a significant increase in
time consumption. However, it lags by 1.2 ùëùùëùbehind MNDS. De-
spite this, MNDS requires exploration of a much larger search space
and massive PDRP calculations, which takes over 20 seconds on
average, making it unsuitable for online use. Hence, the proposed
method excels at balancing computational time and solution qual-
ity, securing more optimal MOA solutions in real-time. Moreover,
Figure 14 illustrates that the overall combination level grows as
the percentage of couriers assigned only one order decreases by
16.3ùëùùëù. This shift results in increasing order consolidation. Online
A/B test show that while maitaining delivery experience, couirer
efficiency, i.e.orders completed per hour, is augmented by 3.7%.
Table 2: Computation cost and score improvement of MOA.
Method Online PDRP
CalculationsComputation
Time Online/sMD Score
Improvement
ILIMA+Ruled 44,541 5.6 0%
ILIMA+SCDN 48,998 6.9 5.3%
MNDS / / 6.5%
Table 3 presents the results of offline experiments conducted
with varying order volumes. In different order size scenarios, the
5370Harvesting Efficient On-Demand Order Pooling from Skilled Couriers KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
(a) ILIMA+Rule.
 (b) ILIMA+SCDN.
(c) MNDS.
Figure 14: Combination level distribution.
proposed ILIMA+SCDN method significantly enhances the MD
score over the existing ILIMA+Ruled method. Regarding PDRP
Calculations, for orders fewer than 400, our proposed ILIMA+SCDN
method demonstrates lower PDRP Calculations compared to the
ILIMA+Ruled method. Nevertheless, as the order volume escalates,
the computational burden of both methods exhibits nearly linear
growth, aligning with the online time requirements.
Table 3: MOA results across various order sizes.
Method (0, 200] (200, 400] (400, 600] (600, 800] (800, 1000]
MD Score Improvement
ILIMA+Ruled 0% 0% 0% 0% 0%
ILIMA+SCDN 1.0% 4.0% 4.4% 5.5% 3.7%
MNDS 1.7% 5.3% 5.3% 6.9% 5.6%
PDRP Calculations
ILIMA+Ruled 4,285 21,910 37,323 57,700 79,596
ILIMA+SCDN 4,250 20,589 38,358 65,011 94,292
4.3 Highly Efficient Delivery Mode
Figure 15 depicts 5 SEHs identified in a specific district of Beijing
during weekday noon peak period (11:00-12:59). In response to fluc-
tuations in order structures, the network configuration of each SEH
is updated every half hour. On average, each SEH processes about
81 orders every half hour with an average HPP of 0.65, ensuring
high order density and strong network connectivity. Moreover, the
maximum number of orders pending assignment in each cycle is
less than 10. By allocating 5 to 8 couriers per SEH, we significantly
simplify the complexity of MOA solutions for each SEH.
Taking a SEH in Beijing as an example, online tests show a major
boost in order pooling. During noon peak, a courier can accept over
7 orders at once. And the percentage of SEH couriers picking up
over 5 orders simultaneously in the same AOI has risen by 23.5 pp
compared to past performance. Likewise, the percentage of SEH
Figure 15: SEHs over time, with each image capturing half an
hour. Colors denote different areas, bold lines for internal
SEH FUs, and thin lines for external FUs.
couriers delivering over 5 orders at once in the same AOI has in-
creased by 20 pp. The average courier incremental pick-up time has
been reduced by 51% and delivery time by 21%. These enhancements
lead to a 45-55% boost in courier efficiency, i.e.orders completed
per hour, while maintaining consistent work hours and on-time
delivery standards. Figure 16 illustrates the superior performance
of SEH mode against city average level in noon peak, where each
bar corresponds to the trial performance of a specific courier.
Figure 16: Courier performance in a SEH mode in noon peak.
5 CONCLUSION
This paper proposed a systemic solution framework, SCDN, based
on an Enhanced GATNE method tailored for OFD, to resolve real-
time OFD order pooling problem. It uncovers the latent poten-
tial for order pooling embedded within SC trajectories, which can
strengthen system awareness and effectively inform decisions. Ac-
cordingly, the vast search space of NP-hard MOA problems in OFD
is effectively pruned through scalable similarity calculations of
simple vectors. Thus high-quality and comprehensive pooling out-
comes are found in real time. Moreover, the outcomes highlight
SEHs for OFD, where highly-efficient delivery modes are built for
continuously improving efficiency. SCDN has now been deployed
in Meituan. Online tests show it has achieved excellent performance
and well-acknowledged by all the stakeholders.
5371KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yile Liang et al.
REFERENCES
[1]Olivier Briant, Hadrien Cambazard, Diego Cattaruzza, Nicolas Catusse, Anne-
Laure Ladier, and Maxime Ogier. 2020. An efficient and general approach for the
joint order batching and picker routing problem. European journal of operational
research 285, 2 (2020), 497‚Äì512.
[2]Yukuo Cen, Xu Zou, Jianwei Zhang, Hongxia Yang, Jingren Zhou, and Jie Tang.
2019. Representation learning for attributed multiplex heterogeneous network.
InProceedings of the 25th ACM SIGKDD international conference on knowledge
discovery & data mining. 1358‚Äì1368.
[3]Jing-Fang Chen, Ling Wang, Hao Ren, Jize Pan, Shengyao Wang, Jie Zheng, and
Xing Wang. 2022. An imitation learning-enhanced iterated matching algorithm
for on-demand food delivery. IEEE Transactions on Intelligent Transportation
Systems 23, 10 (2022), 18603‚Äì18619.
[4]Peng Cui, Xiao Wang, Jian Pei, and Wenwu Zhu. 2018. A survey on network
embedding. IEEE transactions on knowledge and data engineering 31, 5 (2018),
833‚Äì852.
[5]Tao Feng, Huan Yan, Huandong Wang, Wenzhen Huang, Yuyang Han, Hongsen
Liao, Jinghua Hao, and Yong Li. 2023. ILRoute: A Graph-based Imitation Learn-
ing Method to Unveil Riders‚Äô Routing Strategies in Food Delivery Service. In
Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and
Data Mining. 4024‚Äì4034.
[6]Mihajlo Grbovic and Haibin Cheng. 2018. Real-time personalization using em-
beddings for search ranking at airbnb. In Proceedings of the 24th ACM SIGKDD
international conference on knowledge discovery & data mining. 311‚Äì320.
[7] Aditya Grover and Jure Leskovec. 2016. node2vec: Scalable feature learning for
networks. In Proceedings of the 22nd ACM SIGKDD international conference on
Knowledge discovery and data mining. 855‚Äì864.
[8]Qingbo Hu, Sihong Xie, Jiawei Zhang, Qiang Zhu, Songtao Guo, and Philip S Yu.
2016. HeteroSales: Utilizing heterogeneous social networks to identify the next
enterprise customer. In Proceedings of the 25th International Conference on World
Wide Web. 41‚Äì50.
[9]Shenggong Ji, Yu Zheng, Zhaoyuan Wang, and Tianrui Li. 2019. Alleviating
users‚Äô pain of waiting: Effective task grouping for online-to-offline food delivery
services. In The World Wide Web Conference. 773‚Äì783.
[10] Manas Joshi, Arshdeep Singh, Sayan Ranu, Amitabha Bagchi, Priyank Karia, and
Puneet Kala. 2021. Batching and matching for food delivery in dynamic road
networks. In 2021 IEEE 37th International Conference on Data Engineering (ICDE).
IEEE, 2099‚Äì2104.
[11] Manas Joshi, Arshdeep Singh, Sayan Ranu, Amitabha Bagchi, Priyank Karia, and
Puneet Kala. 2022. FoodMatch: Batching and Matching for Food Delivery in
Dynamic Road Networks. ACM Transactions on Spatial Algorithms and Systems
(TSAS) 8, 1 (2022), 1‚Äì25.
[12] Krishnaram Kenthapadi, Benjamin Le, and Ganesh Venkataraman. 2017. Person-
alized job recommendation system at linkedin: Practical challenges and lessons
learned. In Proceedings of the eleventh ACM conference on recommender systems.
346‚Äì347.
[13] Shima Khoshraftar and Aijun An. 2022. A survey on graph representation
learning methods. arXiv preprint arXiv:2204.01855 (2022).
[14] Yile Liang, Donghui Li, Jiuxia Zhao, Xuetao Ding, Huanjia Lian, Jinghua Hao, and
Renqing He. 2023. Enhancing Dynamic On-demand Food Order Dispatching via
Future-informed and Spatial-temporal Extended Decisions. In Proceedings of the
32nd ACM International Conference on Information and Knowledge Management .
4702‚Äì4708.
[15] Vittorio Maniezzo, Thomas St√ºtzle, and Stefan Vo√ü. 2021. Matheuristics. Springer.
[16] Eva-Marie Meemken, Marc F Bellemare, Thomas Reardon, and Carolina M Vargas.
2022. Research and policy for the food-delivery revolution. Science 377, 6608
(2022), 810‚Äì813.
[17] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeff Dean. 2013.
Distributed representations of words and phrases and their compositionality.
Advances in neural information processing systems 26 (2013).
[18] Seyedali Mirjalili and Seyedali Mirjalili. 2019. Genetic algorithm. Evolutionary
Algorithms and Neural Networks: Theory and Applications (2019), 43‚Äì55.
[19] Eduardo G Pardo, Sergio Gil-Borr√°s, Antonio Alonso-Ayuso, and Abraham Duarte.
2023. Order Batching Problems: taxonomy and literature review. European Journal
of Operational Research (2023).
[20] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. 2014. Deepwalk: Online learning
of social representations. In Proceedings of the 20th ACM SIGKDD international
conference on Knowledge discovery and data mining. 701‚Äì710.
[21] Rohan Ramanath, Hakan Inan, Gungor Polatkan, Bo Hu, Qi Guo, Cagri Ozcaglar,
Xianren Wu, Krishnaram Kenthapadi, and Sahin Cem Geyik. 2018. Towards deep
and representation learning for talent search at linkedin. In Proceedings of the
27th ACM international conference on information and knowledge management.
2253‚Äì2261.
[22] Damian Reyes, Alan Erera, Martin Savelsbergh, Sagar Sahasrabudhe, and Ryan
O‚ÄôNeil. 2018. The meal delivery routing problem. Optimization Online 6571
(2018).
[23] Akhil Shetty, Junjie Qin, Kameshwar Poolla, and Pravin Varaiya. 2022. The Value
of Pooling in Last-Mile Delivery. In 2022 IEEE 61st Conference on Decision andControl (CDC). IEEE, 531‚Äì538.
[24] Michele D Simoni and Matthias Winkenbach. 2023. Crowdsourced on-demand
food delivery: An order batching and assignment algorithm. Transportation
Research Part C: Emerging Technologies 149 (2023), 104055.
[25] Jian Tang, Meng Qu, Mingzhe Wang, Ming Zhang, Jun Yan, and Qiaozhu Mei.
2015. Line: Large-scale information network embedding. In Proceedings of the
24th international conference on world wide web. 1067‚Äì1077.
[26] Lei Tang, Zihang Liu, Rongguo Zhang, Zongtao Duan, and Yunji Liang. 2021.
Who Will Travel With Me? Personalized Ranking Using Attributed Network
Embedding for Pooling. IEEE Transactions on Intelligent Transportation Systems
23, 8 (2021), 12311‚Äì12327.
[27] Lei Tang, Zihang Liu, Yaling Zhao, Zongtao Duan, and Jingchi Jia. 2020. Efficient
ridesharing framework for ride-matching via heterogeneous network embedding.
ACM Transactions on Knowledge Discovery from Data (TKDD) 14, 3 (2020), 1‚Äì24.
[28] Jizhe Wang, Pipei Huang, Huan Zhao, Zhibo Zhang, Binqiang Zhao, and Dik Lun
Lee. 2018. Billion-scale commodity embedding for e-commerce recommendation
in alibaba. In Proceedings of the 24th ACM SIGKDD international conference on
knowledge discovery & data mining. 839‚Äì848.
[29] Xing Wang, Ling Wang, Shengyao Wang, Yang Yu, Jing-fang Chen, and Jie Zheng.
2021. Solving online food delivery problem via an effective hybrid algorithm with
intelligent batching strategy. In International Conference on Intelligent Computing.
Springer, 340‚Äì354.
[30] Jianglong Yang, Li Zhou, and Huwei Liu. 2021. Hybrid genetic algorithm-based
optimisation of the batch order picking in a dense mobile rack warehouse. Plos
one16, 4 (2021), e0249543.
[31] Baris Yildiz and Martin Savelsbergh. 2019. Provably high-quality solutions for the
meal delivery routing problem. Transportation Science 53, 5 (2019), 1372‚Äì1388.
[32] Yang Yu, Qingte Zhou, Shenglin Yi, Huanyu Zheng, Shengyao Wang, Jinghua
Hao, Renqing He, and Zhizhao Sun. 2021. Delay to group in food delivery system:
A prediction approach. In International Conference on Intelligent Computing.
Springer, 540‚Äì551.
[33] Lingyu Zhang, Tao Hu, Yue Min, Guobin Wu, Junying Zhang, Pengcheng Feng,
Pinghua Gong, and Jieping Ye. 2017. A taxi order dispatch model based on
combinatorial optimization. In Proceedings of the 23rd ACM SIGKDD international
conference on knowledge discovery and data mining. 2151‚Äì2159.
[34] Jie Zheng, Ling Wang, Li Wang, Shengyao Wang, Jing-Fang Chen, and Xing
Wang. 2022. Solving stochastic online food delivery problem via iterated greedy
algorithm with decomposition-based strategy. IEEE Transactions on Systems, Man,
and Cybernetics: Systems 53, 2 (2022), 957‚Äì969.
[35] Qingte Zhou, Huanyu Zheng, Shengyao Wang, Jinghua Hao, Renqing He, Zhizhao
Sun, Xing Wang, and Ling Wang. 2020. Two fast heuristics for online order
dispatching. In 2020 IEEE Congress on Evolutionary Computation (CEC). IEEE,
1‚Äì8.
[36] Yida Zhu, Liying Chen, Daping Xiong, Shuiping Chen, Fangxiao Du, Jinghua
Hao, Renqing He, and Zhizhao Sun. 2023. C-AOI: Contour-based Instance Seg-
mentation for High-Quality Areas-of-Interest in Online Food Delivery Platform.
InProceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and
Data Mining. 5750‚Äì5759.
AMANY-TO-ONE ASSIGNMENT PROBLEM AT
EACH DISPATCH CYCLE
As shown in Figure 3, the calculation volume increases very fast
with the number of orders and couriers. Different order combina-
tions of order set ùëÇùë°are considered. For example, the number of
ùëô‚àíorder combinations is ùê∂ùëô
|ùëÇùë°|. Since the MD score of assigning
combinations of orders is not equivalent to the sum of scores of
individual assignments. The calculation volume of MD score is√ç
ùëô‚ààùêøùê∂ùëô
|ùëÇùë°|√ó|‚à™‚àÄ¬ØùëúùëôùëÖ¬Øùëúùëô
ùë°|, whereùëÖ¬Øùëúùëô
ùë°is the set of couriers for ùëô‚àíorder
combination ¬Øùëúùëôat dispatch time ùë°.
min
ùë•ùë°‚àà‚Ñµùë°‚àëÔ∏Å
¬Øùëú‚ààùëêùëúùëöùëè(ùëÇùë°)‚àëÔ∏Å
ùëü‚ààùëÖùëú
ùë°¬©¬≠
¬´‚àëÔ∏Å
ùëî‚ààùê∫ùúÇùëî
ùë°√óùëìùëî,¬Øùëú
ùë°,ùëü¬™¬Æ
¬¨√óùë•¬Øùëú
ùëü
ùë†.ùë°.‚Ñµùë°=Ô£±Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥ Ô£≤
Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£≥‚àëÔ∏Å
ùëú(ùëú)‚àëÔ∏Å
ùëü‚ààùëÖùëú(ùëú)
ùë°ùë•¬Øùëú(ùëú)
ùëü=1,‚àÄùëú‚ààOùë°
ùë•¬Øùëú
ùëü=√ñ
ùëú‚àà¬Øùëúùë•ùëú
ùëü,‚àÄ¬Øùëú‚ààùëêùëúùëöùëè(ùëÇùë°)Ô£ºÔ£¥Ô£¥Ô£¥Ô£¥Ô£¥ Ô£Ω
Ô£¥Ô£¥Ô£¥Ô£¥Ô£¥Ô£æ(9)
5372Harvesting Efficient On-Demand Order Pooling from Skilled Couriers KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Algorithm 1 EATNE for OFD
Input: Network ùê∫; Embedding dimension ùëë; Edge embedding
dimensionùë†; Window size ùëê; Learning rate ùúÇ; Marigin loss min
distanceùëöùëù,ùëöùëë; coefficient ùõº,ùõΩ,ùõæùëÉùëù,ùõæùëÉ
ùëë,ùõæùê∑ùëù,ùõæùê∑
ùëë.
Output: Embedding vi, and Embeddding vùëñ,ùëùandvùëñ,ùëëon the
pick-up and delivery edge for all ùë£ùëñ‚ààùëâ.
1:Initialize all the model parameters ùúÉ.
2:Generate positive data sets DùëÉùëùandDùëÉ
ùëëby random walk on
the pick-up and delivery edge, respectively.
3:Randomly sample FU pairs within the same delivery region,
then add to negative data set DùëÅùëùandDùëÅ
ùëë.
4:while not converged do
5: foreach FU pair inDùëÉùëù,DùëÉ
ùëëdo
6: Calculate vùëñ,ùëùandvùëñ,ùëëusing Equation (4) and (5) respec-
tively;
7: Sampleùëönegative samples and calculate loss value
using Equation (6).
8: Update model parameters ùúÉbyùúïùê∏
ùúïùúÉ.
9: end for
10:end while
11:Setvias the average of vùëñ,ùëùandvùëñ,ùëë.
After getting all these MD scores, the MOA problem can be for-
mulated into an integer programming problem in Equation (9). The
objective function is to minimize the total MD scores for different
goals, andùëìùëî,¬Øùëú
ùë°,ùëüis the MD score of assigning order combination ¬Øùëú
to courierùëüat timeùë°for goalùëî,ùëêùëúùëöùëè(ùëÇùë°)refers to all the possible
combinations constructed by orders in ùëÇùë°,ùúÇùëî
ùë°is the weight of goal
ùëîin the objective function at time ùë°. The constraint is to make sure
each combination ¬Øùëúcan only be assigned to one courier and only
one combination of each order can be selected. ¬Øùëú(ùëú)represents the
order combination containing order ùëú.
B DEFINITION OF SKILLED COURIER AND
SELECTION CRITERIA OF ROUTE SESSIONS
As mentioned above, SC refers to the couriers with relatively high
efficiency, currently set top rank 5%-35% in a delivery region. It
should be noted that in order to prevent extreme cases from affect-
ing the validity of the learning outcomes, the top 5% of couriers
have been excluded.
The SC route sessions of both pick-up and delivery type, for con-
structing the network are selected based on the following criteria:
(1) time interval between the execution of two consecutive orders
less than 30 minutes;
(2) no overtime orders;
(3) no speeding behaviours;
(4) no orders with negative feedback reported.
Then based on the carefully selected sessions of SCs, we construct
the corresponding AMHEN using the method outlined in Section 2.
C FU NODE ATTRIBUTES IN AMHEN
We incorporate rich spatial and temporal information as attributes
of a FU node, for a specific scenario (i.e., weekday/weekend, peak/i-
dle time), mainly including:(1) average order volume of FU, and the corresponding pick-up
and delivery AOIs in the scenario for last 30 days;
(2) average meal-waiting and pick-up time duration of the corre-
sponding pick-up AOI in the scenario for last 30 days ;
(3) average delivery time duration of the corresponding delivery
AOI in the scenario for last 30 days ;
(4) average delivery distance of the FU;
(5) average FU delivery period of time since consumers order in
the scenario for last 30 days;
(6) type and number of natural barriers (e.g. bridge, river, high-
way) along the FU path;
(7) latitudes and longitudes of the center points of the corre-
sponding pick-up and delivery AOIs;
(8) the proportion of SCs who chose the corresponding pick-up
and delivery AOIs as their preferred locations for the scenario in
the past 30 days.
DIMPLEMENTATION OF EATNE ALGORITHM
The proposed EATNE algorithm is summarized in Algorithm 1.
E EATNE MODEL PARAMETER
CONFIGURATION
The detailed parameter setting is shown in Table 4. We employ
the Adam optimizer with default settings for training. The model
implements early stopping if there‚Äôs no improvement in the ROC-
AUC on the validation set within a single training epoch.
Table 4: Parameter configuration of EATNE model.
Notation Description Setting Value
ùëë base embedding dimension 200
ùë† edge embedding dimension 20
ùëô random walk length 10
ùëê sampling window size 3
ùëöùëù,ùëöùëë margin loss min distance 0.3
ùúÇ learning rate 0.001
ùõºùëù,ùõºùëë,ùõΩùëù,ùõΩùëû edge weights 1
ùõæùëÉùëù,ùõæùëÉ
ùëë,ùõæùê∑ùëù,ùõæùê∑
ùëëweights in loss objective 1
F IMPLEMENTATION DETAILS OF ORDER
COMBINATION AND COURIER RECALL.
The MOA problem in our system is now solved using a constructive
heuristic framework. The process during each dispatch cycle may
require multiple iterations. Let ùëÇùëòdenote the set of pending orders
during iteration ùëò, withùëÇ0=ùëÇinitially, where ùëÇrepresents all
pending orders during this dispatch cycle. And at iteration ùëò,
(1)Evaluation stage: For the pending orders ùëÇùëòand their as-
sociated recalled courier candidates ùëÖùëòùëú,ùëú‚ààùëÇùëò, MD scores
{{ùëìùëüùëú}ùëü‚ààùëÖùëòùëú}ùëú‚ààùëÇùëòare calculated.
(2)Matching stage: Based on current MD scores, a one(order)-
to-one(courier) assignment decision is made following greedy
policy (aiming to optimize the sum of MD scores for all
matching relations at the current iteration). This may result
in only a subset ùëÇùëòbeing successfully assigned.
5373KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yile Liang et al.
(3)Termination condition: Denote the remaining unassigned
orders asùëÇùëò. IfùëÇùëò=‚àÖ, stop the iterations. Otherwise, up-
date the state of couriers by including newly assigned orders,
letùëÇùëò+1=ùëÇùëò,ùëò=ùëò+1, proceed to Step (1).
F.1 Order Combination Mechanism.
Although the above algorithm has good performance in solving,
it tends to promote one-to-one assignment results, which is not
conducive to sufficient order pooling. To facilitate many-to-one as-
signments, high-quality and mutually exclusive order combinations
are identified based on HPP, and incorporated into the algorithm as
expanding entities rather than single orders. The evaluation stage
at iterationùëòis executed as follows:
(1)For pending orders ùëÇùëò, calculate the HPPs between the FUs
of any two orders and denote the combination set as ùê∂ùëò. Set
the order combination set preserved for MD evaluation at
iterationùëòascùê∂ùëò=‚àÖ.
(2)Prune two-order combinations with low HPPs ( ùëùùëú1,ùëú2<ùëÉ1),
i.e., letùê∂ùëò=ùê∂ùëò‚àíùê∂ùëò
ùëôùëúùë§.
(3)Repeat this step until ùê∂ùëò=‚àÖ: pickupùëê={ùëú1,ùëú2} ‚ààùê∂ùëò
with the highest HPP value, letcùê∂ùëò=cùê∂ùëò+{ùëê}. Then remove
its related entries in ùê∂ùëòandùëÇùëò, i.e, letùê∂ùëò=ùê∂ùëò‚àí{ùëê|ùëú1‚àà
ùëêorùëú2‚ààùëê,ùëê‚ààùê∂ùëò},ùëÇùëò=ùëÇùëò‚àí{ùëú1}‚àí{ùëú2}.
(4)Usecùê∂ùëòandùëÇùëòas decision entities and calculate the MD
scores with their associated couriers.
The above process is illustrated in Figure 8. And in practice, ùëÉ1is
set to 0.6.
F.2 Courier Recall Mechanism.
To reduce MD score calculation volume, we can further refine the
courier candidates recalled for each order/order combination using
HPP. For the evaluation stage at iteration ùëò, the pending entity
sets arecùê∂ùëòandùëÇùëò, and the courier recall mechanism is executed
as follows:
(1)Forùëú‚ààùëÇùëò, denote the corresponding courier candidate set
asùëÖùëòùëú. Forùëü‚ààùëÖùëòùëú, if the on-hand order set ùëÇùëòùëü‚â†‚àÖ, calculate
the average HPP of ùëúand orders in ùëÇùëòùëüas an estimation of
MD score, i.e. eùëìùëüùëú=1
|ùëÇùëòùëü|√ç
ùëú‚Ä≤‚ààùëÇùëòùëüùëùùëú,ùëú‚Ä≤.
For the on-hand order already picked up by courier ùëü, its FU
can be considered as the FU starting from the AOI where the
courier is currently located and ending at its delivery AOI.
For the on-hands whose FU embedding is absent, the associ-
ated HPP is set as 0.
Ifeùëìùëüùëúis lower than threshold ùëÉ2, courierùëüwill be removed
from the candidate set, i.e. ùëÖùëòùëú=ùëÖùëòùëú‚àí{ùëü}.
(2)Forùëê={ùëú1,ùëú2} ‚ààcùê∂ùëò, denote the corresponding courier
candidate set as ùëÖùëòùëê, which is the intersection of courier can-
didate sets of ùëú1andùëú2. Forùëü‚ààùëÖùëòùëê, calculate the average
HPP ofùëú1andùëú2as Step (1), respectively.If either eùëìùëüùëú1oreùëìùëüùëú2is lower than threshold ùëÉ2, courierùëüwill
be removed from the candidate set, i.e. ùëÖùëòùëê=ùëÖùëòùëê‚àí{ùëü}.
(3)For orders in ùëÇùëòand combinations incùê∂ùëò, calculate the MD
scores with their refined couriers.
The above process is illustrated as in Figure 9. And in practice, ùëÉ2
is set to 0.5.
G SEH IDENTIFICATION APPROACH
We utilize BP to identify SEHs during each time interval from FUs
with high FEI in a city or nearby areas. In this section, we introduce
the variable definitions, objective function, and constraints of the
model.
The decision variable ùë•ùëî
ùëìrepresents whether FU ùëìbelongs to
SEHùëî. To calculate the average HPP in each SEH, we introduce
a binary auxiliary variable ùë¶ùëî
ùëì,ùëì‚Ä≤, which indicates whether FU ùëì
andùëì‚Ä≤belong to SEH ùëîsimultaneously. The objective function in
Equation (10) is to maximize the average HPP in each SEH, where
ùëùùëì,ùëì‚Ä≤is the HPP between FU ùëìandùëì‚Ä≤.
The constraint in Equation (11) limits each FU to appear in only
one SEH. Equation (12) limits the minimum and maximum number
of FUs in each SEH. Equation (13) limits the minimum number
of orders in each SEH, where ùëõùëìis the number of orders of FU ùëì.
Equation (14) and Equation (15) ensure that ùë¶ùëî
ùëì,ùëì‚Ä≤=1if and only if
ùë•ùëî
ùëì=ùë•ùëî
ùëì‚Ä≤=1. Equation (16) constrains the minimum average HPP
in each SEH ùëî. Equation (17) and Equation (18) ensure that all the
decision variables are binary.
max‚àëÔ∏Å
ùëî‚ààùê∫√ç
ùëì‚ààùêπ√ç
ùëì‚Ä≤‚ààùêπ,ùëì‚Ä≤‚â†ùëìùëùùëì,ùëì‚Ä≤√óùë¶ùëî
ùëì,ùëì‚Ä≤
√ç
ùëì‚ààùêπ√ç
ùëì‚Ä≤‚ààùêπ,ùëì‚Ä≤‚â†ùëìùë¶ùëî
ùëì,ùëì‚Ä≤(10)
ùë†.ùë°.‚àëÔ∏Å
ùëî‚àà¬Øùê∫ùë•ùëî
ùëì=1,‚àÄùëì‚ààùêπ (11)
|ùëî|min‚â§‚àëÔ∏Å
ùëì‚ààùêπùë•ùëî
ùëì‚â§|ùëî|max,‚àÄùëî‚ààùê∫ (12)
‚àëÔ∏Å
ùëì‚ààùêπùëõùëì√óùë•ùëî
ùëì‚â•ùëÅ,‚àÄùëî‚ààùê∫ (13)
ùë¶ùëî
ùëì,ùëì‚Ä≤‚â•ùë•ùëî
ùëì+ùë•ùëî
ùëì‚Ä≤‚àí1 (14)
ùë¶ùëî
ùëì,ùëì‚Ä≤‚â§ùë•ùëî
ùëì,ùë¶ùëî
ùëì,ùëì‚Ä≤‚â§ùë•ùëî
ùëì‚Ä≤ (15)
‚àëÔ∏Å
ùëì‚ààùêπ‚àëÔ∏Å
ùëì‚Ä≤‚ààùêπ,ùëì‚Ä≤‚â†ùëì(ùëùùëì,ùëì‚Ä≤‚àíùëÉ)√óùë¶ùëî
ùëì,ùëì‚Ä≤‚â•0,‚àÄùëî‚ààùê∫ (16)
ùë•ùëî
ùëì‚àà{0,1},‚àÄùëì‚ààùêπ,‚àÄùëî‚ààùê∫ (17)
ùë¶ùëî
ùëì,ùëì‚Ä≤‚àà{0,1},‚àÄùëì,ùëì‚Ä≤‚ààùêπ,ùëì‚â†ùëì‚Ä≤,‚àÄùëî‚ààùê∫ (18)
5374