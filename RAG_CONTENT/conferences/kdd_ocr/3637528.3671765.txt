Efficient Topology-aware Data Augmentation for High-Degree
Graph Neural Networks
Yurui Lai
Hong Kong Baptist University
Hong Kong, China
csyrlai@hkbu.edu.hkXiaoyang Lin
Hong Kong Baptist University
Hong Kong, China
csxylin@hkbu.edu.hk
Renchi Yang
Hong Kong Baptist University
Hong Kong, China
renchi@hkbu.edu.hkHongtao Wang
Hong Kong Baptist University
Hong Kong, China
cshtwang@hkbu.edu.hk
ABSTRACT
In recent years, graph neural networks (GNNs) have emerged as a
potent tool for learning on graph-structured data and won fruit-
ful successes in varied fields. The majority of GNNs follow the
message-passing paradigm, where representations of each node are
learned by recursively aggregating features of its neighbors. How-
ever, this mechanism brings severe over-smoothing and efficiency
issues over high-degree graphs (HDGs), wherein most nodes have
dozens (or even hundreds) of neighbors, such as social networks,
transaction graphs, power grids, etc. Additionally, such graphs usu-
ally encompass rich and complex structure semantics, which are
hard to capture merely by feature aggregations in GNNs.
Motivated by the above limitations, we propose TADA, an effi-
cient and effective front-mounted data augmentation framework for
GNNs on HDGs. Under the hood, TADA includes two key modules:
(i) feature expansion with structure embeddings, and (ii) topology-
and attribute-aware graph sparsification. The former obtains aug-
mented node features and enhanced model capacity by encoding
the graph structure into high-quality structure embeddings with
our highly-efficient sketching method. Further, by exploiting task-
relevant features extracted from graph structures and attributes, the
second module enables the accurate identification and reduction
of numerous redundant/noisy edges from the input graph, thereby
alleviating over-smoothing and facilitating faster feature aggrega-
tions over HDGs. Empirically, TADA considerably improves the
predictive performance of mainstream GNN models on 8 real ho-
mophilic/heterophilic HDGs in terms of node classification, while
achieving efficient training and inference processes.
CCS CONCEPTS
‚Ä¢Computing methodologies ‚ÜíNeural networks ;Supervised
learning by classification ;‚Ä¢Mathematics of computing ‚ÜíAp-
proximation algorithms .
This work is licensed under a Creative Commons Attribution
International 4.0 License.
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
¬©2024 Copyright held by the owner/author(s).
ACM ISBN 979-8-4007-0490-1/24/08.
https://doi.org/10.1145/3637528.3671765KEYWORDS
graph neural networks, data augmentation, sketching, sparsification
ACM Reference Format:
Yurui Lai, Xiaoyang Lin, Renchi Yang, and Hongtao Wang. 2024. Efficient
Topology-aware Data Augmentation for High-Degree Graph Neural Net-
works. In Proceedings of the 30th ACM SIGKDD Conference on Knowledge
Discovery and Data Mining (KDD ‚Äô24), August 25‚Äì29, 2024, Barcelona, Spain.
ACM, New York, NY, USA, 11 pages. https://doi.org/10.1145/3637528.3671765
1 INTRODUCTION
Graph neural networks (GNNs) are powerful deep learning archi-
tectures for relational data (a.k.a. graphs or networks), which have
exhibited superb performance in extensive domains spanning across
recommender systems [ 97], bioinformatics [ 21,68], transportation
[17,32], finance [ 10,84,102], and many other [ 26,40,51,86]. The
remarkable success of GNN models is primarily attributed to the
recursive message passing (MP) (a.k.a. feature aggregation or fea-
ture propagation) scheme [ 26], where the features of a node are
iteratively updated by aggregating the features from its neighbors.
In real world, graph-structured data often encompasses a wealth
of node-node connections (i.e., edges), where most nodes are adja-
cent to dozens or hundreds of neighbors on average, which are re-
ferred to as high-degree graphs (hereafter HDGs). Practical examples
include social networks/medias (e.g., Facebook, TikTok, LinkedIn),
transaction graphs (e.g., PayPal and AliPay), co-authorship net-
works, airline networks, and power grids. Over such graphs, the
MP mechanism undergoes two limitations: (i) homogeneous node
representations after merely a few rounds of feature aggregations
(i.e., over-smoothing [ 8]), and (ii) considerably higher computation
overhead. Apart from this, the majority of GNNs mainly focus on
designing new feature aggregation rules or model architectures,
where the rich structural features of nodes in HDGs are largely
overlooked and under-exploited.
To prevent overfitting and over-smoothing in GNNs, a series of
studies draw inspiration from Dropout [ 67] and propose to ran-
domly remove or mask edges [ 60], nodes [ 20,99], subgraphs [ 99]
from the input graph Gduring model training. Although such ran-
dom operations can be done efficiently, they yield information loss
and sub-optimal results due to removing graph elements while
overlooking their importance to Gin the context of tasks. Recently,
some researchers [ 48,66] applied graph sparsification techniques
for better graph reduction, which is also task-unaware and fails to
 
1463
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yurui Lai et al.
account for attribute information. Instead of relying on heuristics,
several attempts [ 22,34,107] have been made to search for better
graph structures that augment Gviagraph structure learning. This
methodology requires expensive training, might create additional
edges inG, and thus can hardly cope with HDGs. To tackle the
feature-wise limitation of GNNs, recent efforts [ 63,69,77] resort
to expanding node features with proximity metrics (e.g., hitting
time, commute time) or network embeddings [ 6], both of which
are computationally demanding, especially on large HDGs. In sum,
existing augmentation techniques for GNNs either compromise ef-
fectiveness or entail significant extra computational expense when
applied to HDGs.
In response, this paper proposes TADA, an effective and efficient
data augmentation solution tailored for GNN models on HDGs. In
particular, TADA tackles the aforementioned problems through two
vital contributions: (i) efficient feature expansion with sketch-based
structure embeddings; and (ii) topology- and attribute-aware graph
sparsification. The former aims to extract high-quality structural
features underlying the input HDG Gto expand node features for
bolstered model performance in a highly-efficient fashion, while the
latter seeks to attenuate the adverse impacts (i.e., over-smoothing
and efficiency issues) of feature aggregations on HDGs by expung-
ing redundant/noisy edges in Gwith consideration of both graph
topology and node attributes.
To achieve the first goal, we first empirically and theoretically
substantiate the effectiveness of the intact graph structures (i.e.,
adjacency matrices) in improving GNNs when serving as additional
node attributes. In view of its impracticality on large HDGs, we
further develop a hybrid sketching approach that judiciously inte-
grates our novel topology-aware RWR-Sketch technique into the
data-oblivious Count-Sketch method for fast and accurate embed-
dings of graph structures. Compared to naive Count-Sketch, which
offers favorable theoretical merits but has flaws in handling highly
skewed data (i.e., HDGs) due to its randomness, RWR-Sketch reme-
dies this deficiency by injecting a concise summary of the HDG
using the random walk with restart [73] model. The resulted struc-
ture embeddings, together with node attributes, are subsequently
transformed into task-aware node features via pre-training. On top
of that, we leverage such augmented node features for our second
goal. That is, instead of direct sparsification of the HDG G, we
first construct an edge-reweighted graph Gùë§using the enriched
node features. Building on our rigorous theoretical analysis, a fast
algorithm for estimating the centrality values of edges in Gùë§is
devised for identifying unnecessary/noisy edges.
We extensively evaluate TADA along with 5 classic GNN mod-
els on 4 homophilic graphs and 4 heterophilic graphs in terms of
node classification. Quantitatively, the tested GNNs generally and
consistently achieve conspicuous improvements in accuracy (up
to20.14%) when working in tandem with TADA , while offering
matching or superior efficiency (up to orders of magnitude speedup)
in each training and inference epoch.
To summarize, our paper makes the following contributions:
‚Ä¢Methodologically, we propose a novel data augmentation frame-
work TADA for GNNs on HDGs, comprising carefully-crafted
skecthing-based feature expansion and graph sparsification.‚Ä¢Theoretically, we corroborate the effectiveness of using the adja-
cency matrix as auxiliary attributes and establish related theoret-
ical bounds in our sketching and sparsification modules.
‚Ä¢Empirically, we conduct experiments on 8 benchmark datasets
and demonstrate the effectiveness and efficiency of TADA in
augmenting 5 popular GNN models.
2 RELATED WORKS
Data Augmentation for GNNs. Data augmentation for GNNs
(GDA) aims at increasing the generalization ability of GNN mod-
els through structure modification or feature generation, which
has been extensively studied in the literature [ 2,18,92,106]. Ex-
isting GDA works can be generally categorized into two types: (i)
rule-based methods and (ii) learning-based methods. More specif-
ically, rule-based GDA techniques rely on heuristics (pre-defined
rules) to modify or manipulate the graph data. Similar in spirit to
Dropout [ 67], DropEdge [ 60] and its variants [ 19,20,70,72,82]
randomly remove or mask edges, nodes, features, subgraphs, or mes-
sages so as to alleviate the over-fitting and over-smoothing issues.
However, this methodology causes information loss and, hence,
sub-optimal quality since the removal operations treat all graph
elements equally. In lieu of removing data, Ying et al . [96] propose
to add virtual nodes that connect to all nodes and [ 29,79,83] create
new data samples by either interpolating training samples [ 103] or
hidden states and labels [ 78]. Besides, recent studies [ 46,63,69,77]
explored extracting additional node features from graph structures.
For instance, Song et al . [63] augment node attributes with node
embeddings from DeepWalk [ 57] and Velingker et al . [77] expand
node features with random walk measures (e.g., effective resis-
tance, hitting and commute times). These approaches enjoy better
effectiveness at the expense of high computation costs, which are
prohibitive on large HDGs.
Along another line, learning-based approaches leverage deep
learning for generations of task-specific augmented samples. Moti-
vated by the assumption that graph data is noisy and incomplete,
graph structure learning (GSL) [ 34,35,107] methods learn better
graph structures by treating graph structures as learnable parame-
ters. As an unsupervised learning method, graph contrastive learning
(GCL) [ 99,110] techniques have emerged as a promising avenue
to address the challenges posed by noisy and incomplete graph
data, enhancing the robustness and generalization of graph neu-
ral networks (GNNs) on high-dimensional graphs (HDGs). Unlike
GSL and GCL, [ 33,38,88] extend adversarial training to graph
domains and augments input graphs with adversarial patterns by
perturbing node features or graph structures during model training.
Rationalization methods [ 44,87] seek to learn subgraphs that are
causally related with the graph labels as a form of augmented graph
data, which are effective in solving out-of-distribution and data
bias issues. Recently, researchers [ 50,98,108] utilized reinforce-
ment learning agents to automatically learn optimal augmentation
strategies for different subgraphs or graphs. These learning-based
approaches are all immensely expensive, and none of them tackle
the issues of GNNs on HDGs as remarked in Section 1.
Structure Embedding. The goal of structure embedding (or net-
work embedding) is to convert the graph topology surrounding
each node into a low-dimensional feature vector. As surveyed in [ 6],
 
1464Efficient Topology-aware Data Augmentation for High-Degree Graph Neural Networks KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
there exists a large body of literature on this topic, most of which can
be summarized into three categories as per their adopted method-
ology: (i) random walk-based methods, (ii) matrix factorization-
based methods, and (iii) deep learning-based models. In particular,
random walk-based methods [ 27,57,74] learn node embeddings
by optimizing the skip-gram model [ 53] or its variants with ran-
dom walk samples from the graph. Matrix factorization-based ap-
proaches [ 54,59,93,94,105] construct node embeddings through
factorizing node-to-node affinity matrices, whereas [ 1,7,80,100]
capitalize on diverse deep neural network models for node rep-
resentation learning on non-attributed graphs. Recent evidence
suggests that using such network embeddings [ 63], or resistive
embeddings [77] and spectral embeddings [69] as complementary
node features can bolster the performance of GNNs, but result in
considerable additional computational costs.
Graph Sparsification. Graph sparsification is a technique aimed
at approximating a given graph Gwith a sparse graph containing
a subset of nodes and/or edges from G[11]. Classic sparsification
algorithms for graphs include cut sparsification [ 23,36] and spectral
sparsification [ 3,64,65]. Cut sparsification reduces edges while
preserving the value of the graph cut, while spectral sparsifiers
ensure the sparse graphs can retain the spectral properties of the
original ones. Recent studies [ 48,66] employ these techniques as
heuristics to sparsify the input graphs before feeding them into
GNN models for acceleration of GNN training [ 47]. In spite of their
improved empirical efficiency, these works fail to incorporate node
attributes as well as task information for sparsification. To remove
task-irrelevant edges accurately, Zheng et al . [109] and Li et al . [41]
cast graph sparsification as optimization problems and apply deep
neural networks and the alternating direction method of multipliers,
respectively, both of which are cumbersome for large HDGs.
3 PRELIMINARIES
3.1 Notations
Throughout this paper, sets are denoted by calligraphic letters, e.g.,
V. Matrices (resp. vectors) are written in bold uppercase (resp.
lowercase) letters, e.g., M(resp. x). We use MùëñandM:,ùëñto represent
theùëñthrow and column of M, respectively.
LetG=(V,E)be a graph (a.k.a. network), where Vis a set ofùëõ
nodes andEis a set ofùëöedges. For each edge ùëíùëñ,ùëó‚ààEconnecting
nodesùë£ùëñandùë£ùëó, we sayùë£ùëñandùë£ùëóare neighbors to each other.
We useN(ùë£ùëñ)to denote the set of neighbors of node ùë£ùëñ, where
the degree of ùë£ùëñ(i.e.,|N(ùë£ùëñ)|) is symbolized by ùëë(ùë£ùëñ). Nodesùë£ùëñ
inGare endowed with an attribute matrix X‚ààRùëõ√óùëë, whereùëë
stands for the dimension of node attribute vectors. The diagonal
degree matrix ofGis denoted as D=diag(ùëë(ùë£1),¬∑¬∑¬∑,ùëë(ùë£ùëõ)). The
adjacency matrix and normalized adjacency matrix are denoted as
AandeA=D‚àí1
2AD‚àí1
2, respectively. The Laplacian and transition
matrices ofGare defined by L=D‚àíAandP=D‚àí1A, respectively.
3.2 Graph Neural Networks (GNNs)
The majority of existing GNNs [ 4,13,16,25,31,45,76,85,89,90]
follow the message passing (MP) paradigm [ 26], such as GCN [ 37],
APPNP [ 24], and GCNII [ 9]. For simplicity, we refer to all these MP-
based models as GNNs. More concretely, the node representationsTable 1: Classification Accuracy with X‚à•Aas Features.
Dataset WikiCS Squirrel
GCN 84.05%¬±0.76% 54.85%¬±2.02%
GCN (X‚à•A) 84.15%¬±0.48% 56.06%¬±3.12%
GAT 83.74%¬±0.75% 55.70%¬±3.26%
GAT (X‚à•A) 84.15%¬±0.83% 57.77%¬±2.13%
APPNP 85.04%¬±0.60% 54.47%¬±2.06%
APPNP (X‚à•A) 85.24%¬±0.56% 57.64%¬±1.32%
GCNII 85.13%¬±0.56% 53.13%¬±4.29%
GCNII (X‚à•A) 85.28%¬±0.78% 54.35%¬±4.04%
H(ùë°)atùë°-th layer of GNNs can be written as
H(ùë°)=ùúé(ùëìtrans(ùëìaggr(G,H(ùë°‚àí1)))),
H(0)=ùúé(XùõÄorig)‚ààRùëõ√ó‚Ñé(1)
whereùúé(¬∑)stands for a nonlinear activate function, ùëìtrans(¬∑)corre-
sponds to a layer-wise feature transformation operation (usually
an MLP including non-linear activation ReLU and layer-specific
learnable weight matrix), and ùëìaggr(G,¬∑)represents the operation
of aggregating ‚Ñì-th layer features H(‚Ñì)from the neighborhood along
graphG, e.g.,ùëìaggr(G,H(ùë°))=eAH(ùë°‚àí1)in GCN and ùëìaggr(G,H(ùë°))=
(1‚àíùõº)eAH(ùë°‚àí1)+ùõº¬∑H(0)in APPNP. Note that H(0)=ùúé(XùõÄorig)‚àà
Rùëõ√ó‚Ñéis the initial node features resulted from a non-linear trans-
formation from the original node attribute matrix Xusing an MLP
parameterized by learnable weight ùõÄorig. As demystified in a num-
ber of studies [ 25,69,81,85,112], after removing non-linearity, the
node representations H(ùë°)learned at the ùë°-layer in most MP-GNNs
can be rewritten as linear approximation formulas:
H(ùë°)=ùëìpoly(eA,ùë°)¬∑X¬∑ùõÄ, (2)
whereùëìpoly(eA,ùë°)stands for a ùë°-order polynomial, eA(orP) is the
structure matrix of G, andùõÄis the learned weight. For instance,
ùëìpoly(G,ùë°)=eAùë°Xin GCN and ùëìpoly(G,ùë°)=√çùë°
ùëñ=0ùõºùëñeAùëñXin APPNP.
3.3 GNNs over High-Degree Graphs (HDGs)
Although GNNs achieve superb performance by the virtue of the
feature aggregation mechanism, they incur severe inherent draw-
backs, which are exacerbated over HDGs, as analysed below.
Inadequate Structure Features. Intuitively, structure features
play more important roles for HDGs as they usually encompass
rich and complex topology semantics. However, the extant GNNs
primarily capitalize on the graph structure for feature aggregation,
failing to extract the abundant topology semantics underlying G.
To validate this observation, we conduct a preliminary empirical
study with 4 representative GNN models on 2 benchmarking HDGs
[52,56] in terms of node classification. Table 1 manifests that by
concatenating the input attribute matrix X(i.e., X‚à•A) with the
adjacency matrix Aas node features, each GNN model can see
performance gains (up to 3.17%). In our technical report [ 39], we
further theoretically show that expanding features with Acan alle-
viate the feature correlation [69] in standard GNNs and additionally
incorporate high-order proximity information between nodes as in
traditional network embedding techniques [27, 59].
 
1465KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yurui Lai et al.
However, this simple trick demands learning an (ùëõ+ùëë)√ó‚Ñétrans-
formation weight matrix ùõÄorig, and hence, leads to the significant
expense of training.
Over-Smoothing. Note that HDGs often demonstrate high con-
nectivity, i.e., nodes are connected to dozens or even hundreds of
neighbors on average, which implies large spectral gaps ùúÜ[14]. The
matrix powers eAùë°andPùë°will hence quickly converge to stationary
distributions as ùë°increases, as indicated by Theorem 3.1.
Theorem 3.1. Suppose thatGis a connected and non-bipartite
graph. Then, we have
eAùë°
ùëñ,ùëó‚àí‚àöÔ∏Å
ùëë(ùë£ùëó)¬∑ùëë(ùë£ùëñ)
2ùëö‚â§(1‚àíùúÜ)ùë°,Pùë°
ùëñ,ùëó‚àíùëë(ùë£ùëó)
2ùëö‚â§‚àöÔ∏Ñ
ùëë(ùë£ùëó)
ùëë(ùë£ùëñ)(1‚àíùúÜ)ùë°,
whereùúÜ<1is the spectral gap of G.
Proof. Letùúé1‚â•ùúé2‚â•¬∑¬∑¬∑‚â•ùúéùëõbe the eigenvalues of eAandùúéis
defined byùúé=min{|ùúé2|,|ùúéùëõ|}. By definition, the spectral gap of G
is thenùúÜ=1‚àíùúé. By Theorem 5.1 in [ 49], it is straightforward to
get
Pùë°
ùëñ,ùëó‚àíùëë(ùë£ùëó)
2ùëö‚â§‚àöÔ∏Ñ
ùëë(ùë£ùëó)
ùëë(ùë£ùëñ)(1‚àíùúÜ)ùë°. (3)
Recall that eA=D‚àí1
2AD‚àí1
2andP=D‚àí1A. Hence,
eAùë°=D‚àí1
2A(D‚àí1A)ùë°‚àí1D‚àí1
2=D1
2Pùë°D‚àí1
2,
meaning that eAùë°
ùëñ,ùëó=‚àöÔ∏Ç
ùëë(ùë£ùëñ)
ùëë(ùë£ùëó)¬∑Pùë°
ùëñ,ùëó. Plugging this into Eq. (3)yields
‚àöÔ∏Ñ
ùëë(ùë£ùëñ)
ùëë(ùë£ùëó)Pùë°
ùëñ,ùëó‚àí‚àöÔ∏Ñ
ùëë(ùë£ùëñ)
ùëë(ùë£ùëó)¬∑ùëë(ùë£ùëó)
2ùëö‚â§‚àöÔ∏Ñ
ùëë(ùë£ùëñ)
ùëë(ùë£ùëó)‚àöÔ∏Ñ
ùëë(ùë£ùëó)
ùëë(ùë£ùëñ)(1‚àíùúÜ)ùë°
=eAùë°
ùëñ,ùëó‚àí‚àöÔ∏Å
ùëë(ùë£ùëó)¬∑ùëë(ùë£ùëñ)
2ùëö‚â§(1‚àíùúÜ)ùë°.
which finishes the proof. ‚ñ°
As an aftermath, for any node ùë£ùëñ‚ààùëâ, its node representation
H(ùë°)
ùëñobtained in Eq. (2) turns into
‚àöÔ∏Å
ùëë(ùë£ùëñ)‚àëÔ∏Å
ùë£ùëó‚ààV‚àöÔ∏Å
ùëë(ùë£ùëó)
2ùëöùëë‚àëÔ∏Å
‚Ñì=1XùëóùõÄand‚àëÔ∏Å
ùë£ùëó‚ààV‚àöÔ∏Å
ùëë(ùë£ùëó)
2ùëöXùëóùõÄ
whenùëìpoly(eA,ùë°)=eAùë°andPùë°, respectively, both of which are essen-
tially irrelevant to node ùë£ùëñ. In other words, the eventual represen-
tations of all nodes are overly smoothed with high homogeneity,
rendering nodes in different classes indistinguishable and resulting
in degraded model performance [5, 8, 9].
Costly Feature Aggregation. Aside from the over-smoothing,
the sheer amount of feature aggregation operations of GNNs over
HDGs, especially on sizable ones, engender vast computation cost.
Recall that each round of feature aggregation in GNNs consumes
ùëÇ(ùëö‚Ñé)time. Compared to normal scale-free graphs with average
node degrees ùëö/ùëõ=ùëÇ(log(ùëõ))or smaller, the average node de-
grees in HDGs can be up to hundreds, which are approximately
ùëÇ(log2(ùëõ)). This implies an ùëÇ(ùëõlog2(ùëõ)¬∑‚Ñé)asymptotic cost in total
for each round of feature aggregation.
.
.
GNNsùêá(0)
ùêÄ¬∞ùêátopoùêáattr ùêó
ùêÄ‚Ä≤ùêÄ
0.8
0.8
0.75
0.7
0.6
0.3
0.25
0.21.5
1.5 1.21.41.20.8
0.50.7ùêá(0).
..
Count -Sketch
RWR -SketchModule I (Feature Expansion)
Module II (Graph Sparsification)ùí¢Attribute Matrix Adj. Matrix
ùí¢ùë§1.5 1.2
1.51.4
1.2cos(‚àô) ERAugmented
Node Features
Sparsified Adj. MatrixStructure
FeaturesAttribute
Features
MLP
MLP
MLPPre-Training
Figure 1: Overview of TADA
A workaround to mitigate the over-smoothing and computation
issues caused by the feature aggregation on HDGs is to sparsify
Gby identifying and eradicating unnecessary or redundant edges.
However, the accurate and efficient identification of such edges
for improving GNN models is non-trivial in the presence of node
attributes and labels and remains under-explored.
In sum, we need to address two technical challenges:
‚Ä¢How to encode Ainto high-quality structure embeddings that
can augment GNNs for better model capacity on HDGs in an
efficient manner?
‚Ä¢How to sparsify the input HDG so as to enable faster feature
aggregation while retaining the predictive power?
4 METHODOLOGY
This section presents our TADA framework for tackling the forego-
ing challenges. Section 4.1 provides an overview of TADA, followed
by detailing its two key modules in Sections 4.2 and 4.3, respectively.
4.1 Synoptic Overview of TADA
As illustrated in Figure 1, TADA acts as a front-mounted stage for
MP-GNNs, which compromises two main ingredients: (i) feature
expansion with structure embeddings (Module I), and (ii) topology-
and attribute-aware graph sparsification (Module II). The goal of
the former component is to generate high-quality structure embed-
dings Htopocapturing the rich topology semantics underlying Gfor
feature expansion, while the latter aims to sparsify the structure of
the input graphGso as to eliminate redundant or noisy topological
connections inGwith consideration of graph topology and node
attributes.
Module I: Feature Expansion. To be more specific, in Module I,
TADA first applies a hybrid sketching technique (Count-Sketch +
RWR-Sketch) to the adjacency matrix AofGand transforms the
sketched matrix A‚Ä≤‚ààRùëõ√óùëò(ùëò‚â™ùëõ, typicallyùëò=128) into the
structure embeddings Htopo‚ààRùëõ√ó‚Ñéof all nodes via an MLP:
Htopo=ùúé(A‚Ä≤ùõÄtopo), (4)
whereùúé(¬∑)is a non-linear activation function (e.g., ReLU) and
ùõÄtopo‚ààRùëò√ó‚Ñéstands for learnable transformation weights. In the
meantime, Module I feeds the node attribute matrix Xto an MLP
network parameterized by learnable weight ùõÄattr‚ààRùëë√ó‚Ñéto obtain
 
1466Efficient Topology-aware Data Augmentation for High-Degree Graph Neural Networks KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
the transformed node attribute features Hattr‚ààRùëõ√ó‚Ñé.
Hattr=ùúé(XùõÄattr) (5)
A linear combination of the structure embeddings Htopoand
transformed node attribute features Hattras in Eq. (6)yields the
initial node representations H(0).
H(0)=(1‚àíùõæ)¬∑Hattr+ùõæ¬∑Htopo‚ààRùëõ√ó‚Ñé(6)
The hyper-parameter ùõæcontrols the importance of node topology
in the resulting node representations.
Notice that H(0)and related learnable weights are pre-trained
by the task (i.e., node classification) with a single-layer MLP as
classifier (using ùëõùëùepochs). In doing so, we can extract task-specific
features in H(0)to facilitate the design of Module II, and all these
intermediates can be reused for subsequent GNN training.
Module II: Graph Sparsification. Since H(0)captures the task-
aware structure and attribute features of nodes in G, Module II can
harness it to calculate the centrality values of all edges that assess
their importance to Gin the context of node classification. Given the
sparsification raio ùúå, the edges with ùëö¬∑ùúålowest centrality values are
therefore removed from G, whereas those important ones will be
kept and reweighted by the similarities of their respective endpoints
inH(0). Based thereon, TADA creates a sparsified adjacency matrix
denoted as A‚ó¶as a substitute of A. The behind intuition is that
adjacent nodes with low connectivity and attribute homogeneity
are more likely to fall under disparate classes, and hence, their
direct connection (i.e., edges) can be removed without side effects.
Finally, the augmented initial node representations H(0)and the
sparsified adjacency matrix A‚ó¶are input into the MP-GNN models
ùëìGNN(¬∑,¬∑)for learning final node representations:
H=ùëìGNN(H(0),A‚ó¶)
and performing the downstream task, i.e., node classification.
In the succeeding subsections, we elaborate on the designs and
details of Module I and Module II.
4.2 Efficient Feature Expansion with Structure
Embeddings
Recall that in Module I, the linchpin to the feature expansion (i.e.,
building structure embeddings Htopo) isA‚Ä≤‚ààRùëõ√óùëò, a sketch of
the adjacency matrix A. Notice that even for HDGs, Ais highly
sparse (ùëö‚â™ùëõ2) and the distribution of node degrees (i.e., the
numbers of non-zero entries in rows/columns) is heavily skewed,
rendering existing sketching tools for dense matrices unsuitable. In
what follows, we delineate our hybrid sketching approach specially
catered for adjacency matrix A.
Count-Sketch Method. To deal with the sparsity of A, our first-
cut solution is the count-sketch (or called sparse embedding) [ 15]
technique, which achieves ùëÇ(nnz(A))=ùëÇ(ùëö)time for computing
the sketched adjacency matrix A‚Ä≤‚ààRùëõ√óùëò:
A‚Ä≤=AR‚ä§where R=ùöΩùö´ (7)
The count-sketch matrix (a.k.a. sparse embedding) R‚ààRùëò√óùëõis
randomly constructed by where
‚Ä¢ùö´‚ààRùëõ√óùëõis a diagonal matrix with each diagonal entry inde-
pendently chosen to be 1or‚àí1with probability 0.5, and‚Ä¢ùöΩ‚àà{0,1}ùëò√óùëõis a binary matrix with ùöΩ‚Ñé(ùëñ),ùëñ=1and0otherwise
‚àÄ1‚â§ùëñ‚â§ùëõ. The function ‚Ñé(¬∑)mapsùëñ(1‚â§ùëñ‚â§ùëõ) to‚Ñé(ùëñ)=ùëó‚àà
{1,2,¬∑¬∑¬∑,ùëò}uniformly at random.
In Theorem 4.1, we prove that the count-sketch matrix Ris able
to create an accurate estimator for the product of Aand any matrix
Wwith rigorous accuracy guarantees.
Theorem 4.1. Given any matrix Wwithùëõrows and a count-
sketch matrix R‚ààRùëò√óùëõwithùëò=2 max ùë£ùëñ‚ààVùëë(ùë£ùëñ)
ùúñ2ùõø¬∑maxùëó‚à•W:,ùëó‚à•2
2, the
following inequality
P[|(AùëñR‚ä§)¬∑(RW :,ùëó)‚àíAùëñW:,ùëó|<ùúñ]>1‚àíùõø
holds for any node ùë£ùëñ‚ààV andùëó‚àà[1,ùëò].
Proof. LetX=(AR‚ä§)¬∑(RW)‚àíAW. Then Xùëñ,ùëó=(AùëñR‚ä§)¬∑
(RW :,ùëó)‚àíAùëñW:,ùëó, where Aùëñis theùëñ-th row of AandW:,ùëóis theùëó-th
column of W. According to Lemma 4.1 in [ 58], for any two column
vectors x,y‚ààRùëõ,E[(Rx)‚ä§¬∑(Ry)]=x‚ä§¬∑y. Then, we have
E(Xùëñ,ùëó)=E (R(Aùëñ)‚ä§)‚ä§¬∑(RW :,ùëó)‚àíAùëñW:,ùëó=0
Thus, for 1‚â§ùëñ,ùëó‚â§ùëõ,(AùëñR‚ä§)¬∑(RW :,ùëó)is an unbiased estimator of
AùëñW:,ùëó.
Moreover, by Lemma 4.2 in [ 58] and the Cauchy‚ÄìSchwarz in-
equality, we have
ùëâùëéùëü(Xùëñ,ùëó)‚â§1
ùëò¬∑
(AùëñW:,ùëó)2+‚à•Aùëñ‚à•2
2¬∑‚à•W:,ùëó‚à•2
2
‚â§2
ùëò¬∑
‚à•Aùëñ‚à•2
2¬∑‚à•W:,ùëó‚à•2
2
=2ùëë(ùë£ùëñ)
ùëò¬∑‚à•W:,ùëó‚à•2
2.
We have E(X2
ùëñ,ùëó)=ùëâùëéùëü(Xùëñ,ùëó)‚àíE(Xùëñ,ùëó)2‚â§2ùëë(ùë£ùëñ)
ùëò¬∑‚à•W:,ùëó‚à•2
2. Using
Chebyshev‚Äôs Inequality, we have
P[X2
ùëñ,ùëó‚â•ùúñ]‚â§E(X2
ùëñ,ùëó)
ùúñ2‚â§2ùëë(ùë£ùëñ)
ùëò¬∑‚à•W:,ùëó‚à•2
2
ùúñ2
By settingùëò=2 max ùë£ùëñ‚ààVùëë(ùë£ùëñ)
ùúñ2ùõø¬∑maxùëó‚à•W:,ùëó‚à•2
2, we can guarantee
P[|(AùëñR‚ä§)¬∑(RW :,ùëó)‚àíAùëñW:,ùëó|<ùúñ]>1‚àíùõø,
which completes the proof. ‚ñ°
Recall that the ideal structure embeddings H‚àó
topois obtained
when A‚Ä≤is replaced by the original adjacency matrix Ain Eq. (4),
i.e.,H‚àó
topo=ùúé(AùõÄtopo). Assume that W=ùõÄtopois the learned
weights in this case. If we input A‚Ä≤=AR‚ä§to Eq. (4)and assume the
newly learned weight matrix is ùõÄtopo=RW, the resulted structure
embeddings Htopowill be similar to the ideal one H‚àó
topoaccording
to Theorem 4.1, establishing a theoretical assurance for deriving
high-quality structure embeddings Htopofrom A‚Ä≤.
By Theorem 4.1, we can further derive the following properties
ofA‚Ä≤in preserving the structure in G:
‚Ä¢Property 1: For any two nodes ùë£ùëñ,ùë£ùëó‚ààV,A‚Ä≤
ùëñ¬∑A‚Ä≤
ùëó‚ä§is an approx-
imation of the number of common neighbors |N(ùë£ùëñ)‚à©N(ùë£ùëó)|.
Particularly,‚à•A‚Ä≤
ùëñ‚à•2
2approximates the degree ùëë(ùë£ùëñ)of nodeùë£ùëñ.
‚Ä¢Property 2: For any two nodes ùë£ùëñ,ùë£ùëó‚ààV,(A‚Ä≤A‚Ä≤‚ä§)ùë°is an ap-
proximation of high-order proximity matrix A2ùë°, where each
(ùëñ,ùëó)-th entry denotes the number of length-2 ùë°paths between
nodesùë£ùëñandùë£ùëó.
 
1467KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yurui Lai et al.
‚Ä¢Property 3: LetcA‚Ä≤be the row-based ùêø2normalization of A‚Ä≤. For
any two nodes ùë£ùëñ,ùë£ùëó‚ààV,cA‚Ä≤cA‚Ä≤‚ä§is an approximation of (PP‚ä§)ùë°,
where each(ùëñ,ùëó)-th entry denotes the probability of two length- ùë°
random walks originating from ùë£ùëñandùë£ùëómeeting at any node.
Due to the space limit, we defer the proofs to our technical re-
port [39].
Limitation of Count-Sketch. Despite the theoretical merits of
approximation guarantees and high efficiency offered by the count-
sketch-based approach, it is data-oblivious (i.e., the sketching matrix
is randomly generated) and is likely to produce poor results, espe-
cially in dealing with highly skewed data (e.g., adjacency matrices).
To explain, we first interpret ùöΩas a randomized clustering member-
ship indicator matrix, where ùöΩ‚Ñé(ùëñ),ùëñ=1indicates assigning each
nodeùë£ùëñto‚Ñé(ùëñ)-th (‚Ñé(ùëñ)‚àà{ 1,¬∑¬∑¬∑,ùëò}) cluster uniformly at random.
Each diagonal entry in ùö´is either 1or‚àí1, which signifies that the
cluster assignment in ùöΩis true or false. As such, each entry Rùëñ,ùëó
represents
Rùëó,ùëñ=Ô£±Ô£¥Ô£¥Ô£¥ Ô£≤
Ô£¥Ô£¥Ô£¥Ô£≥1nodeùë£ùëñbelongs to the ùëó-th cluster
‚àí1 nodeùë£ùëñdoes not belong to the ùëó-th cluster
0otherwise.(8)
Accordingly, A‚Ä≤
ùëñ,ùëóquantifies the strength of connections from ùë£ùëñto
theùëó-th cluster via its neighbors. Since ùöΩis randomly generated,
distant (resp. close) nodes might fall into the same (resp. different)
clusters, resulting in a distorted distribution in A‚Ä≤.
Optimization via RWR-Sketch. As a remedy, we propose RWR-
Sketch to create a structure-aware sketching matrix S‚ààRùëò√óùëõ.
TADA will combine Swith count sketch matrix Rto obtain the final
sketched adjacency matrix A‚Ä≤:
A‚Ä≤=A¬∑(R‚ä§+ùõΩ¬∑S‚ä§), (9)
whereùõΩis a hyper-parameter controlling the contribution of the
RWR-Sketch in the result. Unlike R, the construction of Sis framed
as clustering ùëõnodes inGintoùëòdisjoint clusters as per their topo-
logical connections to each other in G. Here, we adopt the promi-
nent random walk with restart (RWR) model [ 73,95] to summarize
the multi-hop connectivity between nodes. To be specific, we con-
struct Sas follows:
(i)We select a setCof nodes (ùëò‚â§ |C| ‚â™ùëõ) with highest
in-degrees fromVas the candidate cluster centroids.
(ii)For each node ùë£ùëñ‚ààV, we compute the RWR score ùúã(ùë£ùëñ,ùë£ùëó)
of every node ùë£ùëóinCw.r.t.ùë£ùëñthroughùëápower iterations:
ùúã(ùë£ùëñ,ùë£ùëó)=ùëá‚àëÔ∏Å
ùë°=0(1‚àíùõº)ùõºùë°Pùëñ,ùëó, (10)
whereùõº‚àà(0,1)is a decay factor (0 .5by default).
(iii)Denote byùúã(ùë£ùëó)=√ç
ùë£ùëñ‚ààVùúã(ùë£ùëñ,ùë£ùëó)
ùëõthe centrality (i.e., PageR-
ank [ 55]) ofùë£ùëó‚ààC. We select a setCùëòofùëònodes fromC
with the largest centralities as the final cluster centroids.
(iv)For each node ùë£ùëñ‚ààV, we pick the node ùë£ùëó‚ààCùëòwith the
largest RWR score ùúã(ùë£ùëñ,ùë£ùëó)as its cluster centroid and set
Sùëó,ùëñ=1.
(v)After that, we give Sa final touch by applying an ùêø2normal-
ization for each row.For the interest of space, we refer interested readers to [ 39] for
the complete pseudo-code and detailed asymptotic analysis of our
hybrid sketching approach.
4.3 Topology- and Attribute-Aware Graph
Sparsification
Edge Reweighting. With the augmented initial node features
H(0)(Eq. (6)) at hand, for each edge ùëíùëñ,ùëó‚ààE, we assign the cosine
similarity of the representations of its endpoints ùë£ùëñandùë£ùëóas the
weight ofùëíùëñ,ùëó:
ùë§(ùëíùëñ,ùëó)=cos
H(0)
ùëñ,H(0)
ùëó
. (11)
Accordingly, the ‚Äúdegree‚Äù of node ùë£ùëñcan be calculated via Eq. (12),
which is the sum of weights of edges incident to ùë£ùëñ.
ùëëùë§(ùë£ùëñ)=‚àëÔ∏Å
ùë£ùëó‚ààN(ùë£ùëñ)ùë§(ùëíùëñ,ùëó) (12)
Denote byGùë§=(V,Eùë§)this edge-reweighted graph. The subse-
quent task is hence to sparsify Gùë§.
In the literature, a canonical methodology [ 64] to create the
sparsified graphG‚Ä≤is to sample edges with probability proportional
to their effective resistance (ER) [ 49] values and add them with
adjusted weights to G‚Ä≤. Theoretically,G‚Ä≤is an unbiased estimation
of the original graph Gin terms of the graph Laplacian [ 64] and
requiresùëõùëü=ùëÇùëõlog(ùëõ/ùõø)
ùúñ2
samples to ensure the Laplacian matrix
L‚Ä≤ofG‚Ä≤satisfies
‚àÄx‚ààRùëõ,ùúñ‚àà(0,1] ( 1‚àíùúñ)x‚ä§Lx‚â§x‚ä§L‚Ä≤x‚â§(1+ùúñ)x‚ä§Lx
with a probability of at least 1‚àíùõø. First, this approach fails to
account for node attributes. Second, the computation of the ER of
all edges inGis rather costly. Even the approximate algorithms
[64,104] struggle to cope with medium-sized graphs. Besides, the
edge sampling strategy relies on a large ùëõùëüas it will repeatedly pick
the same edges.
ER Approximation on Gùë§.To this end, we first conduct a rigorous
theoretical analysis in Lemma 4.2 and disclose that the ER value of
each edgeùëíùëñ,ùëóinGùë§is roughly proportional to1
ùëëùë§(ùë£ùëñ)+1
ùëëùë§(ùë£ùëó).
Lemma 4.2. LetGùë§=(V,Eùë§)be a weighted graph whose node
degrees are defined as in Eq. (12). The ERùëüùë§(ùëíùëñ,ùëó)of each edge ùëíùëñ,ùëó‚àà
Eùë§is bounded by
1
21
ùëëùë§(ùë£ùëñ)+1
ùëëùë§(ùë£ùëó)
‚â§ùëüùë§(ùëíùëñ,ùëó)‚â§1
1‚àíùúÜ21
ùëëùë§(ùë£ùëñ)+1
ùëëùë§(ùë£ùëó)
,
whereùúÜ2‚â§1stands for the second largest eigenvalue of the normal-
ized adjacency matrix of Gùë§.
Proof. We defer the proof to [39]. ‚ñ°
The above finding implies that we can leverage1
ùëëùë§(ùë£ùëñ)+1
ùëëùë§(ùë£ùëó)
as an estimation of the ER of edge ùëíùëñ,ùëóonGùë§, which roughly reflects
the relative importance of edges.
Edge Ranking and Sparsification of Gùë§.On this basis, in lieu of
sampling edges inGùë§for sparsified graph construction, we resort
 
1468Efficient Topology-aware Data Augmentation for High-Degree Graph Neural Networks KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Table 2: Statistics of Datasets (K =103and M=106).
Dataset ùëõùëöùëë|
Y|ùëö/ùëõùêª
ùëÖ
P
hoto [62] 7.7K 238.2K 745 8 31.1 0.83
WikiCS [52] 11.7K 431.7K 300 10 36.9 0.65
Re
ddit2 [101] 233K 23.2M 602 41 99.6 0.78
A
mazon2M [12] 2.45M 61.9M 100 47 25.3 0.81
Squirr
el[56] 5.2K 396.9K 2.1K 5 76.3 0.22
Penn94 [30] 41.6K 1.4M 128 2 32.8 0.47
Ogbn-Pr
oteins [30] 132.5K 39.6M 8 112 298.5 0.38
Poke
c[43] 1.6M 30.6M 65 2 18.8 0.45
to ranking edges in ascending order as per their centrality values
ùê∂ùë§(ùëíùëñ,ùëó)defined by
ùê∂ùë§(ùëíùëñ,ùëó)=ùë§(ùëíùëñ,ùëó)¬∑1
ùëëùë§(ùë£ùëñ)+1
ùëëùë§(ùë£ùëó)
, (13)
which intuitively quantifies the total importance of edge ùëíùëñ,ùëóamong
all edges incident to ùë£ùëñandùë£ùëó. Afterwards, given a sparsification
ratioùúå, we delete a subset Ermof edges with ùëöùúålowest centrality
values fromGùë§and construct the sparsified adjacency matrix A‚ó¶
as follows:
‚àÄùëíùëñ,ùëó‚ààEùë§\Erm A‚ó¶
ùëñ,ùëó=ùë§(ùëíùëñ,ùëó). (14)
The pseudo-code and complexity analysis are in [39].
5 EXPERIMENTS
5.1 Experimental Setup
Datasets. Table 2 lists the statistics of 8 benchmark HDGs ( ùëö/ùëõ‚â•
18) tested in our experiments, which are of diverse types and varied
sizes.|Y|symbolizes the distinct number of class labels of nodes
inG. The homophily ratio (HR) ofGis defined as the fraction of
homophilic edges linking same-class nodes [ 111]. We refer to a
graph with ùêªùëÖ‚â•0.5as homophilic and as heterophilic if ùêªùëÖ<
0.5. Particularly, datasets Photo [62],WikiCS [52],Reddit2 [101],
andAmazon2M [12] are homophilic graphs, whereas Squirrel [56],
Penn94 [30],Ogbn-Proteins [30], and Pokec [43] are heterophilic
graphs. Amazon2M andPokec are two large HDGs with millions of
nodes and tens of millions of edges. More details of the datasets and
train/validation/test splits can be found in our technical report [ 39].
Baselines and Configurations. We adopt five popular MP-GNN
architectures, GCN [ 37], GAT [ 76], SGC [ 85], APPNP [ 24], and
GCNII [ 9] as the baselines and backbones to validate TADA in semi-
supervised node classification tasks (Section 5.2). To demonstrate
the superiority of TADA, we additionally compare TADA against
other GDA techniques in Section 5.3 its variants with other feature
expansion and graph sparsification strategies in Section 5.4. The
implementation details and hyper-parameter settings can be found
in [39].
All experiments are conducted on a Linux machine with an
NVIDIA Ampere A100 GPU (80GB RAM), AMD EPYC 7513 CPU
(2.6 GHz), and 1TB RAM. Source codes can be accessed at https:
//github.com/HKBU-LAGAS/TADA.
5.2 Semi-Supervised Node Classification
Effectiveness. In this set of experiments, we compare TADA-
augmented GCN, GAT, SGC, APPNP, and GCNII models againstGCN SGC APPNP GCNII100101102running time (ms)
(a)Reddit2GCN SGC APPNP GCNII100101102running
time (ms)
(
b)Ogbn-Proteins
Figure 2: Training time per epoch
Baseline Baseline+TADA
GCN SGC APPNP GCNII10‚àí1100101running time (ms)
(a)Reddit2GCN SGC APPNP GCNII10‚àí1100101102running time (ms)
(b)Ogbn-Proteins
Figure 3: Inference time per epoch
GCN SGC APPNP GCNII12345Memor
y(GB)
(
a)Reddit2GCN SGC APPNP GCNII13579Memory (GB)
(
b)Ogbn-Proteins
Figure 4: Maximum GPU Memory Usage
their vanilla versions in terms of semi-supervised node classifica-
tion. Table 3 reports their test accuracy results on 8 HDG datasets.
OOM represents that the model fails to report results due to the
out-of-memory issue. It can be observed that TADA consistently
improves the baselines in accuracy on both homophilic and het-
erophilic graphs in almost all cases. Notably, on the Squirrel dataset,
the five backbones are outperformed by their TADA counterparts
with significant margins of 17.29%-20.14%in testing accuracy. The
reason is that Squirrel is endowed with uninformative nodal at-
tributes, and by contrast, its structural features are more conducive
for node classification. By expanding original node features with
high-quality structure embeddings (Module I in TADA), TADA is
able to overcome such problems and advance the robustness and
effectiveness of GNNs. In addition, on Reddit2 andOgbn-Proteins
with average degrees ( ùëö/ùëõ) over hundreds, TADA also yields pro-
nounced improvements in accuracy, i.e., 2.28%and2.94%for GCN,
as well as 1.96% and2.23% for GCNII, respectively. This demon-
strates the effectiveness of our graph sparsification method (Module
II inTADA) in reducing noisy edges and mitigating over-smoothing
issues particularly in graphs (Reddit2 andOgbn-Proteins) consisting
of a huge number of edges (analysed in Section 3.3). On the rest
HDGs, almost all GNN backbones see accuracy gains with TADA .
Two exceptions occur on heterophilic HDG Pokec, where GCN and
SGC get high standard deviations (1 .36%and5.56%) in accuracy
while GCN+TADA and SGC+TADA attenuate average accuracies
but increase their performance stability.
Efficiency. To assess the effectiveness of TADA in the reduction of
GNNs‚Äô feature aggregation overhead on HDGs, Figures 2, 3, and 4
 
1469KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yurui Lai et al.
Table 3: Node classification results (% test accuracy) of different GNN backbones with and without TADA on homophilic and
heterophilic graphs. We conduct 10 trials and report mean accuracy and standard deviation over the trials.
Method Photo WikiCS Reddit2 Amazon2M Squirrel Penn94 Ogbn-Proteins Pokec
GCN 94.63¬±0.15 84.05¬±0.76 92.58¬±0.03 74.12¬±0.19 54.85¬±2.02 75.9¬±0.74 69.75¬±0.6 75.47¬±1.36
GCN + TADA 94.92¬±0.45 84.62¬±0.53 94.86¬±0.22 76.14¬±0.23 73.48¬±1.61 76.06¬±0.43 73.79¬±0.76 75.01¬±0.27
GAT 93.84¬±0.46 83.74¬±0.75 OOM OOM 55.70¬±3.26 71.09¬±1.35 OOM 73.20¬±7.02
GAT + TADA 94.58¬±0.12 84.97¬±0.84 95.97¬±0.04 59.16¬±0.36 72.99¬±2.81 71.19¬±0.78 74.94¬±0.25 74.26¬±0.94
SGC 93.29¬±0.79 83.47¬±0.83 94.78¬±0.02 59.86¬±0.04 52.18¬±1.49 56.77¬±0.14 70.33¬±0.04 67.40¬±5.56
SGC + TADA 94.93¬±0.39 83.97¬±0.71 95.65¬±0.02 73.39¬±0.35 72.32¬±2.72 71.02¬±0.53 74.31¬±0.42 62.06¬±0.52
APPNP 94.95¬±0.33 85.04¬±0.60 90.86¬±0.19 65.51¬±0.36 54.47¬±2.06 69.25¬±0.38 75.19¬±0.58 62.79¬±0.11
APPNP + TADA 95.42¬±0.53 85.19¬±0.56 95.34¬±0.18 69.81¬±0.24 73.24¬±1.38 71.08¬±0.62 75.52¬±0.32 67.03¬±0.27
GCNII 95.12¬±0.12 85.13¬±0.56 94.66¬±0.07 OOM 53.13¬±4.29 74.97¬±0.35 73.11¬±1.93 76.49¬±0.88
GCNII + TADA 95.54¬±0.44 85.42¬±0.60 96.62¬±0.08 77.83¬±0.62 72.89¬±2.45 75.84¬±3.13 75.34¬±1.33 77.64¬±0.32
Table 4: Comparison with GDA Baselines.
Metho
dRe
ddit2 Ogbn-Pr
oteins
A
cc (%) Trng. / Inf. (ms) A
cc (%) Trng. / Inf. (ms)
GCN 92.58¬±0.03 53.4
/ 0.31 69.75¬±0.6 210.59
/ 94.01
GCN+DropEdge 93.59¬±0.05 49.51
/ 0.31 61.46¬±3.33 62.65
/ 93.53
GCN+GraphMix 92.60¬±0.07 128.58
/ 0.38 72.41¬±1.34 441.23/93.95
GCN+T
ADA 94.86¬±0.22 24
/ 0.44 73.79¬±0.76 52.26
/ 0.78
GCNII 94.66¬±0.07 125.6
/ 0.66 73.11¬±1.93 211.31
/ 95.52
GCNII+DropEdge 96.23¬±0.05 72.39
/ 0.66 60.50¬±5.42 67.45
/ 95.39
GCNII+GraphMix 96.19¬±0.05 172.66/0.72 63.75¬±1.72 456.59
/ 95.34
GCNII+TADA 96.62¬±0.08 49.5
/ 0.72 75.34¬±1.33 42.68
/ 1.11
*Best is bolded and runner-up underlined .
plot the training times and inferencetimes per epoch (in millisec-
onds), as well as the maximum memory footprints (in GBs) needed
by four GNN backbones (GCN, SGC, APPNP, and GCNII) and their
TADA counterparts on a heterophilic HDG Ogbn-Proteins and a
homophilic HDG Reddit2. We exclude GAT as it incurs OOM errors
on these two datasets, as shown in Table 3. From Figure 3, we note
that on Ogbn-Proteins, TADA is able to speed up the inferences
of GCN, APPNP, and GCNII to 121.7√ó,198.2√ó, and 86√ófaster, re-
spectively, whereas on Reddit2 TADA achieves comparable runtime
performance to the vanilla GNN models. This reveals that Reddit2
andOgbn-Proteins contains substantial noisy or redundant edges
that can be removed without diluting the results of GNNs if TADA
is included. Apart from the inference, TADA can also slightly ex-
pedite the training in the presence of Module I and Module II (see
Figure 2), indicating the high efficiency of our techniques developed
inTADA . In addition to the superiority in computational time, it
can be observed from Figure 4 that TADA leads to at least a 24%and
16% reduction in memory consumption compared to the vanilla
GNN models.
In a nutshell, TADA successfully addresses the technical chal-
lenges of GNNs on HDGs as remarked in Section 3.3. Besides, we
refer interested readers to [ 39] for the empirical studies of TADA
on low-degree graphs.
5.3 Comparison with GDA Baselines
This set of experiments evaluates the effectiveness TADA in improv-
ing GNNs‚Äô performance against other popular GDA techniques:
DropEdge [ 60] and GraphMix [ 79]. Table 4 presents the test accu-
racy results, training and inference times per epoch (in milliseconds)
achieved by two GNN backbones GCN and GCNII and their aug-
mented versions on Ogbn-Proteins andReddit2. We can make thefollowing observations. First, TADA +GCN and TADA +GCNII dom-
inate all their competitors on the two datasets, respectively, in terms
of classification accuracy as well as training and inference efficiency.
OnOgbn-Proteins, we can see that the classification performance of
GCN+DropEdge, GCNII+DropEdge, and GCNII+GraphMix is even
inferior to the baselines, while taking longer training and inference
times, which is consistent with our analysis of the limitations of
existing GDA methods on HDGs in Sections 1 and 2.
5.4 Ablation Study
Table 5 presents the ablation study of TADA with GCN as the
backbone model on Reddit2 andOgbn-Proteins. More specifically,
we conduct the ablation study in three dimensions. Firstly, we
start with the vanilla GCN and incrementally apply components
Count-Sketch, RWR-Sketch (Module I), and our graph sparsification
technique (Module II) to the GCN. Notice that Module II is built
on the output of Module I, and, thus, can only be applied after it.
From Table 5, we can observe that each component in TADA yields
notable performance gains in node classification on the basis of the
prior one, which exhibits the non-triviality of the modules to the
effectiveness of TADA.
On the other hand, to demonstrate the superiority of our hy-
brid sketching approach introduced in Section 4.2, we substitute
Count-Sketch and RWR-Sketch in Module I with random projec-
tion [ 42],ùëò-SVD [ 28], DeepWalk [ 57], node2vec [ 27], and LINE [ 71],
respectively, while fixing Module II. That is, we employ the random
projections of adjacency matrix A, the top-ùëòsingular vectors (as in
[69]), or the node embeddings output by DeepWalk, node2vec, and
LINE as A‚Ä≤for the generation of structure embeddings. As reported
in Table 5, all these five approaches obtain inferior classification
results compared to TADA with Count-Sketch + RWR-Sketch on
Reddit2 andOgbn-Proteins.
Finally, we empirically study the effectiveness of our topology-
and attribute-aware sparsification method in Section 4.3 (Mod-
ule II) by replacing it with random sparsification(RS), ùëò-Neighbor
Spar [ 61], SCAN [ 91] and the DSpar [ 48]. Random sparsification
removes edges randomly, and ùëò-Neighbor Spar [ 61] samples at
mostùëòedges for each neighbor. SCAN removes the edges with
the lowest modified Jaccard similarity, while Dspar identifies the
subset of dropped edges based on their estimated ER values in the
original unweighted graph. Table 5 shows that all these four vari-
ants are outperformed by TADA by a large margin. On Reddit2 and
 
1470Efficient Topology-aware Data Augmentation for High-Degree Graph Neural Networks KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Table 5: Ablation Study
Method Reddit2 Obgn-Proteins
GCN 92.58¬±0.03 69.75¬±0.60
+ Count-Sketch 93.81¬±0.88 72.90¬±2.14
+ RWR-Sketch 94.25¬±0.66 70.33¬±2.54
+ Module II (i.e., GCN+TADA) 94.86¬±0.22 73.79¬±0.76
Random Projection (Module I) 93.99¬±0.74 72.26¬±0.77
ùëò-SVD (Module I) 93.36¬±0.51 69.79¬±1.37
DeepWalk (Module I) 94.48¬±0.34 72.56¬±0.94
node2vec (Module I) 94.47¬±0.41 73.05¬±1.50
LINE (Module I) 94.49¬±0.34 72.49¬±1.66
RS (Module II) 91.04¬±0.04 72.54¬±1.11
ùëò-Neighbor Spar (Module II) 93.97¬±0.7 72.90¬±1.47
SCAN (Module II) 89.93¬±0.78 71.85¬±1.25
DSpar (Module II) 93.58¬±0.08 72.75¬±1.11
*Best is bolded and runner-up underlined .
Re
ddit2 Ogbn-Pr
oteins
416 64128 2560.70.750.80.850.90.95Accuracy
(a) Varyingùëò0.00.10.30.50.70.91.00.650.70.750.80.850.90.95Accuracy
(b) Varyingùõæ
0.00.10.30.50.70.91.00.70.750.80.850.90.95Accuracy
(c) VaryingùõΩ0.10.30.50.70.90.990.70.750.80.850.90.95Accuracy
(d) Varyingùúå
Figure 5: Hyper-parameter Analysis.
Ogbn-Proteins, TADA takes a lead of 0.89%in classification accuracy
compared to its best variant with ùëò-Neighbor Spar.
5.5 Hyper-parameter Analysis
This section empirically studies the sensitivity of TADA to hyper-
parameters including the weight for structure embeddings ùõæ(Eq.(6)),
structure embedding dimension ùëò(Section 4.2), RWR-Sketch weight
ùõΩ(Eq.(9)), and sparsification ratio ùúå(Section 4.3), on two datasets
Ogbn-Proteins andReddit2.
Figure 5(a) depict the node classification accuracy results of
GCN+TADA when varying ùëòin{4,16,64,128,256}. We can make
analogous observations on Reddit2 andOgbn-Proteins. That is, the
performance of GCN+TADA first improves as ùëòis increased from 4
to128(more structure features are captured) and then undergoes a
decline when ùëò=256, as a consequence of over-fitting.
In Figure 5(b), we plot the node classification accuracy values
attained by GCN+TADA whenùõæis varied from 0to1.0. Note that
whenùõæ=0(resp.ùõæ=1.0), the initial node features H(0)defined
in Eq. (6)will not embody structure features Htopo (resp. node
(a)GCN
 (b)GCN+TADA
Figure 6: The final node representations of Photo obtained
by GCN and GCN+TADA. Nodes are colored by their labels.
attributes Hattr). It can be observed that GCN+TADA obtains im-
proved classification results on Reddit2 when varying ùõæfrom 0to
0.9, whereas its performance on Ogbn-Proteins constantly down-
grades asùõæenlarges. The degradation is caused by its heterophilic
property and using its topological features for graph sprasification
(Section 4.3) will accidentally remove critical connections.
From Figure 5(c), we can see that the best performance is achieved
whenùõΩ=0.1andùõΩ=0.3onReddit2 andOgbn-Proteins, respectively,
which validates the superiority of our hybrid sketching approach
in Section 4.2 over Count-Sketch or RWR-Sketch solely.
As displayed in Figure 5(d), on Reddit2, we can observe that
GCN+TADA experiences an uptick in classification accuracy when
excluding 10%-70% edges fromGusing Module II in TADA, followed
by a sharp downturn when ùúå>70%. On Ogbn-Proteins, the best
result is attained when ùúå=0.9, i.e., 90%edges are removed from
G. The results showcase that Module II can accurately identify up
to 70%-90% edges from Gthat are noisy or redundant and obtain
performance enhancements.
5.6 Visualization of TADA
Figure 6 visualizes (using t-SNE [ 75]) the node representations of
thePhoto dataset at the final layers of GCN and GCN+TADA. Nodes
with the same ground-truth labels will be in the same colors. In
Figure 6(b), we can easily identify 8 classes of nodes as nodes with
disparate colors (i.e., labels) are all far apart from each other. In
comparison, in Figure 6(a), three groups of nodes with different
colors are adjacent to each other with partial overlapping and some
nodes even are positioned in other groups and distant from their
true classes. These observations demonstrate that TADA can en-
hance the quality of nodes representations learned by GCN, and
thus, yield the higher classification accuracy, as reported in Table 3.
6 CONCLUSION
In this paper, we present TADA, an efficient and effective data aug-
mentation approach specially catered for GNNs on HDGs. TADA
achieves high result utility through two main technical contri-
butions: feature expansion with structure embeddings via hybrid
sketching, and topology- and attribute-aware graph sparsification.
Considerable experiments on 8 homophilic and heterophilic HDGs
have verified that TADA is able to consistently promote the per-
formance of popular MP-GNNs, e.g., GCN, GAT, SGC, APPNP, and
GCNII, with matching or even upgraded training and inference
efficiency.
 
1471KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Yurui Lai et al.
ACKNOWLEDGMENTS
Renchi Yang is supported by the NSFC YSF grant (No. 62302414)
and Hong Kong RGC ECS grant (No. 22202623).
REFERENCES
[1]Sami Abu-El-Haija, Bryan Perozzi, Rami Al-Rfou, and Alexander A Alemi. 2018.
Watch your step: Learning node embeddings via graph attention. NeurIPS 31
(2018).
[2]Michael Adjeisah, Xinzhong Zhu, Huiying Xu, and Tewodros Alemu Ayall.
2023. Towards data augmentation in graph neural network: An overview and
evaluation. Computer Science Review 47 (2023), 100527.
[3]Joshua D Batson, Daniel A Spielman, and Nikhil Srivastava. 2009. Twice-
ramanujan sparsifiers. In STOC. 255‚Äì262.
[4]Filippo Maria Bianchi, Daniele Grattarola, Lorenzo Livi, and Cesare Alippi. 2021.
Graph neural networks with convolutional arma filters. TPAMI 44, 7 (2021),
3496‚Äì3507.
[5]Chen Cai and Yusu Wang. 2020. A note on over-smoothing for graph neural
networks. arXiv preprint arXiv:2006.13318 (2020).
[6]Hongyun Cai, Vincent W Zheng, and Kevin Chen-Chuan Chang. 2018. A com-
prehensive survey of graph embedding: Problems, techniques, and applications.
TDKE 30, 9 (2018), 1616‚Äì1637.
[7]Shaosheng Cao, Wei Lu, and Qiongkai Xu. 2016. Deep neural networks for
learning graph representations. In AAAI, Vol. 30.
[8]Deli Chen, Yankai Lin, Wei Li, Peng Li, Jie Zhou, and Xu Sun. 2020. Measuring
and relieving the over-smoothing problem for graph neural networks from the
topological view. In AAAI, Vol. 34. 3438‚Äì3445.
[9]Ming Chen, Zhewei Wei, Zengfeng Huang, Bolin Ding, and Yaliang Li. 2020.
Simple and deep graph convolutional networks. In ICML. 1725‚Äì1735.
[10] Yingmei Chen, Zhongyu Wei, and Xuanjing Huang. 2018. Incorporating cor-
poration relationship via graph convolutional neural networks for stock price
prediction. In CIKM. 1655‚Äì1658.
[11] Yuhan Chen, Haojie Ye, Sanketh Vedula, Alex Bronstein, Ronald Dreslinski,
Trevor Mudge, and Nishil Talati. 2023. Demystifying Graph Sparsification
Algorithms in Graph Properties Preservation. PVLDB 17, 3 (2023), 427‚Äì440.
[12] Wei-Lin Chiang, Xuanqing Liu, Si Si, Yang Li, Samy Bengio, and Cho-Jui Hsieh.
2019. Cluster-gcn: An efficient algorithm for training deep and large graph
convolutional networks. In SIGKDD. 257‚Äì266.
[13] Eli Chien, Jianhao Peng, Pan Li, and Olgica Milenkovic. 2020. Adaptive Universal
Generalized PageRank Graph Neural Network. In ICLR.
[14] Fan RK Chung. 1997. Spectral graph theory. Vol. 92. American Mathematical
Soc.
[15] Kenneth L Clarkson and David P Woodruff. 2013. Low rank approximation and
regression in input sparsity time. In STOC. 81‚Äì90.
[16] Micha√´l Defferrard, Xavier Bresson, and Pierre Vandergheynst. 2016. Convolu-
tional neural networks on graphs with fast localized spectral filtering. NeurIPS
29 (2016).
[17] Austin Derrow-Pinion, Jennifer She, David Wong, Oliver Lange, Todd Hester,
Luis Perez, Marc Nunkesser, Seongjae Lee, Xueying Guo, Brett Wiltshire, et al.
2021. Eta prediction with graph neural networks in google maps. In CIKM.
3767‚Äì3776.
[18] Kaize Ding, Zhe Xu, Hanghang Tong, and Huan Liu. 2022. Data augmentation
for deep graph learning: A survey. SIGKDD Explorations Newsletter 24, 2 (2022),
61‚Äì77.
[19] Taoran Fang, Zhiqing Xiao, Chunping Wang, Jiarong Xu, Xuan Yang, and Yang
Yang. 2023. Dropmessage: Unifying random dropping for graph neural networks.
InAAAI, Vol. 37. 4267‚Äì4275.
[20] Wenzheng Feng, Jie Zhang, Yuxiao Dong, Yu Han, Huanbo Luan, Qian Xu, Qiang
Yang, Evgeny Kharlamov, and Jie Tang. 2020. Graph random neural networks
for semi-supervised learning on graphs. NeurIPS 33 (2020), 22092‚Äì22103.
[21] Alex Fout, Jonathon Byrd, Basir Shariat, and Asa Ben-Hur. 2017. Protein inter-
face prediction using graph convolutional networks. In Proceedings of the 31st
International Conference on Neural Information Processing Systems. 6533‚Äì6542.
[22] Luca Franceschi, Mathias Niepert, Massimiliano Pontil, and Xiao He. 2019.
Learning discrete structures for graph neural networks. In ICML. 1972‚Äì1982.
[23] Wai Shing Fung, Ramesh Hariharan, Nicholas JA Harvey, and Debmalya Pani-
grahi. 2011. A general framework for graph sparsification. In STOC. 71‚Äì80.
[24] Johannes Gasteiger, Aleksandar Bojchevski, and Stephan G√ºnnemann. 2018.
Predict then Propagate: Graph Neural Networks meet Personalized PageRank.
InICLR.
[25] Johannes Gasteiger, Stefan Wei√üenberger, and Stephan G√ºnnemann. 2019. Dif-
fusion improves graph learning. NeurIPS 32 (2019).
[26] Justin Gilmer, Samuel S Schoenholz, Patrick F Riley, Oriol Vinyals, and George E
Dahl. 2017. Neural message passing for quantum chemistry. In ICML. 1263‚Äì1272.
[27] Aditya Grover and Jure Leskovec. 2016. node2vec: Scalable feature learning for
networks. In SIGKDD. 855‚Äì864.[28] Nathan Halko, Per-Gunnar Martinsson, and Joel A Tropp. 2011. Finding struc-
ture with randomness: Probabilistic algorithms for constructing approximate
matrix decompositions. SIAM review 53, 2 (2011), 217‚Äì288.
[29] Xiaotian Han, Zhimeng Jiang, Ninghao Liu, and Xia Hu. 2022. G-mixup: Graph
data augmentation for graph classification. In ICML. 8230‚Äì8248.
[30] Weihua Hu, Matthias Fey, Marinka Zitnik, Yuxiao Dong, Hongyu Ren, Bowen
Liu, Michele Catasta, and Jure Leskovec. 2020. Open graph benchmark: Datasets
for machine learning on graphs. NeurIPS 33 (2020), 22118‚Äì22133.
[31] Keke Huang, Jing Tang, Juncheng Liu, Renchi Yang, and Xiaokui Xiao. 2023.
Node-wise diffusion for scalable graph learning. In TheWebConf. 1723‚Äì1733.
[32] Weiwei Jiang and Jiayun Luo. 2022. Graph neural network for traffic forecasting:
A survey. ESA 207 (2022), 117921.
[33] Hongwei Jin and Xinhua Zhang. 2019. Latent adversarial training of graph
convolution networks. In ICML workshop, Vol. 2.
[34] Wei Jin, Yao Ma, Xiaorui Liu, Xianfeng Tang, Suhang Wang, and Jiliang Tang.
2020. Graph structure learning for robust graph neural networks. In SIGKDD.
66‚Äì74.
[35] Wei Jin, Tong Zhao, Jiayuan Ding, Yozen Liu, Jiliang Tang, and Neil Shah.
2022. Empowering Graph Representation Learning with Test-Time Graph
Transformation. In The Eleventh ICLR.
[36] David R Karger. 1994. Random sampling in cut, flow, and network design
problems. In STOC. 648‚Äì657.
[37] Thomas N Kipf and Max Welling. 2016. Semi-Supervised Classification with
Graph Convolutional Networks. In ICLR.
[38] Kezhi Kong, Guohao Li, Mucong Ding, Zuxuan Wu, Chen Zhu, Bernard Ghanem,
Gavin Taylor, and Tom Goldstein. 2020. FLAG: Adversarial Data Augmentation
for Graph Neural Networks. (2020).
[39] Yurui Lai, Xiaoyang Lin, Renchi Yang, and Hongtao Wang. 2024. Efficient
Topology-aware Data Augmentation for High-Degree Graph Neural Networks.
arXiv:2406.05482 [cs.LG]
[40] Remi Lam, Alvaro Sanchez-Gonzalez, Matthew Willson, Peter Wirnsberger,
Meire Fortunato, Ferran Alet, Suman Ravuri, Timo Ewalds, Zach Eaton-Rosen,
Weihua Hu, et al .2022. GraphCast: Learning skillful medium-range global
weather forecasting. arXiv preprint arXiv:2212.12794 (2022).
[41] Jiayu Li, Tianyun Zhang, Hao Tian, Shengmin Jin, Makan Fardad, and Reza
Zafarani. 2020. Sgcn: A graph sparsifier based on graph convolutional networks.
InProceedings of the Pacific-Asia Conference in Advances in Knowledge Discovery
and Data Mining. 275‚Äì287.
[42] Ping Li, Trevor J Hastie, and Kenneth W Church. 2006. Very sparse random
projections. In SIGKDD. 287‚Äì296.
[43] Derek Lim, Felix Hohne, Xiuyu Li, Sijia Linda Huang, Vaishnavi Gupta, Omkar
Bhalerao, and Ser Nam Lim. 2021. Large scale learning on non-homophilous
graphs: New benchmarks and strong simple methods. NeurIPS 34 (2021), 20887‚Äì
20902.
[44] Gang Liu, Tong Zhao, Jiaxin Xu, Tengfei Luo, and Meng Jiang. 2022. Graph
rationalization with environment-based augmentations. In SIGKDD. 1069‚Äì1078.
[45] Meng Liu, Hongyang Gao, and Shuiwang Ji. 2020. Towards deeper graph neural
networks. In SIGKDD. 338‚Äì348.
[46] Songtao Liu, Rex Ying, Hanze Dong, Lanqing Li, Tingyang Xu, Yu Rong, Peilin
Zhao, Junzhou Huang, and Dinghao Wu. 2022. Local augmentation for graph
neural networks. In ICML. 14054‚Äì14072.
[47] Xin Liu, Mingyu Yan, Lei Deng, Guoqi Li, Xiaochun Ye, Dongrui Fan, Shirui
Pan, and Yuan Xie. 2022. Survey on graph neural network acceleration: An
algorithmic perspective. arXiv preprint arXiv:2202.04822 (2022).
[48] Zirui Liu, Kaixiong Zhou, Zhimeng Jiang, Li Li, Rui Chen, Soo-Hyun Choi, and
Xia Hu. 2023. DSpar: An Embarrassingly Simple Strategy for Efficient GNN
training and inference via Degree-based Sparsification. TMLR (2023).
[49] L√°szl√≥ Lov√°sz. 1993. Random walks on graphs. Combinatorics, Paul erdos is
eighty 2, 1-46 (1993), 4.
[50] Youzhi Luo, Michael Curtis McThrow, Wing Yee Au, Tao Komikado, Kanji
Uchino, Koji Maruhashi, and Shuiwang Ji. 2022. Automated Data Augmentations
for Graph Classification. In ICLR.
[51] Amil Merchant, Simon Batzner, Samuel S Schoenholz, Muratahan Aykol,
Gowoon Cheon, and Ekin Dogus Cubuk. 2023. Scaling deep learning for mate-
rials discovery. Nature (2023), 1‚Äì6.
[52] P√©ter Mernyei and CƒÉtƒÉlina Cangea. 2020. Wiki-CS: A Wikipedia-Based Bench-
mark for Graph Neural Networks. arXiv preprint arXiv:2007.02901 (2020).
[53] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. 2013. Efficient esti-
mation of word representations in vector space. arXiv preprint arXiv:1301.3781
(2013).
[54] Mingdong Ou, Peng Cui, Jian Pei, Ziwei Zhang, and Wenwu Zhu. 2016. Asym-
metric transitivity preserving graph embedding. In SIGKDD. 1105‚Äì1114.
[55] Lawrence Page, Sergey Brin, Rajeev Motwani, and Terry Winograd. 1998. The
pagerank citation ranking: Bring order to the web. Technical Report. Technical
report, stanford University.
[56] Hongbin Pei, Bingzhe Wei, Kevin Chen-Chuan Chang, Yu Lei, and Bo Yang.
2019. Geom-GCN: Geometric Graph Convolutional Networks. In ICLR.
[57] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. 2014. Deepwalk: Online
learning of social representations. In SIGKDD. 701‚Äì710.
 
1472Efficient Topology-aware Data Augmentation for High-Degree Graph Neural Networks KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
[58] Ninh Dang Pham. 2014. On the Power of Randomization in Big Data Analytics.
(2014).
[59] Jiezhong Qiu, Yuxiao Dong, Hao Ma, Jian Li, Kuansan Wang, and Jie Tang. 2018.
Network embedding as matrix factorization: Unifying deepwalk, line, pte, and
node2vec. In WSDM. 459‚Äì467.
[60] Yu Rong, Wenbing Huang, Tingyang Xu, and Junzhou Huang. 2019. DropEdge:
Towards Deep Graph Convolutional Networks on Node Classification. In ICLR.
[61] Veeru Sadhanala, Yu-Xiang Wang, and Ryan Tibshirani. 2016. Graph sparsifica-
tion approaches for laplacian smoothing. In Artificial Intelligence and Statistics.
PMLR, 1250‚Äì1259.
[62] Oleksandr Shchur, Maximilian Mumme, Aleksandar Bojchevski, and Stephan
G√ºnnemann. 2018. Pitfalls of graph neural network evaluation. arXiv preprint
arXiv:1811.05868 (2018).
[63] Rui Song, Fausto Giunchiglia, Ke Zhao, and Hao Xu. 2021. Topological regular-
ization for graph neural networks augmentation. arXiv preprint arXiv:2104.02478
(2021).
[64] Daniel A Spielman and Nikhil Srivastava. 2008. Graph sparsification by effective
resistances. In STOC. 563‚Äì568.
[65] Daniel A Spielman and Shang-Hua Teng. 2004. Nearly-linear time algorithms
for graph partitioning, graph sparsification, and solving linear systems. In STOC.
81‚Äì90.
[66] Rakshith S Srinivasa, Cao Xiao, Lucas Glass, Justin Romberg, and Jimeng Sun.
2020. Fast graph attention networks using effective resistance based graph
sparsification. arXiv preprint arXiv:2006.08796 (2020).
[67] Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan
Salakhutdinov. 2014. Dropout: a simple way to prevent neural networks from
overfitting. The journal of machine learning research 15, 1 (2014), 1929‚Äì1958.
[68] Jonathan M Stokes, Kevin Yang, Kyle Swanson, Wengong Jin, Andres Cubillos-
Ruiz, Nina M Donghia, Craig R MacNair, Shawn French, Lindsey A Carfrae,
Zohar Bloom-Ackermann, et al .2020. A deep learning approach to antibiotic
discovery. Cell180, 4 (2020), 688‚Äì702.
[69] Jiaqi Sun, Lin Zhang, Guangyi Chen, Peng Xu, Kun Zhang, and Yujiu Yang. 2023.
Feature Expansion for Graph Neural Networks. In ICML. 33156‚Äì33176.
[70] Mengying Sun, Jing Xing, Huijun Wang, Bin Chen, and Jiayu Zhou. 2021. MoCL:
Data-driven Molecular Fingerprint via Knowledge-aware Contrastive Learning
from Molecular Graph. SIGKDD (2021).
[71] Jian Tang, Meng Qu, Mingzhe Wang, Ming Zhang, Jun Yan, and Qiaozhu Mei.
2015. Line: Large-scale information network embedding. In Proceedings of the
24th international conference on world wide web. 1067‚Äì1077.
[72] Shantanu Thakoor, Corentin Tallec, Mohammad Gheshlaghi Azar, Mehdi Az-
abou, Eva L Dyer, Remi Munos, Petar Veliƒçkoviƒá, and Michal Valko. 2021. Large-
Scale Representation Learning on Graphs via Bootstrapping. In ICLR.
[73] Hanghang Tong, Christos Faloutsos, and Jia-Yu Pan. 2006. Fast random walk
with restart and its applications. In ICDM. 613‚Äì622.
[74] Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel M√ºller. 2018.
Verse: Versatile graph embeddings from similarity measures. In TheWebConf.
539‚Äì548.
[75] Laurens Van der Maaten and Geoffrey Hinton. 2008. Visualizing data using
t-SNE. JMLR 9, 11 (2008).
[76] Petar Veliƒçkoviƒá, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro
Li√≤, and Yoshua Bengio. 2018. Graph Attention Networks. In ICLR.
[77] Ameya Velingker, Ali Kemal Sinop, Ira Ktena, Petar Velickovic, and Sreenivas
Gollapudi. 2023. Affinity-Aware Graph Networks. NeurIPS (2023).
[78] Vikas Verma, Alex Lamb, Christopher Beckham, Amir Najafi, Ioannis Mitliagkas,
David Lopez-Paz, and Yoshua Bengio. 2019. Manifold mixup: Better representa-
tions by interpolating hidden states. In ICML. 6438‚Äì6447.
[79] Vikas Verma, Meng Qu, Kenji Kawaguchi, Alex Lamb, Yoshua Bengio, Juho
Kannala, and Jian Tang. 2021. Graphmix: Improved training of gnns for semi-
supervised learning. In AAAI, Vol. 35. 10024‚Äì10032.
[80] Daixin Wang, Peng Cui, and Wenwu Zhu. 2016. Structural deep network
embedding. In SIGKDD. 1225‚Äì1234.
[81] Hanzhi Wang, Mingguo He, Zhewei Wei, Sibo Wang, Ye Yuan, Xiaoyong Du, and
Ji-Rong Wen. 2021. Approximate graph propagation. In SIGKDD. 1686‚Äì1696.
[82] Yiwei Wang, Wei Wang, Yuxuan Liang, Yujun Cai, and Bryan Hooi. 2020.
Graphcrop: Subgraph cropping for graph classification. arXiv preprint
arXiv:2009.10564 (2020).
[83] Yiwei Wang, Wei Wang, Yuxuan Liang, Yujun Cai, and Bryan Hooi. 2021. Mixup
for node and graph classification. In TheWebConf. 3663‚Äì3674.
[84] Zhen Wang, Weirui Kuang, Yuexiang Xie, Liuyi Yao, Yaliang Li, Bolin Ding, and
Jingren Zhou. 2022. Federatedscope-gnn: Towards a unified, comprehensive
and efficient package for federated graph learning. In SIGKDD. 4110‚Äì4120.
[85] Felix Wu, Amauri Souza, Tianyi Zhang, Christopher Fifty, Tao Yu, and Kilian
Weinberger. 2019. Simplifying graph convolutional networks. In ICML. 6861‚Äì
6871.[86] Lingfei Wu, Peng Cui, Jian Pei, Liang Zhao, and Xiaojie Guo. 2022. Graph neural
networks: foundation, frontiers and applications. In SIGKDD. 4840‚Äì4841.
[87] Yingxin Wu, Xiang Wang, An Zhang, Xiangnan He, and Tat-Seng Chua. 2021.
Discovering Invariant Rationales for Graph Neural Networks. In ICLR.
[88] Kaidi Xu, Hongge Chen, Sijia Liu, Pin-Yu Chen, Tsui-Wei Weng, Mingyi Hong,
and Xue Lin. 2019. Topology attack and defense for graph neural networks: an
optimization perspective. In IJCAI. 3961‚Äì3967.
[89] Keyulu Xu, Weihua Hu, Jure Leskovec, and Stefanie Jegelka. 2018. How Powerful
are Graph Neural Networks?. In ICLR.
[90] Keyulu Xu, Chengtao Li, Yonglong Tian, Tomohiro Sonobe, Ken-ichi
Kawarabayashi, and Stefanie Jegelka. 2018. Representation learning on graphs
with jumping knowledge networks. In ICML. 5453‚Äì5462.
[91] Xiaowei Xu, Nurcan Yuruk, Zhidan Feng, and Thomas AJ Schweiger. 2007.
Scan: a structural clustering algorithm for networks. In Proceedings of the 13th
ACM SIGKDD international conference on Knowledge discovery and data mining .
824‚Äì833.
[92] Cheng Yang, Deyu Bo, Jixi Liu, Yufei Peng, Boyu Chen, Haoran Dai, Ao Sun,
Yue Yu, Yixin Xiao, Qi Zhang, et al .2023. Data-centric graph learning: A survey.
arXiv preprint arXiv:2310.04987 (2023).
[93] Renchi Yang, Jieming Shi, Keke Huang, and Xiaokui Xiao. 2022. Scalable and
effective bipartite network embedding. In SIGMOD. 1977‚Äì1991.
[94] Renchi Yang, Jieming Shi, Xiaokui Xiao, Yin Yang, and Sourav S Bhowmick.
2020. Homogeneous network embedding for massive graphs via reweighted
personalized PageRank. PVLDB 13, 5 (2020), 670‚Äì683.
[95] Renchi Yang, Jieming Shi, Yin Yang, Keke Huang, Shiqi Zhang, and Xiaokui
Xiao. 2021. Effective and scalable clustering on massive attributed graphs. In
TheWebConf. 3675‚Äì3687.
[96] Chengxuan Ying, Tianle Cai, Shengjie Luo, Shuxin Zheng, Guolin Ke, Di He,
Yanming Shen, and Tie-Yan Liu. 2021. Do transformers really perform badly for
graph representation? NeurIPS 34 (2021), 28877‚Äì28888.
[97] Rex Ying, Ruining He, Kaifeng Chen, Pong Eksombatchai, William L Hamilton,
and Jure Leskovec. 2018. Graph convolutional neural networks for web-scale
recommender systems. In SIGKDD. 974‚Äì983.
[98] Yuning You, Tianlong Chen, Yang Shen, and Zhangyang Wang. 2021. Graph
contrastive learning automated. In ICML. 12121‚Äì12132.
[99] Yuning You, Tianlong Chen, Yongduo Sui, Ting Chen, Zhangyang Wang, and
Yang Shen. 2020. Graph contrastive learning with augmentations. NeurIPS 33
(2020), 5812‚Äì5823.
[100] Wenchao Yu, Cheng Zheng, Wei Cheng, Charu C Aggarwal, Dongjin Song, Bo
Zong, Haifeng Chen, and Wei Wang. 2018. Learning deep network representa-
tions with adversarially regularized autoencoders. In SIGKDD. 2663‚Äì2671.
[101] Hanqing Zeng, Hongkuan Zhou, Ajitesh Srivastava, Rajgopal Kannan, and
Viktor Prasanna. 2019. Graphsaint: Graph sampling based inductive learning
method. arXiv preprint arXiv:1907.04931 (2019).
[102] Ge Zhang, Zhao Li, Jiaming Huang, Jia Wu, Chuan Zhou, Jian Yang, and Jianliang
Gao. 2022. efraudcom: An e-commerce fraud detection system via competitive
graph neural networks. TOIS 40, 3 (2022), 1‚Äì29.
[103] Hongyi Zhang, Moustapha Cisse, Yann N Dauphin, and David Lopez-Paz. 2018.
mixup: Beyond Empirical Risk Minimization. In ICLR.
[104] Shiqi Zhang, Renchi Yang, Jing Tang, Xiaokui Xiao, and Bo Tang. 2023. Efficient
Approximation Algorithms for Spanning Centrality. In SIGKDD. 3386‚Äì3395.
[105] Ziwei Zhang, Peng Cui, Xiao Wang, Jian Pei, Xuanrong Yao, and Wenwu Zhu.
2018. Arbitrary-order proximity preserved network embedding. In SIGKDD.
2778‚Äì2786.
[106] Tong Zhao, Wei Jin, Yozen Liu, Yingheng Wang, Gang Liu, Stephan G√ºnnemann,
Neil Shah, and Meng Jiang. 2022. Graph data augmentation for graph machine
learning: A survey. arXiv preprint arXiv:2202.08871 (2022).
[107] Tong Zhao, Yozen Liu, Leonardo Neves, Oliver Woodford, Meng Jiang, and Neil
Shah. 2021. Data augmentation for graph neural networks. In AAAI, Vol. 35.
11015‚Äì11023.
[108] Tong Zhao, Xianfeng Tang, Danqing Zhang, Haoming Jiang, Nikhil Rao, Yiwei
Song, Pallav Agrawal, Karthik Subbian, Bing Yin, and Meng Jiang. 2022. Autogda:
Automated graph data augmentation for node classification. In LoG. 32‚Äì1.
[109] Cheng Zheng, Bo Zong, Wei Cheng, Dongjin Song, Jingchao Ni, Wenchao Yu,
Haifeng Chen, and Wei Wang. 2020. Robust graph representation learning via
neural sparsification. In ICML. 11458‚Äì11468.
[110] Jiong Zhu, Ryan A Rossi, Anup Rao, Tung Mai, Nedim Lipka, Nesreen K Ahmed,
and Danai Koutra. 2021. Graph neural networks with heterophily. In AAAI,
Vol. 35. 11168‚Äì11176.
[111] Jiong Zhu, Yujun Yan, Lingxiao Zhao, Mark Heimann, Leman Akoglu, and Danai
Koutra. 2020. Beyond homophily in graph neural networks: Current limitations
and effective designs. NeurIPS 33 (2020), 7793‚Äì7804.
[112] Meiqi Zhu, Xiao Wang, Chuan Shi, Houye Ji, and Peng Cui. 2021. Interpret-
ing and unifying graph neural networks with an optimization framework. In
TheWebConf. 1215‚Äì1226.
 
1473