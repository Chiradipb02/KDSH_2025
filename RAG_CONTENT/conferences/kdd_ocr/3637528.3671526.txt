Generative Auto-bidding via Conditional Diffusion Modeling
Jiayan Guo‚àó
guojiayan@pku.edu.cn
Peking University
Alibaba Group
Beijing, ChinaYusen Huo
huoyusen.huoyusen@alibaba-
inc.com
Alibaba Group
Beijing, ChinaZhilin Zhang
zhangzhilin.pt@alibaba-inc.com
Alibaba Group
Beijing, China
Tianyu Wang
yves.wty@@alibaba-inc.com
Alibaba Group
Beijing, ChinaChuan Yu
yuchuan.yc@alibaba-inc.com
Alibaba Group
Beijing, ChinaJian Xu
xiyu.xj@alibaba-inc.com
Alibaba Group
Beijing, China
Bo Zheng‚Ä†
bozheng@alibaba-inc.com
Alibaba Group
Beijing, ChinaYan Zhang
zhyzhy001@pku.edu.cn
Peking University
Beijing, China
ABSTRACT
Auto-bidding plays a crucial role in facilitating online advertis-
ing by automatically providing bids for advertisers. Reinforcement
learning (RL) has gained popularity for auto-bidding. However,
most current RL auto-bidding methods are modeled through the
Markovian Decision Process (MDP), which assumes the Markovian
state transition. This assumption restricts the ability to perform in
long horizon scenarios and makes the model unstable when dealing
with highly random online advertising environments. To tackle this
issue, this paper introduces AI-Generated Bidding (AIGB), a novel
paradigm for auto-bidding through generative modeling. In this
paradigm, we propose DiffBid, a conditional diffusion modeling
approach for bid generation. DiffBid directly models the correlation
between the return and the entire trajectory, effectively avoiding
error propagation across time steps in long horizons. Addition-
ally, DiffBid offers a versatile approach for generating trajectories
that maximize given targets while adhering to specific constraints.
Extensive experiments conducted on the real-world dataset and
online A/B test on Alibaba advertising platform demonstrate the
effectiveness of DiffBid, achieving 2.81% increase in GMV and 3.36%
increase in ROI.
CCS CONCEPTS
‚Ä¢Information systems ‚ÜíComputational advertising.
‚àóWork is done during the internship at Alibaba Group.
‚Ä†Bo Zheng is the corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage and that copies bear this notice and the full citation 
on the first page. Copyrights for components of this work owned by others than the 
author(
s) must be honored. Abstracting with credit is permitted. To copy otherwise, or 
republish, to post on servers or to redistribute to lists, requires prior specific permission 
and/or a fee. Request permissions from permissions@acm.org.
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
¬© 2024 Copyright held by the owner/author(s). Publication rights licensed to ACM. 
ACM ISBN 979-8-4007-0490-1/24/08. . . 
https://doi.org/10.1145/3637528.3671526KEYWORDS
Online Advertising, Auto-bidding, Generative Learning, Diffusion
Modeling
ACM Reference Format:
Jiayan Guo, Yusen Huo, Zhilin Zhang, Tianyu Wang, Chuan Yu, Jian Xu,
Bo Zheng, and Yan Zhang. 2024. Generative Auto-bidding via Conditional
Diffusion Modeling. In Proceedings of the 30th ACM SIGKDD Conference
on Knowledge Discovery and Data Mining (KDD ‚Äô24), August 25‚Äì29, 2024,
Barcelona, Spain. ACM, New York, NY, USA, 12 pages. https://doi.org/10.
1145/3637528.3671526
1 INTRODUCTION
The ever-increasing digitalization of commerce has exponentially
expanded the scope and importance of online advertising plat-
forms [ 13,18]. These ad platforms have become indispensable for
businesses to effectively target their audience and drive sales. Tra-
ditionally, advertisers need to manually adjust bid prices to opti-
mize overall ad performance. However, this coarse bidding process
becomes impractical when dealing with trillions of impression op-
portunities, requiring extensive domain knowledge [ 10] and com-
prehensive information about the advertising environments.
To alleviate the burden of bid optimization for advertisers, these
ad platforms provide auto-bidding services [ 4,5,12,39]. These
services automate the determination of bids for each impression
opportunity by employing well-designed bidding strategies. Such
strategies consider a variety of factors about advertising environ-
ments and advertisers, such as the distribution of impression oppor-
tunities, budgets, and average cost constraints [ 31]. Considering
the dynamic nature of advertising environments, it is essential to
regularly optimize the bidding strategy, typically at intervals of a
few minutes, in response to changing conditions. With advertising
episodes typically extending beyond 24 hours, auto-bidding can be
seen as a sequential decision-making process with a long planning
horizon where the bidding strategy seeks to optimize performance
throughout the entire episode.
Recently, reinforcement learning (RL) techniques have been em-
ployed to optimize auto-bidding strategies through the training of
5038
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Jiayan Guo et al.
1 2 3 4 5 6 7
History State Length0.720.760.80Correlation [-1,1]Pearson
Spearman
Kendall
Figure 1: Correlation Coefficients between History and the
Next State.
agents with bidding logs collected from online advertising envi-
ronments [ 6,21,27,35,44,48]. By leveraging historical realistic
bidding information, these agents can learn patterns and trends
to make informed bidding decisions. However, most existing RL
auto-bidding methods are based on the Markovian decision pro-
cess (MDP), where the next state only depends on the current state
and action. In the online auto-bidding environment, this assumption
may been challenged by our statistical analysis presented in Fig-
ure 1, which shows a significant increase in the correlation between
the sequence lengths of history states and the next bidding state.
This result indicates that solving auto-bidding considering only the
last state will encounter several problems, including instability in
the highly random online advertising environment. Additionally,
the RL methods that rely on the Bellman equation often result in
compound errors [ 15]. This issue is especially pronounced in the
auto-bidding problem characterized by sparse return and limited
data coverage. A detailed statistical analysis is provided in A.5. In
this paper, instead of employing RL-based methods, we present a
novel paradigm, AI Generated Bidding (AIGB), that regards auto-
bidding as a generative sequential decision-making problem. AIGB
directly capture the correlation between the return and the entire
bidding trajectory that consists of a sequence of states or actions,
thereby transforming the problem into learning to generate an
optimal bidding trajectory. This approach enables us to overcome
the limitations of RL when dealing with the highly random online
advertising environment, sparse returns, and limited data coverage.
In the new paradigm, we propose Diff usion auto-bid ding model
DiffBid. It gradually corrupts the bidding trajectory by injecting
scheduled Gaussian noises into the forward process. Then, it recon-
structs trajectory from corrupted ones given returns and temporal
conditions via a parameterized neural network. We further propose
a non-Markovian inverse dynamics [ 17,37,49] to more accurately
generate optimal bidding parameters. Taking one step further, Diff-
Bid provides flexibility to closely align with the specific needs of
advertisers by accommodating diverse constraints like cost-per-
click (CPC) and incorporating human feedback. Notably, DiffBid
serves as a unified model capable of mastering multiple tasks si-
multaneously, dynamically composing various bidding trajectory
components to generate sequences that efficiently maximize di-
verse targets while adhering to a range of predefined constraints.
To assess the effectiveness of DiffBid, we conducted extensive eval-
uations offline and online against baselines. Our results indicate
that DiffBid surpasses RL methods for auto-bidding. In summary:‚Ä¢We uncover that the Markov assumptions upon which com-
mon decision-making methods rely are not applicable to
the auto-bidding problem. Therefore, we propose a novel
bidding paradigm with non-Markovian properties based on
generative learning. This paradigm represents a significant
innovation in modeling methodology compared with exist-
ing RL methods commonly used in auto-bidding.
‚Ä¢Unlike common bidding methods, our approach captures
the correlation between the return and the entire bidding
trajectory. This design enables the method to address impor-
tant challenges, such as sparse returns, and ensures stability
in the highly random advertising environment. Finally, we
prove that the proposed diffusion modeling is equivalent
in terms of optimality to solving a non-Markovian decision
problem.
‚Ä¢We demonstrate that the method can integrate capabilities
to handle a variety of tasks within a unified solution, tran-
scending the limitations of traditional task-specific methods.
It shows that DiffBid outperforms conventional RL methods
in auto-bidding, and achieves significant performance gain
on a leading E-commerce ad platform through both offline
and online evaluation. In specific, it achieves 2.81% increase
in GMV and 3.36% in ROI.
2 PRELIMINARY
2.1 Problem Formulation
For simplicity, we consider auto-bidding with cost-related con-
straints. During a time period, suppose there are ùëÅimpression
opportunities arriving sequentially and indexed by ùëñ. In this setting,
advertisers submit bids to compete for each impression opportunity.
An advertiser will win the impression if its bid ùëèùëñis greater than
others. Then it will incur a cost ùëêùëñfor winning and getting the value.
During the period, the mission of an advertiser is to maximize
the total received value√ç
ùëñùëúùëñùë£ùëñ, whereùë£ùëñis the value of impression ùëñ
andùëúùëñis whether the advertiser wins impression ùëñ. Besides, we have
the budget and several constraints to control the performance of ad
deliveries. Budget constraints are simply√ç
ùëñùëúùëñùëêùëñ‚â§ùêµ, whereùëêùëñis
the cost of impression ùëñandùêµis the budget. The other constraints
are complex and according to [ 21] we have the unified formulation:
√ç
ùëñùëêùëñùëóùëúùëñ√ç
ùëñùëùùëñùëóùëúùëñ‚â§ùê∂ùëó, (1)
whereùê∂ùëóis the upper bound of ùëó‚Äôth constraint. ùëùùëñùëócan be any
performance indicator, e.g. return, or constant. ùëêùëñùëóis the cost of
constraintùëó. GivenùêΩconstraints, we have the Multi-constrained
Bidding (MCB) as:
maximizeùëúùëñ‚àëÔ∏Å
ùëñùëúùëñùë£ùëñ
s.t.‚àëÔ∏Å
ùëñùëúùëñùëêùëñ‚â§ùêµ
√ç
ùëñùëêùëñùëóùëúùëñ√ç
ùëñùëùùëñùëóùëúùëñ‚â§ùê∂ùëó,‚àÄùëó
ùëúùëñ‚àà{0,1},‚àÄùëñ(2)
5039Generative Auto-bidding via Conditional Diffusion Modeling KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
ConvConvConvConvConvConvConvConv
Forward Process3$/3#/3%&#/3%/
3‚Ä≤%&#/
Reverse ProcessReturn
Conditions3%/Linear
Bid 
Generation
ConstraintsFeedbacks3‚Ä≤$/'1+"#Eq.(3),5‚àó
Conv-.)*!+*!"#+
,$*!"#+*!+,.(+)
4.32.53.54.52.44.41.82.82235
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
7.64.662.50.98.39.80.76.18.72.25.2
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
8.89.91.401.99.39.39.18.850.76.6
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
4.32.53.54.52.44.41.82.82235
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
7.64.662.50.98.39.80.76.18.72.25.2
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
8.89.91.401.99.39.39.18.850.76.6
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
4.32.53.54.52.44.41.82.82235
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
7.64.662.50.98.39.80.76.18.72.25.2
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
8.89.91.401.99.39.39.18.850.76.6
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
4.32.53.54.52.44.41.82.82235
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
7.64.662.50.98.39.80.76.18.72.25.2
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
8.89.91.401.99.39.39.18.850.76.6
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
4.32.53.54.52.44.41.82.82235
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
7.64.662.50.98.39.80.76.18.72.25.2
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
493.162.15.84.685.160.59.4
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
4.32.53.54.52.44.41.82.82235
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
7.64.662.50.98.39.80.76.18.72.25.2
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters
493.162.15.84.685.160.59.4
T=1T=2‚Ä¶T=TStates
Left BudgetCost SpeedBidding Parameters%'%'
Figure 2: Overall Framework for Generative Auto-bidding.
A previous study [21] has already shown the optimal solution:
ùëè‚àó
ùëñ=ùúÜ0ùë£ùëñ+ùê∂ùëñùêΩ‚àëÔ∏Å
ùëó=1ùúÜùëóùëùùëñùëó, (3)
whereùëè‚àó
ùëñis the predicted optimal bid for the impression ùëñ.ùúÜùëó, ùëó‚àà
{0,...,ùêΩ}are the optimal bidding parameters. Specifically, when
considering only the budget constraint, it is the Max Return bidding.
However, when considering both the budget constraint and the
CPC constraint, it is called Target-CPC bidding. From an alternative
perspective, the optimal strategy involves arranging all impressions
in order of their cost-effectiveness (CE) and then selecting every
impression opportunity that surpasses the optimal CE ratio ùëêùëí‚àó.
This threshold enforces the constraint, and the optimal bidding
parameters ùúÜ0=1/ùëêùëí‚àó.
2.2 Auto-Bidding as Decision-Making
Eq.(3) gives the formation of the optimal bid ùëè‚àó
ùëñwith bidding pa-
rametersùúÜùëó, ùëó‚àà{0,...,ùêΩ}. However, in practice, the highly random
and complex nature of the advertising environment prevents di-
rect calculation of the bidding parameters. They must be carefully
calibrated to adapt to the environment and dynamically adjusted
as it evolves, This subsequently makes auto-bidding a sequential
decision-making problem. To model it with decision-making, we
introduce states ùíîùë°‚ààSto describe the real-time advertising status
and actions ùíÇùë°‚ààA to adjust the corresponding bidding param-
eters. The auto-bidding agent will take action ùíÇùë°at the state ùíîùë°
based on its policy ùúã, and then the state will transit to the next
state ùíîùë°+1and gain reward ùíìùë°‚ààR according to the advertising
environment dynamics T. WhenT:ùíîùë°√óùíÇùë°‚Üíùíîùë°+1√óùíìùë°satisfies,
it is called the Markovian decision process (MDP). Otherwise, it is
a non-Markovian decision process. We next describe the key items
of the automated bidding agent in the industrial online advertising
system:
‚Ä¢State ùíîùë°describes the real-time advertising status at time
periodùë°, which includes 1) remaining time of the advertiser;
2) remaining budget; 3) budget spend speed; 4) real-time
cost-efficiency (CPC), 5) and average cost-efficiency (CPC).‚Ä¢Action ùíÇùë°indicates the adjustment to the bidding parame-
ters at the time period ùë°, which has the dimension of the
number of bidding parameters ùúÜùëó, ùëó=1,..,ùêΩ and modeled as
(ùëéùúÜ0
ùë°,...,ùëéùúÜùêΩ
ùë°).
‚Ä¢The reward ùíìùë°is the value contributed to the objective ob-
tained within the time period ùë°.
‚Ä¢A trajectory ùúèis the index of a sequence of states, actions,
and rewards within an episode.
In the online advertising system, learning policy through direct
interaction with the online environment is unfeasible due to safety
concerns. Nonetheless, access to historical bidding logs, incorpo-
rating trajectories from a variety of bidding strategies, is attainable
and provides a viable alternative. Prevalent auto-bidding methods
predominantly leverage this offline data to craft effective policies.
Our approach is aligned with this practice and will be elaborated
in detail in the subsequent chapters.
3 AIGB PARADIGM FOR AUTO-BIDDING
To thoroughly investigate the auto-bidding problem, we conducted
a series of statistical analyses of bidding trajectories, with detailed
information available in appendix ??. These analyses provide us
with the insight that devising an effective bidding strategy is es-
sentially equivalent to optimizing a state trajectory. Armed with
this insight, we propose a hierarchical paradigm for auto-bidding
that prioritizes the state trajectory optimization and subsequently
generates actions aligned with the optimized trajectory.
For state trajectory optimization, we can employ a generative
model to capture the joint distribution of the entire bidding trajec-
tory and its associated returns, subsequently generating the trajec-
tory distribution conditioned on the desired return. This approach
enables us to address key auto-bidding challenges by employing
SOTA generative algorithms. This paper presents an implementa-
tion that utilizes Denoising Diffusion Probabilistic Models (DDPM).
For action generation, several off-the-shelf methods can be utilized
to predict the proper action given the target state trajectory. In
this paper, we apply a widely used inverse dynamics model. The
hierarchical paradigm divides auto-bidding into two supervised
5040KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Jiayan Guo et al.
learning problems, offering several advantages that include en-
hanced interpretability and increased stability during the training
process.
4 DIFFUSION AUTO-BIDDING MODEL
In this section, we give a detailed introduction of the proposed
diffusion Auto-bidding Model (DiffBid). We will first give the mod-
eling of Auto-bidding through diffusion models in Section 4.1.1.
Then we give a detailed description of the forward process in Sec-
tion 4.1.2, the reverse process in Section 4.1.3, and the training
process in Section 4.2. Finally, we will give the complexity analysis
in Section 4.4.
4.1 Diffusion Modeling of Auto-bidding
4.1.1 Overview. We model such sequential decision-making prob-
lem through conditional generative modeling [ 2,9] by maximum
likelihood estimation (MLE):
max
ùúÉEùúè‚àºùê∑[logùëùùúÉ(ùíô0(ùúè)|ùíö(ùúè))] (4)
whereùúèis the trajectory index, ùíô0(ùúè)is the original trajectory
of states and ùíö(ùúè)is the corresponding property. The goal is to
estimate the conditional data distribution with ùëùùúÉso that the future
states of a trajectory ùíô0(ùúè)from information ùíö(ùúè)can be generated.
For example, in the context of online advertising, ùíö(ùúè)can be the
constraints or the total value of the entire trajectory. Under such
a setting, we can formalize the conditional diffusion modeling for
auto-bidding:
ùëû(ùíôùëò+1(ùúè)|ùíôùëò(ùúè)), ùëùùúÉ(ùíôùëò‚àí1(ùúè)|ùíôùëò(ùúè),ùíö(ùúè)), (5)
whereùëûrepresents the forward process in which noises are gradu-
ally added to the trajectory while ùëùùúÉis the reverse process where a
model is used for denoising. The detailed introduction of diffusion
modeling can be found in Appendix A.2. The overall framework is
presented in Figure 2. We will make a detailed discussion about the
two modeling processes in the following sections.
4.1.2 Forward Process via Diffusion over States. We model
the forward process ùëû(ùíôùëò+1(ùúè)|ùíôùëò(ùúè))via diffusion over states,
where:
ùíôùëò(ùúè):=(ùíî1,...,ùíîùë°,...,ùíîùëá)ùëò, (6)
where ùíîùë°is modeled as a one-dimensional vector. ùíôùëò(ùùâ)is a noise
sequence of states and can be represented by a two-dimensional
array where the first dimension is the time periods and the second
dimension is the state values. Merely sampling states is not enough
for an agent. Given ùíôùëò(ùúè), we model the diffusion process as a
Markov chain, where ùíôùëò(ùúè)is only dependent on ùíôùëò‚àí1(ùúè):
ùëû(ùíôùëò(ùúè)|ùíôùëò‚àí1(ùúè))=N
ùíôùëò(ùúè);‚àöÔ∏Å
1‚àíùõΩùëòùíôùëò‚àí1(ùúè),ùõΩùëòùêº
,(7)
whenùëò‚Üí‚àû ,ùë•ùëò(ùúè)approaches a sequence of standard Gauss-
ian distribution where we can make sampling through the re-
parameterization trick and then gradually denoise the trajectory to
produce the final state sequence. For the design of ùõΩùëò, ùëò=1,...,ùêæ ,
we apply cosine schedule [ 38] to assign the corresponding values
which smoothly increases diffusion noises using a cosine function
to prevent sudden changes in the noise level. The details for noise
schedule can be found in the appendix.4.1.3 Reverse Process for Bid Generation. Following [ 2,23] we
use a classifier-free guidance strategy with low-temperature sam-
pling to guide the generation of bidding, to extract high-likelihood
trajectories in the dataset. During the training phase, we jointly
train the unconditional model ùúñùúÉ(ùíôùëò(ùúè),ùëò)and conditional model
ùúñùúÉ(ùíôùëò(ùúè),ùíö(ùúè),ùëò)by randomly dropping out conditions. During
generation, a linear combination of conditional and unconditional
score estimates is used:
ÀÜùúñùëò:=ùúñùúÉ(ùíôùëò(ùúè),ùëò)+ùúî(ùúñùúÉ(ùíôùëò(ùúè),ùíö(ùúè),ùëò)‚àíùúñùúÉ(ùíôùëò(ùúè),ùëò)),(8)
where the scale ùúîis applied to extract the most suitable portion
of the trajectory in the dataset that coappeared with ùíö(ùúè). After
that, we can sample from DiffBid to produce bidding parameters
through sampling from ùëùùúÉ(ùíôùëò‚àí1(ùúè)|ùíôùëò(ùúè),ùíö(ùúè)):
ùíôùëò‚àí1(ùúè)‚àºN ùíôùëò‚àí1(ùúè)|ùùÅùúÉ(ùë•ùëò(ùúè),ùíö(ùúè),ùëò),ùö∫ùúÉ(ùíôùëò(ùúè),ùëò)(9)
where a widely used parameterization here is ùùÅùúÉ(ùíôùëò(ùúè),ùíö(ùúè),ùëò)=
1‚àöùõºùëò(ùíôùëò(ùúè)‚àíùõΩùëò‚àö
1‚àíùõºùëòÀÜùúñùëò)andŒ£ùúÉ(¬∑)=ùõΩùëò, in whichùõºùëò=1‚àíùõΩùëòand
ùõºùëò=√éùëò
ùëñ=1ùõºùëò. When serving at time period ùë°, the agent first sample
a initial trajectory ùë•‚Ä≤
ùêæ(ùúè)‚àºN( 0,ùêº)and assign the history states
ùíî0:ùë°into it. Then, we can sample predicted states with the reverse
process recursively by
ùíô‚Ä≤
ùëò‚àí1(ùúè)=ùùÅùúÉ(ùíô‚Ä≤
ùëò(ùúè),ùíö(ùúè),ùëò)+‚àöÔ∏Å
ùõΩùëòùíõ (10)
where ùíõ‚àºN( 0,ùêº). Given ùíô‚Ä≤
0(ùúè), we can extract the next predicted
stateùë†‚Ä≤
ùë°+1, and determine how much it should bid to achieve that
state. In this setting, we apply widely used inverse dynamics [ 1,40]
with non-Markovian state sequence to determine current bidding
parameters at time period ùë°:
ÀÜùíÇùë°=ùëìùúô(ùíîùë°‚àíùêø:ùë°,ùíî‚Ä≤
ùë°+1), (11)
where ÀÜùíÇùë°‚ààRùêΩcontains predicted bidding parameters (i.e. ùúÜùëñ, ùëñ=
1,...,ùëõ ) at timeùë°.ùêøis the length of history states. The inverse dy-
namic function ùëìùúôcan be trained with the same offline logs as the
reverse process. This design disentangles the learning of states and
actions, making it easier to learn the connection between states
thus achieving better empirical performance. The overall procedure
is summarized in Algorithm 1.
4.2 DiffBid Training
Following [ 22], we train DiffBid to approximate the given noise
and the returns in a supervised manner. Given a bidding trajectory
ùíô0(ùúè), we have its corresponding returns e.g., values the advertiser
received, the constraint the model should obey and the history
statesùë†ùëô,ùëô=1,...,ùë° before time ùë°+1. Then we just train the reverse
process model ùëùùúÉwhich is parameterized through the noise model
ùúñùúÉand the inverse dynamics ùëìùúôthrough:
L(ùúÉ,ùúô)=Eùëò,ùúè‚ààD
||ùúñ‚àíùúñùúÉ(ùíôùëò(ùúè),ùíö(ùúè),ùëò)||2
+E(ùíîùë°‚àíùêø:ùë°,ùíÇùë°,ùë†‚Ä≤
ùë°+1)‚ààD
||ùíÇùë°‚àíùëìùúô(ùíîùë°‚àíùêø:ùë°,ùíî‚Ä≤
ùë°+1)||2
,(12)
In the training process, we randomly sample a bidding trajectory ùúè
and a time step ùëò, then we construct a noise trajectory ùíôùëò(ùúè)and
predict the noise through Eq (8). Following [ 23], we randomly drop
conditions ùíö(ùúè)with probability ùëùto train DiffBid to enhance the
robustness. The process is presented in Algorithm 2.
5041Generative Auto-bidding via Conditional Diffusion Modeling KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
4.3 Design of Conditions.
In this section, we present approaches transforming industrial met-
rics into conditions of DiffBid.
4.3.1 Generation with Returns. For each trajectory ùúèwe have
the total value the advertiser received as the the return ùëÖ(ùúè)=√çùëá
ùë°=1ùëüùë°. We normalize the return by:
ùëÖ=ùëÖ(ùúè)‚àíùëÖmin
ùëÖmax‚àíùëÖmin, (13)
whereùëÖminandùëÖmaxare the smallest and the largest return in the
dataset. Through Eq. 13 we normalize the return into [0,1]and
merge it into ùë¶(ùúè). Subsequently, we train the model to generate
trajectories conditioned on the normalized returns. It should be
noted that trajectories with more values received have higher nor-
malized returns. Thus ùëÖ=1indicates the best trajectory with the
highest values which will better fit the advertisers‚Äô needs. When
generation, we just set ùëÖ=1and generate the trajectory under the
max return condition to the advertiser.
4.3.2 Generation with Constraints or Human Feedback .In
MCB, the cumulative performance related to the constraints within
a given episode should be controlled so as not to exceed the adver-
tisers‚Äô expectations. In such a setting, we can design ùíö(ùúè)to control
the generation process. For example, in the Target-CPC setting, we
can maintain a binary variable ùê∏to indicate whether the final CPC
exceeds the given constraint ùê∂:
ùê∏=Iùë•‚â§ùê∂(ùë•) (14)
whereùë•=√ç
ùëñùëêùëñùëúùëñ√ç
ùëñùëùùëñùëúùëñis defined in Eq (2). We can then normalize ùë•into
[0,1]through min-max normalization for simplification. ùê∏can be
used to indicate whether trajectory ùúèbreak the CPC constraint. We
can also design ùíö(ùúè)to includeùê∏=1to make the model generate
bids that do not break the CPC constraint. Sometimes it is also
important to adjust the bidding parameters given real-time feedback
provided by the advertiser to enable flexibility. Here we use two
example indicators that reflect the experience of advertisers:
(1)Smoothness: an advertiser may expect the cost curve as
smooth as possible to avoid sudden change. By defining ùë•=
1
ùëá√ç
ùë°|ùëêùëúùë†ùë°ùë°‚àíùëêùëúùë†ùë°ùë°‚àí1|, we can model it as a binary variable
ùëÜindicating whether the max cost change between adjacent
time period exceeds a threshold as in Eq (14).
(2)Early/Late Spend: an advertiser may expect the budget to
be cost in the morning or in the evening when there are
promotions. Here we model the ratio of cost in the early
half day through ùë•=√çùëá/2
ùë°=0ùëêùëúùë†ùë°ùëñ√çùëá
ùë°=0ùëêùëúùë†ùë°ùëñ, and use a binary variable to
indicate whether the spend in the early half day exceeds a
certain threshold ùê∂as in Eq (14).
We can also compose several constraints together to form ùíö(ùúè)to
guide the model to generate bid parameters that adhere to different
constraints. In this setting, ùíö(ùúè)will be a vector.
4.4 Complexity Analysis
The complexity analysis for training DiffBid consists of the training
process and the inference process. For training, given the time com-
plexity of the noise prediction model ùúñùúÉisO(ùëá1), the complexityfor the inverse dynamic model ùëìùúôisO(ùëá2), the complexity for a
training epoch isO(|B|(ùëá1+ùëá2)). It can be seen that the training
complexity is linear with the input given ùëá1andùëá2are relatively
fixed. Thus the training of DiffBid is efficient. For generation, given
the total diffusion step ùêæ, the trajectory length ùêø, then the time
complexity for inference is O(ùêæùêø(ùëá1+ùëá2)). We can observe that the
time complexity for inference is linearly scaled with the diffusion
stepùêæ. In image generation, ùêæis usually very large to ensure good
generation quality, which brings the problem of non-efficiency.
However, for bidding generation, we find ùêæneeds not to be very
large. Relatively small ùêæhas already generated promising results.
Moreover, in auto-bidding, a higher tolerance for latency is accept-
able, enabling the use of relatively larger ùêæ.
5 THEORETICAL ANALYSIS
In this section, we theoretically analyze the property of DiffBid. In
specific, we show that DiffBid that utilize MLE as the objective has
a corresponding non-Markovian decision problem [ 16,33,36,41].
The detailed proofs can be found in the Appendix A.7.
Lemma 5.1 (MLE as non-Markovian decision-making). As-
suming the Markovian transition ùëùùõæ‚àó(ùë†ùë°+1|ùë†ùë°,ùëéùë°)is known, the ground-
truth conditional state distribution ùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)for demonstration
sequences is accessible, we can construct a non-Markovian sequential
decision-making problem, based on a reward function ùëüùõº(ùë†ùë°+1,ùë†0:ùë°):=
log‚à´
ùëùùõº(ùëéùë°|ùë†0:ùë°)ùëùùõæ‚àó(ùë†ùë°+1|ùë†ùë°,ùëéùë°)ùëëùëéùë°for an arbitrary energy-based
policyùëùùõº(ùëéùë°|ùë†0:ùë°). Its objective is
ùëá‚àëÔ∏Å
ùë°=0Eùëù‚àó(ùë†0:ùë°)
ùëâùëùùõº(ùë†0:ùë°)
=Eùëù‚àó(ùë†0:ùëá)"ùëá‚àëÔ∏Å
ùë°=0ùëá‚àëÔ∏Å
ùëò=ùë°ùëüùõº(ùë†ùëò+1;ùë†0:ùëò)#
(15)
ùëâùëùùõº(ùë†0:ùë°):=Eùëù‚àó(ùë†ùë°+1:ùëá|ùë†0:ùë°)[√çùëá
ùëò=1ùëüùõº(ùë†ùë°+1;ùë†0:ùë°)]is the value function
ofùëùùõº. This objective yields the save optimal policy as the Maximum
Likelihood Estimation Eùëù‚àó(ùë†0:ùëá)[logùëùùúÉ(ùë†0:ùëá)].
Remarks. This analysis shows that DiffBid utilizing MLE objective
has its corresponding non-Markovian decision problem, and their
optimal are equivalent. It means that DiffBid does not require the
MDP assumption of problems and thus is more powerful in handling
randomness and sparse return like in the advertising environment.
6 EXPERIMENTS
6.1 Experimental Setup
6.1.1 Experimental Environment. The simulated experimental
environment is conducted in a manually built offline real advertising
system (RAS) as in [ 35]. Specifically, the RAS is composed of two
consecutive stages, where the auction mechanisms resemble those
in the RAS. We consider the bidding process in a day, where the
episode is divided into 96 time steps. Thus, the duration between
any two adjacent time steps ùë°andùë°+1is 15 minutes. The number
of impression opportunities between time step ùë°andùë°+1fluctuates
from 100 to 500. Detailed parameters in the RAS are shown in
Table 5. We keep the parameters the same for all experiments.
6.1.2 Data Collection. We use the widely applied auto-bidding
RL method USCB in the online environment to generate the bidding
logs for offline RL training. This results in a total 5,000trajectories
for the based dataset and 50,000for a larger one. To increase the
5042KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Jiayan Guo et al.
Table 1: Performance Comparison with baselines in different settings, including different data scales, and budgets in Max
Return bidding. improv indicates the relative improvement of DiffBid against the most comparative baseline. The best results
are bolded and the best second results are underlined.
Training Dataset Budget USCB BCQ CQL IQL DT DiffBid improv
USCB-5K1.5K 454.25 454.72 461.82 456.80 477.39 480.76 0.71%
2.0K 482.67 483.50 475.78 486.56 507.30 511.17 0.76%
2.5K 497.66 498.77 481.37 518.27 527.88 531.29 0.65%
3.0K 500.60 501.86 491.36 549.19 550.66 556.32 1.03%
USCBEx-5K1.5K 454.25 453.74 358.43 464.69 378.64 475.62 2.35%
2.0K 482.67 487.63 356.80 529.36 439.03 544.38 2.84%
2.5K 497.66 510.75 356.41 613.67 505.43 624.29 1.73%
3.0K 500.60 512.18 355.42 670.65 574.79 678.73 1.17%
USCBEx-50K1.5K 454.25 458.64 435.06 446.23 396.24 495.57 8.05%
2.0K 482.67 491.72 431.49 533.58 478.29 551.73 3.40%
2.5K 497.66 513.23 428.39 592.32 554.48 606.34 2.37%
3.0K 500.60 526.21 425.29 633.26 611.50 644.88 1.83%
diversity of the action space, we also randomly make explorations
to generate a dataset with more noise. The above process results
in three datasets: USCB-5k, USCBEx-5k, and USCBEx-50k, where
USCBEx indicates USCB logs with random exploration data.
6.1.3 Baselines. We use the state-of-the-art auto-bidding method
USCB as well as other 4 recently proposed offline RL methods as
our baselines. The details of the baselines are as follows:
‚Ä¢USCB [21] an RL method designed for real-time bidding to
dynamically adjust parameters to achieve the optimum. It
has outperformed many RL baselines and is also the base
policy that is used to collect the data for offline training.
‚Ä¢BCQ [14] a classic offline RL method without interaction
with the environment.
‚Ä¢CQL [30] address the limitations of offline RL methods by
learning a conservative Q-function such that the expected
value of a policy under it lower-bounds its true value.
‚Ä¢IQL [29] an offline RL method that does not require evaluat-
ing actions outside of the dataset, yet it enables substantial
improvement of the learned policy beyond the best behavior
in the data through generalization
‚Ä¢DT[9] a prevalent generative method based on the trans-
former architecture for sequential decision-making.
6.1.4 Implementation Details. For the implementation of base-
lines, we use the default hyper-parameters suggested from their
papers and also tune through our best effort. For DiffBid, the diffu-
sion steps is searched within {5,10,20,30,50}.ùõæis set to 0.008. ùêøis
searched in{1,2,3}.ùúîfor noise schedule is set to 0.2 empirically.
The batch size is set to 2% of all training trajectories. Total training
epochs is set to 500. For the implementation of ùëùùúÉ, we adopt the
most widely used model U-Net for diffusion modeling with hidden
sizes of 128 and 256. We use Adam optimizer with a learning rate
1ùëí‚àí4to optimize the model. The condition dropout ratio is set to
0.2 during training. We update the model with momentum updates
over a period of 4 steps.6.1.5 Evaluation. For evaluation, we randomly initialize a multi-
agent advertising environment with USCB as the base auto-bidding
agents and use other methods to compete with these agents. We test
the performance under 4 different budgets, 1500, 2000, 2500, and
3000, to test the generalization under different budget scales. We
use the cumulative reward as the evaluation metric, which reflects
the total gain received by the target agent. For each method, we
randomly initialize 50 times and report the average of top-5 scores.
6.2 Performance Evaluation
The performance against baselines is shown in Table 1. In this
table, we show the cumulative reward from different budgets of
all the models. We have the following discoveries. One of the key
takeaways from the performance comparison presented in Table 1
is that offline RL methods consistently outperform the state-of-
the-art auto-bidding method, USCB. This finding underscores the
advantages of leveraging historical bidding data to train RL agents.
Offline RL methods, such as BCQ, IQL, and DT, exhibit superior
performance in terms of cumulative rewards across various budget
scenarios. The superiority of offline RL methods can be attributed to
their ability to learn from past bidding experiences without interac-
tion with a simulation environment. This mitigates the challenges
associated with inconsistencies between the online bidding envi-
ronment and the offline bidding environment, leading to policies
that are better aligned with real-world scenarios. Notably, DiffBid
stands out as the top-performing approach among all the methods
evaluated. In all budget scenarios and training datasets, DiffBid
consistently achieves the highest cumulative rewards. This remark-
able performance highlights the efficacy of the DiffBid approach in
optimizing bidding strategies by directly modeling the correlation
with the returns and entire trajectories. By decoupling the compu-
tational complexity from horizon length, DiffBid achieves superior
decision-making capabilities, outperforming traditional RL meth-
ods in both foresight and strategy. Another important observation
5043Generative Auto-bidding via Conditional Diffusion Modeling KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Table 2: Ablation Study
Mo
del USCBEx-5K USCBEx-50K
DiffBid
2280.12 2395.60
DiffBid
w/o cond 1812.64 1852.21
DiffBid w/o non-mkv 2254.78 2287.41
from the results is the impact of training dataset size on model per-
formance. When comparing the "USCB-5K" and "USCBEx-50K" set-
tings, it becomes evident that a larger training dataset consistently
leads to improved cumulative rewards. This finding underscores
the significance of data size in training RL models for automated
bidding. A richer dataset allows the models to capture more diverse
bidding scenarios and make more informed decisions, ultimately
resulting in better performance. One intriguing aspect of DiffBid‚Äôs
performance is its resilience to noise. In real-world advertising
environments, there can be inherent uncertainty and variability
in the bidding process due to factors like market dynamics and
competitor behavior. DiffBid appears to handle such noise more
effectively than the RL baselines. This means that even in situations
where bidding outcomes are less predictable, DiffBid manages to
maintain competitive performance.
6.3 Ablation Study
To study different parts of the proposed DiffBid, we run the model
without a certain module to see if the removed corresponding mod-
ule will result in a performance drop. The result of the ablation
study is shown in Table 2. Due to the space limitation, we only
provide the results on USCBEx-5K and USCBEx-50K. w/o cond
refers to the DiffBid with the condition set to 0.0 (rather than 1.0).
w/o non-mkv refers to the situation where we only use the current
state and the predicted next state to generate the bidding coeffi-
cient. From the table, we find both of the two parts contribute to
the final result, and removing either of them will result in a perfor-
mance drop. It verifies the effectiveness of the proposed methods
in boosting DiffBid‚Äôs performance for auto-bidding.
6.4 In-depth Analysis
6.4.1 Study of State Transition. Here we compare the state
transition of the baseline method USCB and our proposed method
DiffBid. The result for grouped and non-grouped state transition
during a day is shown in Figure 3. In this figure, we plot the budget
left ratio with time steps in one day. From the figure, we can observe
that under USCB, most of the advertisers‚Äô consumption does not
exhaust their budget. This is attributed to the inconsistency between
the offline virtual environment and the real online environment
faced by USCB. On the contrary, the budget completion situation
improves under DiffBid, where most of the advertisers spend more
than 80% of their budgets. One possible reason is that DiffBid finds
trajectories with a high budget completion ratio will also have a
high cumulative reward, and thus tend to generate trajectories with
a high budget completion ratio. Moreover, advertisers with small
budgets undertend to spend money in the afternoon. This is because
the impressions in the afternoon offer a higher cost-effectiveness,
albeit with a limited quantity.
(a) USCB
 (b) DiffBid
Figure 3: State Transition in One Episode.
0.1 0.3 0.5 0.7 0.9
/glyph1197ormalized CPC0.00.20.40.60.81.01.2Exceeding Ratio (%)CPC
0.9
0.7
0.5
0.3
0.1
1000120014001600180020002200
Return
Return
(a) IQL
0.1 0.3 0.5 0.7 0.9
/glyph1197ormalized CPC0.00.20.40.60.81.01.2Exceeding Ratio (%)CPC
0.9
0.7
0.5
0.3
0.1
10001200140016001800200022002400
Return
Return (b) DiffBid
Figure 4: Performance under CPC constraint.
0.0 0.2 0.4 0.6 0.8 1.00.02.55.07.510.012.515.017.5DensityLow
High
True
(a) Smoothness
0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35024681012DensityLow
High
True (b) Early Spend
Figure 5: Performance of Human Feedback.
6.4.2 Performance under Constraints and Feedbacks. We
additionally investigate DiffBid‚Äôs multi-objective optimization ca-
pability under specific constraints, comparing its performance with
Offline RL. Specifically, we choose CPC ratio and overall return as
metrics and examine the ability of DiffBid and IQL to control the
overall CPC exceeding ratio while maximizing the overall return.
During training, we set different thresholds of CPC as in Eq (14).
Then when testing, we make DiffBid generating trajectories un-
der the expected CPC. In Figure 4, we show the exceeding ratio
and overall return under different CPC constraints and training
settings. From the figure, we find that DiffBid has the ability to
control diverse levels of exceeding ratio while maintaining an in-
tact return, surpassing IQL by a significant margin. Consequently,
DiffBid holds a distinct advantage in effectively addressing MCB
problems. We also study the performance under different advertiser
5044KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Jiayan Guo et al.
10 20 30
K500600700750Return
Budget
1500
2000
2500
3000
(a) Impact of Diffusion Steps
CQL IQL DiffBid
Methods5001000150020002500Returns
 (b) Stability
Figure 6: In-depth Analysis.
Table 3: Online A/B Test Result.
Metrics #P
lan Budget Cost Buycnt GMV ROI
Baseline 2068
886744 834426.104 23584.6836 1853823 2.221
DiffBid 2068
886744 829992.384 24078.6883 1905954 2.296
compare -
- -0.53% +2.09% +2.81% +3.36%
feedbacks. During training we split the trajectories through thresh-
olds of Eq. (14) into high and low levels, and learn the conditional
distribution under different levels. During generation, we adjust the
condition and generate corresponding samples and summarize the
metrics. The results for the statistic distribution of metrics for low
level, high level and the original trajectories are shown in Figure 5.
We find that the trajectory obtained from deploying DiffBid is well
controlled by the condition.
6.4.3 Impact of Diffusion Steps. We also study the overall per-
formance under different diffusion steps, which is an important
factor in influencing the efficiency and performance. The overall im-
pact of diffusion steps with respect to different budgets is illustrated
in Figure 6. From the figure, we have the following discoveries. First
of all, we observe that diffusion steps have a larger impact on ad-
vertisers with small budgets (1500 yuan). Secondly, larger budgets
are not sensitive to the diffusion steps, where we can get the best
result in most situations within 30 diffusion steps.
6.4.4 Stability. In this study, we randomly initialized the parame-
ters of three models - CQL, IQL, and DiffBid - and conducted thirty
training trials for each to examine stability in performance. As de-
picted in Figure 3(b), the RL-based models, CQL and IQL, showed a
tendency towards instability under varying random seeds. Notably,
IQL demonstrated slightly better performance than CQL, which
may be attributed to its design optimized for conservative regu-
larization. Contrasting with these, the generative model DiffBid
exhibited remarkable stability, with significantly fewer instances
of failure compared to its RL counterparts.
6.5 Online A/B Test
To further substantiate the effectiveness of DiffBid, we have de-
ployed it on Alibaba advertising platform for comparison against
the baseline IQL [ 29] method, which performs best among various
auto-bidding methods. The online A/B test is conducted from Febru-
ary 01, 2024, to February 08, 2024. The results are shown in Table 3.
It shows that DiffBid can significantly improve the Buycnt by 2.09%,the GMV by 2.81%, the ROI by 3.36%, showing its effectiveness in
optimizing the overall performance. For efficiency, DiffBid takes
0.2s per request with GPU acceleration while the baseline is 0.07s,
which means latency can be well guaranteed.
7 RELATED WORKS
Offline-Reinforcement Learning. Offline reinforcement learn-
ing is a research direction that has gained significant attention in
recent years. The primary goal of offline RL is to learn effective
policies from a fixed dataset without additional online interaction
with the environment. This approach is particularly beneficial when
online interaction is costly, risky, or otherwise not feasible.Notable
works include Conservative Q-learning (CQL) by Kumar et al. [ 30],
and Batch-Constrained deep Q-learning (BCQ) by Fujimoto et al.
[14]. Both algorithms aim to tackle overestimation bias which tends
to occur in offline RL settings. Kostrikov et al. [ 29] propose an
implicit q-learning approach to address the training instability for
CQL. Chen et al. [ 9] propose to use transformers for offline RL to
increase the model capability. Hansen-Estruch et al. [ 19] proposes
a diffusion-based approach with implicit Q-learning for offline RL.
Diffusion Models. They recently have shown the capability of
high-quality generation [ 11], unconditional generation [ 3] and con-
ditional generation [ 7,25]. It has shown promising performance in
decision-making. Hansen-Estruch et al. [ 19] proposes a diffusion-
based approach with implicit q-learning for offline RL. Wang et
al. [45] propose a expressive policy though diffusion modeling.
Chen et al. [ 8] propose to use diffusion models for behavior mod-
eling. Hu et al. [ 24] introduce temporal conditions for trajectory
generation. Despite these preliminary explorations, no work has
been payed for diffusion based auto-bidding which requires the
model to adapt to the random advertising environment. Li et al. [ 32]
utilize diffusion model in anti-money laundering.
Auto-bidding. Auto-bidding systems are widely used in program-
matic advertising, where they are employed to automatically place
bids on ad spaces. The main focus of such systems is to optimise a
given key performance indicator (KPI), such as the number of clicks
or conversions, while maintaining a certain budget [ 44]. Cai et al. [ 6]
proposed an RL-based approach to the problem of auto-bidding
for display advertising. They designed a bidding environment and
applied a deep RL algorithm to learn the optimal bidding strategy.
He et al. [ 21] propose a unified solution with RL to enable multi-
ple constraints for auto-bidding. Jin et al. extend the RL to enable
multi-agent competition [ 27]. Zhang et al. [ 35] also adopted the
RL framework for auto-bidding and showed that their approach
can outperform traditional bidding strategies. Wen et al. [ 46] pro-
pose a multi-agent-based approach for auto-bidding, which enables
the modeling of multiple auto-bidding agents at the same time to
include more information and also has been deployed online.
8 CONCLUSION
In this paper, we design a new paradigm for auto-bidding through
the lens of generative modeling. To achieve this goal, we propose
a decision-denoising diffusion approach to generate conditional
bidding trajectories and at the same time control the generated
samples under certain constraints. This new generative modeling
approach enables integrating different kinds of industrial metrics,
5045Generative Auto-bidding via Conditional Diffusion Modeling KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
which is the first unified model for bidding. Extensive experiments
on real-world simulation environments demonstrate the effective-
ness of the newly proposed approach. In the future, we will consider
developing new methods to accelerate the generation process and
new methods to ensure the robustness of DiffBid.
REFERENCES
[1]Pulkit Agrawal, Ashvin V Nair, Pieter Abbeel, Jitendra Malik, and Sergey Levine.
2016. Learning to poke by poking: Experiential learning of intuitive physics.
Advances in neural information processing systems 29 (2016).
[2]Anurag Ajay, Yilun Du, Abhi Gupta, Joshua B Tenenbaum, Tommi S Jaakkola,
and Pulkit Agrawal. 2022. Is Conditional Generative Modeling all you need for
Decision Making?. In The Eleventh International Conference on Learning Represen-
tations.
[3]Jacob Austin, Daniel D Johnson, Jonathan Ho, Daniel Tarlow, and Rianne Van
Den Berg. 2021. Structured denoising diffusion models in discrete state-spaces.
Advances in Neural Information Processing Systems 34 (2021), 17981‚Äì17993.
[4]Santiago Balseiro, Yuan Deng, Jieming Mao, Vahab Mirrokni, and Song Zuo. 2021.
Robust auction design in the auto-bidding world. Advances in Neural Information
Processing Systems 34 (2021), 17777‚Äì17788.
[5]Santiago R Balseiro, Yuan Deng, Jieming Mao, Vahab S Mirrokni, and Song Zuo.
2021. The landscape of auto-bidding auctions: Value versus utility maximization.
InProceedings of the 22nd ACM Conference on Economics and Computation. 132‚Äì
133.
[6]Han Cai, Kan Ren, Weinan Zhang, Kleanthis Malialis, Jun Wang, Yong Yu, and
Defeng Guo. 2017. Real-time bidding by reinforcement learning in display adver-
tising. In Proceedings of the tenth ACM international conference on web search and
data mining. 661‚Äì670.
[7]Chen-Hao Chao, Wei-Fang Sun, Bo-Wun Cheng, Yi-Chen Lo, Chia-Che Chang,
Yu-Lun Liu, Yu-Lin Chang, Chia-Ping Chen, and Chun-Yi Lee. 2022. Denoising
likelihood score matching for conditional score-based data generation. arXiv
preprint arXiv:2203.14206 (2022).
[8]Huayu Chen, Cheng Lu, Chengyang Ying, Hang Su, and Jun Zhu. 2022. Offline
reinforcement learning via high-fidelity generative behavior modeling. arXiv
preprint arXiv:2209.14548 (2022).
[9]Lili Chen, Kevin Lu, Aravind Rajeswaran, Kimin Lee, Aditya Grover, Misha Laskin,
Pieter Abbeel, Aravind Srinivas, and Igor Mordatch. 2021. Decision transformer:
Reinforcement learning via sequence modeling. Advances in neural information
processing systems 34 (2021), 15084‚Äì15097.
[10] Harry L Chiesi, George J Spilich, and James F Voss. 1979. Acquisition of domain-
related information in relation to high and low domain knowledge. Journal of
verbal learning and verbal behavior 18, 3 (1979), 257‚Äì273.
[11] Florinel-Alin Croitoru, Vlad Hondru, Radu Tudor Ionescu, and Mubarak Shah.
2023. Diffusion models in vision: A survey. IEEE Transactions on Pattern Analysis
and Machine Intelligence (2023).
[12] Yuan Deng, Jieming Mao, Vahab Mirrokni, and Song Zuo. 2021. Towards efficient
auctions in an auto-bidding world. In Proceedings of the Web Conference 2021.
3965‚Äì3973.
[13] David S Evans. 2009. The online advertising industry: Economics, evolution, and
privacy. Journal of economic perspectives 23, 3 (2009), 37‚Äì60.
[14] Scott Fujimoto, David Meger, and Doina Precup. 2019. Off-policy deep rein-
forcement learning without exploration. In International conference on machine
learning. PMLR, 2052‚Äì2062.
[15] Scott Fujimoto, David Meger, Doina Precup, Ofir Nachum, and Shixiang Shane
Gu. 2022. Why Should I Trust You, Bellman? The Bellman Error is a Poor
Replacement for Value Error. In Proceedings of the 39th International Conference on
Machine Learning (Proceedings of Machine Learning Research, Vol. 162), Kamalika
Chaudhuri, Stefanie Jegelka, Le Song, Csaba Szepesvari, Gang Niu, and Sivan
Sabato (Eds.). PMLR, 6918‚Äì6943. https://proceedings.mlr.press/v162/fujimoto22a.
html
[16] Maor Gaon and Ronen Brafman. 2020. Reinforcement learning with non-
markovian rewards. In Proceedings of the AAAI conference on artificial intelligence,
Vol. 34. 3980‚Äì3987.
[17] Jiayan Guo, Yaming Yang, Xiangchen Song, Yuan Zhang, Yujing Wang, Jing
Bai, and Yan Zhang. 2022. Learning Multi-granularity Consecutive User Intent
Unit for Session-based Recommendation. In Proceedings of the Fifteenth ACM
International Conference on Web Search and Data Mining (Virtual Event, AZ, USA)
(WSDM ‚Äô22). Association for Computing Machinery, New York, NY, USA, 343‚Äì352.
https://doi.org/10.1145/3488560.3498524
[18] Louisa Ha. 2008. Online advertising research in advertising journals: A review.
Journal of Current Issues & Research in Advertising 30, 1 (2008), 31‚Äì48.
[19] Philippe Hansen-Estruch, Ilya Kostrikov, Michael Janner, Jakub Grudzien Kuba,
and Sergey Levine. 2023. Idql: Implicit q-learning as an actor-critic method with
diffusion policies. arXiv preprint arXiv:2304.10573 (2023).
[20] Xiaotian Hao, Zhaoqing Peng, Yi Ma, Guan Wang, Junqi Jin, Jianye Hao, Shan
Chen, Rongquan Bai, Mingzhou Xie, Miao Xu, Zhenzhe Zheng, Chuan Yu, HanLi, Jian Xu, and Kun Gai. 2020. Dynamic Knapsack Optimization Towards Ef-
ficient Multi-Channel Sequential Advertising. In Proceedings of the 37th Inter-
national Conference on Machine Learning, ICML 2020, 13-18 July 2020, Virtual
Event (Proceedings of Machine Learning Research, Vol. 119). PMLR, 4060‚Äì4070.
http://proceedings.mlr.press/v119/hao20b.html
[21] Yue He, Xiujun Chen, Di Wu, Junwei Pan, Qing Tan, Chuan Yu, Jian Xu, and
Xiaoqiang Zhu. 2021. A unified solution to constrained bidding in online display
advertising. In Proceedings of the 27th ACM SIGKDD Conference on Knowledge
Discovery & Data Mining. 2993‚Äì3001.
[22] Jonathan Ho, Ajay Jain, and Pieter Abbeel. 2020. Denoising diffusion probabilistic
models. Advances in neural information processing systems 33 (2020), 6840‚Äì6851.
[23] Jonathan Ho and Tim Salimans. 2021. Classifier-Free Diffusion Guidance. In
NeurIPS 2021 Workshop on Deep Generative Models and Downstream Applications.
[24] Jifeng Hu, Yanchao Sun, Sili Huang, SiYuan Guo, Hechang Chen, Li Shen, Lichao
Sun, Yi Chang, and Dacheng Tao. 2023. Instructed Diffuser with Temporal Condi-
tion Guidance for Offline Reinforcement Learning. arXiv preprint arXiv:2306.04875
(2023).
[25] R Huang, MWY Lam, J Wang, D Su, D Yu, Y Ren, and Z Zhao. 2022. FastDiff: A
Fast Conditional Diffusion Model for High-Quality Speech Synthesis. In IJCAI
International Joint Conference on Artificial Intelligence. IJCAI: International Joint
Conferences on Artificial Intelligence Organization, 4157‚Äì4163.
[26] Edwin T Jaynes. 1957. Information theory and statistical mechanics. Physical
review 106, 4 (1957), 620.
[27] Junqi Jin, Chengru Song, Han Li, Kun Gai, Jun Wang, and Weinan Zhang. 2018.
Real-time bidding with multi-agent reinforcement learning in display advertis-
ing. In Proceedings of the 27th ACM international conference on information and
knowledge management. 2193‚Äì2201.
[28] Durk P Kingma, Tim Salimans, and Max Welling. 2015. Variational dropout and
the local reparameterization trick. Advances in neural information processing
systems 28 (2015).
[29] Ilya Kostrikov, Ashvin Nair, and Sergey Levine. 2021. Offline Reinforcement
Learning with Implicit Q-Learning. In International Conference on Learning Rep-
resentations.
[30] Aviral Kumar, Aurick Zhou, George Tucker, and Sergey Levine. 2020. Conserva-
tive q-learning for offline reinforcement learning. Advances in Neural Information
Processing Systems 33 (2020), 1179‚Äì1191.
[31] Juncheng Li and Pingzhong Tang. 2022. Auto-bidding Equilibrium in ROI-
Constrained Online Advertising Markets. arXiv preprint arXiv:2210.06107 (2022).
[32] Xujia Li, Yuan Li, Xueying Mo, Hebing Xiao, Yanyan Shen, and Lei Chen. 2023.
Diga: Guided diffusion model for graph recovery in anti-money laundering. In
Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and
Data Mining. 4404‚Äì4413.
[33] Sultan Javed Majeed and Marcus Hutter. 2018. On Q-learning Convergence for
Non-Markov Decision Processes.. In IJCAI, Vol. 18. 2546‚Äì2552.
[34] Diganta Misra. 2019. Mish: A self regularized non-monotonic activation function.
arXiv preprint arXiv:1908.08681 (2019).
[35] Zhiyu Mou, Yusen Huo, Rongquan Bai, Mingzhou Xie, Chuan Yu, Jian Xu, and
Bo Zheng. 2022. Sustainable Online Reinforcement Learning for Auto-bidding.
Advances in Neural Information Processing Systems 35 (2022), 2651‚Äì2663.
[36] Mirco Mutti, Riccardo De Santi, and Marcello Restelli. 2022. The importance
of non-markovianity in maximum state entropy exploration. In International
Conference on Machine Learning. PMLR, 16223‚Äì16239.
[37] Duy Nguyen-Tuong, Jan Peters, Matthias Seeger, and Bernhard Sch√∂lkopf. 2008.
Learning inverse dynamics: a comparison. In European symposium on artificial
neural networks.
[38] Alexander Quinn Nichol and Prafulla Dhariwal. 2021. Improved denoising diffu-
sion probabilistic models. In International Conference on Machine Learning. PMLR,
8162‚Äì8171.
[39] Weitong Ou, Bo Chen, Yingxuan Yang, Xinyi Dai, Weiwen Liu, Weinan Zhang,
Ruiming Tang, and Yong Yu. 2023. Deep landscape forecasting in multi-slot real-
time bidding. In Proceedings of the 29th ACM SIGKDD Conference on Knowledge
Discovery and Data Mining. 4685‚Äì4695.
[40] Deepak Pathak, Parsa Mahmoudieh, Guanghao Luo, Pulkit Agrawal, Dian Chen,
Yide Shentu, Evan Shelhamer, Jitendra Malik, Alexei A Efros, and Trevor Darrell.
2018. Zero-shot visual imitation. In Proceedings of the IEEE conference on computer
vision and pattern recognition workshops. 2050‚Äì2053.
[41] Aoyang Qin, Feng Gao, Qing Li, Song-Chun Zhu, and Sirui Xie. 2023. Learning
non-Markovian Decision-Making from State-only Sequences. In Thirty-seventh
Conference on Neural Information Processing Systems.
[42] Olaf Ronneberger, Philipp Fischer, and Thomas Brox. 2015. U-net: Convolu-
tional networks for biomedical image segmentation. In Medical Image Computing
and Computer-Assisted Intervention‚ÄìMICCAI 2015: 18th International Conference,
Munich, Germany, October 5-9, 2015, Proceedings, Part III 18. Springer, 234‚Äì241.
[43] Pascal Vincent. 2011. A connection between score matching and denoising
autoencoders. Neural computation 23, 7 (2011), 1661‚Äì1674.
[44] Jun Wang, Weinan Zhang, Shuai Yuan, et al .2017. Display advertising with
real-time bidding (RTB) and behavioural targeting. Foundations and Trends¬Æ in
5046KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Jiayan Guo et al.
Information Retrieval 11, 4-5 (2017), 297‚Äì435.
[45] Zhendong Wang, Jonathan J Hunt, and Mingyuan Zhou. 2022. Diffusion Policies
as an Expressive Policy Class for Offline Reinforcement Learning. In The Eleventh
International Conference on Learning Representations.
[46] Chao Wen, Miao Xu, Zhilin Zhang, Zhenzhe Zheng, Yuhui Wang, Xiangyu Liu, Yu
Rong, Dong Xie, Xiaoyang Tan, Chuan Yu, et al .2022. A cooperative-competitive
multi-agent framework for auto-bidding in online advertising. In Proceedings
of the Fifteenth ACM International Conference on Web Search and Data Mining.
1129‚Äì1139.
[47] Yuxin Wu and Kaiming He. 2018. Group normalization. In Proceedings of the
European conference on computer vision (ECCV). 3‚Äì19.
[48] Haoqi Zhang, Lvyin Niu, Zhenzhe Zheng, Zhilin Zhang, Shan Gu, Fan Wu, Chuan
Yu, Jian Xu, Guihai Chen, and Bo Zheng. 2023. A Personalized Automated Bidding
Framework for Fairness-aware Online Advertising. In Proceedings of the 29th
ACM SIGKDD Conference on Knowledge Discovery and Data Mining. 5544‚Äì5553.
[49] Peiyan Zhang, Jiayan Guo, Chaozhuo Li, Yueqi Xie, Jae Boum Kim, Yan Zhang,
Xing Xie, Haohan Wang, and Sunghun Kim. 2023. Efficiently Leveraging Multi-
level User Intent for Session-based Recommendation via Atten-Mixer Network. In
Proceedings of the Sixteenth ACM International Conference on Web Search and Data
Mining (, Singapore, Singapore,) (WSDM ‚Äô23). Association for Computing Ma-
chinery, New York, NY, USA, 168‚Äì176. https://doi.org/10.1145/3539597.3570445
[50] Brian D. Ziebart. 2010. Modeling purposeful adaptive behavior with the principle of
maximum causal entropy . Ph. D. Dissertation. USA. Advisor(s) Bagnell, J. Andrew.
AAI3438449.
A APPENDIX
A.1 Notations
Table 4: Definition of Notations.
Symbol Definition
ùúè The trajectory index of a serving policy.
ùíô(ùúè)ùëò Sequence of states of trajectory ùúèin diffusion step ùëò.
ùíö(ùúè) Properties or conditions for ùúè.
ùëÖ Return of a trajectory.
ùê∏ Binary indicator variable.
ùêµ The budget of the advertiser.
ùê∂ùëñ Theùëñ‚Äôs constraint.
ùíêùëñ Whether the advertiser wins impression ùëñ.
ùíóùëñ The true value of the impression ùëñ.
ùíÉ‚àó
ùëñThe optimal bidding price for the impression ùëñ.
ùíîùë° The state at time period ùë°.
ÀÜùíÇùë° Predicted bidding parameters at time period ùë°.
ùúÜùëñ The bidding parameters.
ùùêùúÉ The denoising model that predict the noise.
ùëìùúô The model that generate bids.
ùõºùëò The cumulative product of 1‚àíùõΩùëó,ùëó=0,...,ùëò
ùõΩùëò Schedualing factors.
ùõºùëò 1-ùõΩùëò.
A.2 Diffusion Modeling
As a kind of generative model, diffusion models [ 22,43] use the
diffusion process to gradually denoise latent samples to generate
the new sample and have been widely used in generating pictures,
videos, and audio. One of the widely used diffusion models, denois-
ing diffusion probabilistic model (DDPM), consists of two processes:
Forward process. In the forward process, the noise is gradually
added to the latent variable, which is parameterized by a Markov
chain with the transition ùëû(ùíôùëò|ùíôùëò‚àí1)=N
ùë•ùëò;‚àöÔ∏Å
1‚àíùõΩùëòùíôùëò,ùõΩùëòùêº
,whereùëò‚àà{1,...ùêæ}refers to the diffusion step, and ùõΩùëò‚àà (0,1)
is a pre-defined scale that controls the noise scale at step ùëò. By
definingùõºùëò=√éùëò
ùëñ=1ùõºùëñ=√éùëò
ùëñ=1(1‚àíùõΩùëñ), we can have the conditional
distribution:
ùëû(ùë•ùëò|ùë•0)=N
ùë•ùëò;‚àöÔ∏Å
ùõºùëòùë•0,(1‚àíùõºùëò)ùêº
(16)
In this paper, we apply cosine noise schedule to control the noise
by:
ùõºùëò=ùëî(ùë°)
ùëî(0)=cosùëò/ùêæ+ùõæ
1+ùõæ¬∑ùúã
2
cosùõæ
1+ùõæ¬∑ùúã
2, (17)
whereùõæis a constant. When ùêæ‚Üí ‚àû ,ùëû(ùë•ùêæ)approaches to a
standard Gaussian distribution [ 22]. Given the original trajectory
ùë•0andùúñ‚àº N( 0,ùêº), we have the noisy version at ùëòbyùë•ùëò=‚àöÔ∏Å
ùõºùëòùë•0+ùúñ‚àöÔ∏Å
1‚àíùõºùëò
Reverse process. In the reverse process, diffusion models plan
to remove the added noise on ùë•ùëòand recursively recover ùë•ùëò‚àí1.
To achieve this goal, a Gaussian distribution parameterized by
ùëùùúÉ(ùíôùëò‚àí1|ùíôùëò)=N ùíôùëò‚àí1|ùùÅùúÉ(ùíôùëò,ùëò),ùö∫ùúÉ(ùíôùëò,ùëò)is learned, where
ùùÅùúÉ(ùíôùëò,ùëò)is the learned mean and ùö∫ùúÉ(ùíôùëò,ùëò)is the learned covari-
ance of the Gaussian distribution parameterized by a neural net-
work with parameter ùúÉ. For generating new samples, we can simply
use re-parameterization trick [ 28] to sample a noise ùíôùêæ‚àºùùÅùêæ+ùúñùúéùêæ
and recursively denoise the sample by ùëùùúÉ(ùíôùëò‚àí1|ùíôùëò)for generation.
Optimization. DDPM optimizes the Evidence Lower BOund (ELBO)
of generative models. In the context of the diffusion model, we can
take the latent samples as hidden variables and rewrite ELBO in
the following form:
Eùëû[‚àílogùëùùúÉ(ùíô0)]
‚â§Eùëû
‚àílogùëùùúÉ(ùíô0:ùêæ)
ùëû(ùíô1:ùêæ|ùíô0)
=Eùëû[ùê∑ùêæùêø(ùëû(ùíôùêæ|ùíô0)||ùëùùúÉ(ùíôùêæ))]‚àíEùëû[logùëùùúÉ(ùíô0|ùíô1)]
+Eùëû"‚àëÔ∏Å
ùë°>1ùê∑ùêæùêø(ùëû(ùíôùëò‚àí1|ùíôùëò,ùíô0)||ùëùùúÉ(ùíôùëò‚àí1|ùíôùëò))#
,(18)
where the first term has no learned variable given variance ùõΩùëòis
fixed to constants, thus can be ignored during training. The second
term is the reconstruction term where ùëùùúÉ(¬∑)is trained to recover the
original sample ùíô0from the noise sample ùíô1. The last term is the de-
noising term where ùëùùúÉ(¬∑)is trained to denoise ùíôùëòto get ùíôùëò‚àí1, thus
we can recurrently denoise the latent samples. In the original pa-
per [ 22] the author shows that the last term can be simplified to the
noise prediction objective Eùëò,ùíô 0,ùùêh
||ùùê‚àíùùêùúÉ‚àöÔ∏Å
ùõºùëòùíô0+‚àöÔ∏Å
1‚àíùõºùëòùùê,ùëò
||i
,
whereùõºùëò=√éùëò
ùëñ=1ùõºùëò=√éùëò
ùëñ=1(1‚àíùõΩùëò).
A.3 Model Configuration
We parameterize the noise model ùúñùúÉwith a temporal U-Net [ 42],
consisting of 3 repeated residual blocks. Each block is consisted of
two temporal convolutions, followed by group normalization [ 47],
and a final Mish activation function [ 34]. Timestamp and condition
embeddings, both 128-dimensional vectors, are produced by sep-
arate 2-layered MLP (with 256 hidden units and Mish activation
function) and are concatenated together before getting added to
5047Generative Auto-bidding via Conditional Diffusion Modeling KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
Threshold10
5
0510Odd-Even
Model
IQL
DFUSER
Condition
0
1
Figure 7: Ability of Action Control.
the activation functions of the first temporal convolution within
each block. ùëìùúôis parameterized with a 3-layer MLP.
A.4 Pseudo-code
The process of training and inference of DiffBid is shown in Algo-
rithm 2 and Algorithm 1 respectively.
Algorithm 1 Bid Generation with DiffBid.
Input: noise model ùúñùúÉ, inverse dynamics ùëìùúô, guidance scale ùúî,
condition ùíö, max diffusion step ùêæ, scalesùõΩùë°, ùë°=1,...,ùêæ .
Output: Bidding parameters ùíÇùë°
1:Get history of states ùíî0:ùë°;
2:Sample ùíôùêæ(ùúè)‚àºN( 0,ùõΩùêæùêº);
3:forùëò=ùêæ,..., 0do
4: ùíôùëò(ùúè)[:ùë°]‚Üêùíî0:ùë°
5: Estimating noise ÀÜùúñthrough Eq. (8)
6:(ùúáùëò‚àí1,Œ£ùëò‚àí1)‚ÜêDenoise(ùíôùëò(ùúè),ÀÜùúñùëò)
7: ùíôùëò‚àí1‚àºN(ùúáùëò‚àí1,ùõºŒ£ùëò‚àí1)
8:end for
9:Extract(ùíîùë°‚àíùêø:ùë°,ùíî‚Ä≤
ùë°+1)from ùíô0(ùúè)
10:Generate ÀÜùíÇùë°=ùëìùúô(ùíîùë°‚àíùêø:ùë°,ùíî‚Ä≤
ùë°+1);
11:return ÀÜùíÇùë°.
Algorithm 2 Training of DiffBid.
Input: randomly initialized ùúÉ,ùúô, bidding trajectory set D
Output: optimizedùúÉ,ùúô
1:while not converge do
2: Sample a batch of trajectories B‚ààD ;
3: for allùúè‚ààBdo
4: Sampleùëò‚àºUniform(1,ùêæ),ùúñ‚àºN( 0,ùêº);
5: Compute ùíôùëò(ùúè)viaùëû(ùíôùëò(ùúè)|ùíô0(ùúè))in Eq (7);
6: ComputeL(ùúÉ,ùúô)by Eq (12);
7: Perform gradient descent to optimize ùúÉandùúô;
8: end for
9:end while
10:return optimizedùúÉ,ùúôA.5 Analytical Results for Action Control
We analyze the ability of different models in controlling actions.
To achieve this goal, we re-define the return function to be the
summation of actions in odd time steps minus the summation of
actions in even time steps. The results are shown in Figure 7. We find
DiffBid can better control the action than IQL. The main reason
is that controlling of actions is difficult for RL in long horizons.
Instead, DiffBid directly models the correlation of trajectories and
returns, thus can well handle the long trajectory situation.
A.6 Statistical Analyses for Bidding Trajectory
The study by [ 20] indicates that CE follows a power-law decline
as the number of winning impressions increases. Our statistical
analysis confirms that this finding holds true at every discrete time
step, with decay rates varying temporally due to the heterogeneous
nature of the impressions. Figure 8(a) shows three steps sampled
from the online advertising system, From which another key insight
is that the optimal bidding strategy‚Äôs ùëêùëí‚àóis equivalent to selecting
a specific number of winning impressions per time step. We denote
the number at time step ùë°asùëõùë°.
Another finding illustrated in Figure 8(b) is that the costs of
impressions remain relatively stable throughout the total episode,
fluctuating by less than 5%. This stability allows us to approximate
the cost of each impression ùëêùëñwith the average cost ¬Øùëê=1
ùëÅ√çùëÅ
ùëñ=0ùëêùëñ,
whereùëÅrepresents the number of winning impressions of the
total episode. Therefore, the total cost at each time step ùëêùë°=ùëõùë°¬∑
¬Øùëê. In auto-bidding modeling, ùëêùë°can be calculated from the state
trajectory by using the difference in the remaining budget between
two consecutive steps. Consequently, we can conclude that the
optimal strategy correlates to a specific state trajectory.
A.7 Theoretical Analysis
We first give the definition of several decision process and then
show the theoretical analysis.
Definition A.1 (Markovian Decision Process (MDP)). MDP
is a stochastic mapping from a state-action pair to state-reward pairs.
Formally,T:S√óA‚ÜíS√óR , whereTdenotes a stochastic mapping.
Definition A.2 (History-based Decision Process (HDP)). HDP
is a stochastic mapping from a history-action pair to observation-
reward pairs. Formally, P:H‚àó√óA‚ÜíO√óR , wherePdenotes a
stochastic mapping.
We show that a sequential decision-making problem can be con-
structed to maximize the same objective. The main results are given
by [41] and we put the proofs here for completeness. To start, let
the ground-truth distribution of demonstrations be ùëù‚àó(ùíô0(ùúè))and
the learned marginal distributions of state sequences be ùëùùúÉ(ùíô0(ùúè)).
Then Eq. (4) is an empirical estimation of
Eùëù‚àó(ùíî0)
logùëù‚àó(ùíî0)+Eùëù‚àó(ùíî1:ùëá|ùíî0)[logùëùùúÉ(ùíî1:ùëá|ùíî0)]
(19)
Suppose the MLE yields the maximum, we will have ùëù‚àó
ùúÉ=ùëù‚àó. Then
we defineùëâ‚àó(ùë†0):=Eùëù‚àó(ùë†1:ùëá|ùë†0)[logùëù‚àó(ùë†1:ùëá|ùë†0)], and generalize it
to have aùëâfunction:
ùëâ‚àó(ùë†0:ùë°)=Eùëù‚àó(ùë†ùë°+1:ùëá|ùë†0:ùë°)[logùëù‚àó(ùë†ùë°+1:ùëá|ùë†0:ùë°)] (20)
which comes with a Bellman optimal equation:
ùëâ‚àó(ùë†0:ùë°):=Eùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)[ùëü(ùë†ùë°+1,ùë†0:ùë°)+ùëâ‚àó(ùë†0:ùë°+1)] (21)
5048KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Jiayan Guo et al.
Table 5: Parameters of the Real Advertising System.
Parameters V
alues
Numb
er of advertisers 30
Time
steps in an episode, ùëá 96
Minimum
number of impression opportunities ùëÅmin 50
Maximum
number of impression opportunities ùëÅmax 300
Minimum
budget 1000
Yuan
Maximum budget 4000
Yuan
Value of impression opportunities in stage 1, ùë£1
ùëó,ùë°0‚àº1
V
alue of impression opportunities in stage 2, ùë£2
ùëó,ùë°0‚àº1
Minimum
bid price,ùê¥min 0
Yuan
Maximum bid price, ùê¥max 1000
Yuan
Maximum value of impression opportunity, ùë£ùëÄ 1
Maximum
market price, ùëùùëÄ 1000
Yuan
(a) Cost Effectiveness Curve Samples from
Three Steps
(
b) Impression Cost Fluctuation at Differ-
ent Time Steps
Figure 8: Statistical Results From Online Advertising System.
withùëü(ùë†ùë°+1,ùë†0:ùë°):=logùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)=logùëù‚àóùëé(ùë†ùë°|ùë†0:ùë°)ùëù‚àó(ùë†ùë°+1|ùë†ùë°,ùëéùë°)ùëëùë°,
ùëâ‚àó(ùë†0:ùëá):=0. It is worth noting that the ùëüdefined above involves
the optimal policy, which may not be known a priori. We can re-
solve this by replacing it with ùëüùõºfor an arbitrary policy ùëùùõº(ùëéùë°|ùë†0:ùë°).
All Bellman identities and updates should still hold. The entailed
Bellman update, value iteration, for arbitrary ùëâandùõºis
ùëâ(ùë†0:ùë°)=Eùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)[ùëüùõº(ùë†0:ùë°,ùë†ùë°+1)+ùëâ(ùë†0:ùë°+1)]. (22)
We then define ùëü(ùë†ùë°+1,ùëéùë°,ùë†0:ùë°):=ùëü(ùë†ùë°+1,ùë†0:ùë°)+logùëù‚àóùëé(ùëéùë°|ùë†0:ùë°)to
construct aùëÑfunction:
ùëÑ‚àó(ùëéùë°;ùë†0:ùë°):=Eùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)[ùëü(ùë†ùë°+1,ùëéùë°,ùë†0:ùë°)+ùëâ‚àó(ùë†0:ùë°+1)],(23)
which entails a Bellman update, Q backup, for arbitrary ùõº,ùëÑandùëâ
ùëÑ(ùëéùë°;ùë†0:ùë°)=Eùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)[ùëüùõº(ùë†0:ùë°,ùëéùë°,ùë†ùë°+1)+ùëâ(ùë†0:ùë°+1)].(24)
Also note that the ùëâandùëÑin identities Eq. (23) and Eq. (25) re-
spectively are not necessarily associated with the policy ùëùùõº(ùëéùë°|ùë†0:ùë°).
Slightly overloading the notations, we use ùëÑùõº,ùëâùõºto denote the
expected returns from policy ùëùùõº(ùëéùë°|ùë†0:ùë°). By now, we finish the con-
struction of atomic algebraic components and move on to check if
the relations between them align with the algebraic structure of a se-
quential decision-making problem. We first prove the construction
above is valid at optimality.
Lemma A.1. Whenùëìùõº(ùëéùë°;ùë†0:ùë°)=ùëÑ‚àó(ùëéùë°;ùë†0:ùë°)‚àíùëâ‚àó(ùë†0:ùë°),ùëùùõº(ùëéùë°|ùë†0:ùë°)
is the optimal policy.Proof. Note that the construction gives us
ùëÑ‚àó(ùëéùë°;ùë†0:ùë°)
=Eùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)
ùëü(ùë†ùë°+1,ùë†0:ùë°)+logùëù‚àó
ùõº(ùëéùë°|ùë†0:ùë°)+ùëâ‚àó(ùë†0:ùë°+1)
=logùëù‚àó
ùõº(ùëéùë°|ùë†0:ùë°)+Eùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)
ùëü(ùë†ùë°+1,ùë†0:ùë°)+ùëâ‚àó(ùë†0:ùë°+1)
=logùëù‚àó
ùõº(ùëéùë°|ùë†0:ùë°)+ùëâ‚àó(ùë†0:ùë°)(25)
‚ñ°
Obviously,ùëÑ‚àó(ùëéùë°;ùë†0:ùë°)lies in the hypothesis space of ùëìùõº(ùëéùë°;ùë†0:ùë°).
It indicates that we need to either parameterize ùëìùõº(ùëéùë°;ùë†0:ùë°)orùëÑ(ùëéùë°;ùë†0:ùë°).
WhileùëÑùõºandùëâùõºare constructed from the optimality, the derived
ùëÑùõºandùëâùõºmeasure the performance of an interactive agent when
it executes with the policy ùëùùõº(ùëéùë°|ùë†0:ùë°). They should be consistent.
Lemma A.2. ùëâùõº(ùë†0:ùë°)andEùëùùõº(ùëéùë°|ùë†0:ùë°)[ùëÑùõº(ùëéùë°;ùë†0:ùë°)]yield the same
optimal policy ùëù‚àóùõº(ùëéùë°|ùë†0:ùë°)
Proof.
Eùëùùõº(ùëéùë°|ùë†0:ùë°)[ùëÑùõº(ùëéùë°;ùë†0:ùë°)]
:=Eùëùùõº(ùëéùë°|ùë†0:ùë°)
Eùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)[ùëü(ùë†ùë°+1,ùëéùë°,ùë†0:ùë°)+ùëâùõº(ùë†0:ùë°+1)]
=Eùëùùõº(ùëéùë°|ùë†0:ùë°)Eùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)
logùëù‚àó
ùõº(ùëéùë°|ùë†0:ùë°)+ùëü(ùë†ùë°+1,ùë†0:ùë°)+ùëâùõº(ùë†0:ùë°+1)
=Eùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)[ùëü(ùë†ùë°+1,ùë†0:ùë°)‚àíùêªùõº(ùëéùë°|ùë†0:ùë°)+ùëâùõº(ùë†0:ùë°+1)]
‚àíùëá‚àí1‚àëÔ∏Å
ùëò=ùë°+1Eùëù‚àó(ùë†ùë°+1:ùëò|ùë†0:ùë°)[ùêªùõº(ùëéùëò|ùë†0:ùëò)]
whereH(¬∑) is the entropy term. The last line is derived by recur-
sively applying the Bellman equation in the line above until ùë†0:ùëá.
As an energy-based policy, ùëùùõº(ùëéùë°|ùë†0:ùë°)‚Äôs entropy is inherently max-
imized [ 26]. Therefore, within the hypothesis space, ùëù‚àóùõº(ùëéùë°|ùë†0:ùë°)
that optimizes ùëâùõº(ùë†0:ùë°)also leads to the optimal expected return
Eùëùùõº(ùëéùë°|ùë†0:ùë°)[ùëÑùõº(ùëéùë°;ùë†0:ùë°)]. ‚ñ°
Given the convergence proof by Ziebart [50], we have:
Lemma A.3. Ifùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)is accessible and ùëù‚àóùõæ(ùë†ùë°+1|ùë†ùë°,ùëéùë°)is
known, soft policy iteration and soft ùëÑlearning both converge to
ùëù‚àóùõº(ùëéùë°|ùë†0:ùë°)=ùëù‚àóùõº(ùëéùë°|ùë†0:ùë°)‚àùexp(ùëÑ‚àó(ùëéùë°;ùë†0:ùë°))under conditions.
Lemma 3 means given ùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)andùëù‚àóùõæ(ùë†ùë°+1|ùë†ùë°,ùëéùë°), we can
recoverùëù‚àóùõºthrough reinforcement learning methods, instead of
the proposed MLE. So ùëùùõº(ùëéùë°|ùë†0:ùë°)is a viable policy space for the
constructed sequential decision-making problem. Together, Lemma
A.1, Lemma A.2 and Lemma A.3 provide proof for a valid sequential
decision-making problem that maximizes the same objective of
MLE, by Lemma A.4.
Lemma A.4 (MLE as non-Markovian decision-making pro-
cess). Assuming the Markovian transition ùëùùõæ‚àó(ùë†ùë°+1|ùë†ùë°,ùëéùë°)is known,
the ground-truth conditional state distribution ùëù‚àó(ùë†ùë°+1|ùë†0:ùë°)for demon-
stration sequences is accessible, we can construct a non-Markovian
sequential decision-making problem, based on a reward function
ùëüùõº(ùë†ùë°+1,ùë†0:ùë°):=log‚à´
ùëùùõº(ùëéùë°|ùë†0:ùë°)ùëùùõæ‚àó(ùë†ùë°+1|ùë†ùë°,ùëéùë°)ùëëùëéùë°for an arbitrary
energy-based policy ùëùùõº(ùëéùë°|ùë†0:ùë°). Its objective is
ùëá‚àëÔ∏Å
ùë°=0Eùëù‚àó(ùë†0:ùë°)
ùëâùëùùõº(ùë†0:ùë°)
=Eùëù‚àó(ùë†0:ùëá)"ùëá‚àëÔ∏Å
ùë°=0ùëá‚àëÔ∏Å
ùëò=ùë°ùëüùõº(ùë†ùëò+1;ùë†0:ùëò)#
(26)
ùëâùëùùõº(ùë†0:ùë°):=Eùëù‚àó(ùë†ùë°+1:ùëá|ùë†0:ùë°)[√çùëá
ùëò=1ùëüùõº(ùë†ùëò+1;ùë†0:ùëò)]is the value func-
tion ofùëùùõº. This objective yields the save optimal policy as the Maxi-
mum Likelihood Estimation Eùëù‚àó(ùë†0:ùëá)[logùëùùúÉ(ùë†0:ùëá)].
5049