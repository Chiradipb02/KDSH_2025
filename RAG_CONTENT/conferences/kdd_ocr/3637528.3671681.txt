ITPNet: Towards Instantaneous Trajectory Prediction for
Autonomous Driving
Rongqing Li
Beijing Institute of Technology
Beijing, China
lirongqing99@gmail.comChangsheng Li∗
Beijing Institute of Technology
Beijing, China
lcs@bit.edu.cnYuhang Li
Beijing Institute of Technology
Beijing, China
596983629@qq.com
Hanjie Li
Beijing Institute of Technology
Beijing, China
lihanjieyouxiang@sina.comYi Chen
Beijing Institute of Technology
Beijing, China
2812232328@qq.comYe Yuan
Beijing Institute of Technology
Beijing, China
yuan-ye@bit.edu.cn
Guoren Wang
Beijing Institute of Technology
Beijing, China
wanggrbit@126.com
Abstract
Trajectory prediction of moving traffic agents is crucial for the
safety of autonomous vehicles, whereas previous approaches usu-
ally rely on sufficiently long-observed trajectory (e.g., 2 seconds)
to predict the future trajectory of the agents. However, in many
real-world scenarios, it is not realistic to collect adequate observed
locations for moving agents, leading to the collapse of most predic-
tion models. For instance, when a moving car suddenly appears and
is very close to an autonomous vehicle because of the obstruction,
it is quite necessary for the autonomous vehicle to quickly and
accurately predict the future trajectories of the car with limited
observed trajectory locations. In light of this, we focus on inves-
tigating the task of instantaneous trajectory prediction, i.e., two
observed locations are available during inference. To this end, we
put forward a general and plug-and-play instantaneous trajectory
prediction approach, called ITPNet. Specifically, we propose a back-
ward forecasting mechanism to reversely predict the latent feature
representations of unobserved historical trajectories of the agent
based on its two observed locations and then leverage them as
complementary information for future trajectory prediction. Mean-
while, due to the inevitable existence of noise and redundancy in
the predicted latent feature representations, we further devise a
Noise Redundancy Reduction Former (NRRFormer) module, which
aims to filter out noise and redundancy from unobserved trajecto-
ries and integrate the filtered features and observed features into a
compact query representation for future trajectory predictions. In
∗Corresponding author
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ’24, August 25–29, 2024, Barcelona, Spain
©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671681essence, ITPNet can be naturally compatible with existing trajec-
tory prediction models, enabling them to gracefully handle the case
of instantaneous trajectory prediction. Extensive experiments on
the Argoverse and nuScenes datasets demonstrate ITPNet outper-
forms the baselines by a large margin and shows its efficacy with
different trajectory prediction models.
CCS Concepts
•Applied computing →Forecasting; •Computing method-
ologies→Machine learning; Spatial and physical reasoning.
Keywords
Instantaneous Trajectory Prediction;Backward Forecasting;Noise
and Redundancy Reduction
ACM Reference Format:
Rongqing Li, Changsheng Li, Yuhang Li, Hanjie Li, Yi Chen, Ye Yuan,
and Guoren Wang. 2024. ITPNet: Towards Instantaneous Trajectory Pre-
diction for Autonomous Driving. In Proceedings of the 30th ACM SIGKDD
Conference on Knowledge Discovery and Data Mining (KDD ’24), August
25–29, 2024, Barcelona, Spain. ACM, New York, NY, USA, 12 pages. https:
//doi.org/10.1145/3637528.3671681
1 Introduction
Predicting the future trajectories of dynamic traffic agents is a
critical task for autonomous driving, which can be beneficial to the
downstream planning module of autonomous vehicles. In recent
years, many trajectory prediction methods have been proposed in
computer vision and machine learning communities [ 11,19,34,39,
45,47,48,52,54]. Among these methods, they usually need to collect
sufficiently long observed trajectories (typically, 2 to 3 seconds)
of an agent, in order to accurately predict its future trajectories.
Recent advances have shown promising performance in trajectory
prediction by learning from these adequate observations.
However,in real-world self-driving scenarios, it is often difficult
to accurately predict trajectories due to the limited availability of
observed locations. For instance, due to the obstruction, a moving
 
1643
KDD ’24, August 25–29, 2024, Barcelona, Spain Rongqing Li et al.
train : 20
 test : 20train : 2
 test : 2train : 20
 test : 20.00.51.01.52.02.53.03.54.0
minADE@6
minFDE@6
(a)
ErrorRedundancyUnobservedPredictionUnobservedGTObservedFutureGTFuturePrediction (b)
Figure 1: (a) Results of HiVT [ 53] in terms of minADE@6 and minFDE@6 on the validation set of Argoverse [ 10] with different
observed locations as inputs during training and testing. The value in the horizontal axis denotes the number of observed
locations. (b) Future predictions (shown in green) when utilizing different lengths of predicted unobserved trajectory locations.
The observed trajectories are shown in orange, the predicted unobserved trajectories are shown in brown, the ground-truth
unobserved trajectories are shown in blue, and the ground-truth future trajectories are shown in red.
car might suddenly appear and be very close to the autonomous
vehicle. At this moment, the autonomous vehicle does not have
enough time to collect adequate observed locations of the car to
accurately predict the vehicle’s future trajectories. Such a case will
cause the collapse of the aforementioned prediction models due to
the lack of information. To verify this point, we perform a typical
trajectory prediction method, HiVT [ 53], with different settings
on the Argoverse dataset [ 10]. As shown in the left part of Figure
1(a), if we use 20 observed locations as the inputs of the prediction
model during both training and test phases as in [ 53], the prediction
results are 0.698 and 1.053 in terms of minADE@6 and minFDE@6,
respectively. However, if we set only 2 observed locations as the
inputs of the model during testing, the model will degrade sharply,
no matter if the number of observed locations is 2 or 20 during the
training phase. Thus, it is essential to study the trajectory prediction
task, when observed locations are very limited.
In light of this, we focus on studying the task of instantaneously
predicting future trajectories of moving agents, under the assump-
tion of only 2 trajectory locations available. Recently, The work in
[43] proposes a trajectory prediction method based on momentary
observations. However, this method mainly focuses on the trajec-
tory prediction of pedestrians, which has not been explored for
other moving agents. In addition, the input of their model is the
RGB image which usually contains abundant context and seman-
tic information. Thus, it is much easier for the model to predict
future trajectories using RGB images, compared to only several
discrete trajectory locations. Moreover, [ 36] design a knowledge
distillation mechanism based on limited observed locations and
achieves promising results. Since the method needs to pre-train
a teacher model, and learns a student model distilling knowledge
from the teacher model, which largely increases the computational
complexities.
To this end, we propose a general and principled approach, called
ITPNet, for instantaneous trajectory prediction by only two ob-
served trajectory locations. Specifically, ITPNet aims to train a
predictor to backwardly predict the latent feature representations
of unobserved historical trajectory locations of the agent based onits two observed trajectory locations. The additional information
contained in the predicted unobserved trajectory features assists
observed trajectory features in better predicting future trajectories.
Nevertheless, we find that as we increase the number of backwardly
predicted unobserved trajectory locations, the model’s performance
initially improves but subsequently deteriorates (This is verified
in Table 3 of Experiment section). We analyze two primary factors
that impede the utilization of more unobserved trajectory features:
One is the noise brought by inaccurate prediction of the unobserved
trajectory features. The other is a negative impact on the trajectory
prediction due to the intrinsic redundant information. Let’s con-
sider a scenario where a vehicle travels straightly for a while and
then suddenly executes a turn. In such a case, a longer historical
trajectory may erroneously boost the model’s confidence in the
vehicle continuing straight in the future, as depicted in the upper
portion of Figure 1(b). Conversely, a shorter unobserved histori-
cal trajectory with less redundancy tends to yield more accurate
predictions because it maintains lower confidence in the vehicle’s
persistence in a straight trajectory and, instead, maintains higher
confidence in the vehicle’s persistence in a turning trajectory, as
shown in the lower portion of Figure 1(b). Thus, how to remove
noisy and redundant information from the predicted features of
the unobserved trajectories becomes the key to success in instanta-
neous trajectory prediction.
In view of this, we devise a Noise Redundancy Reduction For-
mer (NRRFormer) module and integrate it into our framework.
NRRFormer can filter out noise and redundancy from a sequence
of predicted unobserved latent features, and effectively fuse the
filtered unobserved latent features with the observed features by a
compact query embedding to acquire the most useful information
for future trajectory prediction. It is worth noting that our ITPNet
is actually plug-and-play, and is compatible with existing trajectory
prediction models, making them the kinds that can gracefully deal
with the instantaneous trajectory prediction problem.
Our main contributions are summarized as: 1) We design a back-
ward forecasting mechanism to reconstruct unobserved historical
 
1644ITPNet: Towards Instantaneous Trajectory Prediction for Autonomous Driving KDD ’24, August 25–29, 2024, Barcelona, Spain
trajectory information for instantaneous trajectory prediction, mit-
igating the issue of lack of information due to only two observed
locations. 2) We devise a Noise Redundancy Reduction Former (NR-
RFormer), which can remove noise and redundancy among the
predicted unobserved features to further improve the prediction
performance. 3) We perform extensive experiments on two widely
used benchmark datasets, and demonstrate ITPNet can outperform
baselines in a large margin. Moreover, we show the efficacy of
ITPNet, combined with different trajectory prediction models.
2 Related Works
2.1 Trajectory Prediction with Sufficient
Observation
In recent years, many trajectory prediction approaches have been
proposed [ 3,4,8,12,13,15,16,31,44]. In the early stage of tra-
jectory prediction, studies such as [ 1,20] usually rely solely on
observation points and adopt simple social pooling methods to cap-
ture interactions between agents. To capture the map information,
including occupancy or semantic information, [ 6,35,40] propose
to use Convolutional Neural Networks (CNN) to encode map im-
ages. In addition, [ 14,28] incorporate the information of lanes and
traffic lights on the map in the form of vectors. Recently, numer-
ous methods have been proposed to fully exploit the interaction
information between nearby agents, including implicit modeling
by graph neural networks [ 8,9,27,42] and attention mechanisms
[26,30,37,38], and explicit modeling [ 44]. To handle the uncer-
tainty of road agents, researchers propose to generate multi-modal
trajectories using various approaches, including GAN-based meth-
ods [ 20,23,41], VAE-based methods [ 24,25], flow-based methods
[29,50], and diffusion models [ 19,22,33]. Among them, one typi-
cal approach is to establish a mapping between future trajectories
and latent variables, producing multiple plausible trajectories by
sampling the latent variable. In addition, goal-based methods have
become popular recently [ 2,18,32,46,49,51], which first gener-
ates multi-modal goals by sampling [ 51] or learning [ 46], and then
predict future trajectories conditioned on the goals.
Although these methods have shown promising performance in
trajectory prediction, they usually learn depending on sufficiently
long-observed locations. As aforementioned, these methods de-
grade severely or even collapse when the number of observed loca-
tions is limited. Different from these works, we attempt to address
the task of instantaneously predicting the future trajectories of mov-
ing agents, under the condition that only two trajectory locations
are observable.
2.2 Trajectory Prediction with Instantaneous
Observation
Predicting the future trajectories of a moving agent by its limited
observed locations remains a challenging problem. Recently, [ 43]
proposes an approach to integrate the velocity of agents, social and
scene contexts information, and designs a momentary observation
feature Extractor (MOE) for pedestrian trajectory prediction. The
input of MOE contains image frames from videos which usually
contain abundant semantic information. Thus, it is much easier
to predict future trajectories using image frames than that usingseveral discrete trajectory points. Moreover, since this method is
mainly designed for predicting trajectories for pedestrians, what
is the performance on other moving agents, e.g., cars, is worth
to be further verified. [ 36] proposes a knowledge distillation ap-
proach using few observations as input, with the goal of lowering
the influence of noise introduced by the machine perception side
(i.e., incorrect detection and tracking). As we know, knowledge
distillation-based approaches generally need to pre-train a teacher
model, and then distill knowledge from the teacher model to help
the student model learn, which makes this kind of method compu-
tationally expensive. [ 5] designed a unified framework for tackling
multiple tasks including instantaneous pedestrian trajectory predic-
tion, where they constructed a universal singular space to share the
information between long and short trajectory points. Differently,
our focus lies on the task of instantaneous trajectory prediction,
achieved by predicting unobserved historical trajectories, without
using any information of long trajectory points.
3 Proposed Method
3.1 Problem Definition
We denote a sequence of observed trajectory locations for a tar-
get vehicle as X𝑜𝑏𝑠={𝑥1,𝑥2,...,𝑥𝑇}, where𝑥𝑖∈R2is the𝑖-th
location of the agent, and 𝑇represents the number of observed
historical locations. We set 𝑇=2for the most extreme case, align-
ing with the setting of MOE [ 43], which is the first work of in-
stantaneous trajectory prediction. Moreover, we also denote the
sequence of previous unobserved trajectory locations of the agent
asX𝑢𝑛𝑜𝑏𝑠={𝑥−𝑁+1,𝑥−𝑁+2,···,𝑥0}, where𝑁is the total number
of unobserved trajectory locations. The ground-truth future trajec-
tories are denoted as X𝑔𝑡={𝑥3,𝑥4,...,𝑥 2+𝑀}, where𝑀is the length
of ground-truth future trajectory. Our goal is to predict 𝐾plausi-
ble trajectories{bX𝑘}𝑘∈[0,𝐾−1]={(ˆ𝑥𝑘
3,ˆ𝑥𝑘
4,...,ˆ𝑥𝑘
2+𝑀)}𝑘∈[0,𝐾−1], as
in multi-model trajectory prediction methods [ 20,23,24]. In con-
trast to previous methods utilizing sufficient observed trajectory
locations (typically, 20 observed trajecotory locations on the Argo-
verse dataset [ 10]), we attempt to leverage merely 𝑇=2observed
locations X𝑜𝑏𝑠for instantaneous trajectory prediction. It is notewor-
thy that, in principle, our proposed method is capable of accepting
observed trajectory locations of arbitrary length 𝑇as input.
3.2 Overall Framework of ITPNet
Figure 2 illustrates an overview of our proposed framework. We
first feed the instantaneous observed trajectory locations X𝑜𝑏𝑠into
a backbone (e.g., HiVT [ 53]) to obtain the latent feature representa-
tions V𝑜𝑏𝑠={𝑣1,𝑣2}. Based on this representation V𝑜𝑏𝑠, we then
attempt to backwardly predict the latent feature representations
bV𝑢𝑛𝑜𝑏𝑠={ˆ𝑣−𝑁+1,ˆ𝑣−𝑁+2,...,ˆ𝑣0}of unobserved historical trajec-
tories X𝑢𝑛𝑜𝑏𝑠. Considering that the predicted unobserved feature
representations bV𝑢𝑛𝑜𝑏𝑠inevitably contain redundant and noisy in-
formation as mentioned above, we design a Noise Redundancy
Reduction Former (NRRFormer) module to filter out this informa-
tion from a predicted feature sequence. Subsequently, the filtered
features are combined with the observed features to generate a
compact query embedding Q. The query embedding Qis then sent
to the decoder for future trajectory predictions. Since the backbone
 
1645KDD ’24, August 25–29, 2024, Barcelona, Spain Rongqing Li et al.
𝒙𝟐
𝒙𝟎𝒙#𝑵%𝟏𝒙𝟏
Decoder𝒙#𝟏"𝒗𝟎"𝒗#𝑵%𝟏𝓛𝒓𝒆𝒄
Observationinput
Unobservedground-truth
Unobservedprediction
{#𝐗'}'∈[*,,-.]𝓛𝒄𝒕𝒔
...𝒗𝟎𝒗#𝑵%𝟏𝒗#𝟏
...
..."𝒗#𝟏
HD-map&Nearbyagents
Q
KVBackboneKVKV
OutKVKV𝐗𝒐𝒃𝒔
𝐗𝒖𝒏𝒐𝒃𝒔𝐕𝒖𝒏𝒐𝒃𝒔#𝐕𝒖𝒏𝒐𝒃𝒔𝒗𝟐𝒗𝟏
𝑸
...NoiseRedundancyReductionFormer(NRRFormer)......NRRBlockNRRBlockNRRBlock
Queryembedding𝑽𝒐𝒃𝒔BackwardForecast
Figure 2: Overview of our ITPNet framework. ITPNet mainly consists of two modules: 1) We propose a backward forecasting
mechanism that attempts to reconstruct the latent feature representations V𝑢𝑛𝑜𝑏𝑠of previous unobserved trajectory locations
X𝑢𝑛𝑜𝑏𝑠by the two observed trajectories locations X𝑜𝑏𝑠. 2) We devise a Noise Redundancy Reduction Former to filter out
noise and redundancy in the predicted latent feature representations ˆV𝑢𝑛𝑜𝑏𝑠, and both the resulting filtered features and the
observation features V𝑜𝑏𝑠are integrated into a compact query embedding Q. Finally, the query embedding is sent to the decoder
to instantaneously predict future trajectories {ˆX𝑘}.
in our framework is arbitrary, our method is plug-and-play, and
is compatible with existing trajectory prediction models, enabling
them to gracefully adapt to the scenario of instantaneous trajectory
prediction. In the following section, we will delve into a detailed
introduction of backward forecasting and the NRRFormer.
3.3 Backward Forecasting
When given only 2 observed locations X𝑜𝑏𝑠, one major issue we
face is the lack of information, making existing trajectory predic-
tion approaches degraded sharply. To alleviate this problem, we
propose to backwardly predict the latent feature representations of
previous unobserved trajectory locations, and then leverage them
as additional information for future trajectory prediction.
First, we can obtain the latent feature representations V𝑜𝑏𝑠of
the observed locations X𝑜𝑏𝑠via the backbone Φ:
V𝑜𝑏𝑠={𝑣1,𝑣2}=Φ(X𝑜𝑏𝑠;𝜙), (1)
where𝑣𝑖∈R𝑑is the latent feature representation of the 𝑖-th lo-
cation of the agent, and 𝑑is the dimension of the feature. The
backbone Φis parameterized by 𝜙, and can be an arbitrary trajec-
tory prediction model, e.g., HiVT [ 53] and LaneGCN [ 28] used in
this paper.
After that, we attempt to backwardly predict the latent feature
representations bV𝑢𝑛𝑜𝑏𝑠on the basis of V𝑜𝑏𝑠, addressing the issue
of the lack of information. To this end, we introduce two self-
supervised tasks: the first one is the reconstruction of the latent
feature representations, and the loss function is designed as:
L𝑟𝑒𝑐=J(V𝑢𝑛𝑜𝑏𝑠;bV𝑢𝑛𝑜𝑏𝑠), (2)where V𝑢𝑛𝑜𝑏𝑠=Φ(X𝑢𝑛𝑜𝑏𝑠;𝜙)is the ground-truth latent feature
representations of previous unobserved trajectory locations, and
can be taken as a self-supervised signal, and Jis a function to
measure the distance between V𝑢𝑛𝑜𝑏𝑠andbV𝑢𝑛𝑜𝑏𝑠.bV𝑢𝑛𝑜𝑏𝑠are the
predicted features, obtained by:
bV𝑢𝑛𝑜𝑏𝑠=Ψ(V𝑜𝑏𝑠;𝜓), (3)
where Ψis a network parameterized by 𝜓. In this paper, we make
use of a LSTM [21] to predict the bV𝑢𝑛𝑜𝑏𝑠on the basis of V𝑜𝑏𝑠,
ˆ𝑣𝑢𝑛𝑜𝑏𝑠
0=Ψ(Mean(V𝑜𝑏𝑠),𝜓),
ˆ𝑣𝑢𝑛𝑜𝑏𝑠
𝑖−1=Ψ(ˆ𝑣𝑢𝑛𝑜𝑏𝑠
𝑖;𝜓),𝑖=0,...,−𝑁+2, (4)
where ˆ𝑣𝑢𝑛𝑜𝑏𝑠
𝑖is the𝑖𝑡ℎpredicted unobserved latent feature represen-
tations of bV𝑢𝑛𝑜𝑏𝑠, and Mean(·)represents averaging the trajectory
features along the length dimension. In order to reconstruct the
latent feature representations, we use the smooth 𝐿1loss [ 17] to
optimize theL𝑟𝑒𝑐as:
L𝑟𝑒𝑐=0∑︁
𝑖=−𝑁+1𝛿(𝑣𝑢𝑛𝑜𝑏𝑠
𝑖−ˆ𝑣𝑢𝑛𝑜𝑏𝑠
𝑖), (5)
where𝛿is defined as:
𝛿(𝑣)=0.5𝑣2𝑖𝑓||𝑣||<1
||𝑣||−0.5𝑜𝑡ℎ𝑒𝑟𝑤𝑖𝑠𝑒,(6)
where||𝑣||denotes the 𝑙1norm of𝑣.
To further enhance the representation ability of the unobserved
latent feature representations, we devise another self-supervised
 
1646ITPNet: Towards Instantaneous Trajectory Prediction for Autonomous Driving KDD ’24, August 25–29, 2024, Barcelona, Spain
SelfAttentionSelfAttentionFeedForwardQllQ
lQ
Figure 3: Structure of Noise Redundancy Reduction Block.
task. Specifically, we regard the feature pair {𝑣𝑢𝑛𝑜𝑏𝑠
𝑖,ˆ𝑣𝑢𝑛𝑜𝑏𝑠
𝑖}as the
positive sample pair, 𝑖=−𝑁+1,···,0, and take{𝑣𝑢𝑛𝑜𝑏𝑠
𝑖,ˆ𝑣𝑢𝑛𝑜𝑏𝑠
𝑗}
as the negative sample pair, 𝑖≠𝑗. After that, we present another
self-supervised loss:
L𝑐𝑡𝑠=0∑︁
𝑖=−𝑁+1∑︁
𝑗≠𝑖max(0,𝛿(𝑣𝑢𝑛𝑜𝑏𝑠
𝑖−ˆ𝑣𝑢𝑛𝑜𝑏𝑠
𝑖)−𝛿(𝑣𝑢𝑛𝑜𝑏𝑠
𝑖−ˆ𝑣𝑢𝑛𝑜𝑏𝑠
𝑗)+Δ),
(7)
where Δis a margin. It is worth noting that the first loss L𝑟𝑒𝑐in
(5) targets at reconstructing the latent feature representation 𝑣𝑖as
accurately as possible, while the second loss L𝑐𝑡𝑠in (7) aims to min-
imize the discrepancy between the predicted unobserved feature
representations and the corresponding ground-truth feature repre-
sentations at each timestep, while it enlarges a margin Δbetween
the predicted unobserved and non-corresponding ground-truth fea-
ture representations. This can further assist in better reconstructing
unobserved trajectory locations.
3.4 Noise Redundancy Reduction Former
Our Noise Redundancy Reduction Former (NRRFormer) module
that is parameterized by Θcontains𝐿Noise Redundancy Reduction
Blocks (NRRBlocks). Each NRRBlock attempts to filter out noise
and redundancy in the predicted latent feature representations
ˆV𝑢𝑛𝑜𝑏𝑠
𝑙, and integrate the resulting filtered feature representations
and observed feature representations V𝑜𝑏𝑠into a query embedding
Q𝑙+1,𝑙=0,1,···,𝐿−1.
As shown in the Figure 3, The 𝑙𝑡ℎlayer of NRRBlock takes as
input the query embedding Q𝑙and the unobserved feature repre-
sentations ˆV𝑢𝑛𝑜𝑏𝑠
𝑙through a self-attention mechanism:
Q𝑢𝑛𝑜𝑏𝑠
𝑙,ˆV𝑢𝑛𝑜𝑏𝑠
𝑙+1=SelfAtt(Q𝑙||ˆV𝑢𝑛𝑜𝑏𝑠
𝑙;𝜃𝑙,1), (8)
where||denotes the concatenation operation, the self-attention
module is parameterized by 𝜃𝑙,1.Q0is a random initialized tensor,
ˆV𝑢𝑛𝑜𝑏𝑠
0=ˆV𝑢𝑛𝑜𝑏𝑠, and the Q𝑢𝑛𝑜𝑏𝑠
𝑙represents the output query
embedding. It is worth noting that the length of the query, denoted
as𝐶, is smaller than the length of ˆV𝑢𝑛𝑜𝑏𝑠
𝑙, denoted as 𝑁, so that
information in ˆV𝑢𝑛𝑜𝑏𝑠
𝑙is forced to condense and collate into the
compact query embedding Q𝑢𝑛𝑜𝑏𝑠
𝑙, thereby filtering out redundancy
and noise to extract the meaningful information. After that, we
utilize another self-attention module to integrate information ofV𝑜𝑏𝑠into the query embedding:
Q𝑢𝑛𝑜𝑏𝑠,𝑜𝑏𝑠
𝑙,V𝑜𝑏𝑠∗=SelfAtt(Q𝑢𝑛𝑜𝑏𝑠
𝑙||V𝑜𝑏𝑠;𝜃𝑙,2), (9)
where the self-attention module is parameterized by 𝜃𝑙,2,Q𝑢𝑛𝑜𝑏𝑠,𝑜𝑏𝑠
𝑙
represents the query embedding after integrating both the filtered
unobserved trajectory features and the observed trajectory features.
Through this self-attention operation, the information of 𝑉𝑜𝑏𝑠can
be effectively distilled into Q, while enabling it to fuse with 𝑉𝑢𝑛𝑜𝑏𝑠,
thereby facilitating the exchange of complementary information
between them. Note that we assume the observed trajectory features
V𝑜𝑏𝑠do not contain noise or redundancy, because the features
are obtained by encoding X𝑜𝑏𝑠. Therefore, the Equation (9) only
integrates the information of V𝑜𝑏𝑠into the query Qthrough self-
attention, but not input the V𝑜𝑏𝑠∗into the next NRRBlock. At the
end of the NRRBlock, we employ a feed forward layer to produce
the query representation for the next layer,
Q𝑙+1=FeedForward(Q𝑢𝑛𝑜𝑏𝑠,𝑜𝑏𝑠
𝑙;𝜃𝑙,3), (10)
where the feed forward layer is parameterized by 𝜃𝑙,3. We utilize𝐿
NRRBlocks to denoise and reduce redundancy in the unobserved
trajectory features while effectively fusing the observed trajectory
features. Finally we utilize Q𝐿for future trajectory prediction:
{bX𝑘}𝑘∈[0,𝐾−1]=Ω(Q𝐿;𝜔), (11)
where Ωrepresents the decoder module parameterized by 𝜔. The
decoder module can be the same structure as in previous trajectory
prediction models [ 28,53], enabling our method to be generalizable.
3.5 Optimization and Inference
We adopt the commonly used winner-takes-all strategy [ 51] on
the obtained 𝐾multi-modal trajectories {bX𝑘}𝑘∈[0,𝐾−1], which re-
gresses the trajectory closest to the ground truth, denoted as L𝑟𝑒𝑔.
In order to help the downstream planner make better decisions, a
classification lossL𝑐𝑙𝑠is also adopted to score each trajectory. Here,
we adopt the same L𝑟𝑒𝑔andL𝑐𝑙𝑠as those in the corresponding
backbones (see Appendix A.5 for details of L𝑟𝑒𝑔andL𝑐𝑙𝑠). Finally,
the total loss function can be expressed as:
L=L𝑟𝑒𝑔+L𝑐𝑙𝑠+𝛼L𝑟𝑒𝑐+𝛽L𝑐𝑡𝑠, (12)
where𝛼and𝛽are three trade-off hyper-parameters. We provide
the pseudo-code of our training procedure in the Algorithm 1.
For inference, when only 2 observed trajectory locations of a
target vehicle are collected, we first extract the latent feature repre-
sentations based on the backbone Φ, and then apply our backward
forecasting mechanism to predict the latent feature representations
of previous 𝑁unobserved locations of the target agent by the net-
works Ψ. After that, the NRRFormer Θ={𝜃𝑙,1,𝜃𝑙,2,𝜃𝑙,3}𝐿
𝑙=1filters
out the noise and redundancy in the unobserved latent feature rep-
resentations and integrates the filtered features and observed latent
feature representations into query embedding. Finally, the query
embedding are fed into the decoder network Ωfor instantaneous
trajectory prediction.
 
1647KDD ’24, August 25–29, 2024, Barcelona, Spain Rongqing Li et al.
Algorithm 1: Training Procedure of ITPNet
Input: input trajectory X={X𝑜𝑏𝑠,X𝑢𝑛𝑜𝑏𝑠}, ground-truth
trajectory X𝑔𝑡, query embedding Q, layers𝐿of
NRRFormer, trade-off hyper-parameters: 𝛼, and𝛽.
Output: Network parameters: 𝜙,𝜓,{𝜃𝑙,1,𝜃𝑙,2,𝜃𝑙,3}𝐿
𝑙=1, and
𝜔.
Initialize: Randomly initialize 𝜙,𝜓,{𝜃𝑙,1,𝜃𝑙,2,𝜃𝑙,3}𝐿
𝑙=1,𝜔,
andQ.
while not converges do
Compute latent feature representations
V𝑜𝑏𝑠=Φ(X𝑜𝑏𝑠;𝜙)andV𝑢𝑛𝑜𝑏𝑠=Φ(X𝑢𝑛𝑜𝑏𝑠;𝜙);
Backward forecast bV𝑢𝑛𝑜𝑏𝑠bybV𝑢𝑛𝑜𝑏𝑠=Ψ(V𝑜𝑏𝑠;𝜓);
ComputeL𝑟𝑒𝑐,L𝑐𝑡𝑠by Eq. (5) and (7), respectively;
Employ NRRFormer to filter out redundancy and noise
in predicted unobserved latent feature representations
and integrate the resulting filtered feature
representations and observed feature representations
into𝑄, by
ˆV𝑢𝑛𝑜𝑏𝑠
0=ˆV𝑢𝑛𝑜𝑏𝑠;
for𝑙=0...𝐿−1do
Q𝑢𝑛𝑜𝑏𝑠
𝑙,ˆV𝑢𝑛𝑜𝑏𝑠
𝑙+1=SelfAtt(Q𝑙||ˆV𝑢𝑛𝑜𝑏𝑠
𝑙;𝜃𝑙,1);
Q𝑢𝑛𝑜𝑏𝑠,𝑜𝑏𝑠
𝑙,V𝑜𝑏𝑠∗=SelfAtt(Q𝑢𝑛𝑜𝑏𝑠
𝑙||V𝑜𝑏𝑠;𝜃𝑙,2);
Q𝑙+1=FeedForward(Q𝑢𝑛𝑜𝑏𝑠,𝑜𝑏𝑠
𝑙;𝜃𝑙,3);
end
Predict trajectory{bX𝑘}𝑘∈[0,𝐾−1]=Ω(Q𝐿;𝜔);
ComputeL𝑟𝑒𝑔,L𝑐𝑙𝑠through{bX𝑘}𝑘∈[0,𝐾−1];
Calculate the total loss LbyL=L𝑟𝑒𝑔+L𝑐𝑙𝑠+𝛼L𝑟𝑒𝑐+
𝛽L𝑐𝑡𝑠;
Update model parameters 𝜙,𝜓,{𝜃𝑙,1,𝜃𝑙,2,𝜃𝑙,3}𝐿−1
𝑙=0,𝜔
and query embedding Qby minimizingL.
end
4 Experiments
4.1 Datasets
We evaluate our method for the instantaneous trajectory prediction
tasks on two widely used benchmark datasets, Argoverse [ 10] and
NuScene [7].
Argoverse Datasets: This dataset contains a total of 324,557 scenes,
which are split into 205,492 training scenes, 39,472 validation scenes,
and 78,143 testing scenes. The observation duration for both the
training and validation sets is 5 seconds with a sampling frequency
of 10Hz. In contrast to previous approaches taking the first 2 seconds
(i.e., 20 locations) as the observed trajectory locations and the last 3
seconds as the future ground-truth trajectory, we only utilize 𝑇=2
observed trajectory locations, and predict the future trajectory of
the last 3 seconds in our experiments.
NuScene Datasets The dataset consists of 32,186 training, 8,560
validation, and 9,041 test samples. Each sample is a sequence of x-y
coordinates with a duration of 8 seconds and a sample frequency
of 2Hz. Previous approaches usually take the first 2 seconds (i.e., 5
locations) as the observed trajectory locations and the last 6 seconds
as the future ground-truth trajectory. However, we leverage only𝑇=2observed trajectory locations to predict the future trajectory
of the last 6 seconds in the experiments.
4.2 Implementation Details
We perform the experiments using two different backbone models,
HiVT [ 53] and LaneGCN [ 28]. Specifically, we utilize the temporal
encoder in HiVT and the ActorNet in LaneGCN to extract the latent
feature representations, respectively. We set the feature dimensions
𝑑to 64 and 128 when using HiVT and LaneGCN as the backbone,
respectively. The hidden size of the LSTM for predicting unob-
served latent feature representations is set to 𝑑. The NRRFormer
consists of three NRRBlocks. In our experiments, the predicted un-
observed length 𝑁is set to 10 for the Argoverse dataset and 4 for
the nuScenes dataset. We set the query embedding length to 𝐶=4
for the Argoverse dataset and 𝐶=2for the nuScenes dataset. In
addition, we set the trade-off hyper-parameters 𝛼and𝛽to 0.1 and
0.1.
4.3 Baselines and Evaluation Metrics
We first compare with two most related works: MOE [ 43] and Distill
[36]. Since we use HiVT [ 53] and LaneGCN [ 28] as our backbone,
respectively, we also compare our method with them. When using
HiVT as the backbone, we denote our method as ITPNet+HiVT.
When using LaneGCN as the backbone, we denote our method as
ITPNet+LaneGCN.
To evaluate these methods, we employ three popular evaluation
metrics [ 18,46,51], minADE@ 𝐾, minFDE@ 𝐾, and minMR@ 𝐾,
where𝐾represents the number of the generated trajectories. we
set𝐾to 1 and 6 in our experiments.
4.4 Results and Analysis
Performance on Instantaneous Trajectory Prediction . To demon-
strate the effectiveness of our method for instantaneous trajectory
prediction, we compare our method with the state-of-the-art base-
lines. The results listed in Table 1, shows that ITPNet+LaneGCN
and ITPNet+HiVT significantly outperforms LaneGCN and HiVT,
respectively. This illustrates that current state-of-the-art trajectory
prediction approaches struggle to effectively handle cases involving
instantaneous observed trajectory inputs. However, when plugging
our framework into these two backbone models, respectively, the
performance is significantly improved. This shows our method is
effective for instantaneous trajectory prediction, and is compatible
with different trajectory prediction models. Moreover, our methods
achieve better performance than MOE and Distill, which indicates
the effectiveness of our methods once more.
Ablation Study. We conduct ablation studies on the Argoverse
dataset, and we employ HiVT [ 53] as the backbone. Table 2 shows
the results. When the L𝑟𝑒𝑐is applied to the loss function, our
method significantly improves the performance. This indicates the
effectiveness of our proposed backward forecast mechanism for pre-
dicting the latent feature representations of previous unobserved
trajectory locations. The loss L𝑐𝑡𝑠further boosts the performance
of the model, demonstrating the self-supervised task is meaning-
ful. Moreover, our method can further improve the performance
when integrating our NRRFormer, underscoring the effectiveness
 
1648ITPNet: Towards Instantaneous Trajectory Prediction for Autonomous Driving KDD ’24, August 25–29, 2024, Barcelona, Spain
Table 1: minADE@ 𝐾, minFDE@ 𝐾, and MR@ 𝐾of different methods on Argoverse and nuScenes, respectively.
Dataset MethodsK=1 K=6
minADE minFDE minMR minADE minFDE minMR
ArgoverseHiVT [53] 4.158 8.368 0.846 1.085 1.712 0.249
MOE+HiVT [43] 3.312 6.840 0.794 0.939 1.413 0.177
Distill+HiVT [36] 3.251 6.638 0.771 0.968 1.502 0.185
ITPNet+HiVT 2.631 5.703 0.757 0.819 1.218 0.141
LaneGCN [28] 4.204 8.647 0.861 1.126 1.821 0.278
MOE+LaneGCN [43] 3.958 8.264 0.842 1.089 1.734 0.265
Distill+LaneGCN [36] 3.768 7.926 0.817 1.077 1.687 0.252
ITPNet+LaneGCN 2.922 5.627 0.765 0.894 1.425 0.173
nuScenesHiVT [53] 6.564 13.745 0.914 1.772 2.836 0.505
MOE+HiVT [43] 5.705 12.619 0.913 1.712 2.813 0.494
Distill+HiVT [36] 5.950 12.606 0.911 1.759 2.861 0.483
ITPNet+HiVT 5.514 12.584 0.909 1.503 2.628 0.483
LaneGCN [28] 6.125 14.300 0.935 1.878 3.497 0.630
MOE+LaneGCN [43] 6.071 13.994 0.931 1.778 3.372 0.613
Distill+LaneGCN [36] 5.968 13.807 0.926 1.737 3.278 0.604
ITPNet+LaneGCN 5.739 13.555 0.919 1.679 3.146 0.580
Table 2: Ablation study of our method for L𝑟𝑎𝑛𝑘,L𝑟𝑒𝑐andL𝑐𝑡𝑠on the Argoverse dataset.
L𝑟𝑒𝑐L𝑐𝑡𝑠 NRRFormerK=1 K=6
minADE minFDE minMR minADE minFDE minMR
4.158 8.368 0.846 1.085 1.712 0.249
✓ 2.646 5.790 0.763 0.841 1.285 0.154
✓ ✓ 2.615 5.733 0.761 0.832 1.262 0.149
✓ ✓ ✓ 2.631 5.703 0.757 0.819 1.218 0.141
Table 3: Analysis of backward forecasting with different 𝑁and effectiveness of NRRFormer on Argoverse.
NNRR
FormerK=6 NRR
FormerK=6
minADE minFDE minMR minADE minFDE minMR
0 ✗ 1.068 1.678 0.241 - - - -
1 ✗ 0.969 1.494 0.193 ✓ 0.964 1.498 0.194
2 ✗ 0.872 1.329 0.160 ✓ 0.868 1.323 0.158
3 ✗ 0.832 1.262 0.149 ✓ 0.828 1.254 0.147
4 ✗ 0.845 1.291 0.154 ✓ 0.824 1.240 0.146
5 ✗ 0.859 1.312 0.156 ✓ 0.822 1.232 0.145
6 ✗ 0.867 1.302 0.161 ✓ 0.823 1.231 0.145
7 ✗ 0.881 1.375 0.173 ✓ 0.820 1.222 0.143
8 ✗ 0.903 1.410 0.181 ✓ 0.821 1.222 0.142
9 ✗ 0.933 1.453 0.187 ✓ 0.819 1.220 0.142
10 ✗ 0.967 1.522 0.196 ✓ 0.819 1.218 0.141
of our NRRFormer in filtering out noise and redundancy from the
predicted unobserved latent features.
Analysis of Different Lengths of Unobserved Trajectories.
We investigate the influence of different lengths 𝑁of unobserved
trajectory locations on instantaneous trajectory prediction. We use
HiVT as the backbone on the Argoverse dataset. The results are
listed in Table 3. Note that when NRRFormer is not used, we di-
rectly concatenate the predicted unobserved features with observedfeatures for future trajectory prediction. As 𝑁increases, the per-
formance of the model is gradually improved. This reveals that
predicting more latent feature representations can introduce more
useful information, and thus be beneficial to trajectory prediction.
However, when 𝑁exceeds a certain value ( 𝑁>3), the perfor-
mance deteriorates. This is attributed to the introduction of noise
and redundancy when predicting a longer feature sequence. When
 
1649KDD ’24, August 25–29, 2024, Barcelona, Spain Rongqing Li et al.
Table 4: Comparison with baselines on Argoverse dataset using different 𝑇
Dataset T MethodK=1 K=6
minADE minFDE minMR minADE minFDE minMR
Argoverse2HiVT 4.158 8.368 0.846 1.085 1.712 0.249
MOE+HiVT 3.312 6.840 0.794 0.939 1.413 0.177
Distill+HiVT 3.251 6.638 0.771 0.968 1.502 0.185
ITPNet+HiVT 2.631 5.703 0.757 0.819 1.218 0.141
5HiVT 2.510 5.523 0.747 0.809 1.203 0.137
MOE+HiVT 2.562 5.607 0.776 0.784 1.221 0.134
Distill+HiVT 2.465 5.452 0.756 0.796 1.248 0.139
ITPNet+HiVT 2.410 5.257 0.738 0.748 1.132 0.122
10HiVT 2.441 5.238 0.741 0.736 1.121 0.121
MOE+HiVT 2.357 5.141 0.733 0.726 1.101 0.117
Distill+HiVT 2.224 5.039 0.726 0.731 1.118 0.119
ITPNet+HiVT 2.190 4.792 0.716 0.718 1.088 0.113
(
a) HiVT
 (
b) MOE+HiVT
 (
c) Distill+HiVT
 (
d) ITPNet+HiVT
Figure 4: Qualitative results of a) HiVT, b) MOE+HiVT, c) Distill+HiVT, d) ITPNet+HiVT on Argoverse. The observed historical
trajectories are shown in red, the ground-truth future trajectories are shown in black, and the predicted multi-modal future
trajectories are shown in green.
NRRFormer is enabled, the performance of our method is consis-
tently improved as 𝑁increases. This illustrates our NRRFormer
module can indeed filter out redundant and noisy information,
demonstrating its effectiveness.
Results of Varied Lengths of Observed Trajectories. To fur-
ther demonstrate the effectiveness of our method, we utilize HiVT
as the backbone and conduct experiments with varied lengths ofobserved trajectories on Argoverse dataset. As depicted in Table 4,
our approach consistently exhibits superior performance across a
range of𝑇when compared to the baseline methods. One interesting
point is that our ITPNet+HiVT with 𝑇=2achieves comparable
performance to HiVT with 𝑇=5. This means that our method can
averagely save 1.5 seconds for trajectory prediction, compared to
 
1650ITPNet: Towards Instantaneous Trajectory Prediction for Autonomous Driving KDD ’24, August 25–29, 2024, Barcelona, Spain
HiVT. If a car has a driving speed of 70km/s, our method can save
around 30 meters to observe the agent for trajectory prediction.
Qualitative Results. We perform a visualization of the predicted
multi-modal trajectories generated by MOE, Distill, HiVT, and our
proposed method ITPNet+HiVT respectively on Argoverse dataset
with only 2 observed locations. The results are shown in Figure 4.
We observe that our method exhibits diversity and more accurate
trajectory prediction than other baselines in the scenario of turn-
ing and going straight. This suggests that our method can handle
different driving scenarios and can achieve improved predictions
with only 2 observed locations.
5 Conclusion
In this paper, we investigated a challenging problem of instanta-
neous trajectory prediction with very few observed locations. We
proposed a plug-and-play approach that backwardly predicted the
latent feature representations of unobserved locations, to mitigate
the issue of the lack of information. Considering the noise and
redundancy in unobserved feature representations, we designed
the NRRFormer to remove them and integrate the resulting filtered
features and observed trajectory features into a compact query
embedding for future trajectory prediction. Extensive experimental
results demonstrated that the proposed method can be effective for
instantaneous trajectory prediction, and can be compatible with
different trajectory prediction models.
Acknowledgments
This work was supported by the National Natural Science Founda-
tion of China (NSFC) under Grants 62122013, U2001211.
References
[1] Alexandre Alahi, Kratarth Goel, Vignesh Ramanathan, Alexandre Robicquet, Li
Fei-Fei, and Silvio Savarese. 2016. Social lstm: Human trajectory prediction in
crowded spaces. In Proceedings of the IEEE Conference on Computer Vision and
Pattern Recognition (CVPR). 961–971.
[2]Görkay Aydemir, Adil Kaan Akan, and Fatma Güney. 2023. ADAPT: Effi-
cient Multi-Agent Trajectory Prediction with Adaptation. In Proceedings of the
IEEE/CVF International Conference on Computer Vision.
[3]Inhwan Bae and Hae-Gon Jeon. 2023. A Set of Control Points Conditioned
Pedestrian Trajectory Prediction. Proceedings of the AAAI Conference on Artificial
Intelligence (2023).
[4]Inhwan Bae, Jean Oh, and Hae-Gon Jeon. 2023. EigenTrajectory: Low-Rank
Descriptors for Multi-Modal Trajectory Forecasting. Proceedings of the IEEE/CVF
International Conference on Computer Vision (2023).
[5]Inhwan Bae, Young-Jae Park, and Hae-Gon Jeon. 2024. SingularTrajectory: Uni-
versal Trajectory Predictor Using Diffusion Model. In Proceedings of the IEEE/CVF
Conference on Computer Vision and Pattern Recognition. 17890–17901.
[6]Mayank Bansal, Alex Krizhevsky, and Abhijit Ogale. 2018. Chauffeurnet: Learn-
ing to drive by imitating the best and synthesizing the worst. arXiv preprint
arXiv:1812.03079 (2018).
[7]Holger Caesar, Varun Bankiti, Alex H Lang, Sourabh Vora, Venice Erin Liong,
Qiang Xu, Anush Krishnan, Yu Pan, Giancarlo Baldan, and Oscar Beijbom. 2020.
nuscenes: A multimodal dataset for autonomous driving. In Proceedings of the
IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). 11621–
11631.
[8]Sergio Casas, Cole Gulino, Renjie Liao, and Raquel Urtasun. 2020. Spagnn:
Spatially-aware graph neural networks for relational behavior forecasting from
sensor data. In 2020 IEEE International Conference on Robotics and Automation
(ICRA). IEEE, 9491–9497.
[9]Sergio Casas, Cole Gulino, Simon Suo, Katie Luo, Renjie Liao, and Raquel Urtasun.
2020. Implicit latent variable model for scene-consistent motion forecasting. In
Computer Vision–ECCV 2020: 16th European Conference, Glasgow, UK, August
23–28, 2020, Proceedings, Part XXIII 16. Springer, 624–641.
[10] Ming-Fang Chang, John Lambert, Patsorn Sangkloy, Jagjeet Singh, Slawomir
Bak, Andrew Hartnett, De Wang, Peter Carr, Simon Lucey, Deva Ramanan, and
James Hays. 2019. Argoverse: 3D Tracking and Forecasting with Rich Maps.
http://arxiv.org/abs/1911.02620 arXiv:1911.02620 [cs].[11] Guangyi Chen, Junlong Li, Jiwen Lu, and Jie Zhou. 2021. Human trajectory
prediction via counterfactual analysis. In Proceedings of the IEEE/CVF International
Conference on Computer Vision (CVPR). 9824–9833.
[12] Jie Cheng, Xiaodong Mei, and Ming Liu. 2023. Forecast-MAE: Self-supervised
Pre-training for Motion Forecasting with Masked Autoencoders. Proceedings of
the IEEE/CVF International Conference on Computer Vision (2023).
[13] Sehwan Choi, Jungho Kim, Junyong Yun, and Jun Won Choi. 2023. R-Pred: Two-
Stage Motion Prediction Via Tube-Query Attention-Based Trajectory Refinement.
Proceedings of the IEEE/CVF International Conference on Computer Vision (2023).
[14] Jiyang Gao, Chen Sun, Hang Zhao, Yi Shen, Dragomir Anguelov, Congcong Li,
and Cordelia Schmid. 2020. Vectornet: Encoding hd maps and agent dynamics
from vectorized representation. In Proceedings of the IEEE/CVF Conference on
Computer Vision and Pattern Recognition (CVPR). 11525–11533.
[15] Thomas Gilles, Stefano Sabatini, Dzmitry Tsishkou, Bogdan Stanciulescu, and
Fabien Moutarde. 2022. THOMAS: Trajectory Heatmap Output with learned
Multi-Agent Sampling. In International Conference on Learning Representations.
[16] Roger Girgis, Florian Golemo, Felipe Codevilla, Martin Weiss, Jim Aldon D’Souza,
Samira Ebrahimi Kahou, Felix Heide, and Christopher Pal. 2021. Latent Vari-
able Sequential Set Transformers for Joint Multi-Agent Motion Prediction. In
International Conference on Learning Representations.
[17] Ross Girshick. 2015. Fast r-cnn. In Proceedings of the IEEE International Conference
on Computer Vision (ICCV). 1440–1448.
[18] Junru Gu, Chen Sun, and Hang Zhao. 2021. Densetnt: End-to-end trajectory
prediction from dense goal sets. In Proceedings of the IEEE/CVF International
Conference on Computer Vision (CVPR). 15303–15312.
[19] Tianpei Gu, Guangyi Chen, Junlong Li, Chunze Lin, Yongming Rao, Jie Zhou,
and Jiwen Lu. 2022. Stochastic trajectory prediction via motion indeterminacy
diffusion. In Proceedings of the IEEE/CVF Conference on Computer Vision and
Pattern Recognition (CVPR). 17113–17122.
[20] Agrim Gupta, Justin Johnson, Li Fei-Fei, Silvio Savarese, and Alexandre Alahi.
2018. Social gan: Socially acceptable trajectories with generative adversarial
networks. In Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition (CVPR). 2255–2264.
[21] Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long short-term memory. Neural
computation 9, 8 (1997), 1735–1780.
[22] Chiyu Jiang, Andre Cornman, Cheolho Park, Benjamin Sapp, Yin Zhou, Dragomir
Anguelov, et al .2023. MotionDiffuser: Controllable Multi-Agent Motion Pre-
diction using Diffusion. In Proceedings of the IEEE/CVF Conference on Computer
Vision and Pattern Recognition. 9644–9653.
[23] Vineet Kosaraju, Amir Sadeghian, Roberto Martín-Martín, Ian Reid, Hamid
Rezatofighi, and Silvio Savarese. 2019. Social-bigat: Multimodal trajectory fore-
casting using bicycle-gan and graph attention networks. Advances in Neural
Information Processing Systems 32 (2019).
[24] Mihee Lee, Samuel S Sohn, Seonghyeon Moon, Sejong Yoon, Mubbasir Kapadia,
and Vladimir Pavlovic. 2022. Muse-VAE: multi-scale VAE for environment-aware
long term trajectory prediction. In Proceedings of the IEEE/CVF Conference on
Computer Vision and Pattern Recognition (CVPR). 2221–2230.
[25] Namhoon Lee, Wongun Choi, Paul Vernaza, Christopher B Choy, Philip HS Torr,
and Manmohan Chandraker. 2017. Desire: Distant future prediction in dynamic
scenes with interacting agents. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition (CVPR). 336–345.
[26] Lingyun Luke Li, Bin Yang, Ming Liang, Wenyuan Zeng, Mengye Ren, Sean Segal,
and Raquel Urtasun. 2020. End-to-end contextual perception and prediction with
interaction transformer. In 2020 IEEE/RSJ International Conference on Intelligent
Robots and Systems (IROS). IEEE, 5784–5791.
[27] Xin Li, Xiaowen Ying, and Mooi Choo Chuah. 2019. Grip++: Enhanced graph-
based interaction-aware trajectory prediction for autonomous driving. arXiv
preprint arXiv:1907.07792 (2019).
[28] Ming Liang, Bin Yang, Rui Hu, Yun Chen, Renjie Liao, Song Feng, and Raquel
Urtasun. 2020. Learning lane graph representations for motion forecasting. In
Computer Vision–ECCV 2020: 16th European Conference, Glasgow, UK, August
23–28, 2020, Proceedings, Part II 16. Springer, 541–556.
[29] Rongqin Liang, Yuanman Li, Jiantao Zhou, and Xia Li. 2022. STGlow: A Flow-
based Generative Framework with Dual Graphormer for Pedestrian Trajectory
Prediction. arXiv preprint arXiv:2211.11220 (2022).
[30] Yicheng Liu, Jinghuai Zhang, Liangji Fang, Qinhong Jiang, and Bolei Zhou. 2021.
Multimodal motion prediction with stacked transformers. In Proceedings of the
IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). 7577–
7586.
[31] Osama Makansi, Julius Von Kügelgen, Francesco Locatello, Peter Vincent Gehler,
Dominik Janzing, Thomas Brox, and Bernhard Schölkopf. 2021. You Mostly Walk
Alone: Analyzing Feature Attribution in Trajectory Prediction. In International
Conference on Learning Representations.
[32] Karttikeya Mangalam, Yang An, Harshayu Girase, and Jitendra Malik. 2021. From
Goals, Waypoints & Paths To Long Term Human Trajectory Forecasting. In 2021
IEEE/CVF International Conference on Computer Vision (ICCV). IEEE, Montreal,
QC, Canada, 15213–15222. https://doi.org/10.1109/ICCV48922.2021.01495
 
1651KDD ’24, August 25–29, 2024, Barcelona, Spain Rongqing Li et al.
[33] Weibo Mao, Chenxin Xu, Qi Zhu, Siheng Chen, and Yanfeng Wang. 2023. Leapfrog
Diffusion Model for Stochastic Trajectory Prediction. In Proceedings of the
IEEE/CVF Conference on Computer Vision and Pattern Recognition. 5517–5526.
[34] Mancheng Meng, Ziyan Wu, Terrence Chen, Xiran Cai, Xiang Sean Zhou, Fan
Yang, and Dinggang Shen. 2022. Forecasting Human Trajectory from Scene
History. arXiv preprint arXiv:2210.08732 (2022).
[35] Abduallah Mohamed, Kun Qian, Mohamed Elhoseiny, and Christian Claudel.
2020. Social-stgcnn: A social spatio-temporal graph convolutional neural network
for human trajectory prediction. In Proceedings of the IEEE/CVF Conference on
Computer Vision and Pattern Recognition (CVPR). 14424–14432.
[36] Alessio Monti, Angelo Porrello, Simone Calderara, Pasquale Coscia, Lamberto
Ballan, and Rita Cucchiara. 2022. How many observations are enough? knowledge
distillation for trajectory forecasting. In Proceedings of the IEEE/CVF Conference
on Computer Vision and Pattern Recognition (CVPR). 6553–6562.
[37] Nigamaa Nayakanti, Rami Al-Rfou, Aurick Zhou, Kratarth Goel, Khaled S Refaat,
and Benjamin Sapp. 2022. Wayformer: Motion forecasting via simple & efficient
attention networks. arXiv preprint arXiv:2207.05844 (2022).
[38] Jiquan Ngiam, Vijay Vasudevan, Benjamin Caine, Zhengdong Zhang, Hao-
Tien Lewis Chiang, Jeffrey Ling, Rebecca Roelofs, Alex Bewley, Chenxi Liu,
Ashish Venugopal, et al .2022. Scene transformer: A unified architecture for
predicting future trajectories of multiple agents. In International Conference on
Learning Representations.
[39] Daehee Park, Hobin Ryu, Yunseo Yang, Jegyeong Cho, Jiwon Kim, and Kuk-Jin
Yoon. 2023. Leveraging Future Relationship Reasoning for Vehicle Trajectory
Prediction. arXiv preprint arXiv:2305.14715 (2023).
[40] Tung Phan-Minh, Elena Corina Grigore, Freddy A. Boulton, Oscar Beijbom, and
Eric M. Wolff. 2020. CoverNet: Multimodal Behavior Prediction Using Trajectory
Sets. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern
Recognition (CVPR).
[41] Amir Sadeghian, Vineet Kosaraju, Ali Sadeghian, Noriaki Hirose, Hamid
Rezatofighi, and Silvio Savarese. 2019. Sophie: An attentive gan for predicting
paths compliant to social and physical constraints. In Proceedings of the IEEE/CVF
Conference on Computer Vision and Pattern Recognition (CVPR). 1349–1358.
[42] Tim Salzmann, Boris Ivanovic, Punarjay Chakravarty, and Marco Pavone. 2020.
Trajectron++: Dynamically-feasible trajectory forecasting with heterogeneous
data. In Computer Vision–ECCV 2020: 16th European Conference, Glasgow, UK,
August 23–28, 2020, Proceedings, Part XVIII 16. Springer, 683–700.
[43] Jianhua Sun, Yuxuan Li, Liang Chai, Hao-Shu Fang, Yong-Lu Li, and Cewu Lu.
2022. Human trajectory prediction with momentary observation. In Proceedings
of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR).6467–6476.
[44] Qiao Sun, Xin Huang, Junru Gu, Brian C Williams, and Hang Zhao. 2022. M2I:
From factored marginal trajectory prediction to interactive prediction. In Pro-
ceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition
(CVPR). 6543–6552.
[45] Jingke Wang, Tengju Ye, Ziqing Gu, and Junbo Chen. 2022. Ltp: Lane-based
trajectory prediction for autonomous driving. In Proceedings of the IEEE/CVF
Conference on Computer Vision and Pattern Recognition (CVPR). 17134–17142.
[46] Mingkun Wang, Xinge Zhu, Changqian Yu, Wei Li, Yuexin Ma, Ruochun Jin,
Xiaoguang Ren, Dongchun Ren, Mingxu Wang, and Wenjing Yang. 2022. Ganet:
Goal area network for motion forecasting. arXiv preprint arXiv:2209.09723 (2022).
[47] Xishun Wang, Tong Su, Fang Da, and Xiaodong Yang. 2023. ProphNet: Efficient
agent-centric motion forecasting with anchor-informed proposals. In Proceedings
of the IEEE/CVF Conference on Computer Vision and Pattern Recognition. 21995–
22003.
[48] Chenxin Xu, Maosen Li, Zhenyang Ni, Ya Zhang, and Siheng Chen. 2022. Group-
Net: Multiscale Hypergraph Neural Networks for Trajectory Prediction With
Relational Reasoning. In Proceedings of the IEEE/CVF Conference on Computer
Vision and Pattern Recognition (CVPR). 6498–6507.
[49] Wenyuan Zeng, Ming Liang, Renjie Liao, and Raquel Urtasun. 2021. Lanercnn:
Distributed representations for graph-centric motion forecasting. In 2021 IEEE/RSJ
International Conference on Intelligent Robots and Systems (IROS). IEEE, 532–539.
[50] Bo Zhang, Tao Wang, Changdong Zhou, Nicola Conci, and Hongbo Liu. 2022.
Human trajectory forecasting using a flow-based generative model. Engineering
Applications of Artificial Intelligence 115 (2022), 105236.
[51] Hang Zhao, Jiyang Gao, Tian Lan, Chen Sun, Ben Sapp, Balakrishnan Varadarajan,
Yue Shen, Yi Shen, Yuning Chai, Cordelia Schmid, et al .2021. Tnt: Target-driven
trajectory prediction. In Conference on Robot Learning (CoRL). PMLR, 895–904.
[52] Zikang Zhou, Jianping Wang, Yung-Hui Li, and Yu-Kai Huang. 2023. Query-
Centric Trajectory Prediction. In Proceedings of the IEEE/CVF Conference on
Computer Vision and Pattern Recognition. 17863–17873.
[53] Zikang Zhou, Luyao Ye, Jianping Wang, Kui Wu, and Kejie Lu. 2022. Hivt:
Hierarchical vector transformer for multi-agent motion prediction. In Proceedings
of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR).
8823–8833.
[54] Dekai Zhu, Guangyao Zhai, Yan Di, Fabian Manhardt, Hendrik Berkemeyer,
Tuan Tran, Nassir Navab, Federico Tombari, and Benjamin Busam. 2023. IPCC-
TP: Utilizing Incremental Pearson Correlation Coefficient for Joint Multi-Agent
Trajectory Prediction. In Proceedings of the IEEE/CVF Conference on Computer
Vision and Pattern Recognition. 5507–5516.
 
1652ITPNet: Towards Instantaneous Trajectory Prediction for Autonomous Driving KDD ’24, August 25–29, 2024, Barcelona, Spain
A Appendix
A.1 Implmentations of Baselines
MOE+HiVT and MOE+LaneGCN. We integrate MOE [ 43] to
HiVT and LaneGCN backbones by employing the soft-pretraining
with masked trajectory complement and context restoreation tasks.
Distill+HiVT and Distill+LaneGCN. We distill knowledge from
the output of the encoder (output of Global Interaction in HiVT,
and output of FusionNet in LaneGCN) and decoder (output of last
hidden layer).
A.2 Failure cases of ITPNet
We provide failure cases of ITPNet+HiVT on Argoverse dataset, as
shown in Figure 5. The model fails (1) when the future intention
of the agents suddenly changes (a, d); (2) the future behavior is
complex and hard to perceive from observed trajectories, such as
overtaking; (3) the agent does not follow the traffic rules, such as
turning left from the lane for right turns (c).
(a)
 (b)
(c)
 (d)
Figure 5: Failure case of ITPNet+HiVT on Argoverse. The
observed trajectories are shown in red, the ground-truth tra-
jectories are shown in black, and the predicted multi-modal
trajectories are shown in green.
A.3 Results with noisy observed historical
trajectories
We take into account the impact of noise in observed historical
trajectories arising from perception device errors. We add GaussianNoiseN(0,𝜎)to observed trajectories. The experimental results,
as listed in Table 5, reveal that our proposed ITPNet maintains its
superiority over both MOE and Distill methods, even in scenarios
where the observed locations exhibit noise.
A.4 Convergence Analysis
We study the convergence of our method on Argoverse and nuScenes.
The curves of the total loss of our method are shown in Figure 6.
we can see the loss decreases as the training steps, and it finally
levels off.
0 20k 40k 60k 80k 100k
Steps0.81.01.21.4 Final loss
05k10k 15k 20k 25k 30k 35k
Steps1.01.52.02.53.03.5Final loss
Figure 6: Convergence analysis of our method. Left for Argo-
verse and right for nuScenes.
A.5 Details about L𝑟𝑒𝑔andL𝑐𝑙𝑠of backbones
HiVT parameterizes the distribution of future trajectories as a mix-
ture model where each mixture component is a Laplace distribution.
The regression loss L𝑟𝑒𝑔is defined as:
L𝑟𝑒𝑔=𝑀+2∑︁
𝑖=3log1
2𝑏e
xp(−|ˆ𝑥𝑖−𝜇𝑖|
𝑏), (13)
where𝑏is a learnable scale parameter of Laplace distribution, ˆ𝑥𝑖is
the predicted future trajectory closest to the ground-truth future
trajectory and 𝜇𝑖is the ground-truth future trajectory.
TheL𝑐𝑙𝑠is defined as cross-entropy loss to optimize the mixing
coefficients,
L𝑐𝑙𝑠=−𝐾∑︁
𝑘=1𝜋𝑘logˆ𝜋𝑘, (14)
where𝜋𝑘and ˆ𝜋𝑘are the probability of the 𝑘𝑡ℎtrajectory to be se-
lected, and𝜋𝑘=1if and only if ˆX𝑘is the predicted future trajectory
closest to the ground-truth future trajectory.
LaneGCN employ smooth 𝐿1loss asL𝑟𝑒𝑔, which is defined as,
L𝑟𝑒𝑔=𝑀+2∑︁
𝑖=3𝛿(ˆ𝑥𝑖−𝑥𝑖), (15)
where the definition of 𝛿is same as Equation (6).
The classification loss L𝑐𝑙𝑠is defined as,
L𝑐𝑙𝑠=1
𝐾−1∑︁
𝑘≠𝑘′max(0,
𝜋𝑘+𝜖−𝜋𝑘′), (16)
where the𝑘𝑡ℎpredicted future trajectory is the closest one to the
ground-truth future trajectory. This loss pushes the closest one
away from others at least by a margin 𝜖.
 
1653KDD ’24, August 25–29, 2024, Barcelona, Spain Rongqing Li et al.
Table 5: Performance of instantaneous trajectory prediction with noised observed trajectory locations. 𝜎represents the standard
deviation of Gaussian Noise.
Dataset MethodsK=1 K=6
minADE minFDE minMR minADE minFDE minMR
ArgoverseMOE+HiVT 3.312 6.840 0.794 0.939 1.413 0.177
Distill+HiVT 3.251 6.638 0.771 0.968 1.502 0.185
ITPNet+HiVT 2.631 5.703 0.757 0.819 1.218 0.141
MOE+HiVT ( 𝜎=0.1m) 3.426 7.114 0.836 1.002 1.549 0.202
Distill+HiVT ( 𝜎=0.1m) 3.374 6.982 0.822 1.046 1.616 0.213
ITPNet+HiVT( 𝜎=0.1m) 2.938 6.424 0.792 0.909 1.347 0.165
 
1654