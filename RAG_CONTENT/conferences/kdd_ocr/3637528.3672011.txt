A Unified Core Structure in Multiplex Networks: From Finding
the Densest Subgraph to Modeling User Engagement
Farnoosh Hashemi
Cornell University
Ithaca, NY, USA
sh2574@cornell.eduAli Behrouz
Cornell University
Ithaca, NY, USA
ab2947@Cornell.edu
ABSTRACT
In many complex systems, the interactions between objects span
multiple aspects. Multiplex networks are accurate paradigms to
model such systems, where each edge is associated with a type. A
key graph mining primitive is extracting dense subgraphs, and this
has led to interesting notions such as ùëò-cores, known as building
blocks of complex networks. Despite recent attempts to extend the
notion of core to multiplex networks, existing studies suffer from a
subset of the following limitations: They 1force all nodes to exhibit
their high degree in the same set of relation types while in multiplex
networks some connection types can be noisy for some nodes, 2
either require high computational cost or miss the complex informa-
tion of multiplex networks, and 3assume the same importance for
all relation types. We introduce S-core, a novel and unifying family
of dense structures in multiplex networks that uses a function S(.)
to summarize the degree vector of each node. We then discuss how
one can choose a proper S(.)from the data. To demonstrate the
usefulness of S-cores, we focus on finding the densest subgraph
as well as modeling user engagement in multiplex networks. We
present a new density measure in multiplex networks and discuss
its advantages over existing density measures. We show that the
problem of finding the densest subgraph in multiplex networks is
NP-hard and design an efficient approximation algorithm based
onS-cores. Finally, we present a new mathematical model of user
engagement in the presence of different relation types. Our experi-
ments shows the efficiency and effectiveness of our algorithms and
supports the proposed mathematical model of user engagement.
CCS CONCEPTS
‚Ä¢Mathematics of computing ‚ÜíGraph theory; ‚Ä¢Theory of
computation‚ÜíGraph algorithms analysis.
KEYWORDS
Multiplex Networks, ùëò-core, Densest Subgraph, User Engagement
ACM Reference Format:
Farnoosh Hashemi and Ali Behrouz. 2024. A Unified Core Structure in Mul-
tiplex Networks: From Finding the Densest Subgraph to Modeling User En-
gagement. In Proceedings of the 30th ACM SIGKDD Conference on Knowledge
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
¬©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3672011
ùë£5ùë£3ùë£7ùë£2ùë£4ùë£8ùë£6ùë£1ùë£9ùë£13ùë£10ùë£12ùë£14ùë£11ùë£15Figure 1: An example of multiplex collaboration network.
Discovery and Data Mining (KDD ‚Äô24), August 25‚Äì29, 2024, Barcelona, Spain.
ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/3637528.3672011
1 INTRODUCTION
In applications such as biological, social, and financial networks,
interactions between objects span multiple aspects. For example,
in social networks interactions between people can be social or
professional, and professional interactions can differ according to
topics. Accurate modeling of such applications has led to multiplex
networks (ML) [ 39], where nodes have interactions in multiple types
of connections (a.k.a layers). They have since gained popularity in
many applications in social and biological networks, and in opinion
dynamics [17, 45, 49].
Example 1. Figure 1 shows a multiplex collaboration network, where
each node is a researcher, each edge is a collaboration, and each layer
represents collaborations in an area of research.
Understanding the network topology and finding dense subgraphs
are long-standing problems in network science with many applica-
tions [ 23,27]. A common method for identifying dense subgraphs
is to formulate an objective function (i.e., density) based on nodes‚Äô
degree and solve it via optimization methods [ 5,29,51]. While
the problem of finding the densest subgraph in simple graphs is a
well-studied problem [ 40], finding dense subgraphs from multiplex
networks recently attracts attention [5, 7, 28, 32].
Despite the recent attempts to extend the known concepts of dense
subgraphs to multiplex networks (e.g., [ 7,32,43]), existing studies
suffer from a subset of the following limitations: 1They force
nodes to satisfy degree constraints in a fixed subset of layers, includ-
ing noisy/insignificant layers [ 28]. These layers can be different for
each node [ 32] and so this hard constraint can result in missing
some dense structures [ 32].2They require exponential running
time algorithms, making them infeasible for large real-world graphs.
1028
KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Farnoosh Hashemi and Ali Behrouz
3Taking advantage of the complementary information provided
by different relation types is challenging as in real-world graphs, dif-
ferent relation types have different importance or roles with respect
to the application (see [ 10,14] for more details). Existing methods
treat all relation types equally, causing suboptimal performance
and missing information (see ¬ß6).
Besides the above limitations, the complication caused by the defi-
nition of degree in multiplex networks makes it challenging to nav-
igate the vast landscape of existing methods and evaluate trade-offs
between them in practice. That is, while the degree of each node in
simple graphs is represented by a single number, the degree of each
node in multiplex networks with |ùêø|layers is an|ùêø|-dimensional
vector (also called degree vector), in which the ‚Ñì-th element shows
the number of the node‚Äôs neighbors in layer ‚Ñì. Accordingly, this
high dimensional representation of the degree results in a trade-off
between the complexity of the methods and their power to capture
the information about the neighborhood of nodes in each layer.
For example, Galimberti et al . [28] suggest using the entire degree
vector in objective function, which results in an exponential time de-
composition algorithm but Hashemi et al . [32] suggest sampling the
ùúÜ-th largest element of degree vector as its representative, which
results in linear time decomposition algorithms. While the former
uses all the information provided by the degree vectors, the later
methods miss all the information about the nodes‚Äô neighbors in
different relation types except the ùúÜ-th largest value. Accordingly, it
can be challenging to choose a proper objective function to extract
dense structures in practice, and in many cases, it requires paying
attention to the data and available computational capacity.
To mitigate the above limitations, we present S-core, a new unifying
family of dense subgraphs in multiplex networks. The main intu-
ition of S-cores is to use a summarizer function, S(.), and summarize
the degree vector of each node into a low dimensional space, miti-
gating time inefficiency and avoiding too hard constraints. Given a
ùëë-dimensional threshold vector k, we define(k,S)-core as a max-
imal subgraph in which each node ùë¢has summrized degree of at
least kwithin the subgraph. Interestingly, S-cores includes exist-
ing families of dense multiplex subgraphs as its special cases when
choosing different summarizer S(.). We discuss how one can choose
a proper S(.)based on the network topology. We propose efficient
algorithms to find all possible S-cores and show their scalability
to graphs with millions of connections (see ¬ß 6). Finally, we focus
on two applications of S-cores: iFinding the densest multiplex
subgraph, and iimodeling the user engagement in multiplex net-
works:
Densest Multiplex Subgraph. The main challenge to define the
density of a subgraph in multiplex networks is the trade-off be-
tween high density and the number of layers in which the high
density holds. To this end, existing studies [ 28,32] model the trade-
off as a maximin optimization of the average density objective
and use a parameter ùõΩ>0to add a penalty for choosing small
subset of layers. While these formulations allow us to control the
trade-off, their main drawback is that they force allnodes within
the subgraph to exhibit their high degree in a fixsubset of layers.
In multiplex networks different layers for different nodes might
be noisy/insignificant [28, 32]. We present a new density measure
in multiplex networks, and define the density as the average ofmaximin optimization of nodes‚Äô degree (instead of maximin opti-
mization of the average degree [ 28,32]). This will allow nodes to
exhibit their high degree in different and flexible subset of layers.
We show that this optimization problem is NP-hard, and use the
densest S-core to approximate the problem of finding the densest
subgraph. Not only this approximation algorithm provide effec-
tive guarantee for our density formulation, but it also can provide
an approximate solution to the problem of densest subgraph with
respect to existing density measures [ 28,32] with approximation
guarantee that matches the best existing algorithms.
User Engagement. A fundamental question in understanding so-
cial networks is that ‚Äúhow users decide to engage in a social net-
work?‚Äù. Several studies [ 11] model this as a simultaneous game
where each user decides to remain engage or drop out. While these
models assume a single type of interaction, in complex social sys-
tems, users have different types of interactions and each interaction
type has its own effect on the engagement of the users. For example,
on Instagram, engagement in sharing posts, stories, and/or sending
messages are different for each user. Inspired by Bhawalkar et al .
[11], we model user engagement in each type of connection as a
simultaneous game ( |ùêø|games in total), in which each user decides
to remain engage or drop out in that specific type of interaction. We
show that S-cores are unique maximal equilibriums of this game,
and provide empirical evidences to support the model design.
Summary of Contributions. 1We present a new family of
dense structures in multiplex networks, S-cores, that unifies ex-
isting degree-based families of dense multiplex subgraphs, using a
single function S(.).2We provide detailed discussion of how in
practice one can choose S(.)to avoid information loss. 3We intro-
duce a new, efficient, and powerful variant of S-core, WFirmCore,
and show its useful properties. 4We develop efficient algorithms
for the general case (arbitrary function S(.)) and WFirmCore. 5
We present a new density objective in multiplex networks that
mitigates the hard constraints of existing density measures, leading
to finding more cohesive subgraphs. 6We discuss the hardness
of this problem and design an approximation algorithm using the
densest S-core with provable guarantee. We further show that this
guarantee is valid when using existing density measures, which
matches the best approximation factor for this problem. 7We fur-
ther use S-cores to model user engagement in multiplex networks
as|ùêø|(number of interaction types) simultaneous game in which
each user decides to remain engage or drop out in every single type
of interaction. We show that S-cores are unique maximal equilibri-
ums of this game and provide empirical evidences to support the
model design. Proofs, toy examples for all concepts and algorithms,
and additional experiments are in Appendix.
Notation. Let ùê∫=(ùëâ,ùê∏,ùêø, w)be a multiplex graph, where ùëâis the
set of nodes, ùêøis the set of layers (each layer is a graph corresponds
to a specific relation type), ùê∏‚äÜùëâ√óùëâ√óùêøis the set of edges, and
w(.):ùëâ√óùêø‚ÜíR‚â•0is a function that assigns a weight to each
layer with respect to a node. The set of neighbors of node ùë£in
layer‚Ñìis denotedùëÅ‚Ñì(ùë£)and the degree of ùë£in layer‚Ñìisdeg‚Ñì(ùë£)=
|ùëÅ‚Ñì(ùë£)|. We use vector deg(ùë£)to refer toùë£‚Äôs degree in each layer
(i.e.,(deg(ùë£))‚Ñì=deg‚Ñì(ùë£)). For a set of nodes ùêª‚äÜùëâ,degùêª
‚Ñì(ùë£)is the
degree ofùë£in this subgraph. Given a vector v=[v1,...,vùëë], we
1029A Unified Core Structure in Multiplex Networks: From Finding the Densest Subgraph to Modeling User Engagement KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
use Top-ùúÜelement to refer to ùúÜ-th largest element in v. Therefore,
we use Top- ùúÜdegree ofùë¢to refer to Top- ùúÜelement inùë¢‚Äôs degree
vector.
2 RELATED WORK AND BACKGROUNDS
Dense Subgraph Mining. Several variants of the densest subgraph
problem with different objective functions have been designed in
simple networks [ 26,29,46,51]. Recently, Veldt et al . [51] uni-
fies most existing density objective functions and suggests using
ùëù-mean of node degrees within the subgraph as its density. In multi-
plex networks, Jethava and Beerenwinkel [34]formulate the densest
common subgraph problem and develop a linear-programming for-
mulation. Azimi-Tafreshi et al . [2] extendedùëò-core to multiplex
networks: given an |ùêø|-dimensional vector k=[ùëò‚Ñì]‚Ñì‚ààùêø, the ML
k-core is a maximal subgraph, in which each node in layer ‚Ñìhas
at leastùëò‚Ñìneighbors. Liu and Zou [44] extends this formulation to
multilayer networks with inter-layer connections. Galimberti et al .
[28]propose algorithms to find all possible k-cores, and generalized
the density measure of Jethava and Beerenwinkel [34] as follows:
Definition 1 (Multilayer Density [ 28]).GivenùõΩ>0, the ML
density of subgraph ùê∫[ùêª]is defined as:
ùúå(ùêª)=max
ÀÜùêø‚äÜùêømin
‚Ñì‚ààÀÜùêø|ùê∏‚Ñì[ùêª]|
|ùêª||ÀÜùêø|ùõΩ. (1)
Hashemi et al . [32] introduce FirmCore as a maximal subgraph in
which every node is connected to at least ùëòother nodes within that
subgraph, in each of at least ùúÜindividual layers. Recently, variants
of FirmCore, based on triadic closure [ 7] andùëù-mean [ 5], has been
designed to achieve more cohesive structures. Finally, Kawase et al .
[37] design an LP-based algorithm to find a stochastic solution for
the multiplex densest subgraph problem.
All these methods treat all the layers the same, consider too hard
degree constraint for nodes in all the layers, or assume pre-defined
patterns (which does not necessarily fit all networks in different
domain). Moreover, S-cores are unifying family, meaning that most
existing methods are its special cases. They help to navigate the
vast landscape of existing methods and evaluate trade-offs between
them in practice.
Modeling User Engagement. Mathematical modeling of user
engagement in social networks has attracted attention during the
past two decades [ 13,25,50]. S√§√§skilahti [50] present a payoff
structure when the network topology is either complete, a cycle, or
a star. Several economic models discuss positive network effects of
participation in complete graphs [ 1,36] and competing behavior
setting [ 13,25]. Bhawalkar et al . [11] model this problem as a single
simultaneous in which each user decides to remain engage or drop
out based on its number of active friends. All these studies are
different from our model as they have focused on either ispecific
graph topology, and/or iiisingle type of interaction in the network.
3S-CORE IN MULTIPLEX NETWORK
The main intuition of ùëò-cores in simple graphs is to decompose
the graph into hierarchical structures, in which each node has
sufficient number of neighbours. However, the high dimensional
degree vectors in multiplex networks makes it challenging to defineuniversally accepted notion of core in multiplex networks. Simply
considering the entire degree vector for all nodes 1can cause
computational inefficiency and 2can be too hard constraint [ 32].
To address these challenges, we present S-core structures:
Definition 2 (Summarized Core). Given a multiplex network
ùê∫=(ùëâ,ùê∏,ùêø, w), a non-decreasing function S:Z|ùêø|
‚â•0√ów‚ÜíRùëë
‚â•0
that summarizes degree vector of nodes, and a ùëë-dimensional vector
k=[ùëòùëñ]1‚â§ùëñ‚â§ùëë, the(k,S)-core (k- S-core for short) of ùê∫is a maximal
subgraphùêª=ùê∫[ùê∂ùëò]=(ùê∂ùëò,ùê∏[ùê∂ùëò],ùêø)such that for each node
ùë£‚ààùê∂ùëòwe have S(degùê∂k(ùë£),w)ùëñ‚â•ùëòùëñfor all 1‚â§ùëñ‚â§ùëë. We refer to
vector kas the SCvector index ( SCVindex for short) of ùêª=ùê∫[ùê∂ùëò].
We abuse the notation and remove wwhen the context is clear.
Lemma 1. All multilayer k-core [ 28], FirmCore [ 32], and CoreCube
[43] are special cases of S-cores.
Definition 3 (Maximal SCVIndex). Given a multiplex network
ùê∫=(ùëâ,ùê∏,ùêø, w), a function S:Z|ùêø|
‚â•0√ów‚ÜíRùëë
‚â•0, andùê∫[ùê∂]be a
S-core ofùê∫, letk=[ùëòùëñ]1‚â§ùëñ‚â§ùëëbe a SCVindex ofùê∫[ùê∂].kis called
maximal SCVindex ofùê∫[ùê∂]if there does not exist any SCVindex
k‚Ä≤=[ùëò‚Ä≤
ùëñ]1‚â§ùëñ‚â§ùëëofùê∫[ùê∂]such that‚àÄùëñ‚àà{1,...,ùëë}we haveùëò‚Ä≤
ùëñ‚â•ùëòùëñ
and‚àÉùëó‚àà{1,...,ùëë}such thatùëò‚Ä≤
ùëó>ùëòùëó.
Proposition 1. The maximal SCVindex for each S-core exists and
is unique.
Proposition 2 (Uniqeness). Given a function S(.)andk=
[ùëòùëñ]1‚â§ùëñ‚â§ùëë, thek-S-core ofùê∫is unique.
Proposition 3 (Hierarchical Structure). Given a multiplex
networkùê∫=(ùëâ,ùê∏,ùêø, w)and two S-coresùê∫[ùê∂k]andùê∫[ùê∂k‚Ä≤]with
coreness vectors k=[ùëòùëñ]1‚â§ùëñ‚â§ùëëandk‚Ä≤=[ùëò‚Ä≤
ùëñ]1‚â§ùëñ‚â§ùëë, respectively. If
‚àÄùëñ‚àà{1,...,ùëë}:ùëòùëñ‚â•ùëò‚Ä≤
ùëñthenùê∫[ùê∂k]‚äÜùê∫[ùê∂k‚Ä≤].
Based on the above hierarchical structure property of S-cores, we
define skyline S-core vector indices that can help us to design
efficient algorithms for the general case:
Definition 4 (Skyline SCVIndices). The skyline SCVindices of
a multiplex network are maximal SCVindex k=[ùëòùëñ]1‚â§ùëñ‚â§ùëësuch that
there does not exist any other maximal SCVindex of k‚Ä≤=[ùëò‚Ä≤
ùëñ]1‚â§ùëñ‚â§ùëë
where‚àÄùëñ‚àà {1,...,ùëë}:ùëò‚Ä≤
ùëñ‚â•ùëòùëñand‚àÉùëó‚àà {1,...,ùëë}such that
ùëò‚Ä≤
ùëó>ùëòùëó.
Decomposing a multiplex graph to S-cores requires finding all
k=[ùëòùëñ]1‚â§ùëñ‚â§ùëëcorresponding to possible distinct and non-empty
k-S-core. Based on the above properties, there is a nested property
in the search space of all SCVindices and traversing all states in the
search space is equivalent to find all possible S-cores. To this end,
we say a SCVindex kchild is a child of kparent if there is ÀÜùëñ‚àà{1,...,ùëë}
such that for all ùëñ‚àà{1,...,ùëë}\{ÀÜùëñ}we have(kchild)ùëñ=(kparent)ùëñ
and(kchild)ÀÜùëñ>(kparent)ÀÜùëñ. Contrary to the search spaces of other
families of dense structures discussed in [ 7,28],SCVindices are non-
negative real numbers and their search space is infinite. However,
not all of these S-cores are distinct. Next theorem is the key to design
efficient and finite-time algorithms to traverse distinct S-cores:
Theorem 1. Given a multiplex network ùê∫=(ùëâ,ùê∏,ùêø, w)and its S-
coreùê∫[ùê∂], the unique maximal SCVindex ofùê∫[ùê∂]is aùëë-dimensional
vector Scv(ùê∂)=[minùë¢‚ààùê∂S(degùê∂(ùë¢))ùëñ]ùëë
ùëñ=1.
1030KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Farnoosh Hashemi and Ali Behrouz
3.1 How to Choose S(.)?
A natural question about S-cores is how to choose proper S(.)to
efficiently avoid information loss about the neighborhoods of nodes
in different layers. We need to recall the main intuition behind
core structures in networks. Core structures are densely connected
subgraphs that nodes are required to satisfy a degree constraint
(i.e., each node must have sufficient number of neighbors within
the subgraph). Therefore, we need to choose function S(.)so it can
be a good representative for the degree vector of each node.
Statistical Inference. Let L={L1,...,Lùë°}be a partition of layers
such that the degree distribution of all layers in each partition are
the same. We let PDùëñ:ùúÉùëñbe the degree distribution of layers in
partitionLùëñ. Givenùëñ‚àà{1,...,ùë°}, letLùëñ={‚Ñì(ùëñ)
1,...,‚Ñì(ùëñ)
ùë°ùëñ}. We treat
deg‚Ñì(ùëñ)
1(ùë¢),..., deg‚Ñì(ùëñ)
ùë°ùëñ(ùë¢)asùë°ùëñsamples from the same distribution
PDùëñ:ùúÉùëñ. We now consider two cases:
1Layers are independent (e.g., multiplex brain networks [ 7,10],
biological networks [ 21]): In this case, given a node ùë¢‚ààùëâ, its de-
grees in layers{‚Ñì(ùëñ)
1,...,‚Ñì(ùëñ)
ùë°ùëñ}are i.i.d. samples from a distribution
PDùëñ:ùúÉùëñwith parameter(s) ùúÉùëñ. Accordingly, given these samples, the
minimal sufficient statistics of PDùëñ:ùúÉùëñis the best statistics to pre-
serve information to inference on parameter(s) ùúÉùëñ, i.e., we do not
lose information about the neighborhoods of nodes in layers in Lùëñ.
2Layers are dependent (e.g., social networks [ 15,20,48], collabo-
ration networks [ 19]): Accordingly, degrees of a node in different
layers are dependent and simple statistical methods cannot be used.
We suggest using data summarization methods (e.g., [ 24]), which
summarize dependent data with minimal information loss.
We let the output of either 1or2forLùëñbeSùëñ(.). Finally, we
aggregate all found summarizer functions to obtain S(.).
Sampling from the Degree Vector. Another method to efficiently
reduce the dimension of degree vectors, is to sample order statis-
tics from the degree vectors. ùúÜ-th order statistic of a vector is its
ùúÜ-th smallest value. Accordingly, given ùëë(choose based on com-
putational capacity), and ùúÜ1,...,ùúÜùëë, one can sample ùúÜùëñ-th order
statistics to summarize the degree vector. FirmCore [ 32] is a special
case of this method, where ùëë=1and it uses(|ùêø|‚àíùúÜ+1)-th order
statistic.
Learn to Find Dense Structures. The main drawback of existing
dense subgraph mining methods is that they are based on pre-
defined patterns or constraints (e.g., ùëò-core [ 42],ùëò-truss [ 18]). Real-
world networks, however, are complex in nature and a pre-defined
pattern cannot fit all networks in different domains. Machine learn-
ing models are powerful tools to learn from the data; however,
they mostly focus on classification [ 6], prediction [ 10], and regres-
sion [ 35] tasks and their usefulness in finding the network building
blocks is still unexplored. Our formulation of S-core, can bridge
the gap and allows using machine learning methods to learn what
is the best patterns in a data-driven manner. The main challenge
is the lack of objective function. In the information theoretic per-
spective, since we aim to learn node representation that are good
representative for node‚Äôs degree, we suggest maximizing the mutual
information between the actual degree vector and the encoding of
nodes. Given a graph neural network Gnn(.)[38], we maximizethe following objective: (I( .)is mutual information)
Loss :=1
|ùëâ|‚àëÔ∏Å
ùë¢‚ààùëâI(Gnn(ùë¢),deg(ùë¢)
). (2)
3.2 Temporal Graphs as Multiplex Networks
Dynamic systems are every where [ 8], and temporal networks
are powerful paradigms to model the interactions and their dy-
namics over time in complex dynamic systems. A temporal graph
ùê∫={ùê∫1,...,ùê∫ùëá}is a graph, in which each edge is associated with
a timestamp and each ùê∫ùëñshows the graph snapshot at time ùëñ[33].
Recently, representation of temporal graphs as multiplex networks
attracts attention, where each layer of the multiplex network rep-
resents a snapshot of the temporal graph [32, 53].
Lemma 2. GivenùúÜ, letw‚Ñì=2‚Ñìfor all‚Ñì‚ààùêøandS(X)=Top-ùúÜ(X),
then all(ùëò,Œî)-Span-cores [52] are special cases of ùëò-S-core.
In temporal graphs, the degree vector of each node is a time series
data that shows node‚Äôs degree over time. Accordingly, to find S(.),
one can use summarizing methods for time series data (e.g., [47]).
3.3 S-core: Algorithms
Given a vector k=[ùëòùëñ]1‚â§ùëñ‚â§ùëë, Algorithm 1 finds the k-S-core,Ck.
We start from the entire graph and in each iteration, we remove a
nodeùë¢that does not satisfy S-core‚Äôs condition, i.e., S(deg(ùë¢))ùëñ<ùëòùëñ
for someùëñ. We repeat this process until all remaining nodes satisfies
S-core‚Äôs conditions. This algorithm iterates at most |ùëâ|times as we
stop or remove one node in each iteration. Also, in each iteration,
we update the degree vector with O(|ùêø|)and check the conditions
withO(ùëë). Sinceùëë‚â§|ùêø|, the time complexity is O(|ùëâ||ùêø|+|ùê∏|).
Toy Example for Algorithm 1. In the graph shown in Figure 1,
for the sake of simplicity assume w=1. Since the graph has three
layers, the degree of each node is a vector of size three. Assume
that the degree summarization function for this graph is given as
ùëÜ(hùë•1ùë•2ùë•3i
)=hùëöùëñùëõ(ùë•1,ùë•2,ùë•3)
ùëöùëéùë•(ùë•1,ùë•2,ùë•3)i
. Also assume k=[3,4] and we want to
findk‚àíS-core, which is a maximal subgraph in which each node has
at least a minimum degree of 3 and at least a maximum degree of 4
among the three layers within the subgraph. In the first iteration,
ùêª=ùëâand we have ùëëùëíùëî(ùë£6)=h4
4
2i
andùëÜ(h4
4
2i
)=2
4. Since
2<ùëò1=3, vertexùë£6will be removed from ùêª. After removing ùë£6,
the degree vectors of its neighbors will be updated, resulting in all its
neighbors having a minimum degree of less than 3. Consequently,
ùë£7,ùë£8,ùë£9, andùë£10(all orange vertices) will be removed from ùêª.
Additionally, since ùëëùëíùëî(ùë£2)=h3
3
3i
,ùëÜ(h3
3
3i
)=3
3, and 3<ùëò2=4,
vertexùë£2will be removed from ùêª, and the degree vectors of all its
neighbors will be updated. Consequently, ùë£1,ùë£3,ùë£4andùë£5(purple
vertices) will have a maximum degree of less than 4 and will be
discarded from ùêª. The nodes remaining in ùêª, which are only the
green nodes, have a minimum degree of at least 3 and maximum
degree of at least 4; therefore, they constitute the k-S-core.
Simply traversing SCVindices and applying Algorithm 1 to find
S-cores results in inefficient performance since we start from the en-
tire graph for different SCVindices. Using S-cores‚Äô nested property
(Proposition 3), we use the following corollary to improve efficiency:
1031A Unified Core Structure in Multiplex Networks: From Finding the Densest Subgraph to Modeling User Engagement KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
Algorithm 1 Finding k-S-core
Input: A multiplex network ùê∫=(ùëâ,ùê∏,ùêø, w), a set of nodes ùêª‚äÜùëâ, a non-
decreasing function S:Z|ùêø|
‚â•0√ów‚ÜíRùëë
‚â•0, and a vector k=[ùëòùëñ]1‚â§ùëñ‚â§ùëë.
Output: Thek-S-core ofùê∫.
1:while‚àÉùë¢‚ààùêªand‚àÉùëñ:S(degùêª(ùë¢))ùëñ<ùëòùëñdo
2:ùêª‚Üêùêª\{ùë¢};
returnùê∫[ùêª];
Algorithm 2 S-core Decomposition of Multiplex Networks
Input: A multiplex network ùê∫=(ùëâ,ùê∏,ùêø, w), and a non-decreasing func-
tion S:Z|ùêø|
‚â•0√ów‚ÜíRùëë
‚â•0.
Output: All distinct and non-empty k-S-core ofùê∫.
1:QBfs‚Üê{[ 0]ùëë};
2:QDfs‚Üê√ê
ùëñ‚àà{1,...,ùëë}{k|Ck‚ààDfs-Path(ùê∫,S,QBfs,ùëñ)};‚ä≤Algorithm 3
3:Ckeeps visited S-cores until now, i.e., C‚Üê{ùê∂k|k‚ààQDfs};
4:while QBfs\QDfs‚â†‚àÖdo
5: Pick and remove k=[ùëòùëñ]ùëñ‚àà{1,...,ùëë}from queue QBfs;
6: ifk‚àâQDfsthen
7: Ck‚ÜêS-core(ùê∫,√ê
Àúk‚ààP(k)CÀúk,k);‚ä≤Algorithm 1, Corollary 1
8: ifCk‚â†‚àÖthen
9:C‚ÜêC‚à™{ Ck};
10: QDfs‚ÜêQDfs‚à™{k,[min
ùë¢‚ààCkS(degCk(ùë¢))ùëñ]ùëë
ùëñ=1};‚ä≤Theorem 1
11: else
12: forùëñ=1,...,ùëë do
13: ùëòùëñnew‚Üêùëòùëñ;ùë¢‚àó‚Üê‚àÖ ;ÀÜCk‚ÜêCk;
14: whileùëòùëñnew=ùëòùëñdo ‚ä≤Theorem 1
15: ÀÜCk‚ÜêÀÜCk\{ùë¢‚àó}
16: ùë¢‚àó‚Üêarg min
ùë¢‚ààCkS(min
ùë£‚ààCk\{ùë¢}degCk\{ùë¢}(ùë£))ùëñ;
17: ùëònew
ùëñ‚ÜêS(min
ùë£‚ààCk\{ùë¢‚àó}degCk\{ùë¢‚àó}(ùë£))ùëñ;
18: ÀÜk‚Üê[ùëò1,...,ùëòùëñnew,...,ùëòùëë];
19: enqueue ÀÜkintoQBfs;P(ÀÜk)‚ÜêP( ÀÜk)‚à™{ k};‚ä≤Theorem 1
returnC;
Algorithm 3 Dfs-Path
Input: A multiplex network ùê∫=(ùëâ,ùê∏,ùêø, w), a setùêª‚äÜùëâ,S:Z|ùêø|
‚â•0√ów‚Üí
Rùëë
‚â•0, a vector k=[ùëòùëñ]1‚â§ùëñ‚â§ùëë, and an index ùëñ‚àà{1,...,ùëë}.
Output: The set of all the S-cores ofùê∫varying theùëñ-th element of k.
1:C(k,ùëñ)‚Üê‚àÖ ;B‚Üê‚àÖ ;Index‚Üê‚àÖ
2:forùë¢‚ààùêªdo
3: B[S(degùêª(ùë¢))ùëñ]‚Üê B[S(degùêª(ùë¢))ùëñ]‚à™{ùë¢};
4: Index‚ÜêIndex‚à™{S(degùêª(ùë¢))ùëñ};
5:forùëò‚ààIndex do
6: while B[ùëò]‚â†‚àÖdo
7: remove a node ùë¢from B[ùëò];ùêª‚Üêùêª\{ùë¢};
8: for(ùë¢,ùë£,‚Ñì)‚ààùê∏[ùêª]andS(degùêª(ùë£))ùëñ‚â•ùëòdo
9: B[S(degùêª(ùë£)+1)ùëñ]‚Üê B[S(degùêª(ùë£)+1)ùëñ]\{ùë£};
10: B[S(degùêª(ùë£))ùëñ]‚Üê B[S(degùêª(ùë£))ùëñ]‚à™{ùë£};
11: Index‚ÜêIndex‚à™{S(degùêª(ùë£))ùëñ};
12: forùëó‚àà{1,...,ùëë}\{ùëñ}do
13: for(ùë¢,ùë£,‚Ñì)‚ààùê∏[ùêª]andS(degùêª(ùë£))ùëó<ùëòùëódo
14: B[S(degùêª(ùë£))ùëñ]‚Üê B[S(degùêª(ùë£))ùëñ]\{ùë£};
15:C(k,ùëñ)‚ÜêC( k,ùëñ)‚à™{ùêª};
returnC(k,ùëñ);
Corollary 1. Given a k-S-core,ùê∂, letP(ùê∂)be the set of all S-cores
with maximal SCVindices that are the parents of kin the search
space lattice. We have ùê∂‚äÜ√ë
Àúùê∂‚ààP(ùê∂)Àúùê∂.While the corollary suggests using breadth-first search (BFS) tra-
verse over the maximal SCVindices, so the intersection of S-cores
corresponds to parents can be used in the next level, a simple BFS
traverse causes counting each index as many as its number of
parents. Further, at each new level of the search we re-start the
decomposition algorithm, which is inefficient. To mitigate it, we
use a depth-first search traverse of indices, while inspired by BFS,
we also consider the union of S-cores corresponds to the parents
of each state.
Algorithm 2 shows the pseudocode of the S-core decomposition
algorithm. QBfsandQBfsare queues that keep track of search in
breadth-first and depth-first manners, respectively. We start from
the root (i.e.,[0]ùëë). To look ahead and traverse indices in DFS
manner, we first find S-cores corresponds to all indices that only
theirùëñ-th element is non-zero. These S-cores has nested property
and we only need to look at ùëñ-th element. Algorithm 3 shows this
procedure. We use bin-sort [ 3] to keep the ùëñ-th element of S(deg(.))
of nodes sorted throughout the algorithm and can update them
inO(1)time. We recursively remove nodes in bucket ùëòuntil all
remaining nodes satisfy the S-core conditions. Note that, here, the
indices of buckets are real numbers and so we use set Index to
store all indices of non-empty buckets.
In Algorithm 2, after finding S-cores corresponds to the above paths
(line 2), we start from an index in the Bfsqueue. If it has not seen
in the Dfstraverse, we use Algorithm 1 to find its corresponding
S-core. Notably, based on Corollary 1, we start from the union of
theS-cores corresponds to the current index parents. Lines 8-10
store non-empty S-cores and potential root indices for the Dfs
traverse. Lines 12-19 find potential SCVindices. Note that, using
Theorem 1, it only needs to look at indices whose ùëñ-th element is
the minimum S(deg(.))ùëñof nodes within the subgraph. Therefore,
for next SCVindex, we need to change the ùëñ-th element to second
smallest S(deg(.))ùëñwithin the subgraph (changing to the smallest
result in the same S-coreas the previously found S-core).
Lemma 3. There is a multiplex network ùê∫=(ùëâ,ùê∏,ùêø, w)and function
S(.)such that Algorithm 2 takes O(|ùëâ|ùëë+1|ùêø|+|ùê∏||ùëâ|ùëë)time.
3.4 S-core‚Äôs variants: Weighted FirmCore
There is a trade-off between the diverse solution space and the time
complexity of dense subgraph models in multiplex networks. While
S-core provide the most diverse search space and can unify previous
core structures in multiplex networks, it might require exponential
time algorithm to find all S-cores (e.g., when ùëë‚ààO(|ùêø|)). Next,
we discuss a simple but effective (see Sections 4 and 6) variant of
S-cores and show that it 1is potentially more efficient than the
general case, and 2has good quality in both theory and practice.
Definition 5 (Layer-Weighted FirmCore). Given a multiplex
graphùê∫, a non-negative real-value thresholdùúÜ, and an integer ùëò‚â•0,
the(ùëò,ùúÜ)-WFirmCore of ùê∫is a maximal subgraph ùêª=ùê∫[ùê∂ùëò]=
(ùê∂ùëò,ùê∏[ùê∂ùëò],ùêø)such that for each node ùë£‚ààùê∂ùëòthere are some layers
with cumulative relative importance of at least ùúÜ(i.e.,‚àÉ{‚Ñì1,...,‚Ñìùë†}‚äÜùêø
with√çùë†
ùëñ=1w(ùë£,‚Ñìùëñ)‚â•ùúÜ) such that degùê∂ùëò
‚Ñìùëñ(ùë¢)‚â•ùëò, for1‚â§ùëñ‚â§ùë†.
When refering to(ùëò,ùúÜ)-WFirmCore, we assume that ùúÜis maximal,
i.e., for at least one vertex ùë¢in(ùëò,ùúÜ)-WFirmCore, there is a subset
of layers with cumulative relative importance of exactly ùúÜin which
1032KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Farnoosh Hashemi and Ali Behrouz
ùë¢has a degree of at least ùëò. Since WFirmCores are special cases
ofS-cores, they have its nice properties. However, changing the
value ofùúÜrequires changing function S(.), which its hierarchical
property is unclear.
Property 5.1 (Hierarchical Structure). Given a non-negative
real-value threshold ùúÜ, and an integer ùëò‚â•0, the(ùëò,ùúÜ+ùúñ)-WFirmCore
ofùê∫is a subgraph of its (ùëò,ùúÜ)-WFirmCore for any ùúñ‚ààR+.
Theorem 2. WFirmCore decomposition, which is finding all WFirm-
Cores in a multiplex network, is NP-hard. When w(.)‚Äôs outputs are
integer, the decomposition can be done in Pseudo-polynomial time.
Efficient WFirmCore Decomposition. While WFirmCore is a
special case of S-core, using Algorithm 1 is inefficient as we have
nested property with respect to not only ùëò, but alsoùúÜ(Property 5.1).
GivenùúÜ, we define the WFirmCore index of a node ùë¢, WcoreùúÜ(ùë¢), as
the maximum ùëò‚ààN, such thatùë¢is part of a(ùëò,ùúÜ)-WFirmCore. We
further define Top- ùúÜ(deg(ùë¢),w)as the maximum value of ùëòthat
there are some layers {‚Ñì1,...,‚Ñìùë°}with a cumulative relative weight
(with respect to ùë¢) of at least ùúÜ(i.e.,√çùë°
ùëñ=1w(ùë£,‚Ñìùëñ)‚â•ùúÜ) in which
degùêª
‚Ñì(ùë¢)‚â•ùëò. To calculate the Top- ùúÜ(deg(ùë¢),w), we can simply
sort vector degùêª(ùë¢)and check if the cumulative relative weights
of layers in which ùë¢has a degùêª
‚Ñì(ùë¢)‚â•ùëòis‚â•ùúÜ. This process takes
O(|ùêø|log|ùêø|)time. It is simple to see that ùë¢can be in at most(ùëò,ùúÜ)-
WFirmCore, where ùëò=Top-ùúÜ(deg(ùë¢),w). Accordingly, Algorithm
4 processes the nodes in increasing order of Top ‚àíùúÜ(deg(ùë¢),w). It
uses a vector Bof lists such that each element ùëñcontains nodes with
potential Wcore at most ùëñ. This technique allows us to keep vertices
sorted throughout the algorithm and to update each element in
O(1)time. Algorithm 4 iterates over all given ùúÜùëñs and for each, first
initializes Bwith the minimum of Top ‚àíùúÜùëñ(deg(ùë¢),w)andùë¢‚Äôs index
forùúÜùëñ‚àí1. The reason is due to the nested property with respect to ùúÜ,
ifWcoreùúÜ(ùë¢)=ùëò, then WcoreùúÜ+ùúÄ(ùë¢)‚â§ùëò. We process B‚Äôs elements
in increasing order. If a node ùë¢is processed at iteration ùëò, its WcoreùúÜùëñ
is assigned to ùëòand removed from the graph. Therefore, we need
to update the degree of its neighbors in each layer, which leads to
changing the Top‚àíùúÜùëñ(deg(ùë£),w)of its neighbors and changing their
bucket accordingly (lines 10-12). Note that the above algorithm finds
all(ùëò,ùúÜùëñ)-WFirmCores, given ùúÜùëñfor allùúÜùëñ‚ààŒõ: at the end of(ùëò‚àí1)-
th iteration, each remaining nodes like ùë¢has Top‚àíùúÜùëñ(deg(ùë¢),w)‚â•
ùëòas we removed all nodes with Top ‚àíùúÜ(deg(ùë¢),w)less thanùëòin
the(ùëò‚àí1)-th iteration.
4 THE MULTIPLEX DENSEST SUBGRAPH
As discussed in Section 2, existing density measures in multiplex
networks, assume 1all layers are complete and important, 2
noisy/insignificant/unimportant layers are the same for all nodes
while in many applications, like financial or transportation net-
works, the importance of each relation type for each node is dif-
ferent [ 9], and 3all nodes are forced to exhibit their high-density
in a fixed subset of layers. To address the limitations, we present a
new multiplex density measure that allows layers to have different
weights with respect to each node. Moreover, it does not force the
densest subgraph to exihibits high degree for all nodes in the same
set of layers. The new formulation let each node in the subgraph to
exihibits its high degree in different set of layers.Algorithm 4 Finding
all(ùëò,ùúÜ)-WFirmCores for all ùúÜ‚ààŒõ
Input: A multiplex graph ùê∫=(ùëâ,ùê∏,ùêø, w)and a sorted set Œõ={ùúÜ1,...,ùúÜùëû}.
Output: WFirmCore index Wcore ùúÜ(ùë£)for eachùë£‚ààùëâandùúÜ‚ààŒõ.
1:forùúÜùëñ‚ààŒõdo
2:ùêª‚Üêùëâ;
3: forùë£‚ààùêªdo
4: Index[ùë£]‚Üê min{Top-ùúÜùëñ(deg(ùë¢),w),WcoreùúÜùëñ‚àí1(ùë¢)};
5: B[Index[ùë£]]‚Üêùêµ[Index[ùë£]]‚à™{ùë£};
6: forùëò=1,2,...,|ùêª|do
7: while B[ùëò]‚â†‚àÖdo
8: pick and remove ùë£from B[ùëò]; WcoreùúÜ(ùë£)‚Üêùëò;
9: for(ùë£,ùë¢,‚Ñì)‚ààùê∏[ùêª]andIndex[ùë¢]>ùëòdo
10: update Top-ùúÜ(deg(ùë¢)); removeùë¢from B[Index[ùë¢]];
11: update Index[ùë¢];B[Index[ùë¢]]‚Üê B[Index[ùë¢]]‚à™{ùë¢};
12: ùêª‚Üêùêª\{ùë£};
return WCore;
Algorithm 5 WFC-
Approx
Input: A multiplex graph ùê∫=(ùëâ,ùê∏,ùêø, w), and parameter ùõº‚àà{1,...,|ùêø|}
Output: Approximation solution to the densest subgraph problem.
1:Œõ‚Üêsummations of all subsets of layer weights with size 1‚â§ùë†‚â§ùõº;
2:forùúÜ‚ààŒõdo
3:QùúÜ‚Üêfind all(ùëò,ùúÜ)-WFirmCore ‚ä≤Using Algorithm 4
4: ÀÜùê∂ùúÜ‚Üêfind the densest(ùëò,ùúÜ)-WFirmCore‚ààQùúÜ.
return the densest subgraph among all ÀÜùê∂ùúÜforùúÜ‚ààŒõ.
Problem 1 (Multiplex Densest Subgraph). Given a multiplex
graphùê∫=(ùëâ,ùê∏,ùêø, w), aùõΩ>0, and function ùúå: 2ùëâ‚ÜíR+:
ùúå(ùëÜ)=1
|ùëÜ|‚àëÔ∏Å
ùë¢‚ààùëÜmax
ÀÜùêø‚äÜùêømin
‚Ñì‚ààÀÜùêødeg‚Ñì(ùë¢)√ó¬©¬≠
¬´‚àëÔ∏Å
‚Ñì‚Ä≤‚ààÀÜùêøw(‚Ñì‚Ä≤)¬™¬Æ
¬¨ùõΩ
, (3)
find
a subset of vertices ùëÜ‚àó‚äÜùëâthat maximizes ùúåfunction, i.e.,
ùëÜ‚àó=arg max
ùëÜ‚äÜùëâùúå(ùëÜ). (4)
Note that we can simplify the definition of function ùúå(.)for a
subgraphùëÜas follows:
ùúå(ùëÜ)=1
|ùëÜ|‚àëÔ∏Å
ùë¢‚ààùëÜmax
ùúÜ‚ààùöΩTop-ùúÜ(deg(ùë¢),w
)ùúÜùõΩ, (5)
where ùöΩis the set of weight summation of all subset of layers.
We followed Galimberti et al . [28] , and consider a penalty for choos-
ing small number of layers. In fact, term√ç
‚Ñì‚Ä≤‚ààÀÜùêøw(‚Ñì‚Ä≤)ùõΩ
encour-
ages the density measure to choose more layers.
Theorem 3. The multiplex densest subgraph problem is NP-hard,
and cannot be approximated within a constant factor, unless P=NP.
Approximation Algorithm. To overcome the complexity of the
problem, next, we provide a fast approximation algorithm with
provable guarantee. Algorithm 5 shows the pseudocode of the al-
gorithm. Given a threshold ùõº, we first construct a candidate set for
the value of ùúÜ. To this end, we consider the set of summations of all
possible subsets of layer weights with size 1‚â§ùë†‚â§ùõº, denoted as Œõ.
Next, we use Algorithm 4 for each ùúÜ‚ààŒõ, and then report the dens-
est WFirmCore as the approximate solution. In our experiments,
we observe that ùõº=min{|ùêø|,10}results in a good approximate
1033A Unified Core Structure in Multiplex Networks: From Finding the Densest Subgraph to Modeling User Engagement KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
solution. We let Œ©be the maximum summation of layer weights
over a node, and ùëÜSLbe the densest single-layer subgraph among
all layers with a minimum degree of ùúá‚àó. Letùúìbe the maximum
value that(ùúá‚àó,ùúì)-WFirmCore is non-empty:
Theorem 4. Givenùõº, Algorithm 5 providesmin{ùõº,ùúì}ùõΩ
2Œ©ùõΩ -approximation
solution to the problem of Multiplex Densest Subgraph.
Corollary 2 ( ùõº-independent factor). Independent of ùõº, when
w(.)=1, Algorithm 5 provides1
2|ùêø|ùõΩ-approximation solution.
Proposition 4 (Comparison of Density Measures). Letùúå‚àó(.)
be the density proposed by Galimberti et al . [28] (Definition 1) and
ùúå(.)be our density then for any subgraph ùê∫[ùêª]‚äÜùê∫we have:
ùúå(ùê∫[ùêª])‚â•ùúå‚àó(ùê∫[ùêª]). (6)
This result shows the power of our density measure compare to
[28], as it finds any subgraph found by [ 28] (not vice versa). Also, it
shows our algorithm provides1
2|ùêø|ùõΩ-approx solution to the problem
of densest subgraph with respect to ML density measure [ 28], which
matches its best approximation guarantee [28, 32].
5 A USER ENGAGEMENT MODEL
Several studies [ 11] have modeled user engagement as a simultane-
ous game where each user decides to remain engage or drop out.
However, the main drawback of this approach is that it assumes
there is only one type of connection in the network. In complex
social systems, users have different type of interactions and each
interaction type has its own effect on the engagement of the user.
For example, on Instagram, engagement in sharing posts, stories,
and/or sending messages are different for each user. The behavior
of each user‚Äôs friends can affect their type of engagement (whether
share a story, post a content, or both). Inspired by Bhawalkar et al .
[11], we model user engagement in each type of connection as a
simultaneous game, in which each user decides to remain engage
or drop out. For each user in relation type ‚Ñì, we define its utility
asu‚Ñì(ùë£)=|ùëÅ+
‚Ñì(ùë£)|‚àíùëò‚Ñìif it remains engage, and u‚Ñì(ùë£)=0, if it
drops out. Here,|ùëÅ+
‚Ñì(ùë£)|is the set of ùë£‚Äôs neighbour in layer ‚Ñìthat
remains engage. Next, we define the final utility of the user ùë£as
uùëì
‚Ñì(ùë£)=S(u‚Ñì1(ùë£),..., u‚Ñì|ùêø|(ùë£)), where S(.)is some function.
Theorem 5. k-S-core is the unique maximal equilibrium to the above
game, where(k)‚Ñì=ùëò‚Ñì.
Having presented the basic theoretical model, next we propose a
measure for characterizing the engagement of users:
Definition 6 (Node‚Äôs Engagement). The engagement level of a
node is defined as the maximum L1-norm of its maximal SCVindices:
ùúè(ùë¢)= max
k‚ààMaximalSCV(ùë¢)||k||1. (7)
To show the significance of this model, we empirically will answer
the following questions in our experimental evaluation: 1Do we
really need to consider different types of interactions? (See Figure 6),
2Is degree enough to model user engagement? (See Figure 5
(Right)), and 3How does the proposed node‚Äôs engagement measure
work in real networks? (See Figure 5 (Left))6 EXPERIMENTS
In this section, we evaluate our models and algorithms, and address
the following questions:
‚Ä¢Q1: Is there a superior core model for multiplex networks? Or
depends on the data different core models are needed? (see
Table 1)
‚Ä¢Q2: Is there a trade-off between efficiency and cohesiveness?
(see Table 1, last part)
‚Ä¢Q3: How the dimension of degree summery ( ùëë) affect time and
density? (see Figure 2)
‚Ä¢Q4: How do our algorithms scale with respect to the graph size?
(see Figure 3)
‚Ä¢Q5: How does our approximation algorithm perform compare
to the optimal solution and baselines? (see Figure 4)
‚Ä¢Q6: How well our mathematical model of user engagement can
predict the users‚Äô departure from the network? (see Figure 5)
‚Ä¢Q7: Do we need multiple games to model user engagement?
(see Figure 6)
Datasets. We perform experimental evaluation on thirteen real net-
works (ten datasets for evaluating the algorithms and 3 datasets for
validating the user engagement model) including social [ 15,30,48],
genetic [ 21], co-authorship [ 7], financial [ 22], and co-purchasing
networks [ 41], whose main characteristics are summarized in Ta-
ble 1. The detailed description of datasets is in Appendix C
Baselines. S-core is a unifying family of dense structures and so
existing dense subgraph models are special cases of S-cores. We
use state-of-the-art algorithms FirmCore [ 32] and ML k-core [ 28],
as well as other seven variants of S-cores with different summa-
rizer S(.). WFirmCore is introduced in ¬ß 3.4. S(.)=Sum(.)and
=WSum(.)use the summation and weighted summation of el-
ements in the degree vector, respectively. S(.)=MGcn(.)and
=MGAT(.)useGcn [38] and attention variants of the multiplex
graph neural network in [ 9], respectively, to encode degree vectors.
Finally, S(.)=Stat(.)uses statistical inference discussed in ¬ß 3.1.
Cohesiveness. We first, compere the the density of different vari-
ants of S-cores (including existing state-of-the-art family of dense
subgraphs in the literature) using three different existing density
measures for multiplex networks, i.e., edge density (clique density),
ML degree density [ 28], and our proposed density in Problem 1.
The results are reported in Table 1. 1The results show that there
is no single core model that fits all datasets as the network topol-
ogy and the distribution of node degrees in different layers are the
main indicators of what summarizer function is the best represen-
tative of nodes neighborhood. The proposed WFirmCore, however,
shows promising overall performance compared to other variants,
more specifically with respect to edge density and our density. The
main reason is its flexibility to consider different layer weights with
respect to different nodes. 2The only exception is in genetic net-
works, where learning-based summarizer functions, i.e., MGcn and
MGat achieve the best overall results in three density measures,
possibly due to complex interactions of entities. 3Learning-based
and statistical inference-based methods consistently achieve high
density with respect to all density measures. The main reason is
1034KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Farnoosh Hashemi and Ali Behrouz
Table 1: The density of the densest different variants of S-cores with respect to edge density, ML density [28], and our density. The best (resp.
the second best) result is highlighted in blue (resp. gray). OOT: Time exceeds 24 hours, OOM: Memory exeeds 100 GB.
Dataset Homo Sacchcer
e FAO Brain DBLP Amazon FFTwitter Friendfeed StackO Google+
|ùëâ| 18k 6.5k
214 190 513k 410k 155k 510k 2.6M 28.9M
|ùê∏| 153k 247k
319K 934K 1.0M 8.1M 13M 18M 47.9M 1.19B
Metric |ùêø| 7 7 364
520 10 4 2 3 24 4
WFirmCore 0.58 0.46 0.47 0.90 0.39 0.51
0.59 0.48 0.53 0.84
S(.)=[Max(.),Min(.)]0.43 0.41
0.30 0.72 0.36 0.33 0.48 0.31 0.42 OOT
Edge Density‚Üë FirmCor e
[32] 0.47 0.42
0.35 0.78 0.41 0.42 0.52 0.36 0.45 0.52
(√ç
‚Ñì‚ààùêøw‚Ñì|ùê∏‚Ñì[ùëÜ]|
w‚àó√ó(|ùëÜ|
2))MLk-core
[28] 0.44 0.43
OOM OOM 0.37 0.40
0.56 0.35 OOM OOT
S(.)=Sum(.) 0.40 0.39
0.29 0.70 0.32 0.37 0.46 0.31 0.41 0.44
S(.)=WSum(.) 0.42 0.40
0.31 0.73 0.35 0.34 0.49 0.32 0.40 0.47
S(.)=MGcn(.)[9] 0.69 0.66 0.38 OOM 0.38 0.43
0.52 0.38 OOM OOM
S(.)=MGa t(.)[9] 0.71 0.66 0.40 OOM 0.37 0.45
0.51 0.41 OOM OOM
S(.)=Sta
t(.)[¬ß 3.1] 0.42 0.41
OOM 0.74 0.36
0.44 0.47 0.37 OOM 0.47
WFirmCore 31.14 28.59 1854.07 7935.29
82.91 61.38 99.26 216.74 118.33 173.81
S(.)=[Max(.),Min(.)]26.07 24.88
1469.31 6932.78 74.72 38.85 96.53 160.02 105.28 OOT
MLDensity‚Üë FirmCor e
[32] 29.74 25.87
1673.18 7163.89 78.91 43.52 100.24 170.87 107.09 164.81
(Galimberti et al. [28]) MLk-core
[28] 27.84 26.92
OOM OOM 75.19 40.54
102.37 164.81 OOM OOT
S(.)=Sum(.) 23.58 22.91
1419.43 6846.21 71.58 37.68 93.44 159.18 101.36 157.92
S(.)=WSum(.) 25.85 24.07
1492. 97 6984.49 74.08 39.46 97.81 161.25 104.67 160.73
S(.)=MGcn(.)[9] 31.50 28.51 1649.17
OOM 76.65 54.52
96.48 184.35 OOM OOM
S(.)=MGa t(.)[9] 31.09 28.51 1752.28
OOM 77.31 52.83
98.95 191.28 OOM OOM
S(.)=Sta
t(.)[¬ß 3.1] 25.97 25.15
OOM 7072.63 75.07
55.38 97.24 91.08 OOM 162.68
WFirmCore 70.17 58.17 3044.85 10935.29 94.36 61.38 104.70 228.09 205.98 199.62
S(.)=[Max(.),Min(.)] 60.86 50.71
2480.63 8115.23 72.69 46.85 92.48 209.72 191.03 OOT
OurDensity‚Üë FirmCor e
[32] 68.79 54.20
2718.91 9017.69 82.56 57.38 101.55 220.43 198.71 180.62
(Problem 1) MLk-core
[28] 63.79 51.67
OOM OOM 75.09 51.33
99.71 219.84 OOM OOT
S(.)=Sum(.) 60.28 47.96
2472.58 8025.94 70.73 45.91 91.55 204.57 191.22 173.38
S(.)=WSum(.) 61.58 49.40
2499.74 8252.33 71.18 47.38 93.58 207.49 193.14 175.26
S(.)=MGcn(.)[9] 71.43 58.33 2635.17 OOM 78.68 50.04
95.47 214.72 OOM OOM
S(.)=MGa t(.)[9] 72.39 58.33 2881.32 OOM 81.25 48.87
97.29 212.49 OOM OOM
S(.)=Sta
t(.)[¬ß 3.1] 62.51 52.20
OOM 8368.29 72.69
50.95 91.68 211.31 OOM 176.83
WFirmCore 36 82
4219 7205 872 954 917 4788 20811 74893
S(.)=[Max(.),Min(.)]31 758
14355 7584 729 976 2980 6053 40172 OOT
Running Time
(s)‚Üì FirmCor e
[32] 20 41
2454 3273 362 394 359 891 8053 36027
(Decomposition Alg.) MLk-core
[28] 57 3129
OOM OOM 1283 6852
3082 14159 OOM OOT
S(.)=Sum(.) 11 17 25 54 62 210 219 547 628 18518
S(.)=WSum(.) 24 21 23 59 68 296 307 526 579 19577
S(.)=MGcn(.)[9] 52 2062
30217 OOM 987 4570
1282 8911 OOM OOM
S(.)=MGa t(.)[9] 50 2208
24195 OOM 1199 1604
2735 5106 OOM OOM
S(.)=Sta
t(.)[¬ß 3.1] 27 968
OOM 433 775
4739 212 7946 OOM 19904
1 5 10 15 20 24
d102103104Running Time
1 5 10 15 20 24
d0.400.450.500.55Edge Density
Figure 2: The effect of ùëëon Time (Left), and Density (Right).
that these methods do not use a pre-defined rule/pattern and find a
good summarizer in data-driven manner. 4As expected, (weighted)
collapsing the multiplex networks, by using S(.)=Sum(.)and
=WSum(.)achieve poor performance as it misses complex inter-
actions in different layers, causing impossibility of inference about
nodes‚Äô neighborhood [ 31].5The superior performance of WFirm-
Core over FirmCore shows the importance of considering layer
weights when finding dense structures.
Efficiency of Algorithms. The last part of Table 1 compares the
running time of the different dense subgraph models. As expected,
using simple summarizer function (e.g., Sum(.)and Top-ùúÜ(.)) to
summarize the degree vector to a single number results in more
efficient decomposition algorithms. Furthermore, it shows that
using high dimensional representation of degree (i.e., large ùëë) makes
the approach impractical for networks with either large size or |ùêø|.
|E|0.5√ó104
104
2√ó104
4√ó104
8√ó104
16√ó104|L|
1471013162024Time (s)
10 102 103 104 105
|V|0.5√ó103
103
2√ó103
4√ó103
8√ó103
16√ó103|L|
1471013162024Time (s)
10102103104105Figure 3: The effect of |ùê∏|(Left), and|ùëâ|(Right) on running time.
Conclusion of Table 1. Table 1 is a clear evidence of the three-way
trade-off of efficiency (both time and memory), effectiveness (i.e.,
density), and too hard degree constraints (the output dimension of
S(.)) in real-world multiplex networks. That is, for large networks
(either graph size or #layers) we have to use methods that sum-
marize the degree vector to a single number. The main reason of
this three-way trade-off is that there is no pre-defined pattern/rule
that fits all networks, and so we need to decide about the patterns
of interests in a data driven manner, depending on the network
topology and available computation capacity.
The effect of ùëë. To evaluate the effect of ùëëon both running time
and density of S-cores, we vary its value and report the density and
1035A Unified Core Structure in Multiplex Networks: From Finding the Densest Subgraph to Modeling User Engagement KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
1 5 10 15 20 25 30 
œÑ10‚àí310‚àí210‚àí1100Probability of Departure
Cannes2013
ObamaInIsraelNYClimate
1 500 1000 1500 2000 2500 
Degree010‚àí410‚àí310‚àí210‚àí1100Probability of Departure
Figure 5: Probability of departure vs. nodes‚Äô engagement level ùúè(Left), and nodes‚Äô average
degree (Right).
1 10 20 30  
k10‚àí310‚àí210‚àí1100Probability of Departure
Cannes2013
ObamaInIsrael
NYClimateFigure 6: Probability of departure vs. core num-
ber in the collapsed graph.
Homo Sacchcere Brain DBLP0.00.20.40.60.81.0Ratio
ML K-Core
GuaranteeWFirmCore
Figure 4: The empirical approximation factor of WFC-Approx.
running time of S-coreon a subset of StackOverflow in Figure 2. As
expected, larger ùëëalways results in a slower decomposition algo-
rithm, as we have larger search space. On the other hand, however,
finding the best value of ùëëto achieve higher density depends on the
network topology and the trend can vary from a dataset to another.
Accordingly, increasing ùëëmight result in lower density as it might
be a too hard constraint for core structures.
Scalability. Figure 3 demonstrates the effect of #layers and graph
size on the running time of the S-core decomposition algorithm. In
this part, we use different versions of a variable size subgraph of
StackOverflow obtained by selecting a variable number of layers
from 1 to 24. The running time of S-core, scales gracefully with
respect to both|ùê∏|and|ùêø|and also scales near linear with respect
to|ùêø|. Notably, based on the running time results in Table 1, some
variants of S-core (e.g., FirmCore [ 32] and WFirmCore) can scale
to graphs with billions of edges.
Densest Subgraph: Approximation Performance. To empiri-
cally evaluate the quality of the solution found by our proposed
approximation algorithm for Problem 1, we report the ratio of the
density of the found solution over the optimal density in Figure 4.
The results show that WFC-Approx algorithm, in practice, finds
solutions with higher density than its guarantee. We further com-
pare it with ML k-core, which is the state-of-the-art algorithm for
approximating the densest subgraph problem. The results show the
superior performance of our algorithm.
DBLP Case Study. Existing density measure forces all nodes to
exhibit their high degree in a fixed subset of layers. To support our
motivation of designing a new density measure that allows nodes to
exhibit their high degree in flexible subsets of layers, we perform a
case study on DBLP dataset. Here, each node is a researcher and two
nodes are connected if they have published a paper with each other.
The type of connections are obtained using LDA [ 12] algorithm
on the topics and abstracts of the paper. Accordingly, each layer is
the collaboration network in a specific research topic. We then findand compare the densest subgraph by our approach and Galimberti
et al. [28] . The found subgraph by our approach consists of two
communities,AandB, with edge density of 0.41, while the found
densest subgraph by Galimberti et al . [28] is onlyAwith edge
density of 0.38. Since the ML density forces all nodes to have high
degree in a fixed set of layers, it misses the Bcommunity as they
collaborated in different topics than the Acommunity. The found
communities are visualized in Appendix C.1.
Modeling User Engagement. In this experiment, we evaluate
the correlation between the proposed user engagement level, ùúè(.),
and the probability of departure from the network. We use three
temporal multiplex networks obtained from X(formerly Twitter)
during exceptional events with 3 layers, corresponding to repost,
mentions, and replies between users (details are in Appendix C).
We consider a user departed if they stop posting about the topic.
Figure 5 (Left) reports the probability of departure with respect to
ùúè(.). Interestingly, most users with a low (resp. high) engagement
level depart (resp. stay in) the network. These results support our
mathematical formulation for user engagement. Figure 5 (Right)
reports the same experiments with respect to the average degree.
The results show that a simple average degree is not a good indicator
of engagement in social networks.
Importance of Multiple Games. Figure 6 reports the probability
of departure with respect to the core number in a collapsed graph
obtained from a multilayer graph by merging edges. The results
indicate that the core number in a collapsed network, while infor-
mation about different types of connections is available, is not a
good indicator of engagement in social networks.
7 CONCLUSION
We present a new family of dense subgraphs in multiplex networks
that unifies existing families using a single function S(.). We show
thatS-core has the nice properties of ùëò-cores in simple graphs and
suggest three methods (i.e., statistical inference-, sampling-, and
learning-based) to choose function S(.)in a data-driven manner.
We further propose a new density measure for multiplex networks,
and design a new variant of S-cores to effectively approximate
the solution of the densest subgraph problem. Finally, based on
S-cores, we propose a new mathematical model for modeling user
engagement in social networks with different types of interactions.
Our experimental evaluation shows the efficiency and effectiveness
of our algorithms and supports the proposed mathematical model
of user engagement.
1036KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Farnoosh Hashemi and Ali Behrouz
REFERENCES
[1]W Brian Arthur. 1989. Competing technologies, increasing returns, and lock-in
by historical events. The economic journal 99, 394 (1989), 116‚Äì131.
[2]N. Azimi-Tafreshi, J. Gomez-Garde, and S. N. Dorogovtsev. 2014. k-
corepercolation on multiplex networks. Physical Review E 90, 3 (Sep 2014).
[3]Vladimir Batagelj and Matja≈æ Zaver≈°nik. 2011. Fast algorithms for determining
(generalized) core groups in social networks. Advances in Data Analysis and
Classification 5, 2 (2011), 129‚Äì145.
[4]Ali Behrouz and Farnoosh Hashemi. 2022. CS-MLGCN: Multiplex Graph Convo-
lutional Networks for Community Search in Multiplex Networks. In Proceedings
of the 31st ACM International Conference on Information and Knowledge Manage-
ment (Atlanta, GA, USA) (CIKM ‚Äô22). Association for Computing Machinery, New
York, NY, USA, 3828‚Äì3832. https://doi.org/10.1145/3511808.3557572
[5]Ali Behrouz and Farnoosh Hashemi. 2023. Generalized Densest Subgraph in
Multiplex Networks. arXiv preprint arXiv:2310.04893 (2023).
[6]Ali Behrouz and Farnoosh Hashemi. 2024. Graph Mamba: Towards Learning on
Graphs with State Space Models. arXiv preprint arXiv:2402.08678 (2024).
[7]Ali Behrouz, Farnoosh Hashemi, and Laks V. S. Lakshmanan. 2022. FirmTruss
Community Search in Multilayer Networks. Proc. VLDB Endow. 16, 3 (nov 2022),
505‚Äì518. https://doi.org/10.14778/3570690.3570700
[8]Ali Behrouz, Michele Santacatterina, and Ramin Zabih. 2024. Chimera: Effectively
Modeling Multivariate Time Series with 2-Dimensional State Space Models. arXiv
preprint arXiv:2406.04320 (2024).
[9]Ali Behrouz and Margo Seltzer. 2022. Anomaly Detection in Multiplex Dynamic
Networks: from Blockchain Security to Brain Disease Prediction. In NeurIPS
2022 Temporal Graph Learning Workshop. https://openreview.net/forum?id=
UDGZDfwmay
[10] Ali Behrouz and Margo Seltzer. 2023. Anomaly Detection in Human Brain via
Inductive Learning on Temporal Multiplex Networks. In Machine Learning for
Healthcare Conference, Vol. 219. PMLR.
[11] Kshipra Bhawalkar, Jon Kleinberg, Kevin Lewi, Tim Roughgarden, and Aneesh
Sharma. 2015. Preventing unraveling in social networks: the anchored k-core
problem. SIAM Journal on Discrete Mathematics 29, 3 (2015), 1452‚Äì1475.
[12] David Blei, Andrew Ng, and Michael Jordan. 2001. Latent Dirichlet Allocation.
The Journal of Machine Learning Research 3, 601‚Äì608.
[13] Lawrence E Blume. 1993. The statistical mechanics of strategic interaction. Games
and economic behavior 5, 3 (1993), 387‚Äì424.
[14] Alessio Cardillo, Jes√∫s G√≥mez-Gardenes, Massimiliano Zanin, Miguel Romance,
David Papo, Francisco del Pozo, and Stefano Boccaletti. 2013. Emergence of
network features from multiplexity. Scientific reports 3, 1 (2013), 1‚Äì6.
[15] Fabio Celli, F Marta L Di Lascio, Matteo Magnani, Barbara Pacelli, and Luca Rossi.
2010. Social Network Data and Practices: the case of Friendfeed. In SBP-BRiMS
(Lecture Notes in Computer Science). Springer Berlin Heidelberg.
[16] Moses Charikar, Yonatan Naamad, and Jimmy Wu. 2018. On Finding Dense
Common Subgraphs. arXiv:1802.06361 [cs.DS]
[17] Shuntong Chen, Huaien Qian, Yanping Wu, Chen Chen, and Xiaoyang Wang.
2019. Efficient Adoption Maximization in Multi-layer Social Networks. In 2019
International Conference on Data Mining Workshops (ICDMW). 56‚Äì60. https:
//doi.org/10.1109/ICDMW.2019.00017
[18] Jonathan Cohen. 2008. Trusses: Cohesive Subgraphs for Social Network Analysis.
InNational security agency. Technical report.
[19] The dblp team. [n. d.]. dblp computer science bibliography. https://dblp.uni-
trier.de/xml/.
[20] M. De Domenico, A. Lima, P. Mougel, and M. Musolesi. 2013. The Anatomy of a
Scientific Rumor. Scientific Reports 3, 1 (2013).
[21] M. De Domenico, M. A. Porter, and A. Arenas. 2014. MuxViz: a tool for multilayer
analysis and visualization of networks. Journal of Complex Networks 3, 2 (Oct
2014), 159‚Äì176. https://doi.org/10.1093/comnet/cnu038
[22] M. De Domenico, V. Nicosia, A. Arenas, and V. Latora. 2015. Structural reducibility
of multilayer networks. Nature communications 6 (2015), 6864.
[23] Xiaoxi Du, Ruoming Jin, Liang Ding, Victor E. Lee, and John H. Thornton Jr.
2009. Migration motif: a spatial - temporal pattern mining approach for financial
markets. In KDD. 1135‚Äì1144.
[24] Ehsan Elhamifar and M De Paolis Kaluza. 2017. Subset selection and summariza-
tion in sequential data. Advances in Neural Information Processing Systems 30
(2017).
[25] Glenn Ellison. 1993. Learning, local interaction, and coordination. Econometrica:
Journal of the Econometric Society (1993), 1047‚Äì1071.
[26] Andr√°s Farag√≥. 2008. A general tractable density concept for graphs. Mathematics
in Computer Science 1, 4 (2008), 689‚Äì699.
[27] Eugene Fratkin, Brian T Naughton, Douglas L Brutlag, and Serafim Batzoglou.
2006. MotifCut: regulatory motifs finding with maximum density subgraphs.
Bioinformatics (Oxford, England) 22, 14 (July 2006).
[28] Edoardo Galimberti, Francesco Bonchi, and Francesco Gullo. 2017. Core De-
composition and Densest Subgraph in Multilayer Networks. In Conference on
Information and Knowledge Management (CIKM).
[29] A. Goldberg. 1984. Finding a Maximum Density Subgraph. Technical Report.[30] Neil Zhenqiang Gong, Wenchang Xu, Ling Huang, Prateek Mittal, Emil Stefanov,
Vyas Sekar, and Dawn Song. 2012. Evolution of Social-Attribute Networks: Mea-
surements, Modeling, and Implications Using Google+. In Internet Measurement
Conference. ACM, NY, USA, 131‚Äì144.
[31] Farnoosh Hashemi and Ali Behrouz. 2024. A Unified Core Structure in Multiplex
Networks: From Finding the Densest Subgraph to Modeling User Engagement.
arXiv preprint arXiv:2406.13734 (2024).
[32] Farnoosh Hashemi, Ali Behrouz, and Laks V.S. Lakshmanan. 2022. FirmCore
Decomposition of Multilayer Networks. In Proceedings of the ACM Web Confer-
ence 2022 (Virtual Event, Lyon, France) (WWW ‚Äô22). Association for Computing
Machinery, New York, NY, USA, 1589‚Äì1600. https://doi.org/10.1145/3485447.
3512205
[33] Petter Holme and Jari Saram√§ki. 2012. Temporal networks. Physics Reports
519, 3 (2012), 97‚Äì125. https://doi.org/10.1016/j.physrep.2012.03.001 Temporal
Networks.
[34] V. Jethava and N. Beerenwinkel. 2015. Finding Dense Subgraphs in Relational
Graphs. In Machine Learning and Knowledge Discovery in Databases. Springer
International Publishing, Cham, 641‚Äì654.
[35] Junteng Jia and Austion R Benson. 2020. Residual correlation in graph neural net-
work regression. In Proceedings of the 26th ACM SIGKDD international conference
on knowledge discovery & data mining. 588‚Äì598.
[36] Michael L Katz and Carl Shapiro. 1985. Network externalities, competition, and
compatibility. The American economic review 75, 3 (1985), 424‚Äì440.
[37] Yasushi Kawase, Atsushi Miyauchi, and Hanna Sumita. 2023. Stochastic So-
lutions for Dense Subgraph Discovery in Multilayer Networks. In Proceedings
of the Sixteenth ACM International Conference on Web Search and Data Mining
(<conf-loc>, <city>Singapore</city>, <country>Singapore</country>, </conf-
loc>) (WSDM ‚Äô23). Association for Computing Machinery, New York, NY, USA,
886‚Äì894. https://doi.org/10.1145/3539597.3570444
[38] Thomas N. Kipf and Max Welling. 2017. Semi-Supervised Classification with
Graph Convolutional Networks. In International Conference on Learning Repre-
sentations. https://openreview.net/forum?id=SJU4ayYgl
[39] Mikko Kivel√§, Alex Arenas, Marc Barthelemy, James P. Gleeson, Yamir Moreno,
and Mason A. Porter. 2014. Multilayer networks. Journal of Complex Networks 2
(2014), 203‚Äì271. https://doi.org/10.1093/comnet/cnu016
[40] Tommaso Lanciano, Atsushi Miyauchi, Adriano Fazzone, and Francesco
Bonchi. 2023. A Survey on the Densest Subgraph Problem and its Variants.
arXiv:2303.14467 [cs.DS]
[41] Jure Leskovec, Lada A. Adamic, and Bernardo A. Huberman. 2007. The Dynamics
of Viral Marketing. ACM Trans. Web 1, 1 (May 2007), 5‚Äìes.
[42] Don R. Lick and Arthur T. White. 1970. k-Degenerate Graphs. Canadian Journal
of Mathematics 22, 5 (1970), 1082‚Äì1096. https://doi.org/10.4153/CJM-1970-125-1
[43] Boge Liu, Fan Zhang, Chen Zhang, Wenjie Zhang, and Xuemin Lin. 2019. Core-
Cube: Core Decomposition in Multilayer Graphs. In Web Information Systems
Engineering ‚Äì WISE 2019, Reynold Cheng, Nikos Mamoulis, Yizhou Sun, and Xin
Huang (Eds.). Springer International Publishing, Cham, 694‚Äì710.
[44] Dandan Liu and Zhaonian Zou. 2023. gCore: Exploring Cross-Layer Cohesiveness
in Multi-Layer Graphs. Proc. VLDB Endow. 16, 11 (jul 2023), 3201‚Äì3213. https:
//doi.org/10.14778/3611479.3611519
[45] Xueming Liu, Enrico Maiorino, Arda Halu, Kimberly Glass, Rashmi B. Prasad,
and Joseph Loscalzo. 2020. Robustness and lethality in multilayer biological
molecular networks. Nature Communications 11 (2020).
[46] Lutz Oettershagen, Honglian Wang, and Aristides Gionis. 2024. Finding Densest
Subgraphs with Edge-Color Constraints. In Proceedings of the ACM on Web Con-
ference 2024 (, Singapore, Singapore,) (WWW ‚Äô24). Association for Computing Ma-
chinery, New York, NY, USA, 936‚Äì947. https://doi.org/10.1145/3589334.3645647
[47] Umit Y Ogras and Hakan Ferhatosmanoglu. 2006. Online summarization of
dynamic time series data. The VLDB Journal 15 (2006), 84‚Äì98.
[48] Elisa Omodei, Manlio De Domenico, and Alex Arenas. 2015. Characterizing
interactions in online social networks during exceptional events. Frontiers in
Physics 3 (2015), 59. https://doi.org/10.3389/fphy.2015.00059
[49] Kaiyan Peng, Zheng Lu, Vanessa Lin, Michael R. Lindstrom, Christian Parkinson,
Chuntian Wang, Andrea L. Bertozzi, and Mason A. Porter. 2021. A Multilayer
Network Model of the Coevolution of the Spread of a Disease and Competing
Opinions. arXiv:2107.01713 [cs.SI]
[50] Pekka S√§√§skilahti. 2005. Monopoly pricing of social goods. (2005).
[51] Nate Veldt, Austin R. Benson, and Jon Kleinberg. 2021. The Generalized Mean
Densest Subgraph Problem. In Proceedings of the 27th ACM SIGKDD (Virtual
Event, Singapore) (KDD ‚Äô21). ACM, New York, NY, USA, 1604‚Äì1614. https:
//doi.org/10.1145/3447548.3467398
[52] Huanhuan Wu, James Cheng, Yi Lu, Yiping Ke, Yuzhen Huang, Da Yan, and
Hejun Wu. 2015. Core decomposition in large temporal graphs. In 2015 IEEE
International Conference on Big Data (Big Data). 649‚Äì658.
[53] Chun-Xue Zhu, Long-Long Lin, Ping-Peng Yuan, and Hai Jin. 2022. Discovering
cohesive temporal subgraphs with temporal density aware exploration. Journal
of Computer Science and Technology 37, 5 (2022), 1068‚Äì1085.
1037A Unified Core Structure in Multiplex Networks: From Finding the Densest Subgraph to Modeling User Engagement KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain
ùë§=1
w	=10w=10ùë£5ùë£3ùë£7ùë£2ùë£4ùë£8ùë£6ùë£1
Figure 7: An example of multiplex collaboration network.
A EXAMPLE: HOW LAYER WEIGHT CAN
AFFECT THE CORE STRUCTURES?
Figure 7 shows a multiplex network, where w(ùë£,ùëô1)=1,w(ùë£,ùëô2)=
10, and w(ùë£,ùëô3)=10,‚àÄùë£‚ààùëâ. FirmCore decomposition treats all
relation types equally and ignores the weights of the layers, there-
fore causing missing information. For example, in the multilayer
graph depicted in Figure 7, FirmCore decomposition, while ignoring
weights, finds{ùë£1,ùë£2,...,ùë£ 8}(the union of blue and red nodes) as a
(1,1),(2,1),(1,2),(2,2)-FirmCore and is not able to find any other
subgraph. However, based on weights, the second and third layers
are more important. Therefore, the WFirmCore decomposition finds
{ùë£1,ùë£2,...,ùë£ 5}(red nodes) as a(2,20)-WFirmCore and{ùë£1,ùë£2,...,ùë£ 8}
(the union of blue and red nodes) as a (1,11),(2,11)-WFirmCore.
This means that WFirmCore takes into account the importance of
layers for each node and provides a more diverse solution space.
B PROOFS
B.1 Lemma 1
Proof. First, let w=1andùëÜ(X)=X, then k-S-core is equivalent
to multilayer k-core [ 28]. Also, given a subset of layers ÀÜùêø‚äÜùêø,
letw=1andùëÜ(X)=XÀÜùêø(corresponding elements to ÀÜùêø), and
k=[ùëò,ùëò,...,ùëò]1√ó|ÀÜùêø|then k-S-core is equivalent to CoreCube [ 43].
Moreover, given ùúÜ‚ààN, letw=1andùëÜ(X)=Top-ùúÜ(X), then
k-S-core is equivalent to FirmCore [32]. ‚ñ°
B.2 Proposition 1
Proof. Since all subgraphs are k=[0]1√óùëë-S-core, the set of all
coreness vector of each subgraph is non-empty and so the maximal
coreness vector exists. To show that this maximal coreness vector
is unique, we use contradiction. Assume that there are two k=
[ùëòùëñ]1‚â§ùëñ‚â§ùëë‚â†k‚Ä≤=[ùëò‚Ä≤
ùëñ]1‚â§ùëñ‚â§ùëësuch that both are maximal coreness
vector ofùê∫[ùê∂]. Based on the definition of maximal coreness vector,
there are indices ‚Ñì1and‚Ñì2such thatùëò‚Ñì1>ùëò‚Ä≤
‚Ñì1andùëò‚Ä≤
‚Ñì2>ùëò‚Ñì2. Now
define Àúk=[Àúùëòùëñ]1‚â§ùëñ‚â§ùëësuch that Àúùëò‚Ñì=max{ùëò‚Ñì,ùëò‚Ä≤
‚Ñì}for all 1‚â§‚Ñì‚â§
ùëë. Based on the definition of maximal coreness vector, Àúkis also
coreness vector of ùê∫[ùê∂], which contradicts the maximality of k=
[ùëòùëñ]1‚â§ùëñ‚â§ùëë‚â†k‚Ä≤=[ùëò‚Ä≤
ùëñ]1‚â§ùëñ‚â§ùëë. Therefore, the maximal coreness
vector for each S-core exists and is unique. ‚ñ°B.3 Proposition 2
Proof. Suppose that ùê∫[ùê∂k]andùê∫[ùê∂‚Ä≤
k]are two distinct k-S-
cores ofùê∫. We know that ùê∫[ùê∂k]is a maximal subgraph such that
‚àÄùë£‚ààùê∫[ùê∂k]:S(degùê∂k(ùë£))ùëñ‚â•ùëòùëñfor all 1‚â§ùëñ‚â§ùëë. Similarly,ùê∫[ùê∂‚Ä≤
k]
is a maximal subgraph with the same property. Then any node
ùë£‚ààùê∫[ùê∂k‚à™ùê∂‚Ä≤
k]has been in either ùê∫[ùê∂k]orùê∫[ùê∂‚Ä≤
k], which means
thatS(degùê∂k‚à™ùê∂‚Ä≤
k(ùë£))ùëñ‚â•S(degùê∂k(ùë£))ùëñ‚â•ùëòùëñ. Therefore, ùê∫[ùê∂k‚à™ùê∂‚Ä≤
k]
satisfies the S-core conditions, contradicting the maximality of
ùê∫[ùê∂k]andùê∫[ùê∂‚Ä≤
k]. ‚ñ°
B.4 Proposition 3
Proof. Letùë£‚ààùê∫[ùê∂k], based on the definition of S-cores, we
have: S(degùê∂k(ùë£))‚â• kand so S(degùê∂k(ùë£))‚â• k‚Ä≤. This implies that
ùë£‚ààùê∫[ùê∂k‚Ä≤]and soùê∫[ùê∂k]‚äÜùê∫[ùê∂k‚Ä≤]. ‚ñ°
B.5 Theorem 1
Proof. We prove by contradiction. First, it is clear that ùê∫[ùê∂]is
([minùë¢‚ààùê∂S(degùê∂(ùë¢))ùëñ]ùëë
ùëñ=1)-S-core, since for each node ùë¢‚ààùê∂and
ùëñ=1,...,ùëë we have: S(degùê∂(ùë¢))ùëñ‚â•minùë£‚ààùê∂S(degùê∂(ùë£))ùëñ,, which
satisfies the condition of the S-cores. Now let ÀÜk=[ÀÜùëòùëñ]ùëë
ùëñ=1be the
maximal SCVindex ofùê∫[ùê∂]. This means that there is index ùëósuch
that ÀÜùëòùëó>minùë¢‚ààùê∂S(degùê∂(ùë¢))ùëó. This contradicts the definition of
S-cores as the node that attains the minùë¢‚ààùê∂S(degùê∂(ùë¢))ùëócannot
satisfy S-core conditions for vector ÀÜk=[ÀÜùëòùëñ]ùëë
ùëñ=1. ‚ñ°
B.6 Lemma 2
Proof. GivenùúÜ, letw‚Ñì=2‚Ñìfor all‚Ñì‚ààùêøandS(X)=Top-ùúÜ(X).
If we consider the binary representation of ùúÜ, then by finding(ùëò,ùúÜ)-
WFirmCore we exactly know what layers are choosen. Accordingly,
givenŒîin span core, one can consider the set of all values of Œîsuch
that the summation of layer weights for all possible Œîconsecutive
layer is calculated. Let us call this set Œ¶. Now(ùëò,ùúÜ)-WFirmCore for
ùúÜ‚ààŒ¶is equivalent to span core with parameter Œî. ‚ñ°
B.7 Theorem 2
Proof. To show the NP-hardness of WFirmCore decomposition,
we show that its special case is NP-hard. To this end, we assume
that the weight of each layer is the same across different nodes, i.e.,
w(ùë¢,‚Ñì)=w(ùë£,‚Ñì)for anyùë¢,ùë£‚ààùëâand‚Ñì‚ààùêø. Given a sequence of
layer weights ùë§1,ùë§2,...,ùë§|ùêø|, the well-known NP-hard problem of
theSubset Sum overùë§1,ùë§2,...,ùë§|ùêø|can be reduced to the decision
problem of whether there is a non-empty (ùëò,ùúÜ)-WFirmCore, as its
YES (resp. NO) instance means there is (resp. is not) a subset of ùë§ùëñ‚Äôs
with summation of ùúÜ.
Since the weight of each layer is integer, we copy each layer by
its weight. Therefore, the resulted multiplex graph is unweighted.
Now, layer-weighted FirmCore on the original graph is equivalent
to simple FirmCore on the constructed graph and since FirmCore
decomposition has polynomial time complexity, i.e., O(|ùê∏||Àúùêø|3+
|ùëâ||Àúùêø|log|Àúùêø|)), WFirmCore decomposition can be done in Pseudo-
polynomial time. Note that here Àúùêøis the summation of weights. ‚ñ°
1038KDD ‚Äô24, August 25‚Äì29, 2024, Barcelona, Spain Farnoosh Hashemi and Ali Behrouz
B.8 Theorem 3
Proof. Assume the case where w(ùë¢,‚Ñì)=1for allùë¢‚ààùëâand
‚Ñì‚ààùêø. We reduce our problem to the problem of densest common
subgraph [ 34], which is NP-hard and also cannot have approxima-
tion algorithm with a constant factor [ 16]. Without loss of gener-
ality we can assume that there is no node with degree zero in at
least one layer. This is a valid assumption as we can simple add a
dummy node and connected to all existing nodes. Therefore, the
dummy node is always in the densest subgraph, and removing it
cannot affect the subgraph that attains the maximum density. Let
ùê∫=(ùëâ,ùê∏,ùêø)be an arbitrary instance of the problem of densest
common subgraph, let ùõΩbe large enough that forces the objective
function to choose all the layers. In this case, the objective function
is equivalent to the densest common subgraph problem in [ 34].‚ñ°
B.9 Theorem 4
Proof. For anyùë¢‚ààùëÜ, we let Œîùë¢(ùëÜ)=|ùëÜ|ùúå(ùëÜ)‚àí(|ùëÜ|‚àí1)ùúå(ùëÜ\{ùë¢}).
It shows how removing node ùë¢can affect the numerator of density
function (note that removing any node affect the denominator in
the same way). Now, let ùëÜ‚àóbe the optimal solution with density
ùõæ
|ùëÜ‚àó|, removing a node cannot increase the density so we have:
ùõæ
|ùëÜ‚àó|‚â•ùõæ‚àíŒîùë¢(ùëÜ‚àó)
|ùëÜ‚àó|‚àí1‚áíŒîùë¢(ùëÜ‚àó)‚â•ùõæ
|ùëÜ‚àó|=ùúå(ùëÜ‚àó). (8)
Now note that:
Œîùë¢(ùëÜ)‚â§max
ÀÜùêø‚äÜùêømin
‚Ñì‚ààÀÜùêødeg‚Ñì(ùë¢)|ùêø|ùõΩ+‚àëÔ∏Å
ùë£‚ààùëÅ(ùë£)|ùêø|ùõΩ‚â§2|ùêø|ùõΩmin
‚Ñì‚ààùêødeg‚Ñì(ùë¢).
Now, letùë¢=arg minùë£‚ààùëÜ‚àómin min‚Ñì‚ààùêødeg‚Ñì(ùë£), it is simple to see
that(min‚Ñì‚ààùêødeg‚Ñì(ùë¢),1)-WFirmCore is not empty and also is con-
sidered in Algorithm 5, which proves the theorem. ‚ñ°
B.10 Proposition 4
Proof. This inequality comes from the definition of the objec-
tive functions. Let ùêø‚àóbe the selected set of layers in objective of
Galimberti et al. [28], then we have:
ùúå(ùê∫[ùêª])=1
|ùëÜ|‚àëÔ∏Å
ùë¢‚ààùêªmax
ÀÜùêø‚äÜùêømin
‚Ñì‚ààÀÜùêødeg‚Ñì(ùë¢)√ó|ÀÜùêø|ùõΩ(9)
‚â•1
|ùëÜ|‚àëÔ∏Å
ùë¢‚ààùêªmin
‚Ñì‚ààùêø‚àódeg‚Ñì(ùë¢)√ó|ùêø‚àó|ùõΩ=ùúå‚àó(ùê∫[ùêª]). (10)
B.11 Theorem 5
Proof. We first show that k-S-core is an equilibrium. To this
end, assume that a user ùë¢who has decided to drop out wants to
change their decision. In this case, its new utility in each layer will
be negative. On the other hand, if a user ùë¢who has decided to
remain engage wants to change their decision and drop out, then
its utility in each layer will be zero. Accordingly, no user wants
to change their decision. Now, note that since the definition of
k-S-core is the maximal subgraph with this property, the maximal
equilibrium should be the maximal k-S-core. ‚ñ°
C DATASETS
We perform experiments on ten real networks, including social, ge-
netic, co-authorship, financial, brain, and co-purchasing networks.SacchCere and Homo [21] are biological networks concerning dif-
ferent genetic interactions between genes in Homo Sapiens and
Saccharomyces Cerevisiae, respectively. FAO [ 22] represents vari-
ous trade relationships among countries, where layers signify prod-
ucts, nodes represent countries, and edges at each layer depict
import/export connections among countries. Brain [ 4,7] is derived
from the functional magnetic resonance imaging (fMRI) of 520 indi-
viduals using the same methodology as in [ 7]. In this dataset, each
layer represents the brain network of an individual, where nodes
correspond to brain regions, and edges show the statistical correla-
tion between the functionality of these nodes. DBLP [ 19] is a co-
authorship network derived following the methodology in [ 7,28],
where each layer represents topics of papers determined using LDA
topic modeling [ 12]. Nodes correspond to researchers, and edges de-
note co-authorship relationships. Amazon [ 41] is a co-purchasing
network, in which each layer is associated with one of its four
snapshots between March and June 2003. FFTwitter [ 15] is a social
network where layers correspond to interactions on Friendfeed and
Twitter, and nodes represent users registered on both platforms.
Friendfeed [ 15] contains interactions such as commenting, liking,
and following among its users over two months. StackOverflow [ 7]
represents user interactions from the StackExchange website, where
each layer corresponds to interactions during a specific hour of
the day. Google+ [ 30,32] comprises four snapshots from Google+
captured between July and October 2011. ObamaInIsrael [ 48] rep-
resents retweeting, mentioning, and replying among Twitter users,
with a focus on Barack Obama‚Äôs visit to Israel in 2013. Cannes [ 48]
represents retweeting, mentioning, and replying among Twitter
users, with a focus on the Cannes Film Festival in 2013. Finally,
NYClimate [ 48] represents retweeting, mentioning, and replying
among Twitter users, with a focus on the People‚Äôs Climate March
in 2014. We use an unsupervised approach to automatically assign
weight to the datasets that do not have layer weights [9].
Figure 8: User Multilayer densest subgraph based on our density in
the DBLP dataset.
C.1 Case Study: DBLP
We report the found densest subgraph by our approach (Left) and
Galimberti et al . [28] (Right) in Figure 8. While both approaches
found the left community as a dense structure, the density measure
proposed by Galimberti et al . [28] misses the other dense structure
as they collaborated in different topics than the left community.
Since this density metric forces all nodes to be active (having high
degree) in a fixed set of layers, it misses this dense structure.
C.2 Full Version, Code, and Datasets
The source code and data have been made available at This link.
See [31] for additional experiments, examples, and proofs.
1039