Scalable Temporal Motif Densest Subnetwork Discovery
Ilie Sarpe
KTH Royal Institute of Technology
Stockholm, Sweden
ilsarpe@kth.seFabio Vandin
University of Padova
Padova, Italy
fabio.vandin@unipd.itAristides Gionis
KTH Royal Institute of Technology
Stockholm, Sweden
argioni@kth.se
Abstract
Finding dense subnetworks, with density based on edges or more
complex structures, such as subgraphs or 𝑘-cliques, is a fundamental
algorithmic problem with many applications. While the problem
has been studied extensively in static networks, much remains to
be explored for temporal networks.
In this work we introduce the novel problem of identifying the
temporal motif densest subnetwork, i.e., the densest subnetwork with
respect to temporal motifs, which are high-order patterns charac-
terizing temporal networks. Identifying temporal motifs is an ex-
tremely challenging task, and thus, efficient methods are required.
To address this challenge, we design two novel randomized ap-
proximation algorithms with rigorous probabilistic guarantees that
provide high-quality solutions. We perform extensive experiments
showing that our methods outperform baselines. Furthermore, our
algorithms scale on networks with up to billions of temporal edges,
while baselines cannot handle such large networks. We use our tech-
niques to analyze a financial network and show that our formula-
tion reveals important network structures, such as bursty temporal
events and communities of users with similar interests.
CCS Concepts
•Theory of computation →Graph algorithms analysis; •
Mathematics of computing →Probabilistic algorithms.
Keywords
temporal motifs; temporal networks; randomized algorithms
ACM Reference Format:
Ilie Sarpe, Fabio Vandin, and Aristides Gionis. 2024. Scalable Temporal Motif
Densest Subnetwork Discovery. In Proceedings of the 30th ACM SIGKDD
Conference on Knowledge Discovery and Data Mining (KDD ’24), August
25–29, 2024, Barcelona, Spain. ACM, New York, NY, USA, 12 pages. https:
//doi.org/10.1145/3637528.3671889
1 Introduction
Networks (or graphs) are fundamental abstractions for understand-
ing and characterizing complex systems, such as social networks [ 21],
biological systems [ 16], and more [ 32,37]. An important primitive
in graph mining is the discovery of dense subgraphs [25]. Dense-
subgraphs find applications in areas such as visualization [ 61],
anomaly detection [ 15], finance [ 7], and social networks [ 20,29].
The density of a subnetwork is often defined as the total number
This work is licensed under a Creative Commons Attribution-
NonCommercial-ShareAlike International 4.0 License.
KDD ’24, August 25–29, 2024, Barcelona, Spain
©2024 Copyright held by the owner/author(s).
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671889
𝑣1
𝑣2
𝑣3
𝑣4
𝑣5
𝑣6
𝑣7𝑥1 𝑥2
𝑥3𝑡1Temporal Motif 𝑀
𝑡2 𝑡3
𝜎:⟨ (𝑥1, 𝑥2),(𝑥2, 𝑥3),(𝑥3, 𝑥1) ⟩1,3Temporal Network 𝑇
4
5
6,9
7810 ,1716
15 12 ,13
11 ,202225(a)
𝑣1
𝑣2
𝑣310
𝑆11
4
𝑣1
𝑣2
𝑣33
10
𝑆24
𝑣1
𝑣2
𝑣33
16
𝑆34
𝑣1
𝑣2
𝑣33
17
𝑆44
(b)
Figure 1: 1a: Representation of a temporal network 𝑇with𝑛=
7vertices,𝑚=18edges (edge labels denote the timings, and
commas denote multiple edges), and a temporal motif 𝑀with
its ordering 𝜎(i.e.,𝜎captures the temporal dynamics of the
motif𝑀). 1b: for𝛿=10only the green sequences ( 𝑆1,𝑆2) are
𝛿-instances of 𝑀in𝑇; the red sequences are not 𝛿-instances,
since𝑆3cannot be mapped on the motif 𝑀following𝜎, and𝑆4
exceeds the timing constraint on 𝛿.
of its edges divided by the number of its vertices, and the densest
subnetwork is the one attaining maximum density. The definition
of density can be extended to higher-order structures, such as 𝑘-
cliques or𝑘-vertex motifs [19,67,69], leading to subnetworks that
offer a more nuanced characterization of the data, e.g., more tightly-
connected communities in social networks.
Many real-world networks are inherently temporal [31], contain-
ing information about the timing of the interactions [ 48]. Temporal
networks enable the study of novel phenomena not observable
otherwise, such as bursty activities [ 35], dynamic reachability, tem-
poral centrality [52, 60, 68], and more [30, 51].
Temporal motifs are small-size subgraphs with edges having
temporal information and a duration bound [ 34,44,45,75]. The
temporal information on the edges captures the temporal dynamics
of the motif, for example, information can spread on a temporal
path𝑥𝑡1→𝑧𝑡2→𝑤only if𝑡1<𝑡2. In addition, a duration constraint
ensures that relevant events occur sufficiently close in time, e.g.,
𝑡2−𝑡1is not too large. Temporal motifs are building blocks for tem-
poral networks, finding novel applications, such as cryptocurrency
network analysis [ 3,74], anomaly detection [ 5], and more [ 39,46].
There has been growing interest in developing efficient algo-
rithms to count and enumerate temporal motifs [ 11,44,47,54,56,
 
2536
KDD ’24, August 25–29, 2024, Barcelona, Spain Ilie Sarpe, Fabio Vandin, and Aristides Gionis
62,63,73]. Identifying temporal motifs is a challenging task, con-
siderably harder than its counterpart in static networks. In fact,
there are motifs that can be identified in polynomial time in static
networks but their identification becomes NP-hard in temporal
networks [ 44]. Therefore, little has been done in characterizing
temporal subnetworks with respect to temporal motif instances.
In this work we introduce and study the novel problem of discov-
ering the densest temporal subnetwork with respect to a temporal
motif, that is given a large temporal network and a temporal motif,
our goal is to find the temporal-motif densest subnetwork, i.e., the
subnetwork maximizing a density function that accounts for the
number of temporal motif instances normalized by its size.
Example. Consider a financial temporal network and a temporal
triangle𝑀:𝑥𝑡1→𝑧𝑡2→𝑤𝑡3→𝑥as from Figure 1a, where 𝑀
captures potential money laundering activities occurring between
users in a short duration [ 42,74]. Some users may be known to be
involved in suspicious activities (e.g., they transfer large amount
of money; shown in red in Fig. 1a) while others are not (e.g., no
history is available for their transactions; shown in yellow or blue
in Fig. 1a). By finding the marked densest subnetwork ( {𝑣1,...,𝑣 5})
according to motif 𝑀we can identify a tightly-connected subset
of users potentially involved in suspicious activities. Interestingly,
this subnetwork may contain new suspicious users (in yellow in
Fig. 1a), not previously identified.
Other promising applications captured by our formulation are,
for example, (i) identifying frequent destinations appearing together
from user travel data, i.e., groups of attractions visited following
a specified travel journey captured by a temporal motif [ 39]; and
(ii) detecting dense groups of users and items according to spe-
cific purchase sequences on e-commerce platforms, again captured
trough temporal motifs [ 11,56]. In both scenarios, the temporal
motif-subnetwork densest subnetwork can provide unique insights,
for (i) it can be used to design novel public transport routes or travel
passes; and for (ii) it can be used for personalized advertising or
identifying users with common purchase habits.
Solving the problem we propose requires exact enumeration ofall
temporal motif instances in the input network, which is extremely
inefficient to perform. To address this issue we propose ALDENTE,
a suite of randomized approximation ALgorithms for the tempo-
ral motif DENsest subneTwork problEm. ALDENTE contains two
novel approximation algorithms leveraging a randomized sampling
procedure, which has been successfully employed for temporal mo-
tif counting [ 44,56,62,63]. Our novel algorithms can leverage any
state-of-the-art unbiased sampling algorithm for temporal motif
counting. The first algorithm in ALDENTE peels the vertex set in
batches until it becomes empty (removing vertices participating in
few temporal motif instances), estimating for small𝜀>0within
(1±𝜀)the different counts needed for peeling. The second algo-
rithm adopts a similar estimated batch-peeling technique but only
for a fixed number of steps. On the remaining vertices it applies
agreedy-peeling approach, where vertices that participate in few
temporal motif instances are peeled one at a time. By carefully com-
bining estimates, our methods output a high-quality solution with
controlled error probability. Both our algorithms avoid exhaustive
enumeration of all temporal motifs in the input network.We show that the problem we study cannot be solved by directly
applying existing techniques tailored to static high-order density
formulations that ignore the information provided by temporal mo-
tifs [14,19,49,67,69,70,72], as this leads to poor quality solutions.
We then embed temporal information in a weighted set of subgraphs,
which can be used to leverage existing techniques for the identifica-
tion of𝑘-vertex Motif Densest Subnetworks ( 𝑘-MDS). This results
into three baselines (an exact methods and two approximate ones),
extending previous ideas for static networks [4, 12, 17, 26].
We finally show that the methods in ALDENTE find high-quality
solutions on billion-edge temporal networks in few hundreds of sec-
onds, where all other baselines cannot terminate in hours.
Summarizing, our contributions are as follows:
1.We introduce the Temporal Motif Densest Subnetwork (TMDS)
problem, asking for the densest subnetwork of a temporal network,
where the density considers the number of instances of a temporal
motif. The TMDS problem strongly differs from existing temporal
cohesive subgraph formulations given its temporal motif -based
density formulation. We show that the TMDS problem is not cap-
tured by analogous formulations on static networks ( 𝑘-MDS) that
disregard temporal information. We then develop three baselines
extending ideas for 𝑘-MDS discovery embedding temporal infor-
mation in a suitable weighted set of subgraphs, unfortunately such
algorithms do not scale on large data.
2.We design ALDENTE, a suite of two novel approximation al-
gorithms based on randomized sampling and peeling techniques,
providing high-quality solutions andscaling on massive networks.
3.We perform experiments on medium- and large-size temporal
networks, with up to billions of edges, validating ALDENTE. We
show that baselines are often inefficient on large datasets. Our
randomized algorithms consistently achieve speedups from ×2to
×43, saving hundreds of GBs of memory, and reporting high-quality
solutions. We conclude with a case study on a financial network
discovering interesting temporal motif dense subnetworks.
Details on application scenarios for TMDS are provided in App. A,
and a summary of the notation is found in App. B. The detailed
proofs of all the theoretical results are reported in our extended
version [64]. Our implementation is publicly available.1
2 Preliminaries
Atemporal network is a pair𝑇=(𝑉𝑇,𝐸𝑇), where𝑉𝑇={𝑣1,...,𝑣𝑛}
is a set of vertices and 𝐸𝑇={(𝑢,𝑣,𝑡):𝑢,𝑣∈𝑉𝑇,𝑡∈R+}is a set
oftemporal edges. We let 𝑛=|𝑉𝑇|be the number of vertices and
𝑚=|𝐸𝑇|be the number of edges. Each edge 𝑒=(𝑢,𝑣,𝑡)∈𝐸𝑇
contains a timestamp 𝑡, representing the time of its occurrence.2
Without loss of generality we assume that the edges in 𝐸𝑇are listed
by increasing timestamp and that timestamps are distinct.3
Next we introduce temporal motifs. For concreteness, we adopt
the definition of temporal motifs proposed by Paranjape et al . [53]
that is one of the most commonly used in practice, but our results
can be extended to other definitions of temporal motifs, e.g., the
1https://github.com/iliesarpe/ALDENTE.
2We will denote directed edges by “ (...)” and undirected edges by “ {...}”.
3In practice priority bits are assigned to enforce a strict total ordering over 𝐸𝑇.
 
2537Scalable Temporal Motif Densest Subnetwork Discovery KDD ’24, August 25–29, 2024, Barcelona, Spain
ones surveyed by Liu et al . [45] .4While we focus on unlabeled
networks, our approach can be also extended to labeled networks.
Definition 2.1 (Paranjape et al . [53] ).A𝑘-vertexℓ-edge temporal
motif with𝑘,ℓ≥2is a pair𝑀=(𝐾,𝜎), where𝐾=(𝑉𝐾,𝐸𝐾)
is a directed and weakly-connected (multi-)graph, with |𝑉𝐾|=𝑘,
|𝐸𝐾|=ℓ, and𝜎is an ordering of the ℓedges in𝐸𝐾.
A𝑘-vertexℓ-edge temporal motif is also identified by the se-
quence⟨(𝑥1,𝑦1),...,(𝑥ℓ,𝑦ℓ)⟩ofℓedges of𝐸𝐾ordered according to 𝜎.
An illustration of a temporal motif is shown in Figure 1a.
Definition 2.2 ( 𝛿-instance of a temporal motif). Given a tempo-
ral network 𝑇, a temporal motif 𝑀, and a value 𝛿∈R+corre-
sponding to a time-interval length, a time-ordered sequence𝑆=
⟨(𝑥′
1,𝑦′
1,𝑡′
1),...,(𝑥′
ℓ,𝑦′
ℓ,𝑡′
ℓ)⟩ofℓunique temporal edges of 𝑇is a
𝛿-instance of the temporal motif 𝑀=⟨(𝑥1,𝑦1),...,(𝑥ℓ,𝑦ℓ)⟩if:
(1) there exists a bijection ℎfrom the vertices appearing in 𝑆to the
vertices of𝑀, withℎ(𝑥′
𝑖)=𝑥𝑖andℎ(𝑦′
𝑖)=𝑦𝑖, and𝑖∈[ℓ];
(2) the edges of 𝑆occur within 𝛿time; i.e.,𝑡′
ℓ−𝑡′
1≤𝛿.
The bijection implies that edges in 𝑆are mapped onto edges in 𝑀
in the same ordering 𝜎. Additionally, a 𝛿-instance is not required to
be vertex-induced. An example of Definition 2.2 is shown in Fig. 1b.
LetS𝑇={𝑆:𝑆is a𝛿-instance of 𝑀in𝑇}be the set of𝛿-instances
of a motif𝑀for a given time-interval length 𝛿. Computing the set
S𝑇is extremely demanding, first such a set can have size O  𝑚
ℓ,
and, in general even detecting a single 𝛿-instance of a temporal
motif is an NP-hard problem [44].
We define a weighting function 𝜏:S𝑇↦→R+that assigns a
non-negative weight to each 𝛿-instance𝑆∈S𝑇based on its edges
and vertices, e.g., accounting for importance scores for vertices
and/or edges, or available metadata. Given 𝑆=⟨(𝑥1,𝑦1,𝑡1),...,
(𝑥ℓ,𝑦ℓ,𝑡ℓ)⟩∈S𝑇two possible realizations of weighting functions are:
(i) a constant function𝜏𝑐:𝜏𝑐(𝑆)=1, and
(ii) a decaying function𝜏𝑑:𝜏𝑑(𝑆)=1
ℓ−1Íℓ
𝑗=2exp(−𝜆(𝑡𝑗−𝑡𝑗−1)),
where𝜆>0controls the time-exponential decay.
In the above, 𝜏𝑐is a simple weighting function where each 𝛿-
instance receives a unitary weight, this can be used in most ex-
ploratory analyses where no prior information is known about
the network. The decaying function 𝜏𝑑is inspired from link-decay
models, where the value of 𝜆corresponds to the inverse of the
average inter-time distance of the timestamps in 𝐸𝑇. Therefore, the
function𝜏𝑑accounts for decaying processes over networks, which
are common in various domains, e.g., email communications, and
spreading of diseases [1, 2, 71].
As an example, considering the instance 𝑆1from Fig. 1a, then
𝜏𝑐(𝑆1)=1, while for 𝜆=0.1then𝜏𝑑(𝑆1)=1
2(𝑒−3𝜆+𝑒−6𝜆)≈0.64.
Given𝑇=(𝑉𝑇,𝐸𝑇)and a subset of vertices 𝑊⊆𝑉𝑇, we denote
with𝑇[𝑊]the temporal subnetwork induced by𝑊as𝑇[𝑊]=
(𝑊,𝐸𝑇[𝑊]), where𝐸𝑇[𝑊]={(𝑢,𝑣,𝑡):𝑢∈𝑊,𝑣∈𝑊,(𝑢,𝑣,𝑡)∈
𝐸𝑇}is the set edges from 𝐸𝑇among the vertices in 𝑊. Given𝑊⊆
𝑉𝑇, a temporal motif 𝑀, and𝛿∈R+, for ease of notation, we
denote withS𝑊the set of all 𝛿-instances of 𝑀in𝑇[𝑊]. With
these definitions at hand we can now assign weights to the set
4By suitably replacing some of the subroutines of the algorithms in ALDENTE.of𝛿-instances of a temporal motif 𝑀in a temporal subnetwork.
Finally, given 𝑊⊆𝑉𝑇and a weighting function 𝜏we define the
thetotal weight of the set of 𝛿-instances of motif 𝑀in𝑇[𝑊]as
𝜏(𝑊)=Í
𝑆∈S𝑊𝜏(𝑆).
As an example, for 𝑇and𝑀as in Fig. 1a, for 𝑊={𝑣1,𝑣2,𝑣3},
the constant weight function 𝜏𝑐, and𝛿=20, we have 𝜏(𝑊)=4.
We are now ready to state the problem we address in this paper.
Problem 1 (Temporal Motif Densest Subnetwork (TMDS)).
Given a temporal network 𝑇=(𝑉,𝐸), a temporal motif 𝑀, a time-
interval length 𝛿∈R+, and a weighting function 𝜏:S𝑇↦→R>0, find
a subset of vertices 𝑊∗⊆𝑉that maximizes the density function
𝜌(𝑊)=𝜏(𝑊)
|𝑊|.
The TMDS problem takes in input a temporal motif 𝑀, a weight-
ing function 𝜏, and the time-interval length 𝛿∈R+. Differently
from existing works in the literature of temporal-networks we are
nottrying to find a time-window to maximize a static (or temporal)
density score. As an example, consider 𝑇and𝑀from Fig. 1a, and
the TMDS problem with constant weighting function 𝜏𝑐. Fig. 1a
shows the solution obtained with 𝛿=10, where the optimal solu-
tion is𝑊∗={𝑣1,𝑣2,𝑣3,𝑣4,𝑣5}with𝜌(𝑊∗)=𝜏(𝑊∗)/|𝑊∗|=6/5.
Note that the timestamps in 𝑇[𝑊∗]span an interval length greater
than𝛿(i.e.,[1,17]).
Throughout this paper we say that a vertex set 𝑊⊆𝑉achieves
an𝛼-approximation ratio, with 𝛼≤1, if𝜌(𝑊)/OPT≥𝛼, where
OPT=𝜌(𝑊∗)is the value of an optimal solution to Problem 1. An
algorithm that returns a solution with an 𝛼-approximation ratio is
an𝛼-approximation algorithm.
We conclude the preliminaries with defining the temporal motif
degree of vertex𝑣∈𝑉𝑇by𝑑𝜏
𝑉𝑇(𝑣)=Í
𝑆∈S𝑉𝑇(𝜏(𝑆) 1[𝑣∈𝑆]), where
1[𝑣∈𝑆]is an indicator function denoting if the vertex appears at
least once over the edges in the 𝛿-instance𝑆. As an example, if we
consider𝑇and𝑀as in Fig. 1a, 𝜏𝑐, and𝛿=10, then𝑑𝜏
𝑉𝑇(𝑣4)=2, as
𝑣4participates in two 𝛿-instances of 𝑀. All the missing proofs are
reported in our extended online version [64].
3 Related work
Densest subgraphs in static networks. Densest-subgraph dis-
covery (DSD) is a widely-studied problem asking to find a subset of
vertices that maximizes edge density [18,25,36,38]. Goldberg [26]
proposed a polynomial-time algorithm for computing the exact
solution using min-cut. Since min-cut algorithms are expensive,
such an algorithm is not practical for large networks. Charikar [12]
developed a faster greedy algorithm achieving a1
2-approximation
ratio. The idea is to iteratively remove the vertex with the smallest
degree, and return the vertex set that maximizes the edge density
over all vertex sets considered. Bahmani et al . [4]proposed methods
trading accuracy for efficiency, including a1
2(1+𝜉)-approximation
algorithm, controlled by a parameter 𝜉>0.
Most related to TMDS are the problems of 𝑘-clique, or𝑘-motif
densest subgraphs [ 14,19,28,49,67,69,70,72]. The𝑘-clique densest-
subgraph problem modifies the standard density definition by re-
placing edges with the number of 𝑘-cliques induced by a vertex
set. This problem is NP-hard. Tsourakakis [70] developed exact and
 
2538KDD ’24, August 25–29, 2024, Barcelona, Spain Ilie Sarpe, Fabio Vandin, and Aristides Gionis
approximate algorithms (extending Goldberg’s and Charikar’s algo-
rithm, respectively) for the 𝑘-clique and triangle-densest subgraph
problem (𝑘=3), further studied by Wang et al . [72] . High-order
core decomposition has been used to approximate the 𝑘-clique and
the𝑘-motif densest-subgraph problems, where density is defined
on𝑘-vertex subgraphs [ 19]. The techniques proposed by Fang et al .
[19] rely on exact enumeration of 𝑘-vertex subgraphs, which in the
case of temporal networks is impractical, especially on large data.
For the𝑘-clique densest-subgraph problem, Mitzenmacher et al .
[49] applied sparsification, which requires exhaustive enumeration
of all𝑘-cliques. Sun et al . [67] developed convex optimization-based
algorithms and a related sampling approach requiring a subrou-
tine that performs exact enumeration of 𝑘-cliques. For TMDS, we
cannot afford listing the set S𝑇as such expensive procedure has
exponential computational cost in general. In our work, we develop
two randomized approximation algorithms that avoid exhaustive
enumeration ofS𝑇, significantly differing from existing approaches.
Densest-subgraph discovery in temporal networks. We do
not discuss methods for DSD on temporal networks defined over
snapshots of static graphs. Such a model is used for representing
more coarse-grained temporal data than the fine-grained model we
adopt, and it is less powerful [24, 31].
Several cohesive subgraph models have been studied [ 24], such
as, periodic densest subgraphs [ 57], bursty communities [ 58], dens-
est subgraphs across snapshots [ 65], correlated subgraphs [ 55],
and subgraphs with specific core properties [ 76]. Our work differs
significantly from all these definitions, as it is based on temporal
motifs. Several problems have been proposed to identify the time
frames maximizing specific density scores [ 59] and extensions of
core-numbers to the temporal scenario [ 22,40,50] or temporal
quasi-cliques [ 41]. Again, our problem strongly differs from all
these works (see our extended version [ 64] for more details). We
also note that, for brevity, we do not discuss algorithms for dy-
namic graphs, i.e., static graphs where edges are added or removed
over time. A large literature exists for this model [ 6,17,27], which,
however, differs significantly from the one we consider.
Algorithms for temporal motifs. We briefly discuss relevant
algorithms for finding temporal motifs, as per Def. 2.1. Paranjape
et al. [53] , who introduced such a definition, developed dynamic-
programming algorithms tailored to specific 3-edge and 2- or 3-
vertex temporal motifs. Subsequently, Mackey et al . [47] developed
a backtracking algorithm to enumerate all 𝛿-instances of an arbi-
trary temporal motif; the complexity of such algorithm is O(𝑚ℓ),
i.e., exponential and not practical. Many other exact-counting algo-
rithms exist, usually tailored to specific classes of temporal motifs
such as triangles [ 54] or small motifs [ 11,23]. Since exact counting
is often impractical, many sampling-based algorithms have been
developed [ 44,56,62,63,73]. In our work, when needed, we will use
the state-of-the-art randomized algorithm by Sarpe and Vandin [63]
for estimating the motif count of an arbitrary temporal motif, which
provides(𝜀,𝜂)-approximation guarantees, i.e., it offers an unbiased
estimate ˆ𝜏(𝑉𝑇)for which P[|ˆ𝜏(𝑉𝑇)−𝜏(𝑉𝑇)|≤𝜀𝜏(𝑉𝑇)]>1−𝜂
when the constant weighting function is considered, which we
extend to arbitrary non-negative weighting functions 𝜏.Algorithm 1: ProbPeel
Input:𝑇=(𝑉𝑇,𝐸𝑇),𝑀,𝛿∈R+,𝜏,𝜉>0,𝜀>0,𝜂∈(0,1).
Output:𝑊.
1𝑊1←𝑉𝑇;𝑖←1;
2while𝑊𝑖≠∅do
3𝑟𝑖←GetBound(𝑊𝑖,𝜀,𝜂/2𝑖);
4D={𝑇1,...,𝑇𝑟𝑖}←A𝑟𝑖(𝑇[𝑊𝑖]);
5 ˆ𝑑𝜏
𝑊𝑖(𝑤1),..., ˆ𝑑𝜏
𝑊𝑖(𝑤|𝑊𝑖|)← GetEstimates(𝑊𝑖,D);
6 ˆ𝜏(𝑊𝑖)← 1/𝑘Í
𝑤∈𝑊𝑖ˆ𝑑𝜏
𝑊𝑖(𝑤);
7𝐿(𝑊𝑖)←n
𝑤∈𝑊𝑖:ˆ𝑑𝜏
𝑊𝑖(𝑤)≤𝑘(1+𝜉)ˆ𝜏(𝑊𝑖)/|𝑊𝑖|o
;
8𝑊𝑖+1←𝑊𝑖\𝐿(𝑊𝑖);𝑖←𝑖+1;
9return𝑊=arg max𝑗=1,...,𝑖{ˆ𝜏(𝑊𝑗)/|𝑊𝑗|};
4 Randomized algorithms
We now introduce the novel randomized approximation algorithms
with tight probabilistic guarantees that we develop in ALDENTE.
The algorithms in ALDENTE will address the TMDS avoiding the
expensive exhaustive enumeration of the set S𝑇, trough which the
TMDS problem can be solved (see discussion in Section 5).
4.1 ProbPeel
The main idea behind ProbPeel is to avoid exhaustive enumeration
ofS𝑇by using random sampling and peeling vertices in “batches”
according to an estimate of their temporal-motif degree. ProbPeel
carefully combines highly-accurate probabilistic (1 ±𝜀,𝜀>0) esti-
mates of the temporal motif degrees of all vertices (that are obtained
by suitably leveraging existing algorithms for global temporal motif
estimation [ 63,73]), and peels vertices in batches at each step of
such a schema, similar non-approximate batch-peeling techniques
have been employed successfully in other settings [4, 17, 66].
We briefly introduce some definitions. Let 𝑇′=(𝑉′,𝐸′)⊆𝑇=
(𝑉𝑇,𝐸𝑇), and recall thatS𝑇′={𝑆:𝑆is a𝛿-instance of 𝑀in𝑇′}is
the set of𝛿-instances fromS𝑇computed only on the subnetwork 𝑇′,
where𝑇′isnotrequired to the subnetwork induced by 𝑉′. For a
given vertex 𝑣∈𝑉𝑇, extending our previous notation, let 𝑑𝜏
𝑇′(𝑣)=Í
𝑆∈S𝑇′𝜏(𝑆)be the temporal motif degree of vertex 𝑣in the sub-
network𝑇′. Clearly,Í
𝑣∈𝑉𝑇𝑑𝜏
𝑇(𝑣)=𝑘𝜏(𝑉𝑇).
We assume a sampling algorithm A, which outputs a sample
𝑇′=(𝑉′,𝐸′)⊆𝑇[𝑊]of a subnetwork 𝑇[𝑊]. Given a subnetwork
𝑇[𝑊]⊆𝑇we will execute the sampling algorithm Ato obtain
𝑟∈Ni.i.d. subnetworks D={𝑇1,...,𝑇𝑟:𝑇𝑖=A(𝑇[𝑊]) ⊆
𝑇[𝑊],𝑖∈[𝑟]}. We use the subnetworks in Dto compute an un-
biased estimator ˆ𝑑𝜏
𝑊(𝑤)of the temporal-motif degree for 𝑤∈𝑊,
and for the correct choice of 𝑟it holds ˆ𝑑𝜏
𝑊(𝑤)∈( 1±𝜀)𝑑𝜏
𝑊(𝑤), and
combine these estimates to obtain an estimator ˆ𝜏(𝑊)∈( 1±𝜀)𝜏(𝑊).
A detailed description can be found in our extended version [64].
Algorithm description. We now present ProbPeel (Algorithm 1),
our probabilistic batch-peeling algorithm. The algorithm has three
parameters, 𝜀>0,𝜂∈(0,1)and𝜉>0. The parameter 𝜀controls
the relative 𝜀-approximation ratio of ˆ𝜏(𝑊)and ˆ𝑑𝜏
𝑊(𝑤), and𝜂con-
trols the failure probability of the algorithm, i.e., the guarantees
ofProbPeel hold with probability >1−𝜂. Last,𝜉>0controls
 
2539Scalable Temporal Motif Densest Subnetwork Discovery KDD ’24, August 25–29, 2024, Barcelona, Spain
the number of vertices to be peeled at each iteration, with higher
values of𝜉more vertices are peeled, so ProbPeel performs less
iterations, at the price of lower quality solutions (line 2).
First, ProbPeel instantiates the vertex set to be peeled (line 1).
Then it starts the main loop that ends when the vertex set 𝑉𝑇be-
comes empty (line 2), and at each iteration 𝑖>0it computes a
bound𝑟𝑖ensuring that with 𝑟𝑖it holds ˆ𝑑𝜏
𝑊𝑖(𝑤)∈( 1±𝜀)𝑑𝜏
𝑊𝑖(𝑤)
with probability >1−𝜂/2𝑖simultaneously for each𝑤∈𝑊𝑖, through
the function GetBound (line 3). It then samples 𝑟𝑖subnetworks from
𝑇[𝑊𝑖]using the sampling algorithm A, denoted byA𝑟𝑖(𝑇[𝑊𝑖]), the
samples are stored in D(line 4). Then it computes the estimates
ˆ𝑑𝜏
𝑊𝑖(𝑤)for each𝑤∈𝑊𝑖(line 5). The algorithm proceeds by peel-
ing vertices in batches according to a threshold that combines the
estimator ˆ𝜏(𝑊𝑖)(computed in line 6) and ˆ𝑑𝜏
𝑊𝑖(𝑤),𝑤∈𝑊𝑖and𝜉>0
(line 7). ProbPeel then updates the vertex set and counter for the
next iteration (line 8). Finally, the algorithm returns the vertex set
maximizing the estimated objective function ˆ𝜏(𝑊𝑗)/|𝑊𝑗|over all
the iterations 𝑗=1,...,O(log1+𝜉(𝑛))(line 9).
Building the estimator. We briefly describe how to compute
the estimates of the temporal motif degrees 𝑑𝜏
𝑊(𝑤)of vertices
𝑤∈𝑊trough the function GetEstimates . The general schema
we introduce captures many existing estimators, i.e., [ 44,63,72].
InvokingAon a subnetwork 𝑇[𝑊],𝑊⊆𝑉𝑇, we get a sample 𝑇′=
(𝑉′,𝐸′)⊆𝑇[𝑊], therefore using such a sample 𝑇′we compute an
estimate of the degree 𝑑𝜏
𝑊(𝑤), for each𝑤∈𝑊as
ˆ𝑑𝜏
𝑊(𝑤,𝑇′)=∑︁
𝑆∈S𝑇′:𝑤∈𝑆𝜏(𝑆)/𝑝𝑆, (1)
where𝑝𝑆is the probability of observing 𝑆∈S𝑇′in the sampled
subnetwork 𝑇′=(𝑉′,𝐸′).
Lemma 4.1. For any𝑤∈𝑊, the count ˆ𝑑𝜏
𝑊(𝑤,𝑇′)computed on a
sampled subnetwork 𝑇′⊆𝑇[𝑊]is an unbiased estimate of 𝑑𝜏
𝑊(𝑤).
The final estimators ˆ𝑑𝜏
𝑊(𝑤)for𝑤∈𝑊are then computed as the
sample average over all the 𝑟sampled subnetworks (in line 4) of
Eq.(1), that is ˆ𝑑𝜏
𝑊(𝑤)=1/𝑟Í𝑟
𝑖=1ˆ𝑑𝜏
𝑊(𝑤,𝑇𝑖)for all𝑤∈𝑊. Note also
that ˆ𝜏(𝑊)(obtained in line 6) is an unbiased estimator of 𝜏(𝑊).
Bounding the sample size. Algorithm 1 can employ any unbiased
sampling algorithm A:𝑇↦→2𝑇as subroutine [ 44,63,72]. We used
PRESTO-A [63] for which the authors provide bounds on the number
of samples𝑟for event “ ˆ𝜏(𝑊𝑖)∈( 1±𝜀)𝜏(𝑊𝑖)” to hold with arbitrary
probability >1−𝜂for𝜂∈(0,1). In our function GetBound we need
a stronger result as we need (1±𝜀)-approximation for alltemporal
motif degree of vertices 𝑤∈𝑊𝑖. Hence we bound individually,
for each vertex, the probability that ˆ𝑑𝜏
𝑊𝑖(𝑤)∉(1±𝜀)𝑑𝜏
𝑊𝑖(𝑤)and
combine such result with a union bound over all vertices.
Guarantees. The next result establishes the quality guarantees of
ProbPeel.
Theorem 4.2. With probability at least 1−𝜂,ProbPeel achieves
a(1−𝜀)2
𝑘(1+𝜉)(1+𝜀)2-approximation ratio for the TMDS problem.
Note that if the parameter 𝜀is small (e.g., 𝜀≈10−3), then ProbPeel
outputs a solution with approximation ratio close to1
𝑘(1+𝜉).Time complexity. ProbPeel does not require an exhaustive enu-
meration of all 𝛿-instances in the network 𝑇. In fact, it only es-
timates the temporal motif degrees of the vertices in 𝑊𝑖at each
iteration𝑖of the algorithm. The running time depends on the num-
ber of samples 𝑟𝑖collected at each iteration and the time required
to process each sample, which is O(ˆ𝑚ℓ)where ˆ𝑚denotes the max-
imum number of edges of 𝐸𝑇in a time-window of length 𝛿.
Thus, the time complexity is O
𝑟max
ˆ𝑚ℓlog1+𝜉(𝑛)+(1+𝜉)𝑛
𝜉
,
where𝑟max=max𝑖{𝑟𝑖}, which depends on 𝜀and𝜂. Since the algo-
rithm does not require exhaustive enumeration of S𝑇we expect
it to be particularly efficient. In addition, since we only store the
estimates of the various vertices at each iteration we expect also
the algorithm to be memory efficient.
4.2 HybridPeel
In this section we develop a novel probabilistic hybrid-peeling al-
gorithm, denoted by HybridPeel , which combines the randomized
batch-peeling technique of ProbPeel (to overcome full enumera-
tion ofS𝑇) with a more refined peeling approach that peels vertices
one at a time, to obtain higher quality solutions (as in [12]).
Algorithm description. The algorithm works as follows: (i) given
temporal network 𝑇=(𝑉,𝐸), it starts by removing nodes in a sim-
ilar fashion to ProbPeel . That is, at each iteration it computes a
(1±𝜀)-approximation of the temporal motif degree of each vertex,
and vertices are removed in “batches” according to a threshold
controlled by 𝜉>0. Instead of iterating the process until the ver-
tex set becomes empty, the algorithm executes the randomized
peeling phase for a fixed number of iterations 𝐽≥1provided
in input. After such 𝐽iterations, HybridPeel considers the ver-
tex set𝑊𝐽+1and its induced temporal network 𝑇[𝑊𝐽+1]. Then
it enumerates all temporal motifs on 𝑇[𝑊𝐽+1](computingS𝑊𝐽+1)
and peels𝑊𝐽+1one vertex at a time according to the minimum
temporal motif degree, storing the vertex set maximizing the ob-
jective function 𝜌(·), among the ones observed. Hence, this second
procedure returns a vertex set 𝑊′maximizing 𝜌(·)among the
O(|𝑊𝐽+1|−𝑘)vertex sets explored, and HybridPeel then returns
𝑊=arg max{ˆ𝜏(𝑊1)/|𝑊1|,..., ˆ𝜏(𝑊𝐽)/|𝑊𝐽|,𝜏(𝑊′)/|𝑊′|}. A detailed
description of HybridPeel is given in our extended version [64].
The design of HybridPeel is motivated by a drawback of Prob-
Peel : even for very accurate estimates of temporal motif degrees
it may provide a sub-optimal solution to TMDS, since even for 𝜀
close to 0, ProbPeel only converges to the approximation ratio of
1
𝑘(1+𝜉), while the peeling procedure we apply on 𝑊𝐽+1provides
denser solutions (close to 1/𝑘). The intuition behind HybridPeel is
that, the first 𝐽iterations are used to prune the network sufficiently,
for the algorithm to maintain in 𝑊𝐽+1a dense subnetwork 𝑊′⊆
𝑊𝐽+1attaining at least a 1/𝑘-approximation ratio. Therefore: (i) the
algorithm is scalable, as it avoids the computation of S𝑇, and (ii) is
expected to output high-quality solutions.
Next we show the approximation ratio of HybridPeel.
Theorem 4.3. With probability at least 1−𝜂,HybridPeel is a
(1−𝜀)2
𝑘(1+𝜉)(1+𝜀)2-approximation algorithm for the TMDS problem when
𝐽>1, while for𝐽=1it achieves a(1−𝜀)2
𝑘(1+𝜉)(1+𝜀)-approximation ratio.
 
2540KDD ’24, August 25–29, 2024, Barcelona, Spain Ilie Sarpe, Fabio Vandin, and Aristides Gionis
Time complexity. The time complexity of the algorithm can be
bounded byO(𝑅𝑇ProbPeel−𝐽(𝑇)+𝑅𝑇Greedy(𝑇[𝑊𝐽+1])), i.e., the
sum of the runtime ( 𝑅𝑇) of executing ProbPeel for𝐽iterations, and
then the peeling procedure that we denote with Greedy on𝑇[𝑊𝐽+1].
A detailed analysis is reported in our extended manuscript [ 64]. By
noting that there exists a value 𝛾>1such that|𝑊𝐽+1|=O(𝑛1/𝛾)
the complexity is bounded by O(𝐽𝑟maxˆ𝑚ℓ+𝛾−1𝑘3𝑛𝑘/𝛾log(𝑛)). This
highlights that first peeling the network with the randomized batch
peeling technique enables HybridPeel to work on a significantly
small network, over which to execute a more refined peeling algo-
rithm, affording an exact enumeration of temporal motif instances
on𝑇[𝑊𝐽+1], leading to an overall scalable and practical algorithm.
5 Temporal information impact and baselines
A natural question is if the temporal information in the temporal
network𝑇is necessary, or if the directed static network associated
to𝑇already captures the TMDS problem formulation. Given a
temporal network 𝑇=(𝑉𝑇,𝐸𝑇)theassociated static network of
𝑇is𝐺𝑇=(𝑉𝑇,𝐸𝐺), where𝐸𝐺={{𝑢,𝑣}|there exists(𝑢,𝑣,𝑡)∈
𝐸𝑇or(𝑣,𝑢,𝑡)∈𝐸𝑇}. If we keep the edge directions, a static directed
network is denoted by 𝐷𝑇.5For a subset of vertices 𝑊⊆𝑉we
denote by𝐺𝑇[𝑊]its associated static network.
We first show that even for a very simple temporal motif, the
optimal solution on 𝐷𝑇can be arbitrarily bad when evaluated on
the temporal network 𝑇. This highlights that Problem 1 cannot be
addressed by existing algorithms for 𝑘-MDS on static networks
or aggregations of the input temporal network (i.e., disregarding
temporal information). We then show how to embed temporal
information in a weighted set of subgraphs to solve the TMDS
problem, to obtain our baselines. Computing such a set requires
full enumeration of temporal motif instances on 𝑇, which we recall
to be extremely demanding, especially on large temporal networks.
Temporal vs. static. We start by some definitions. For a tem-
poral motif 𝑀=(𝐾,𝜎), we use𝐺[𝑀]to denote the undirected
graph associated to 𝐾, i.e.,𝐺[𝑀]=(𝑉𝐾,{{𝑢,𝑣}:there exists(𝑢,𝑣)
or(𝑣,𝑢)in𝐸𝐾}), ignoring directions and multiple edges in 𝐾. We
say that a temporal motif 𝑀is a2-path if𝑀=⟨(𝑢,𝑣),(𝑣,𝑤)⟩, with
𝑢≠𝑣≠𝑤. Given a directed static graph 𝐷𝑇=(𝑉𝑇,𝐸𝐷)we define
the number of static 2-paths (i.e., directed paths of length 2) induced
by a subset of vertices 𝐻⊆𝑉𝑇as|𝑃2(𝐻)|. Therefore, a static ver-
sion of the TMDS problem on temporal networks with 𝑀being a
2-path, is to consider the aggregated network of 𝑇(i.e.,𝐷𝑇) with
the goal of identifying 𝐻∗⊆𝑉𝑇maximizing 𝜌2(𝐻)=|𝑃2(𝐻)|
|𝐻|. We
refer to this problem as S2DS (Static 2-path Densest Subnetwork).
We can show that an optimal solution to S2DS, computed on 𝐷𝑇,
the static network associated to 𝑇, can be arbitrarily bad when
evaluated for TMDS on 𝑇with𝑀being a 2-path. Without loss of
generality, we assume the constant weighting function 𝜏𝑐.
Lemma 5.1. Given a temporal network 𝑇=(𝑉𝑇,𝐸𝑇), and its as-
sociated directed network 𝐷𝑇, let𝐻∗be a solution to S2DS on 𝐷𝑇.
Let𝑊∗on𝑇be the optimal solution of TMDS, for a 2-path motif,
with fixed𝛿≥1. Then there exists a temporal network 𝑇such that
5The static network of a temporal network 𝑇simply ignores the timestamps of 𝑇,
collapsing multiple temporal edges on the same static edge.𝜌(𝐻∗)=0while𝜌(𝑊∗)=O(𝑛2). Furthermore, the two solution
sets𝐻∗and𝑊∗are disjoint.
Embedding temporal information. Since we cannot simply dis-
regard temporal information, we investigate how to compute a
suitable weighted set of static subgraphs embedding temporal in-
formation. Such a set can be used to solve the TMDS problem by
leveraging existing techniques. Given the input to TMDS, we define
H={𝐻:𝐻=(𝑉𝐻,𝐸𝐻) ⊆𝐺𝑇,for some𝐻′⊆𝐻it holds𝐻′∼
𝐺[𝑀], 𝜏(𝑉𝐻)>0,and|𝑉𝐻|=𝑘}be the set of 𝑘-connected in-
duced subgraphs ( 𝑘-CISs) from 𝐺𝑇,6where each 𝑘-CIS,𝐻∈H ,
encodes a subgraph containing at least a 𝛿-instance𝑆∈S𝑇with
𝜏(𝑆)>0, and𝐻is induced in 𝐺𝑇, i.e., has all the edges among
the vertices 𝑉𝐻. The above conditions are ensured by requiring
the existence of 𝐻′⊆𝐻such that𝐻′∼𝐺[𝑀]and𝜏(𝑉𝐻)>0,
where𝐺[𝑀]is the undirected graph associated to the temporal
motif𝑀. For example, considering the motif 𝑀, and the temporal
network𝑇from Fig. 1, and 𝛿=10, then the corresponding set
HisH={(𝐻1=𝐺𝑇[{𝑣1,𝑣2,𝑣3}], 𝐻2=𝐺𝑇[{𝑣2,𝑣3,𝑣4}], 𝐻3=
𝐺𝑇[{𝑣1,𝑣3,𝑣5}], 𝐻4=𝐺𝑇[{𝑣3,𝑣4,𝑣5}]}.
Next, we need to define the weight of each subgraph 𝐻=(𝑉𝐻,𝐸𝐻)
inH. This is done by 𝜏(𝑉𝐻)=Í
𝑆∈S𝑉𝐻𝜏(𝑆), i.e., the weight
of the subgraph 𝐻is the sum of the weights of the 𝛿-instances
that occur among the nodes of 𝑉𝐻in𝑇. As an example, consider
𝐻1=(𝑉𝐻1={𝑣1,𝑣2,𝑣3},{{𝑣1,𝑣2},{𝑣2,𝑣3},{𝑣3,𝑣1}}) ∈H from
Fig. 1, then 𝜏(𝑉𝐻1)=2under weight 𝜏𝑐, and𝛿=10, as there are
two𝛿-instances among such nodes. Note that such a construction
is in accordance with Lemma 5.1, as to build, and weight the set
Hwe are exploiting full information about the temporal motif
𝛿-instances of 𝑀in𝑇. In Section 6.1 we provide a summary on how
to leverage the set Hto adapt existing techniques for high-order
subgraph discovery to solve TMDS, while a detailed description can
be found in our extended version [ 64]. Such algorithms will be used
as baselines for comparison against ALDENTE in our experimental
evaluation. All resulting baselines, and the algorithms in ALDENTE
that we developed are finally summarized in Table 1.
6 Experimental evaluation
In this section we evaluate the algorithms in ALDENTE against the
baselines. We describe the experimental setup in Section 6.2, and
we compare the solution quality, and runtime of all the algorithms
in Section 6.3. Finally, in Section 6.4 we conduct a case study on a
real-world transaction network from the Venmo platform to sup-
port the usefulness of solving the TMDS problem. In our extended
version [ 64] we report results on parameter sensitivity, memory
usage, and results under decaying weighting function 𝜏𝑑.
6.1 Baseline overview
We give a brief, description of our baselines, that leverage the
construction of the set H(as from Section 5) and that are based on
known ideas in the field, see [64] for more details.
Exact : Exact algorithm embedding the set His a properly weighted
flow network, adapting ideas from [ 19,26,49]. It computes multiple
min-cut solutions on the flow network, the algorithm identifies an
optimal solution to the TMDS problem.
6Symbol “∼” denotes standard graph isomorphism.
 
2541Scalable Temporal Motif Densest Subnetwork Discovery KDD ’24, August 25–29, 2024, Barcelona, Spain
Table 1: Baselines and algorithms in ALDENTE. For each algorithm we report: its name, the approximation ratio, its parameters,
the guaranteed probability (“1” means deterministic), “Avoid Enum.”: if it avoids computing the set H(and thereforeS𝑇), and its
time complexity. The first three algorithms are baselines, while the latter two algorithms are part of ALDENTE (see Section 4).
Name
Approximation Parameters Probability Avoid Enum. Time Complexity
Exact 1
- 1 ✗O
𝑚ˆ𝑚ℓ−1+𝑘𝑛2𝑘log(𝑛𝜏(𝑉))
Greedy1
𝑘-
1 ✗O
𝑚ˆ𝑚(ℓ−1)+𝑘3𝑛𝑘log(𝑛)
Batch1
𝑘(1+𝜉)𝜉>0 1 ✗O
𝑚ˆ𝑚(ℓ−1)+𝑘3𝑛𝑘log(𝑛)
ProbPeel(1−𝜀)2
𝑘(1+𝜉)
(1+𝜀)2𝜉>0,𝜀,𝜂∈(0,1) >1−𝜂 ✓O
𝑟(𝜀,𝜂)
ˆ𝑚ℓlog1+𝜉(𝑛)+(1+𝜉)𝑛
𝜉

HybridPeel(1−𝜀)2
𝑘(1+𝜉)
(1+𝜀)2𝜉>0,𝜀,𝜂∈(0,1),𝐽>0 >1−𝜂 ✓O
𝐽𝑟(𝜀,𝜂)ˆ𝑚ℓ+𝛾−1𝑘3𝑛𝑘/𝛾log(𝑛)
Table 2: Networks used in our experiments. 𝑛: vertices,𝑚:
temporal edges,|𝐸𝐺|: edges in the undirected static network,
time-interval length 𝛿: value used for counting 𝛿-instances.
Netw
ork 𝑛 𝑚|𝐸𝐺|Precision Timespan 𝛿Me
diumSms
44 K 545 K 52 K sec 338 (days) 172.8 K
Facebook 45.8 K 856 K 183 K sec 1561 (days) 86.4 K
Askubuntu 157 K 727 K 455 K sec 2614 (days) 172.8 K
Wikitalk 1 100 K 6 100 K 2 800 K sec 2277 (days) 43.2 KLargeStacko
verflow 2.6 M 47.9 M 28.1 M sec 2774 (days) 172.8 K
Bitcoin 48.1 M 113 M 84.3 M sec 2585 (days) 7.2 K
Reddit 8.4 M 636 M 435.3 M sec 3687 (days) 14.4 K
EquinixChicago 11.2 M 2 300 M 66.8 M 𝜇-sec 62.0 (mins) 50 K
V
enmo 19.1 K 131 K 18.5 K sec 2091 (days) -
Greedy : A1/𝑘-approximation greedy algorithm that extend the
ideas in [ 12,19]. The algorithm performs O(𝑛−𝑘)iterations where
at each iteration a vertex with minimum temporal motif degree
is removed and the set His updated accordingly. The algorithm
returns the vertex set with maximum density observed.
Batch : A1/(𝑘(1+𝜉)),𝜉>0greedy approximation algorithm
extending ideas from [ 4,17,69]. At each step the algorithm removes
vertices with small temporal motif degree in “batches” and updates
the setHreturning the maximum density vertex set observed, the
overall number of iterations is bounded by O(log𝑛/𝜉).
All such baselines require the computation of the set H, and
thereforeS𝑇.7Unfortunately, this is extremely inefficient and does
not scale on large data, as we will show next.
6.2 Setup
Implementation details and hardware. All the algorithms are
implemented in C++20 and compiled under Ubuntu 20.04 with gcc
9.4.0 with optimization flags. The experiments are executed sequen-
tially on a 72-core Intel Xeon Gold 5520 @2.2 GHz machine with
1008 GB of RAM memory available. For Exact , we use the algo-
rithm by Boykov and Kolmogorov [9]to compute the(𝑠,𝑧)-min cut
on the flow network. For the implementation of the min-heap we
use the data structures provided by the Boost library.8We use the
algorithm of Mackey et al . [47] for exact enumeration of temporal
motif𝛿-instances. We use PRESTO-A [63], as sampling algorithm
inProbPeel andHybridPeel . At each iteration of ProbPeel (and
HybridPeel ) we set𝑟𝑖=𝑟, (i.e., a fixed value for all iterations)
7This holds for most of other existing techniques even based on sampling, see Section 3.
8https://www.boost.org/
M1
M2M3
M4M5
M6M7M8
M9M10𝑡1 𝑡2
𝑡1 𝑡2 𝑡3𝑡1
𝑡2 𝑡3𝑡1
𝑡2
𝑡3𝑡4𝑡1
𝑡2
𝑡3𝑡4
𝑡1, 𝑡2
𝑡3, 𝑡4𝑡1
𝑡2𝑡3𝑡4
𝑡5𝑡1𝑡2
𝑡3
𝑡4𝑡5𝑡1
𝑡2
𝑡3𝑡4
𝑡5
𝑡6𝑡1
𝑡2𝑡3
𝑡4𝑡5
𝑡6Figure 2: Temporal motifs (M 𝑖,𝑖∈[10]) used in the exper-
imental evaluation. Motifs with blue vertices are not used
on EquinixChicago since this network is bipartite. For each
motif𝑡𝑖,𝑖=1,...denotes the ordering of its edges in 𝜎.
and we set this parameter accordingly for each dataset; we dis-
cuss the sensitivity of the solution to parameter 𝑟in our extended
version [ 64]. We consider as weighting function 𝜏the constant
function𝜏𝑐. Our code is available online.9
Datasets and time-interval length. The datasets considered in
this work span medium and large sizes and are reported in Table 2.
For each dataset we set 𝛿to be some multiple of the respecting
time unit (e.g., for datasets with precision in seconds setting 𝛿=
7.2K corresponds to two hours). We also select a value of 𝛿that is
consistent with previous studies and application scenarios [42, 46,
53,54], and large enough to be computationally challenging. More
details on each dataset are reported in [64].
Temporal motifs. The temporal motifs we use are good represen-
tative of a general input to TMDS in most applications, and are
reported in Fig. 2. They represent different topologies, e.g., trian-
gles, squares and more complicated patterns, spanning different
values of𝑘andℓ, and the largest temporal motifs correspond to
particularly challenging inputs.
6.3 Solution quality and runtime
We now compare the runtime and quality of the solution reported by
the algorithms in ALDENTE (ProbPeel , and HybridPeel ) against
the baselines (Exact, Greedy, and Batch).
9https://github.com/iliesarpe/ALDENTE.
 
2542KDD ’24, August 25–29, 2024, Barcelona, Spain Ilie Sarpe, Fabio Vandin, and Aristides Gionis
M1M2M3M4M5M6M7M8M9M100.00.51.0
Stackoverflow =172800
r=4000
r=4000
M1M2M3M4M5M6M7M8M9M100.00.51.0
Bitcoin =7200
r=30000
r=30000
M1M2M3M4M5M6M7M8M9M100.00.51.0
Reddit =14400
r=20000
r=20000
M1M2M4M5M6M90.00.51.0
EquinixChicago =50000
r=1000
r=1000
T emporal Motif(W)/|W|
OPT
Exact Greedy Batch =0.3
 ProbPeel =0.3
 HybridPeel =0.3
M1M2M3M4M5M6M7M8M9M1025005000750010000Stackoverflow =172800
r=4000
r=4000
M1M2M3M4M5M6M7M8M9M1025005000750010000Bitcoin =7200
r=30000
r=30000
M1M2M3M4M5M6M7M8M9M1025005000750010000Reddit =14400
r=20000
r=20000
M1M2M4M5M6M925005000750010000EquinixChicago =50000
r=1000
r=1000
T emporal MotifAverage Runtime (sec)Exact Greedy Batch =0.3
 ProbPeel =0.3
 HybridPeel =0.3
Figure 3: For each configuration we report (top): the quality of the solution compared to the best empirical solution (i.e., ˆOPT),
and (bottom): the average running times to achieve such solution.
Setup and metrics. For each configuration (dataset, motif, value
of𝛿) we run each algorithm five times with a time limit of three
hours and maximum RAM of 150 GB on all datasets but Equinix-
Chicago, on which we set the memory limit to 200 GB. For each
algorithm we compute the average running time over the five runs.
To assess the quality of the solution of the randomized algorithms,
we compute the actual value of the solution in the original temporal
network on the returned vertex set. For each configuration over
all the algorithms that terminate we compute ˆOPT,10i.e., the best
empirical solution obtained across all algorithms, and we use this
value as reference for comparison of the different algorithms. For all
the deterministic algorithms we show the approximation factor as
𝜏(𝑊)/|𝑊|
ˆOPT, where𝑊is the solution returned by a given algorithm;
forProbPeel andHybridPeel we show the average approximation
factor over the five runs, and we also report the standard deviation.
We set𝜉=0.3forBatch over all experiments we performed, as
it provides sufficiently good solutions in most cases (see App. C.2
for a detailed empirical evaluation of such parameter), and use the
same values of 𝜉forProbPeel andHybridPeel . For HybridPeel
we set𝐽=3on large datasets, and 𝐽=2otherwise. When an
algorithm does not terminate within the time limit we set its time
to three hours, and its approximation factor to 0. Since our focus is
on scalability we place particular emphasis on large datasets, so we
defer results on medium-size datasets to our extended version [ 64]
as they follow similar trends to the ones we will discuss. We also
discuss results concerning memory usage in App. C.1.
Results. The results are reported in Fig. 3. Concerning the run-
time, we observe different trends on the various datasets. First on
Stackoverflow, most of the motifs require a small runtime, of few
hundreds of seconds, to be counted (even by Exact ), and on such
motifs most algorithms achieve a comparable runtime. While on
some hard motifs, our proposed randomized algorithms achieve a
significant speed-up of more than ×4and up to×9over the baselines
10Such value is guaranteed to be the actual optimum OPT only when Exact terminates.(e.g., on motifs M1andM2). On Bitcoin we observe that the runtime
for counting most motifs is prohibitive, and Exact is not able to
complete the execution on any motif on such dataset. Remarkably,
our proposed randomized algorithms achieve a consistent speed-up
of at least×3up to×8over Greedy andBatch , and more impor-
tantly our algorithms are able to complete their execution even
when the baselines do not scale their computation (e.g., motifs M1
andM2). The scalability aspect becomes more clear on the biggest
datasets that we considered, in fact on Reddit, despite of being con-
sistently more efficient than the baselines, our HybridPeel is the
only one that is able to complete its execution on M10over all tech-
niques considered. Finally, on EquinixChicago (with more than two
billions of temporal edges), our randomized algorithms ( ProbPeel
andHybridPeel ) are the only ones that terminate their execution
in a small amount of time. We observe that ProbPeel is signifi-
cantly more efficient than HybridPeel , at the expense of a slightly
less accurate solution, which we will discuss next. On some of the
configurations all algorithms do not terminate, this is because some
of the motifs are extremely challenging, therefore the timelimit
we set is too strict as a constraint even for randomized algorithms.
Overall these experiments suggest that our randomized algorithms
successfully enable the discovery of temporal motif densest sub-
networks on large temporal networks. This closely matches our
theoretical insights, capturing the superior efficiency and scalability
of our randomized algorithms against baselines.
Concerning the solution quality we observe similar trends on
most datasets. Batch provides solutions with smaller density than
Greedy , and ProbPeel closely matches Batch ’s results (as captured
by our analysis). Greedy is the deterministic approximation algo-
rithm that mostly often provides the solution with highest density
when it terminates, and our HybridPeel closely matches such re-
sults, so our HybridPeel results accurate, scalable and efficient (as
it is consistently faster than Greedy ). Interestingly on the Equinix-
Chicago dataset, where only our proposed randomized algorithms
are able to terminate in less than three hours ( ProbPeel takes few
 
2543Scalable Temporal Motif Densest Subnetwork Discovery KDD ’24, August 25–29, 2024, Barcelona, Spain
hundreds of seconds), the difference in the quality of the solutions
provided by ProbPeel andHybridPeel is not significantly large,
suggesting that on massive data ProbPeel may be a good candidate
to obtain high-quality solutions in a very short amount of time.
Summary. To summarize, our experiments show that techniques
based on existing ideas do not scale on challenging motifs and
large datasets for TMDS. In contrast, our proposed algorithms in
ALDENTE provide high-quality solutions in a short amount of time
and scale their computation on large datasets, enabling the practical
discovery of temporal motif dense subnetworks.
6.4 Case study
Recently, Liu et al . [43] released a dataset containing a small number
of transactions from the Venmo money-transfer platform, where
each transaction is accompanied by a message. The corresponding
temporal network 𝑇=(𝑉𝑇,𝐸𝑇)is as follows: each temporal edge
is a tuple(𝑢,𝑣,𝑡,𝜙,𝛾)∈𝐸𝑇where(𝑢,𝑣,𝑡)is the temporal edge as
considered up to now and 𝜙,𝛾are metadata: 𝜙∈{0,1}denotes
if(𝑢,𝑣)are friends in the social network and 𝛾is a text message.
Since the dataset is very small (see Table 2), we computed exact
solutions to Problem 1. We investigated the following question.
Q: What insights about the Venmo platform are captured by
optimal solutions to the TMDS problem according to a temporal
motif𝑀, and what subnetworks are captured by varying 𝛿∈R+?
To answer Qwe select motif M5in Fig. 2, a temporal star with
four temporal edges, corresponding to finding groups of users (i.e.,
the vertex at the center of M5) sending many transactions to their
neighbors (i.e., the vertices with no out-edges in M5) in a time-
scale controlled by 𝛿∈R+. In addition to M5, we provide as input
to TMDS the constant weighting function 𝜏𝑐and𝛿1=7 200 (i.e.,
2-hours), to capture short-time scale patterns.
The optimal solution 𝑇[𝑊∗
𝛿1]has 14 vertices, and we report its
directed static network and its temporal support in Fig. 4 (Left).
Interestingly, this is a star shaped network, with only the central
vertex (𝑣1) exchanging money with all the other vertices (not re-
ciprocated), and vertices are not friends. The message associated
to each transaction is identical for all transactions: “Sorry! We’re
already sold out for tonight! Feel free to join us this even in the reg-
ular line and pay cover when you get there. Thanks!”. Even more
interestingly, all events occur really close in time (see Fig. 4 (Left)).
In fact, this corresponds to a bursty event with merchant 𝑣1over-
booking for a specific event, which is identified by the combination
ofM5and small𝛿∈R+. We also observe that such a subnetwork
cannot be captured by the existing formulations for dense temporal
subnetworks (see Section 3) as both 𝑇[𝑊∗
𝛿1]and its directed static
network have very small edge-density, i.e., 13/14 <1.
We then consider M5but analyze a much larger time-scale, that is
we solve TMDS with 𝛿2=172 800. Under this settings of parameters
we expect the optimal solution to contain instances of M5with
a longer duration (accounting for more historical user activities).
The optimal subnetwork has 16 vertices and it is shown again in
Fig. 4 (Right). As expected the temporal support of such subnetwork
is significantly long (spanning from Oct. 2018 to Feb. 2021). The
messages over the transactions of such subnetwork are usually
related to food, theatre and social activities, denoting that users
share similar interests. But we also identify transactions that are
v1v2v3v4 v5
v6
v7
v8
v9
v10
v11v12v13v14
2015-05-21 2018-04-01 2021-02-09
Time
v1
v2
v3v4
v5v6v7
v8
v9v10
v11v12
v13v14
v15v16
2015-05-21 2018-04-01 2021-02-09
Time
24681012
T emporal edgesFigure 4: Directed static network of 𝑇[𝑊∗
𝛿]according to dif-
ferent values of 𝛿onM5, we color edges according to the
number temporal edges that map on each static edge. Below
each static network we report the temporal support of 𝑇[𝑊∗
𝛿],
i.e., we place a bar in correspondence of the timings of the
events in𝑇[𝑊∗
𝛿]over the timespan of observation of the net-
work. (Left): 𝛿1=7 200. (Right): 𝛿2=172 800.
likely related to sport gambling. Such suspicious transactions report
terms such as “bracket season” or emojis of basketballs (in fact,
M5captures such patterns as once a user loses a gamble with its
friends, it usually sends the money using a pattern similar to M5).11
Our findings also support the insights by Liu et al . [43] , who use
temporal motifs to identify poker gamblers on Venmo.
In summary, by solving the TMDS problem for temporal mo-
tifs of interest and different values of the time-window 𝛿we can
gain precious insights on the network being analyzed not captured
otherwise by previous formulations.
7 Conclusions
We introduced a new problem, requiring to identify the temporal
motif densest subnetwork (TMDS) of a large temporal network. We
developed two novel algorithms based on randomized sampling,
for which we proved a probabilistic approximation ratio and show
experimentally that they are efficient and scalable over large data.
The techniques developed in this work may be useful in other prob-
lems, such as the 𝑘-clique problem [ 19,49,69] given the availability
of many sampling algorithms with tight guarantees for estimating
𝑘-clique counts [10, 33].
There are many possible directions for future work, such as
improving the theoretical guarantees offered by our randomized
algorithm through motif-dependent approximation ratios, and un-
derstanding if randomization can be coupled with recent ideas in the
field of densest-subgraph discovery, such as techniques in [8, 13].
Acknowledgments
We thank Matteo Ceccarello for helpful comments on an earlier
version of the current work. This work is supported, in part, by
MUR of Italy, under project PRIN n. 2022TS4Y3N “EXPAND: scal-
able algorithms for EXPloratory Analyses of heterogeneous and
dynamic Networked Data", and project “National Centre for HPC,
Big Data and Quantum Computing” (CN00000013). This work is
also supported by the ERC Advanced Grant REBOUND (834862), the
EC H2020 RIA project SoBigData++ (871042), and the Wallenberg
AI, Autonomous Systems and Software Program (WASP) funded
by the Knut and Alice Wallenberg Foundation.
11Further details are discussed in Appendix C.3.
 
2544KDD ’24, August 25–29, 2024, Barcelona, Spain Ilie Sarpe, Fabio Vandin, and Aristides Gionis
References
[1]Walid Ahmad, Mason A. Porter, and Mariano Beguerisse-Diaz. 2021. Tie-Decay
Networks in Continuous Time and Eigenvector-Based Centralities. TNSE.
[2]Nesreen K. Ahmed, Nick Duffield, and Ryan A. Rossi. 2021. Online Sampling of
Temporal Networks. TKDD.
[3]Naomi A. Arnold, Peijie Zhong, Cheick Tidiane Ba, Ben Steer, Raul Mondragon,
Felix Cuadrado, Renaud Lambiotte, and Richard G. Clegg. 2024. Insights and
caveats from mining local and global temporal motifs in cryptocurrency transac-
tion networks. arXiv.
[4]Bahman Bahmani, Ravi Kumar, and Sergei Vassilvitskii. 2012. Densest Subgraph
in Streaming and MapReduce. PVLDB.
[5]Caleb Belth, Xinyi Zheng, and Danai Koutra. 2020. Mining Persistent Activity in
Continually Evolving Networks. KDD.
[6]Sayan Bhattacharya, Monika Henzinger, Danupon Nanongkai, and Charalampos
Tsourakakis. 2015. Space- and Time-Efficient Algorithm for Maintaining Dense
Subgraphs on One-Pass Dynamic Streams. STOC.
[7]Vladimir Boginski, Sergiy Butenko, and Panos M. Pardalos. 2003. On Structural
Properties of the Market Graph. Innovations in Financial and Economic Networks.
[8]Digvijay Boob, Yu Gao, Richard Peng, Saurabh Sawlani, Charalampos Tsourakakis,
Di Wang, and Junxing Wang. 2020. Flowless: Extracting Densest Subgraphs
Without Flow Computations. WWW.
[9]Y. Boykov and V. Kolmogorov. 2004. An experimental comparison of min-cut/max-
flow algorithms for energy minimization in vision. TPAMI.
[10] Marco Bressan, Stefano Leucci, and Alessandro Panconesi. 2021. Faster Motif
Counting via Succinct Color Coding and Adaptive Sampling. TKDD.
[11] Xinwei Cai, Xiangyu Ke, Kai Wang, Lu Chen, Tianming Zhang, Qing Liu, and
Yunjun Gao. 2023. Efficient Temporal Butterfly Counting and Enumeration on
Temporal Bipartite Graphs. PVLDB.
[12] Moses Charikar. 2000. Greedy Approximation Algorithms for Finding Dense
Components in a Graph. Approximation Algorithms for Combinatorial Optimiza-
tion.
[13] Chandra Chekuri, Kent Quanrud, and Manuel R. Torres. 2022. Densest Subgraph:
Supermodularity, Iterative Peeling, and Flow. SODA.
[14] Tianyi Chen, Brian Matejek, Michael Mitzenmacher, and Charalampos E.
Tsourakakis. 2023. Algorithmic Tools for Understanding the Motif Structure
of Networks. ECML PKDD.
[15] Tianyi Chen and Charalampos Tsourakakis. 2022. AntiBenford Subgraphs: Un-
supervised Anomaly Detection in Financial Networks. KDD.
[16] S.N. Dorogovtsev and J.F.F. Mendes. 2003. Evolution of Networks. Oxford Univer-
sity Press.
[17] Alessandro Epasto, Silvio Lattanzi, and Mauro Sozio. 2015. Efficient Densest
Subgraph Computation in Evolving Graphs. WWW.
[18] Yixiang Fang, Wensheng Luo, and Chenhao Ma. 2022. Densest subgraph discovery
on large graphs. PVLDB.
[19] Yixiang Fang, Kaiqiang Yu, Reynold Cheng, Laks V. S. Lakshmanan, and Xuemin
Lin. 2019. Efficient algorithms for densest subgraph discovery. PVLDB.
[20] Adriano Fazzone, Tommaso Lanciano, Riccardo Denni, Charalampos E.
Tsourakakis, and Francesco Bonchi. 2022. Discovering Polarization Niches via
Dense Subgraphs with Attractors and Repulsers. PVLDB.
[21] Linton C. Freeman. 2004. The development of social network analysis. Empirical
Press.
[22] Edoardo Galimberti, Martino Ciaperoni, Alain Barrat, Francesco Bonchi, Ciro
Cattuto, and Francesco Gullo. 2020. Span-core Decomposition for Temporal
Networks. TKDD.
[23] Zhongqiang Gao, Chuanqi Cheng, Yanwei Yu, Lei Cao, Chao Huang, and Junyu
Dong. 2022. Scalable Motif Counting for Large-scale Temporal Graphs. ICDE.
[24] Aristides Gionis, Lutz Oettershagen, and Ilie Sarpe. 2024. Mining Temporal
Networks. WWW.
[25] Aristides Gionis and Charalampos E. Tsourakakis. 2015. Dense Subgraph Discov-
ery.KDD.
[26] A. V. Goldberg. 1984. Finding a Maximum Density Subgraph. Technical Report.
[27] Kathrin Hanauer, Monika Henzinger, and Christian Schulz. 2021. Recent Ad-
vances in Fully Dynamic Graph Algorithms. Journal of Experimental Algorithmics.
[28] Yizhang He, Kai Wang, Wenjie Zhang, Xuemin Lin, and Ying Zhang. 2023. Scaling
Up𝑘-Clique Densest Subgraph Detection. PACMMOD.
[29] Nathalie Henry, Jean-Daniel Fekete, and Michael J. McGuffin. 2007. NodeTrix: a
Hybrid Visualization of Social Networks. TVCG.
[30] Petter Holme and Jari Saramäki. 2019. Temporal Network Theory. Springer
International Publishing.
[31] Petter Holme and Jari Saramäki. 2012. Temporal networks. Physics Reports.
[32] Ryan Huebsch, Joseph M. Hellerstein, Nick Lanham, Boon Thau Loo, Scott
Shenker, and Ion Stoica. 2003. Querying the Internet with PIER. PVLDB.
[33] Shweta Jain and C. Seshadhri. 2017. A Fast and Provable Method for Estimating
Clique Counts Using Turán's Theorem. WWW.
[34] Lauri Kovanen, Márton Karsai, Kimmo Kaski, János Kertész, and Jari Saramäki.
2011. Temporal motifs in time-dependent networks. JSTAT.[35] Renaud Lambiotte, Lionel Tabourier, and Jean-Charles Delvenne. 2013. Burstiness
and spreading on temporal networks. The European Physical Journal B.
[36] Tommaso Lanciano, Atsushi Miyauchi, Adriano Fazzone, and Francesco Bonchi.
2023. A Survey on the Densest Subgraph Problem and its Variants. Computing
Surveys.
[37] Jinsoo Lee, Wook-Shin Han, Romans Kasperovics, and Jeong-Hoon Lee. 2012. An
in-depth Comparison of Subgraph Isomorphism Algorithms in Graph Databases.
PVLDB.
[38] Victor E. Lee, Ning Ruan, Ruoming Jin, and Charu Aggarwal. 2010. A Survey of
Algorithms for Dense Subgraph Discovery. Managing and Mining Graph Data.
[39] Da Lei, Xuewu Chen, Long Cheng, Lin Zhang, Satish V. Ukkusuri, and Frank
Witlox. 2020. Inferring Temporal Motifs for Travel Pattern Analysis using Large
Scale Smart Card Data. Transportation Research Part C: Emerging Technologies.
[40] Rong-Hua Li, Jiao Su, Lu Qin, Jeffrey Xu Yu, and Qiangqiang Dai. 2018. Persistent
Community Search in Temporal Networks. ICDE.
[41] Longlong Lin, Pingpeng Yuan, Rong-Hua Li, Jifei Wang, Ling Liu, and Hai Jin.
2022. Mining Stable Quasi-Cliques on Temporal Networks. Transactions on
Systems, Man, and Cybernetics: Systems.
[42] Jieli Liu, Jinze Chen, Jiajing Wu, Zhiying Wu, Junyuan Fang, and Zibin Zheng.
2024. Fishing for Fraudsters: Uncovering Ethereum Phishing Gangs With
Blockchain Data. Transactions on Information Forensics and Security.
[43] Penghang Liu, Rupam Acharyya, Robert E. Tillman, Shunya Kimura, Naoki Ma-
suda, and Ahmet Erdem Sarıyüce. 2023. Temporal Motifs for Financial Networks:
A Study on Mercari, JPMC, and Venmo Platforms. arXiv.
[44] Paul Liu, Austin R. Benson, and Moses Charikar. 2019. Sampling Methods for
Counting Temporal Motifs. WSDM.
[45] Penghang Liu, Valerio Guarrasi, and A. Erdem Sariyuce. 2021. Temporal Network
Motifs: Models, Limitations, Evaluation. TKDE.
[46] Penghang Liu and Ahmet Erdem Sariyüce. 2023. Using Motif Transitions for
Temporal Graph Generation. KDD.
[47] Patrick Mackey, Katherine Porterfield, Erin Fitzhenry, Sutanay Choudhury, and
George Chin. 2018. A Chronological Edge-Driven Approach to Temporal Sub-
graph Isomorphism. International Conference on Big Data.
[48] Naoki Masuda and Renaud Lambiotte. 2016. A Guide to Temporal Networks. World
Scientific (Europe).
[49] Michael Mitzenmacher, Jakub Pachocki, Richard Peng, Charalampos Tsourakakis,
and Shen Chen Xu. 2015. Scalable Large Near-Clique Detection in Large-Scale
Networks via Sampling. KDD.
[50] Lutz Oettershagen, Athanasios L. Konstantinidis, and Giuseppe F. Italiano. 2023.
Temporal Network Core Decomposition and Community Search. arXiv.
[51] Lutz Oettershagen, Nils M. Kriege, and Petra Mutzel. 2023. A Higher-Order
Temporal H-Index for Evolving Networks. KDD.
[52] Lutz Oettershagen and Petra Mutzel. 2020. Efficient Top-k Temporal Closeness
Calculation in Temporal Networks. ICDM.
[53] Ashwin Paranjape, Austin R. Benson, and Jure Leskovec. 2017. Motifs in Temporal
Networks. WSDM.
[54] Noujan Pashanasangi and C. Seshadhri. 2021. Faster and Generalized Temporal
Triangle Counting, via Degeneracy Ordering. KDD.
[55] Giulia Preti, Polina Rozenshtein, Aristides Gionis, and Yannis Velegrakis. 2021.
Discovering Dense Correlated Subgraphs in Dynamic Networks. Advances in
Knowledge Discovery and Data Mining.
[56] Jiaxi Pu, Yanhao Wang, Yuchen Li, and Xuan Zhou. 2023. Sampling Algorithms
for Butterfly Counting on Temporal Bipartite Graphs. arXiv.
[57] Hongchao Qin, Rong-Hua Li, Ye Yuan, Yongheng Dai, and Guoren Wang. 2023.
Densest Periodic Subgraph Mining on Large Temporal Graphs. TKDE.
[58] Hongchao Qin, Rong-Hua Li, Ye Yuan, Guoren Wang, Lu Qin, and Zhiwei Zhang.
2022. Mining Bursting Core in Large Temporal Graphs. PVLDB.
[59] Polina Rozenshtein, Francesco Bonchi, Aristides Gionis, Mauro Sozio, and Nikolaj
Tatti. 2019. Finding events in temporal networks: segmentation meets densest
subgraph discovery. Knowledge and Information Systems.
[60] Diego Santoro and Ilie Sarpe. 2022. ONBRA: Rigorous Estimation of the Temporal
Betweenness Centrality in Temporal Networks. WWW.
[61] Ahmet Erdem Sariyuce, C. Seshadhri, Ali Pinar, and Umit V. Catalyurek. 2015.
Finding the Hierarchy of Dense Subgraphs using Nucleus Decompositions.
WWW.
[62] Ilie Sarpe and Fabio Vandin. 2021. odeN: Simultaneous Approximation of Multiple
Motif Counts in Large Temporal Networks. CIKM.
[63] Ilie Sarpe and Fabio Vandin. 2021. PRESTO: Simple and Scalable Sampling
Techniques for the Rigorous Approximation of Temporal Motif Counts. SDM.
[64] Ilie Sarpe, Fabio Vandin, and Aristides Gionis. 2024. Scalable Temporal Motif
Densest Subnetwork Discovery. arXiv.
[65] Konstantinos Semertzidis, Evaggelia Pitoura, Evimaria Terzi, and Panayiotis
Tsaparas. 2018. Finding lasting dense subgraphs. Data Mining and Knowledge
Discovery.
[66] Bintao Sun, T.-H. Hubert Chan, and Mauro Sozio. 2020. Fully Dynamic Approxi-
mate k-Core Decomposition in Hypergraphs. TKDD.
[67] Bintao Sun, Maximilien Danisch, T-H. Hubert Chan, and Mauro Sozio. 2020.
KClist++: a simple algorithm for finding 𝑘-clique densest subgraphs in large
 
2545Scalable Temporal Motif Densest Subnetwork Discovery KDD ’24, August 25–29, 2024, Barcelona, Spain
graphs. PVLDB.
[68] John Tang, Mirco Musolesi, Cecilia Mascolo, and Vito Latora. 2010. Character-
ising temporal distance and reachability in mobile and online social networks.
SIGCOMM.
[69] Charalampos Tsourakakis. 2015. The K-clique Densest Subgraph Problem. In
WWW.
[70] Charalampos E. Tsourakakis. 2014. A Novel Approach to Finding Near-Cliques:
The Triangle-Densest Subgraph Problem. arXiv.
[71] Alexei Vazquez, Balázs Rácz, András Lukács, and Albert-László Barabási. 2007.
Impact of Non-Poissonian Activity Patterns on Spreading Processes. Physical
Review Letters.
[72] Jiabing Wang, Rongjie Wang, Jia Wei, Qianli Ma, and Guihua Wen. 2020. Finding
dense subgraphs with maximum weighted triangle density. Information Sciences.
[73] Jingjing Wang, Yanhao Wang, Wenjun Jiang, Yuchen Li, and Kian-Lee Tan. 2020.
Efficient Sampling Algorithms for Approximate Temporal Motif Counting. CIKM.
[74] Jiajing Wu, Jieli Liu, Weili Chen, Huawei Huang, Zibin Zheng, and Yan Zhang.
2022. Detecting Mixing Services via Mining Bitcoin Transaction Network With
Hybrid Motifs. Transactions on Systems, Man, and Cybernetics: Systems.
[75] Qiankun Zhao, Yuan Tian, Qi He, Nuria Oliver, Ruoming Jin, and Wang-Chien
Lee. 2010. Communication motifs. CIKM.
[76] Ming Zhong, Junyong Yang, Yuanyuan Zhu, Tieyun Qian, Mengchi Liu, and
Jeffrey Xu Yu. 2024. A Unified and Scalable Algorithm Framework of User-
Defined Temporal(𝑘,X)-Core Query. TKDE.
A Application scenarios for the TMDS problem
While we study the TMDS problem in its general form, in this
section we discuss more in depth two possible applications of our
novel problem formulation, showing that the TMDS is a really
versatile and powerful tool for temporal network analysis. We will
discuss how the Temporal Motif Densest Subnetwork (TMDS) can
be used to discover important insights from (i) travel networks and
(ii) e-commerce networks capturing online platforms.
(i) A travel network can be modeled as a temporal network
𝑇=(𝑉,𝐸)with𝑉being the set of vertices corresponding to Points
Of Interest (POIs) or particular geographic areas of a city [ 39], and
edges of the form (𝑢,𝑣,𝑡)∈𝐸represent trips by user that travel
from point𝑢∈𝑉to point𝑣∈𝑉at time𝑡. A temporal motif 𝑀on
such network captures therefore travel patterns and their dynamics.
As an example a temporal motif 𝑀:𝑥𝑡1→𝑦𝑡2→𝑥occurring within
one day often corresponds to a round trip by a user from 𝑥being the
home location, to 𝑦being the work location. The TMDS problem
formulation, in such a scenario can provide unique insights on the
POIs appearing frequently together in the various travel patterns
(isomorphic to 𝑀) of the various users. Furthermore, analyzing
different time-scales as captured by the temporal motif duration, can
yield unique insights about daily vs. weekly vs. monthly patterns.
As for our Figure 1 in the TMDS several POIs often coexist, and
such information can be used to improve connections between POIs
that are not well connected by public transport, or for the design of
travel passes for specific areas of a city with specific time-duration,
based on POIs that are often visited together in the various trips.
(ii) E-commerce online platforms can be modeled as temporal
bipartite networks 𝑇=(𝑉,𝐸), where the set of vertices is parti-
tioned in two layers 𝑉=𝑈∪𝑃, with𝑈being the set of users (i.e.,
customers that purchase online products), and 𝑃the set of prod-
ucts available for purchase. A temporal edge 𝑒=(𝑢,𝑝,𝑡)on such
a network captures that user 𝑢∈𝑈purchased product 𝑝∈𝑃at a
given time𝑡. As an example a temporal motif 𝑀′:𝑥𝑡1→𝑦,𝑥𝑡2→𝑧
occurring within a time-limit corresponds to a pair of products
i.e.,𝑦and𝑧that user𝑥buys at distance of at most the provided
time-limit, note also that 𝑧is purchased after 𝑦. A temporal motif
𝑀therefore captures specific purchase habits of users within aTable 3: Notation table.
Symb
ol Description
𝑇=(𝑉𝑇,
𝐸𝑇) Temporal network
𝑇[𝑊],𝑊⊆𝑉𝑇 Induced temporal sub-network by 𝑊
𝑛,𝑚 Number of nodes and temporal edges of 𝑇
𝐷𝑇,𝐺𝑇 Directed and undirected static network of 𝑇
𝑀=(𝐾,𝜎)𝑘-vertexℓ-edge temporal motif
𝐾=(𝑉𝐾,𝐸𝐾) Multi-graph of the temporal motif 𝑀
𝜎 Ordering of the edges of 𝐸𝐾in a motif
𝛿 Time window-length of a temporal motif instance
S𝑇′ Set of𝛿-instances of 𝑀in the network 𝑇′
S𝑊,𝑊⊆𝑉𝑇 Set of𝛿-instances of 𝑀in the network 𝑇[𝑊]
𝜏 Weighting function over S𝑇
𝜏(𝑊),𝑊⊆𝑉𝑇 Total weight of the 𝛿-instances inS𝑊
𝜌(·) TMDS objective function
𝐺[𝑀] Undirected graph associated to 𝐾
H Set of𝑘-CIS over𝐺𝑇
𝑑𝜏
𝑊(𝑣),𝑊⊆𝑉𝑇Temporal motif degree of vertex 𝑣in𝑇[𝑊]
𝑑𝜏
𝑇′(𝑣),𝑇′⊆𝑇 Temporal motif degree of vertex 𝑣in𝑇′
𝜉>0 Threshold for batch peeling
𝜀,𝜂 Accuracy and confidence parameters
𝑟 Sample size in ProbPeel, HybridPeel
ˆ𝑑𝜏
𝑊(𝑣) Estimate of the temporal motif degree of 𝑣in𝑇[𝑊]
ˆ𝑚 Maximum edges from 𝐸𝑇in a window length of 𝛿
𝑞 Parameter of the subroutine PRESTO-A [63]
limited time-limit (as again controlled by the duration parameter
of the temporal motif). The optimal TMDS can be used to collect
a set of users (and items) that frequently co-occur. In particular,
the TMDS can contain several vertices (i.e., users) with similar
purchase sequences or buying habits, this enables the design of
personalized advertisement for those users in the TMDS (e.g., by
leveraging the history of other users in the TMDS), furthermore
this can be studied at different time-scales. Note also that this is
more powerful than only considering products that are frequently
co-purchased together (e.g., consider 𝑀′, then the products 𝑦and𝑧
are purchased in different moments), for which many techniques
already exist.
B Notation
A summary of the notation used throughout the paper is reported
in Table 3.
C Additional experimental results
C.1 Memory usage
We measured the peak RAM memory over one single execution
of each algorithm on the configurations of Section 6.3. We show
the results in Figure 5 — recall that the memory limit was set to
150 GB on all datasets but EquinixChicago where the limit was set
to 200 GB. We do not report data for algorithms that do not finish
within three hours.
Overall, the memory usage of the different algorithms strongly
depends on the temporal motif considered, and in general motifs
M1,M2andM5require much more memory that other motifs on
almost all datasets. We observe that on such motifs ProbPeel and
HybridPeel use much less memory compared to the baselines,
 
2546KDD ’24, August 25–29, 2024, Barcelona, Spain Ilie Sarpe, Fabio Vandin, and Aristides Gionis
M1M2M3M4M5M6M7M8M9M100255075100125
Stackoverflow =172800
r=4000
r=4000
M1M2M3M4M5M6M7M8M9M1012141618
Bitcoin =7200
r=30000
r=30000
M1M2M3M4M5M6M7M8M9M10405060
Reddit =14400
r=20000
r=20000
M1M2M4M5M6M9150160170
EquinixChicago =50000
r=1000
r=1000
T emporal MotifPeak RAM (GB)Exact Greedy Batch =0.3
ProbPeel =0.3
HybridPeel =0.3
Figure 5: Peak RAM memory in GB over one execution.
0.0 0.5 1.00.600.801.00
M1
0.0 0.5 1.00.600.801.00
M2
0.0 0.5 1.00.901.00 M3
0.0 0.5 1.00.500.751.00
M4
0.0 0.5 1.00.801.00
M7
0.0 0.5 1.00.500.751.00
M8
0.0 0.5 1.00.500.751.00
M9
0.0 0.5 1.00.600.801.00
M10
Value of 
(WBatch)/|WBatch|
OPT
Askubuntu =172800
0.0 0.5 1.00.500.751.00
M1
0.0 0.5 1.00.801.00M2
0.0 0.5 1.00.951.001.05
M3
0.0 0.5 1.00.600.801.00
M4
0.0 0.5 1.00.801.00M7
0.0 0.5 1.00.951.001.05
M8
0.0 0.5 1.00.801.00
M9
0.0 0.5 1.00.951.001.05
M10
Value of 
(WBatch)/|WBatch|
OPT
Sms =172800
Figure 6: Approximation ratio of Batch for varying 𝜉.
saving on M2more than 100 GB on datasets Stackoverflow and
Bitcoin and about 90 GB on the Reddit dataset. This is due to the
fact that, differently from all other algorithms, our randomized
algorithms do not store the set Hof𝑘-CIS (see Table 1). This
supports that the algorithms in ALDENTE are very practical and
scalable on large datasets.
C.2 Varying 𝜉
We show how the solution obtained by Batch varies according to
the value of 𝜉, this setting is used to understand the best possible
solution that can be obtained by ProbPeel according to various val-
ues of𝜉(i.e., when𝜀≈0then ProbPeel converges to the solution
provided by Batch ). We will use datasets Askubuntu and Sms con-
sidering the motifs of Fig. 2 (excluding M5andM6given their high
running time). In particular, we start from 𝜉=10−3and increase it
with a step of 5·10−3until it reaches 1 and we execute Batch with
yarg
bracketla
foodyuhyoafil
chickthanksbackpizzaagainyargagas
chrissybirdietaco
maintenance:uber:
Words024681012FrequencyTop K=20 words and their frequencyFigure 7: Histogram associated to the words inside messages
collected on the edges of 𝑇[𝑊∗]on the Venmo dataset, for M5
and𝛿=172800 (i.e, two days). See Section 6.4 for more details,
and Figure 4 for a representation of the optimal subnetwork.
each different value of such parameter. We then compare each solu-
tion obtained by Batch to the optimal solution obtained by Exact .
The results are shown in Fig. 6. We see that in general smaller
values of𝜉correspond to solutions with better approximation ratio
obtained by Batch . On some instances by varying 𝜉the solution
may vary significantly (e.g., M2on Askubuntu). In general the algo-
rithm achieves satisfactory approximations on most configurations
for𝜉<0.75, given that for such range the value of the solution
obtained by Batch is often within 80% of the optimal solution found
with Exact . We also observe that in some settings the algorithm
never outputs solutions with optimal densities (e.g., motif M2,M8
on Askubuntu or M1on Sms). This supports the design of Hybrid-
Peel , since for ProbPeel it may often be infeasible to converge to
an optimal solution, as its guarantees are with respect to Batch
(see Theorem 4.2). In our extended online version [ 64] we show
additional results on the convergence of ProbPeel toBatch by
varying the parameter 𝑟which controls the sample size, used to
compute the approximate temporal motif degrees of the various
vertices.
C.3 Case study
We report in Figure 7 the frequencies of top-20 words over the
transactions associated to the optimal subnetwork from Figure 4
(right). We observe terms related to social activities (i.e., food, pizza,
etc.), and terms that may be related to gambling (e.g., bracket, yarg),
we removed emojis from the histogram for ease of visualization.
 
2547