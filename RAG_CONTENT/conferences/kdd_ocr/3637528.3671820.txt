Revisiting Local PageRank Estimation on Undirected Graphs:
Simple and Optimal
Hanzhi Wang
Renmin University of China
Beijing, China
hanzhi_wang@ruc.edu.cn
Abstract
We propose a simple and optimal algorithm, BackMC , for local PageR-
ank estimation in undirected graphs: given an arbitrary target
node𝑡in an undirected graph 𝐺comprising 𝑛nodes and𝑚edges,
BackMC accurately estimates the PageRank score of node 𝑡while
assuring a small relative error and a high success probability. The
worst-case computational complexity of BackMC is upper bounded
by𝑂
1
𝑑min·min
𝑑𝑡,𝑚1/2
, where𝑑mindenotes the minimum de-
gree of𝐺, and𝑑𝑡denotes the degree of 𝑡, respectively. Compared
to the previously best upper bound of 𝑂
log𝑛·min
𝑑𝑡,𝑚1/2
(VLDB ’23), which is derived from a significantly more complex
algorithm and analysis, our BackMC improves the computational
complexity for this problem by a factor of Θlog𝑛
𝑑min
with a much
simpler algorithm. Furthermore, we establish a matching lower
bound of Ω
1
𝑑min·min
𝑑𝑡,𝑚1/2
for any algorithm that attempts
to solve the problem of local PageRank estimation, demonstrating
the theoretical optimality of our BackMC . We conduct extensive ex-
periments on various large-scale real-world and synthetic graphs,
where BackMC consistently shows superior performance.
CCS Concepts
•Mathematics of computing →Graph algorithms; •Informa-
tion systems→Data mining.
Keywords
local PageRank estimation, undirected graphs, worst-case scenario
ACM Reference Format:
Hanzhi Wang. 2024. Revisiting Local PageRank Estimation on Undirected
Graphs: Simple and Optimal. In Proceedings of the 30th ACM SIGKDD
Conference on Knowledge Discovery and Data Mining (KDD ’24), August
25–29, 2024, Barcelona, Spain. ACM, New York, NY, USA, 9 pages. https:
//doi.org/10.1145/3637528.3671820
1 Introduction
PageRank is a celebrated metric for assessing node centrality in
graphs, originally introduced by Google for ranking web pages
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ’24, August 25–29, 2024, Barcelona, Spain
©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671820based on their prominence within the web network [ 9,28]. Over
the past two decades, PageRank has evolved into one of the most
popular graph centrality metrics, with widespread applications
across diverse fields. These include social network analysis [ 19],
spam detection [ 20], recommender systems [ 17], graph representa-
tion learning [ 10,21], chemical informatics [ 26], and bioinformat-
ics [27], and more [ 14]. The computation of PageRank has become
a fundamental aspect of modern network analysis.
In recent years, the exponential growth in network sizes has
sparked significant interest in the field of local PageRank estima-
tion [ 1,3,7,8,11,22–25,31,32]. This problem focuses on the
approximation of a given target node’s PageRank score, with the
goal of exploring only a small portion of the graph. Various practi-
cal applications illustrate the utility of local PageRank estimation.
For example, in recommender systems, there is a growing need to
quickly approximate the PageRank scores of individual users during
online operations, as opposed to performing time-consuming global
computations of determining all nodes’ PageRank scores within a
graph [ 11]. Similarly, in web search scenarios, website owners who
are interested in enhancing their search engine rankings may only
seek the PageRank score of their specific websites, not those of the
entire web [ 3]. Additionally, in social networks, users often desire
to gauge their PageRank-based popularity by efficiently probing
the friendship graph, rather than having to traverse the entire net-
workr [ 3,31]. Therefore, it is imperative to have highly efficient
algorithms for local PageRank estimation.
This paper focuses on local PageRank estimation in undirected
graphs1. We aim to address the problem of computing, with proba-
bility(1−𝑝𝑓), a multiplicative(1±𝑐)-approximation of the PageR-
ank score for a given target node 𝑡in an undirected graph 𝐺com-
prising𝑛nodes and𝑚edges. Both𝑐and𝑝𝑓are constants set within
the(0,1)range (e.g.,𝑐=𝑝𝑓=0.1). This problem is of great impor-
tance from both theoretical and practical aspects.
Theoretical Motivations. Existing studies on local PageRank
estimation can be broadly divided into two categories. The first
category focuses on the approximation of a single node’s PageRank
score on general directed graphs [ 7,8,23,25,32], while the second
specifically targets undirected graphs [ 22,31]. For directed graphs,
the best-known lower bound ofΩ
min
𝑛1/2𝑑1/2
max,𝑛1/3𝑚1/3
for
the worst-case computational complexity was established by Bres-
san, Peserico, and Pretto [ 7,8], where𝑑maxdenotes the maxi-
mum outdegree of 𝐺. This lower bound indicates the improba-
bility of achieving a complexity bound of 𝑂(√𝑛)even on very
sparse directed graphs. Surprisingly, on undirected graphs, a recent
1It’s important to note, as formally established in [ 18], that the PageRank scores
in undirected graphs are not simply proportional to node degrees, despite common
misconceptions to the contrary often cited in the literature.
3036
KDD ’24, August 25–29, 2024, Barcelona, Spain Hanzhi Wang
work [ 31] shows that the computational complexity of local PageR-
ank approximation can be improved to 𝑂
log𝑛·min
𝑑𝑡,𝑚1/2
by leveraging the symmetry of PageRank vectors in undirected
graphs2. Here,𝑑𝑡denotes the degree of the target node 𝑡in the
undirected graph 𝐺. We note that this upper bound is even asymp-
totically better than the lower bound established for directed graphs.
This encouraging result underscores the theoretical significance
and necessity of exploring the complexity bounds of local PageRank
estimation on undirected graphs. However, the question of whether
this upper bound can be further improved remains open due to
the lack of lower bounds for undirected graphs [ 31]. To the best
of our knowledge, only a trivial lower bound of Ω(1)has been
established over the years. This gap in understanding motivates
our exploration in this area.
Applications Significance. Local estimation of PageRank scores
on undirected graphs is a versatile tool with a range of appli-
cations. A typical example is its use in Graph Neural Networks
(GNNs). The majority of GNN models are primarily designed for
undirected graphs, aiming to derive low-dimensional latent rep-
resentations of all training nodes from structural and feature in-
formation. A message-passing mechanism is typically employed
in existing GNN models for feature propagation. In particular, a
line of research [ 4,10,21,30] utilizes PageRank queries for effi-
cient feature propagation, where the initial feature vector serves
as the preference vector for PageRank computations (as detailed
in Section 2). In these models, feature propagation is essentially
akin to computing PageRank scores for a selected group of nodes in
semi-supervised learning tasks, like community classification on a
billion-scale graph Friendster [ 10], where feature vector entries are
binary and the number of training nodes is small. Thus, an efficient
local PageRank algorithm can greatly enhance the scalability of
GNN models in these contexts. Moreover, the simulation of random
walks in undirected graphs is a prevalent approach widely adopted
in various graph learning tasks [ 10,29,30,33]. While prior studies
have demonstrated the empirical efficacy of this method, they fall
short of providing a theoretical foundation for the optimality of gen-
erating random walks in undirected settings. This paper establishes
that merely generating random walks from a specified target node
achieves the optimal complexity for local PageRank computation.
Our findings aim to lay a theoretical foundation for the efficacy of
random walk simulations in undirected graphs, thereby informing
the design of graph learning methods tailored to such graphs.
1.1 Our Contributions
In this paper, we address the problem of locally estimating the
PageRank score of a target node 𝑡in an undirected graph 𝐺. We
achieve the following contributions:
•We introduce BackMC , an algorithm that achieves the worst-case
computational complexity of 𝑂
1
𝑑min·min
𝑑𝑡,𝑚1/2
, where
𝑑minrepresents the minimum degree of the graph 𝐺,𝑑𝑡denotes
the degree of the target node 𝑡, and𝑚is the total number of edges
in𝐺. This computational complexity notably improves upon the
2For readability, we hide multiplicative factors depending on the parameters 𝑐,𝑝𝑓and
𝛼in the𝑂()notation, following [ 7,8,31,32]. These factors in our upper bound can
be found in Section 4.Table 1: Table of notations.
Notation Description
𝐺=(𝑉,𝐸)undirected graph with node set 𝑉and edge set 𝐸
A,D adjacency and degree matrices of 𝐺
𝑛,𝑚 numbers of nodes and edges in 𝐺
N(𝑡) set of neighbors of 𝑡
𝑑𝑡 degree of node 𝑡
𝑑max maximum degree of 𝐺
𝑑min minimum degree of 𝐺
𝝅 PageRank vector
𝝅(𝑡),ˆ𝝅(𝑡)real and estimated PageRank scores of node 𝑡
𝝅(𝑠,𝑡) Personalized PageRank score of node 𝑡w.r.t node𝑠
𝛼 teleport probability in defining PageRank
𝑐 relative error parameter
𝑝𝑓 failure probability parameter
previous best upper bound of 𝑂
log𝑛·min
𝑑𝑡,𝑚1/2
, as docu-
mented for the SetPush algorithm [ 31], by a factor of Θlog𝑛
𝑑min
.
Remarkably, although the complexity result of SetPush is de-
rived from a significantly complex analysis, the algorithm struc-
ture and theoretical analysis of our BackMC exhibit a surprising
simplicity.
•We improve the lower bound for this problem from a trivial
bound of Ω(1)toΩ
1
𝑑min·min
𝑑𝑡,𝑚1/2
. The matching upper
and lower bounds demonstrate that our BackMC has been optimal.
•Beyond its theoretical optimality, BackMC distinguishes itself with
a clean algorithm structure and straightforward implementation,
and thus achieves exceptional empirical performance. We con-
duct extensive experiments on large-scale real-world and syn-
thetic graphs, and BackMC consistently outperforms all baseline
algorithms. Notably, it surpasses SetPush in both efficiency and
accuracy by up to three orders of magnitude.
2 Preliminaries
We denote the underlying undirected graph as 𝐺=(𝑉,𝐸), with
AandDrepresenting the adjacency and degree matrices of 𝐺,
respectively. The graph consists of 𝑛=|𝑉|nodes and𝑚=|𝐸|edges.
For any undirected edge (𝑢,𝑣)in𝐺, nodes𝑢and𝑣are termed as
neighbors. For a node 𝑢in𝐺, the set of its neighbors is denoted
asN(𝑢), and its degree is represented by 𝑑𝑢=|N(𝑢)|. We further
define𝑑max=max𝑢∈𝑉𝑑𝑢and𝑑min=min𝑢∈𝑉𝑑𝑢as the maximum
and minimum degrees of 𝐺, respectively. We list frequently used
notations in Table 1 for quick reference.
2.1 PageRank
The PageRank vector 𝝅of graph𝐺is defined as the stationary
distribution of the PageRank Markov chain [9, 28], satisfying:
𝝅=(1−𝛼)AD−1·𝝅+𝛼
𝑛·1, (1)
3037Revisiting Local PageRank Estimation on Undirected Graphs: Simple and Optimal KDD ’24, August 25–29, 2024, Barcelona, Spain
where𝛼∈(0,1)is the teleport probability, and 1is an all-one col-
umn vector of length 𝑛. The vector 1/𝑛is termed as the preference
or personalized vector in PageRank.
For any node 𝑢in𝐺, the PageRank score of 𝑢, denoted by 𝝅(𝑢),
corresponds to the entry in 𝝅associated with node 𝑢. It is well
known that 𝝅(𝑢)equals the probability that an 𝛼-discounted ran-
dom walk, starting from a random source node uniformly chosen
in𝑉, terminates at node 𝑢[9,28]. Here, an𝛼-discounted random
walk is a type of random walk where the length of the walk is a
random variable that takes on value ℓwith probability 𝛼(1−𝛼)ℓfor
eachℓ≥0. In other words, at each step of the 𝛼-discounted random
walk, there is a probability of 𝛼that the walk will terminate, and a
probability of(1−𝛼)that the walk will continue to the next step.
Equation (1)implies that the following recursive equality holds
for any node 𝑢∈𝑉.
𝝅(𝑢)=∑︁
𝑣∈N(𝑢)(1−𝛼)𝝅(𝑣)
𝑑𝑣+𝛼
𝑛. (2)
Moreover, Wang and Wei [ 31] demonstrate that for any node 𝑢∈𝑉,
𝝅(𝑢)≥max 
𝛼
𝑛,𝛼𝑑𝑢√︁
2(1−𝛼)
𝑛√𝑚!
. (3)
We present the proof below for the sake of completeness.
Proof of Eqation (3).By Equation (2), we have 𝝅(𝑢)≥𝛼/𝑛
for any node 𝑢∈𝑉. Applying 𝝅(𝑢)≥𝛼/𝑛into Equation (2)further
yields that
𝝅(𝑢)≥∑︁
𝑣∈N(𝑢)(1−𝛼)
𝑑𝑣·𝛼
𝑛+𝛼
𝑛=𝛼
𝑛·©­
«∑︁
𝑣∈N(𝑢)(1−𝛼)
𝑑𝑣+1ª®
¬.(4)
In particular, by the Cauchy-Schwarz inequality, we have
©­
«∑︁
𝑣∈N(𝑢)1
𝑑𝑣ª®
¬·©­
«∑︁
𝑣∈N(𝑢)𝑑𝑣ª®
¬≥©­
«∑︁
𝑣∈N(𝑢)1ª®
¬2
=𝑑2
𝑢.
It is important to note thatÍ
𝑣∈N(𝑢)𝑑𝑣≤2𝑚, therefore giving thatÍ
𝑣∈N(𝑢)1/𝑑𝑣≥𝑑2𝑢/2𝑚. By Plugging into Inequality (4), we have
𝝅(𝑢)≥𝛼
𝑛·(1−𝛼)𝑑2𝑢
2𝑚+1
=𝛼𝑑𝑢
𝑛·(1−𝛼)𝑑𝑢+2𝑚/𝑑𝑢
2𝑚
.
By the AM-GM inequality, we further have
𝝅(𝑢)≥𝛼𝑑𝑢
𝑛·2√︁
2(1−𝛼)𝑚
2𝑚=𝛼𝑑𝑢
𝑛·√︁
2(1−𝛼)√𝑚.
Combining these results gives the claimed inequality. □
2.2 Personalized PageRank
Personalized PageRank (PPR) serves as an ego-centric counterpart
to PageRank, quantifying the probability that an 𝛼-discounted ran-
dom walk, starting from a source node 𝑢, terminates at a target
node𝑣. This is expressed as the PPR score of 𝑣with respect to
𝑢, symbolized by 𝝅(𝑢,𝑣). It follows naturally that the PageRank
score of𝑣is the average of 𝝅(𝑢,𝑣)across all nodes 𝑢in the graph,
formalized as
𝝅(𝑣)=1
𝑛·∑︁
𝑢∈𝑉𝝅(𝑢,𝑣). (5)Table 2: Summary of computational complexities for esti-
mating the PageRank score of the target node 𝒕in undirected
graph 𝑮. Results only applicable to undirected graphs are
marked with ★.
Method Complexity Bound Notes
PowerIteration [28]𝑂(𝑚log𝑛)
BackwardPush [24]𝑂(log𝑛·min(𝑛𝑑𝑡,𝑚)) ★
MC[13] 𝑂(𝑛)
RBS[32] 𝑂(𝑛log𝑛)
Undir-BiPPR [22]𝑂
𝑛1/2𝑑1/2
𝑡
★
BPPPush [7] 𝑂
log𝑛·min
𝑛3/4𝑑1/4
max,𝑛5/7𝑚1/7
BPPPush∗[8] 𝑂
log𝑛·min
𝑛2/3𝑑1/3
max,𝑛2/3𝑚1/6
SetPush [31] 𝑂
log𝑛·min
𝑑𝑡,𝑚1/2
★
BackMC (Ours) 𝑂
1
𝑑min·min
𝑑𝑡,𝑚1/2
★
Lower Bound (Ours) Ω
1
𝑑min·min
𝑑𝑡,𝑚1/2
★
Specifically, on undirected graphs, PPR scores exhibit symmetry
for any pair of nodes (𝑢,𝑣)∈𝑉2:
𝝅(𝑢,𝑣)·𝑑𝑢=𝝅(𝑣,𝑢)·𝑑𝑣. (6)
The proof of Equation (6) is detailed in [22].
2.3 Computational Model
In this paper, we adopt the standard RAM model for computational
complexity. To establish lower bounds, we consider query complex-
ity under the standard arc-centric graph access model [15,16], where
local algorithms can access the underlying graph only through a
graph oracle via several local queries and a global jump()operation.
This setting aligns well with practical situations with massive-scale
network structures. Specifically, for undirected graphs, the graph
oracle supports three elementary query operations, each taking
unit time: deg(𝑢), which returns 𝑑𝑢;neigh(𝑢,𝑖), which returns the
𝑖-th node inN(𝑢);jump(), which returns a random node uniformly
chosen from 𝑉. Algorithm 2 is an example on how to leverage
these query operations to sample random walks in the graph. The
query complexity of a graph algorithm is defined as the number
of elementary query operations invoked on the graph oracle. It is
worth noting that the query complexity of an algorithm serves as a
lower bound for its computational complexity.
3 Related Work
The problem of estimating PageRank scores locally was introduced
in [11], and, in its various forms, has received considerable attention
over the past decade [ 1,3,7,8,11,13,22–25,31,32]. These methods
can be broadly categorized into three groups based on their underly-
ing techniques. A summary of their complexity bounds is provided
in Table 2. In this section, we will briefly review these methods.
Section 4 will delve into the limitations of existing methods and
offer a detailed comparison with our BackMC algorithm.
The first category [ 2,5,6,13] is inspired by the probabilistic
interpretation of PageRank scores. The seminal work by Fogaras
3038KDD ’24, August 25–29, 2024, Barcelona, Spain Hanzhi Wang
et al. [ 13] introduced a Monte Carlo (MC) method that initiates a
series of𝛼-discounted random walks across the graph 𝐺, where each
random walk is generated from a uniformly random source node in
𝐺. The MC method calculates the proportion of walks that terminate
at the given target node 𝑡, utilizing this ratio to approximate 𝝅(𝑡).
To achieve a multiplicative (1±𝑐)-approximation of 𝝅(𝑡)with
probability 1−𝑝𝑓, the expected computational complexity of the
MC method is upper bounded by 𝑂(𝑛). This result is applicable to
both directed and undirected graphs.
Another line of research [ 1,24,31,32] focuses on the estimation
of𝝅(𝑠,𝑡)for all𝑠∈𝑉, using Equation (5)to derive an estimate for
𝝅(𝑡). These algorithms start with one unit of probability mass at
node𝑡and perform a sequence of push operations to distribute the
probability mass across the graph 𝐺. The push operation, applied to
node𝑢, redistributes the probability mass from node 𝑢to its neigh-
bors, following the recurrence equation in Equation (2). The seminal
paper [ 1] in this category introduces the ApproxContributions
algorithm, which achieves a worst-case computational complexity
of𝑂(𝑛𝑑𝑡)for determinsitically computing a multiplicative (1±𝑐)-
approximation of 𝝅(𝑡). It is worth noting that this result is only ap-
plicable to undirected graphs. On directed graphs, the running time
ofApproxContributions can only be bounded by 𝑂(𝑚)in expec-
tation over a uniform random choice of 𝑡∈𝑉. Subsequent studies,
such as the BackwardPush algorithm by Lofgren and Goel [ 24],
improved the framework of ApproxContributions to achieve a
worst-case computational complexity of 𝑂(log𝑛·min(𝑛𝑑𝑡,𝑚))on
undirected graphs and an average running time of 𝑂(𝑚log𝑛)over
all𝑡∈𝑉on directed graphs. A recent advancement, RBS[32],
further improves the worst-case computational complexity of this
problem to𝑂(𝑛log𝑛). This result applies to both directed and undi-
rected graphs. The key idea of RBSis to pre-sort the neighbors of
each node in ascending order of their degrees and, in each push op-
eration, propagate probability mass only to neighbors with small de-
grees. The SetPush algorithm [ 31] achieves the best-known worst-
case complexity of 𝑂
log𝑛·min
𝑑𝑡,𝑚1/2
for estimating 𝝅(𝑡)on
undirected graphs. The algorithm critically depends on the symme-
try of PPR scores in undirected graphs. It employs a complex push
strategy to estimate 𝝅(𝑡,𝑠)for all𝑠∈𝑉, and then derives the ap-
proximation of 𝝅(𝑡)using the equation 𝝅(𝑡)=1
𝑛·Í
𝑠∈𝑉𝑑𝑡
𝑑𝑠·𝝅(𝑡,𝑠),
as inferred from Equation (5) and (6).
Additionally, a set of papers presents novel results by combining
the Monte Carlo method and push operations. This idea was in-
troduced in the FastPPR algorithm [ 25], and further refined in the
BiPPR algorithm [ 23], both designed for directed graphs. An alterna-
tive version of BiPPR , referred to as Undir-BiPPR , has been tailored
for undirected graphs. Undir-BiPPR achieves a worst-case com-
putational complexity of 𝑂
𝑛1/2𝑑1/2
𝑡
for estimating 𝝅(𝑡). In the
recent work by Bressan, Peserico, and Pretto [ 7], a worst-case com-
putational complexity of 𝑂
log𝑛·min
𝑛3/4𝑑1/4
max,𝑛5/7𝑚1/7
was
achieved for general directed graphs. Subsequently, this bound was
further improved to 𝑂
log𝑛·min
𝑛2/3𝑑1/3
max,𝑛2/3𝑚1/6
in [8], es-
tablishing itself as the best-known worst-case complexity bound
for local PageRank approximation in directed graphs.
As for lower bounds, Bar-Yossef and Mashiach [ 3] have proven
that, in directed graphs, the lack of jump()operation imposes aAlgorithm 1: BackMC(𝐺,𝑡,𝛼,𝑛𝑟)
Input: undirected graph 𝐺=(𝑉,𝐸), target node 𝑡∈𝑉,
damping factor 𝛼, the number of random walks 𝑛𝑟
Output: ˆ𝝅(𝑡)as an estimate of 𝝅(𝑡)
1ˆ𝝅(𝑡)← 0
2for𝑤from 1to𝑛𝑟do
3𝑣←SampleNode(𝐺,𝑡,𝛼)
4 ˆ𝝅(𝑡)← ˆ𝝅(𝑡)+1
𝑛𝑟·𝑑𝑡
𝑛𝑑𝑣//𝑞(𝑡)=𝑑𝑡
𝑛𝑑𝑣
5return ˆ𝝅(𝑡);
Algorithm 2: SampleNode(𝐺,𝑢,𝛼)
Input: undirected graph 𝐺=(𝑉,𝐸), source node 𝑢∈𝑉,
damping factor 𝛼
Output: a sampled node 𝑣
1𝑣←𝑢
2while truedo
3 with probability 𝛼return𝑣
4𝑣←neigh(𝑣,randint(deg(𝑣)))//randint(deg(𝑣))
returns a uniformly random integer in [1,deg(𝑣)]
lower bound of Ω(𝑛)on the query complexity for locally approx-
imating 𝝅(𝑡). Moreover, Bressan, Peserico, and Pretto [ 7] have
shown that a lower bound of Ω
min
𝑛1/2𝑑1/2
max,𝑛1/3𝑚1/3
elemen-
tary query operations is necessary in the worst case to estimate
𝝅(𝑡)within a multiplicative 𝑂(1)factor with probability Ω(1)in
directed graphs. However, the lower bounds pertaining to the esti-
mation of 𝝅(𝑡)on undirected graphs remain unclear.
4 Algorithm
This section presents our BackMC algorithm. We demonstrate that
BackMC can achieve the following upper bound simply by generat-
ing a series of 𝛼-discounted random walks from node 𝑡.
Theorem 1. Given an undirected graph 𝐺and a target node 𝑡∈𝑉,
the expected computational complexity of BackMC for computing a
multiplicative(1±𝑐)-approximation of 𝝅(𝑡)with probability at least
1−𝑝𝑓is𝑂
1
𝑑min·min
𝑑𝑡,𝑚1/2
.
Algorithm 1 provides the pseudocode for BackMC . At the heart
of Algorithm 1 is the SampleNode(𝐺,𝑡,𝛼)function, responsible
for simulating an 𝛼-discounted random walk from node 𝑡in𝐺.
We define the indicator variable 𝜒𝑣, which takes on value 1if
SampleNode(𝐺,𝑡,𝛼)=𝑣. We also compute a temporary estima-
tor𝑞(𝑡)as𝑞(𝑡)=Í
𝑣∈𝑉𝑑𝑡
𝑛·𝑑𝑣·𝜒𝑣. We invoke SampleNode(𝐺,𝑡,𝛼)
for𝑛𝑟times to obtain 𝑛𝑟independent realizations of 𝑞(𝑡), and take
their average as the final estimate ˆ𝝅(𝑡)for𝝅(𝑡).
4.1 Analysis
This section presents the proof of Theorem 1. It is straightforward
that𝜒𝑣is a Bernoulli random variable that takes on value 1with
probability 𝝅(𝑡,𝑣). Therefore, 𝑞(𝑡)is an unbiased estimator for
𝝅(𝑡)since 𝝅(𝑡)=(1/𝑛)·Í
𝑣∈𝑉𝝅(𝑡,𝑣)·(𝑑𝑡/𝑑𝑣), as inferred from
3039Revisiting Local PageRank Estimation on Undirected Graphs: Simple and Optimal KDD ’24, August 25–29, 2024, Barcelona, Spain
Equation (5)and(6). It is important to note that BackMC computes
ˆ𝝅(𝑡)by averaging 𝑛𝑟independent realizations of 𝑞(𝑡). Thus, ˆ𝝅(𝑡)
also emerges as an unbiased estimator for 𝝅(𝑡).
We now proceed to bound the variance of the estimator ˆ𝝅(𝑡)
generated by BackMC . It is well-known that the variance of the
Bernoulli random variable 𝜒𝑣is given by Var[𝜒𝑣]=𝝅(𝑡,𝑣)(1−
𝝅(𝑡,𝑣))≤𝝅(𝑡,𝑣). It is worth noting that for all 𝑣∈𝑉, the random
variables𝜒𝑣are negatively correlated since an 𝛼-discounted random
walk can only terminate at a single node. Consequently, we have
Var[𝑞(𝑡)]≤∑︁
𝑣∈𝑉Var𝑑𝑡
𝑛𝑑𝑣·𝜒𝑣
≤∑︁
𝑣∈𝑉𝑑2
𝑡
𝑛2𝑑2𝑣·𝝅(𝑡,𝑣).
By utilizing Equation (6), we can further derive that
Var[𝑞(𝑡)]≤∑︁
𝑣∈𝑉𝑑𝑡
𝑛2𝑑𝑣·𝝅(𝑣,𝑡)≤𝑑𝑡
𝑛2𝑑min·∑︁
𝑣∈𝑉𝝅(𝑣,𝑡)=𝑑𝑡·𝝅(𝑡)
𝑛·𝑑min,
where we employ Equation (5)to assert that1
𝑛·Í
𝑣∈𝑉𝝅(𝑣,𝑡)=𝝅(𝑡).
Recall that BackMC computes ˆ𝝅(𝑡)as the average of 𝑛𝑟independent
realizations of 𝑞(𝑡). As a result, we can bound the variance of the
estimator ˆ𝝅(𝑡)inBackMC asVar[ˆ𝝅(𝑡)]≤𝑑𝑡·𝝅(𝑡)
𝑛·𝑛𝑟·𝑑min.
Therefore, with 𝑛𝑟=3𝑑𝑡
𝑐2𝑛𝝅(𝑡)𝑑min, Chebyshev’s inequality guar-
antees that
Pr{|ˆ𝝅(𝑡)−𝝅(𝑡)|≥𝑐𝝅(𝑡)}≤Var[ˆ𝝅(𝑡)]
𝑐2(𝝅(𝑡))2≤𝑑𝑡
𝑐2𝑛𝝅(𝑡)·𝑛𝑟𝑑min=1
3.
Given that 𝝅(𝑡)≥max
𝛼
𝑛,𝛼𝑑𝑡√
2(1−𝛼)
𝑛√𝑚
(from Inequality (3)), we
can ensure that Pr{|ˆ𝝅(𝑡)−𝝅(𝑡)|≥𝑐𝝅(𝑡)}≤1/3by setting𝑛𝑟=
3
𝑐2𝛼𝑑min·min
𝑑𝑡,√𝑚√
2(1−𝛼)
.
To further reduce the failure probability to 𝑝𝑓, we use the Median
trick. The core idea is to independently run BackMC multiple times
and take the median of the resulting ˆ𝝅(𝑡)as the final estimate for
𝝅(𝑡). Specifically, we use 𝑛𝑚to denote the number of BackMC runs.
For each integer 𝑗∈[1,𝑛𝑚], we define the indicator variable 𝛾𝑗,
which equals 1if the𝑗-th run fails to achieve |ˆ𝝅(𝑡)−𝝅(𝑡)|<𝑐·𝝅(𝑡).
Based on the earlier proof, we have E
𝛾𝑗
=Pr
𝛾𝑗=1	
≤1/3
when𝑛𝑟=3
𝑐2𝛼𝑑min·min
𝑑𝑡,√𝑚√
2(1−𝛼)
. Furthermore, we define 𝛾=
Í𝑛𝑚
𝑗=1𝛾𝑗as the count of times BackMC fails to produce a satisfactory
approximation of 𝝅(𝑡). The probability that the median of these
estimates is not a multiplicative (1±𝑐)-approximation of 𝝅can thus
be quantified as Pr{𝛾≥𝑛𝑚/2}. Given that E[𝛾]=Í𝑛𝑚
𝑗=1E
𝛾𝑗
≤
𝑛𝑚/3, by Hoeffding’s inequality, 𝑛𝑚=
18·ln(1/𝑝𝑓)
yields:
Prn
𝛾≥𝑛𝑚
2o
=Prn
𝛾−E[𝛾]≥𝑛𝑚
6o
≤exp−𝑛𝑚
18
≤𝑝𝑓.
As a consequence, the total number of 𝛼-discounted random
walks generated in 𝐺turns out to be
𝑛𝑟·
18·ln(1/𝑝𝑓)
=54·
log(1/𝑝𝑓)
𝑐2𝛼𝑑min·min 
𝑑𝑡,√𝑚√︁
2(1−𝛼)!
.
We observe that the expected length of each 𝛼-discounted random
walk is 1/𝛼=𝑂(1). Consequently, the expected running time ofthe entire process can be upper bounded by
𝑛𝑟
𝛼=54·
log(1/𝑝𝑓)
𝑐2𝛼2𝑑min·min 
𝑑𝑡,√𝑚√︁
2(1−𝛼)!
=𝑂1
𝑑min·min
𝑑𝑡,√𝑚
.
This completes the proof of Theorem 1.
Remark. We note that the setting of 𝑛𝑟requires explicit knowledge
of𝑚and𝑑min. As demonstrated in [ 7,8,12], this requirement can be
easily waived. To achieve this, we run BackMC with an initial value
for𝑛𝑟(e.g.,𝑛𝑟=2). If we find that 𝑛𝑟·ˆ𝝅(𝑡)=Ω(𝑐−1ln(1/𝑝𝑓))
during the process, standard concentration bounds allow us to
safely terminate BackMC and return ˆ𝝅(𝑡)as a multiplicative(1±𝑐)-
approximation of 𝝅(𝑡). In case this condition is not met, we double
the value of 𝑛𝑟and repeat the process. This modification does not
affect the validity of Theorem 1.
4.2 Comparison with Previous Methods
This subsection presents a thorough comparison between BackMC
and previous methods.
First, considering SetPush , it achieves the best-known worst-
case complexity of 𝑂 log𝑛·min 𝑑𝑡,√𝑚for this problem, with
a hidden multiplicative factor of 1/𝛼3. In contrast, BackMC has a
worst-case computational complexity of 𝑂
1
𝑑min·min 𝑑𝑡,√𝑚
,
with a more favorable multiplicative dependency on 𝛼of1/𝛼2. This
complexity surpasses that of SetPush by a factor of Θ(log𝑛/𝑑min).
Additionally, the improvement in the 𝛼factor can be significant in
practice when 𝛼is small (e.g., 𝛼=0.01). Furthermore, in Section 5,
we will demonstrate that the complexity bound of our BackMC
is optimal, matching the lower bound of Ω
1
𝑑min·min 𝑑𝑡,√𝑚
for this problem. It is also worth noting that BackMC offers a much
simpler algorithm and analysis compared to SetPush [31].SetPush
devises a complex push strategy to estimate 𝝅(𝑡,𝑠)for all𝑠∈𝑉,
and then compute the approximation of 𝝅(𝑡)using the equation
𝝅(𝑡)=1
𝑛·Í
𝑠∈𝑉𝑑𝑡
𝑑𝑠·𝝅(𝑡,𝑠), as inferred from Equation (5)and(6).
However, our analysis shows that this is unnecessary. To estimate
𝝅(𝑡,𝑠), generating 𝛼-discounted random walks from node 𝑡suffices
to achieve optimal complexity.
For other previous methods, we now analyze the reasons why
these methods cannot achieve the optimal complexity results. First
of all, the MC method [ 2,5,6,13] estimates 𝝅(𝑡)directly, result-
ing in a computational complexity lower bound of Ω(𝑛)in an𝑛-
node graph. Specifically, in an 𝑛-node graph 𝐺, all but𝑜(𝑛)nodes
have PageRank scores 𝑂(1/𝑛). Therefore, the MC method needs
to generate Ω(𝑛)𝛼-discounted random walks, each initiated from
a uniformly random source node, in order to hit a target node 𝑡
with 𝝅(𝑡)=𝑂(1/𝑛)at least once. For the push-based methods
likeApproxContributions [1] and BackwardPush [24], they can
perform Ω(𝑛)elementary query operations during a push opera-
tion at a node 𝑢with𝑑𝑢=𝑂(𝑛). The Undir-BiPPR method [ 22]
combines the MC method and push operations, thus inheriting
their drawbacks. The RBS,BPPPush , and BPPPush∗methods are
three exceptions, each of which devises the original push operation.
However, RBS[32],BPPPush [7], and BPPPush∗[8] are tailored for
general directed graphs and do not leverage the symmetry of PPR
3040KDD ’24, August 25–29, 2024, Barcelona, Spain Hanzhi Wang
s1s1t
s2s2u1u1
u2u2
/u1D4B0 /u1D4B0t
/u1D4AE /u1D4AEu1u1u2u2
/u1D4B0 /u1D4B0
… …… …… …
Figure 1: Hard instances of the lower bound proof.
scores in undirected graphs. This limitation prevents them from
achieving optimality in undirected graphs due to the differences in
local PageRank estimation between undirected and directed graphs.
5 Lower Bounds
This section establishes the computational complexity lower bound
for the local approximation of 𝝅(𝑡). Specifically, we have Theorem 2
as shown below.
Theorem 2. Choose any integer 𝑝≥2and any functions 𝑚(𝑛)∈
Ω(𝑛),𝑑min(𝑛)∈Ω(1)∩𝑂(𝑛). Consider any (randomized) algorithm
H(𝑡)that estimates 𝝅(𝑡)within a multiplicative factor 𝑂(1)with
probability at least 1/𝑝, whereHcan only access the unseen nodes
and edges in the underlying graph via a graph oracle. Then, for every
sufficiently large 𝑛, there exists an undirected graph 𝐺such that:
(1)The graph𝐺contains Θ(𝑛)nodes and Θ(𝑚)edges, and its mini-
mum degree is Θ(𝑑min);
(2)The graph𝐺contains a node 𝑡with degree 𝑑𝑡, such thatH(𝑡)
requires Ω
1
𝑑min·min
𝑑𝑡,𝑚1/2
elementary query operations
in expectation in the arc-centric graph-access model.
Let us outline the proof first for ease of understanding. We estab-
lish Theorem 2 by constructing (𝑝+1)graphs as hard instances for
estimating 𝝅(𝑡). These graphs are carefully designed so that any al-
gorithm requires Ω
1
𝑑min·min
𝑑𝑡,𝑚1/2
elementary query oper-
ations in the arc-centric graph access model to distinguish between
them. However, distinguishing these graphs is essential for any algo-
rithm to produce an approximation of 𝝅(𝑡)within a multiplicative
factor𝑂(1)with a probability of at least 1/𝑝. Hence, we establish
a query complexity lower bound of Ω
1
𝑑min·min
𝑑𝑡,𝑚1/2
for
estimating 𝝅(𝑡). As detailed in Section 2.3, the query complexity
of an algorithm is a lower bound for its computational complexity,
thus establishing Theorem 2.
We present the formal proof of Theorem 2 in the following.
Proof. We construct(𝑝+1)graphs𝐺(0),𝐺(1),...,𝐺(𝑝)as hard
instances for estimating 𝝅(𝑡). In graph𝐺(𝑖), the target node 𝑡has
Θ(𝑑𝑡)neighbors, which can be divided into (𝑖+1)groups. Each of
the first𝑖groups, denoted by S(𝑗)for𝑗∈[0,𝑖), hasΘ(𝑑min)neigh-
bor nodes, while the last group, denoted by U, contains Θ(𝑚1/2)
neighbors. In the first 𝑖groups, each neighbor node has a degree of
Θ(𝑑min), whereas in the(𝑖+1)-th group, each neighbor node has
a degree of Θ(𝑚1/2). Additionally, we add isolated nodes to these
graphs, ensuring that the number of nodes in each graph is Θ(𝑛).
Figure 1 illustrates graphs 𝐺(1)and𝐺(0).
We denote the PageRank score of 𝑡in graph𝐺(𝑖)as𝝅𝑖(𝑡). We
will demonstrate that for each 𝑖∈[1,𝑝],𝝅𝑖(𝑡)=(1+Ω(1))·𝝅𝑖−1(𝑡).Specifically, in graph 𝐺(𝑖), each node 𝑠belonging to group S(𝑗)
for𝑗∈[0,𝑖)has a Personalized PageRank (PPR) score 𝝅(𝑠,𝑡)=
Θ(1/𝑑min). Furthermore, each node 𝑢∈ U in graph𝐺(𝑖)has
a PPR score 𝝅(𝑢,𝑡)=Θ(1/𝑚1/2). Additionally, the PPR score
of node𝑡to itself is 𝝅(𝑡,𝑡)=Θ(1/𝑛). Thus, according to Equa-
tion (5), the PageRank score of node 𝑡in graph𝐺(𝑖)is𝝅𝑖(𝑡)=
Θ
1
𝑛
1+𝑖·𝑑min·1
𝑑min+𝑚1/2·1
𝑚1/2
=Θ
1
𝑛
. The difference
𝝅𝑖(𝑡)−𝝅𝑖−1(𝑡)=Θ
1
𝑛·𝑑min·1
𝑑min
=Θ
1
𝑛
, which corroborates
the assertion that 𝝅𝑖(𝑡)=(1+Ω(1))·𝝅𝑖−1(𝑡)for each𝑖∈[1,𝑝].
Furthermore, letG(𝑖)represent the set of all 𝑛!graphs that are
isomorphic to 𝐺(𝑖)obtained through permutation of node labels.
Consider an undirected graph 𝐺, chosen uniformly at random fromÐ𝑝
𝑖=1G(𝑖). Any algorithmH(𝑡)is required to identify the specific
setG(𝑖)from which 𝐺originates. Failing this, the probability that
H(𝑡)can estimate 𝝅(𝑡)within a multiplicative factor of 𝑂(1)di-
minishes to at most 1/(𝑝+1), a result deemed unacceptable.
Finally, in the arc-centric graph access model, we contend that
any algorithmH(𝑡)must execute Ω
1
𝑑min·min
𝑑𝑡,𝑚1/2
queries
in expectation to distinguish between graphs 𝐺(𝑖−1)and𝐺(𝑖)for
any𝑖∈[1,𝑝]. By our design,H(𝑡)must detect at least one node
in groupS(𝑖−1)to discern the difference between graphs 𝐺(𝑖−1)
and𝐺(𝑖), given that other sections of the two graphs remain in-
distinguishable. It is important to note that H(𝑡)can explore un-
seen nodes in the underlying graph only through interactions with
the graph oracle, utilizing the three elementary query operations:
deg(·),neigh(·,·), and jump(). When employing the jump()query,
H(𝑡)is expected to perform Ω(𝑛/𝑑min)jump queries to detect a
node in groupS(𝑖−1)with probability at least 1/𝑝. However, this
complexity, Ω(𝑛/𝑑min), exceeds the stated lower bound asymptoti-
cally. Consequently, the viable strategy for H(𝑡)is only local ac-
cess through neigh(𝑡,·)anddeg(·)queries. This approach requires
H(𝑡)to perform Ω
𝑚1/2
𝑑min
queries on average to detect at least one
node inS(𝑖−1). Notably, Θ
𝑚1/2
𝑑min
=Θ𝑑𝑡
𝑑min
, given that 𝑑𝑡=
Θ(𝑑min+𝑚1/2)=Θ(𝑚1/2)holds in these hard instances. This sub-
stantiates the proposed lower bound of Ω
1
𝑑min·min
𝑑𝑡,𝑚1/2
,
thereby concluding the proof. □
6 Experiments
In this section, we experimentally evaluate our BackMC algorithm
against other baseline methods on large-scale real-world and syn-
thetic graphs.
Environment. We conduct all the experiments on a Linux server
with an Intel (R) Xeon(R) Gold 6126@2.60GHz CPU and 500GB
memory. All the methods are implemented in C++ and compiled in
g++ with the O3 optimization turned on.
Methods and Parameters. We compare our BackMC against six
baseline methods, including MC[13],BackwardPush [24],RBS[32],
SetPush [31],Undir-BiPPR3[22], and BPPPush∗[8]. Additionally,
3It’s worth noting that Undir-BiPPR [22] is initially implemented as a combination of
forward push and MC, which however is impractical under the graph access model
due to the𝑂(𝑛)time required to identify all nodes for pushing in the initial state.
Instead, we implement Undir-BiPPR by combining backward push and MC, ensuring
an𝑂(𝑛1/2𝑑1/2
𝑡)complexity under the graph access model.
3041Revisiting Local PageRank Estimation on Undirected Graphs: Simple and Optimal KDD ’24, August 25–29, 2024, Barcelona, Spain
10-710-610-510-410-310-210-1100101102103104
query time(s)10-310-210-1Relative ErrorYT
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
10-410-310-210-1100101102103104
query time(s)10-410-310-210-1Relative ErrorLJ
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
10-410-310-210-1100101102103104105106
query time(s)10-410-310-210-1Relative ErrorTW
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
10-210-1100101102103104105
query time(s)10-410-310-210-1100Relative ErrorFR
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
Figur
e 2: actual Relative Error v.s. query time (seconds), the target node 𝒕sampled uniformly, 𝛼=0.2
10-510-410-310-210-1100101102103104
query time(s)10-310-210-1Relative ErrorYT
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
10-510-410-310-210-1100101102103104
query time(s)10-310-210-1Relative ErrorLJ
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
10-310-210-1100101102103104105106
query time(s)10-310-210-1Relative ErrorTW
BackMC
SetPush
RBS
Undir-BiPPR
BPPPush*
MC
10-210-1100101102103104105
query time(s)10-310-210-1Relative ErrorFR
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
Figur
e 3: actual Relative Error v.s. query time (seconds), the target node 𝒕sampled from the degree distribution, 𝛼=0.2
10-510-410-310-210-1100101102103104105
query time(s)10-310-210-1100Relative ErrorYT
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
10-210-1100101102103104105
query time(s)10-410-310-210-1100Relative ErrorLJ
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
100101102103104105
query time(s)10-310-210-1100Relative ErrorTW
BackMC
SetPush
Undir-BiPPR
BPPPush*
MC
100101102103104105
query time(s)10-410-310-210-1100Relative ErrorFR
BackMC
SetPush
BackwardPush
Undir-BiPPR
BPPPush*
Figur
e 4: actual Relative Error v.s. query time (seconds), the target node 𝒕sampled uniformly, 𝛼=0.01
Table 3: Datasets
Dataset
Graph Type 𝒏 𝒎 𝒅 min
Y
outube(YT) Real-World 1,138,499 5,980,886 1
LiveJournal (LJ) Real-World 4,847,571 85,702,474 1
Twitter (TW) Real-World 41,652,230 2,405,026,092 1
Friendster (FR) Real-World 68,349,466 3,623,698,684 1
ER10
Synthetic 100,000 1,001,008 1
ER100 Synthetic 100,000 9,993,692 59
ER1000 Synthetic 100,000 100,001,498 875
ER10000 Synthetic 100,000 1,000,052,806 9582
we compute the ground truths by iteratively updating the PageR-
ank vector 𝝅using Equation (1). Initially, we set 𝝅=1/𝑛and
repeat the iteration ⌈log1−𝛼0.0001·𝛼
𝑛⌉times. Then for any given
target node 𝑡, we utilize the derived 𝝅(𝑡)as the ground truth of
the PageRank score of 𝑡. Throughout our experiments, we set the
failure probability 𝑝𝑓to0.1and vary the relative error 𝑐within the
range(0.01,0.5]to analyze the tradeoff between query time and
actual Relative Error (as defined below) for each method. Moreover,
unless otherwise specified, we set the teleport probability 𝛼to0.2.Metrics. We consider actual Relative Error, which is defined as
Relative Error =1
𝝅(𝑡)·|𝝅(𝑡)
−ˆ𝝅(𝑡)|.
On each dataset, we sample 10nodes as the target node 𝑡, and
execute each method once for each target node. Subsequently, we
compute the average actual Relative Error of each method for esti-
mating 𝝅(𝑡)across all query nodes under each setting of 𝑐.
6.1 Experiments on Real-World Graphs
We first evaluate our BackMC against other baseline methods on
large-scale real-world graphs.
Datasets. We utilize four real-world datasets in our experiments:
YouTube (YT), LiveJournal (LJ), Twitter (TW), and Friendster (FR).
These datasets originate from social networks and are publicly
available4 5. In these graphs, nodes represent users on the respec-
tive websites, and edges denote friendships between users. Table 3
presents the statistics of the four datasets.
4http://law
.di.unimi.it/datasets.php
5http://snap.stanford.edu/data
3042KDD ’24, August 25–29, 2024, Barcelona, Spain Hanzhi Wang
10-410-310-210-1100101102103
query time(s)10-310-210-1Relative ErrorER10   
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
10-510-410-310-210-1100101102103104
query time(s)10-310-210-1Relative ErrorER100  
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
10-510-410-310-210-1100101102103
query time(s)10-310-210-1Relative ErrorER1000 
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
10-510-410-310-210-1100101102103
query time(s)10-410-310-210-1100Relative ErrorER10000
BackMC
SetPush
BackwardPush
RBS
Undir-BiPPR
BPPPush*
MC
Figur
e 5: actual Relative Error v.s. query time (seconds) on synthetic graphs, the target node 𝒕sampled uniformly, 𝛼=0.2
Target Nodes. For each dataset, we sample two subsets from the
node set𝑉of𝐺, each containing 10nodes designated as target
nodes. In the first subset, nodes are randomly selected from 𝑉with
a uniform distribution. In contrast, nodes in the second subset are
chosen from 𝑉based on the degree distribution. Specifically, for
any node𝑢∈𝑉, the likelihood of 𝑢being sampled in the second
subset increases with its degree 𝑑𝑢. This sampling strategy allows
us to evaluate the performance of all methods in estimating 𝝅(𝑡)
for nodes with high degrees.
Results. Figure 2 shows the tradeoffs between query time and
actual Relative Error for each method, with the target node 𝑡uni-
formly selected from 𝑉. We note that BackMC consistently achieves
the shortest query time compared to the other baseline methods
at the same actual Relative Error level. Specifically, BackMC out-
performs Undir-BiPPR ,SetPush , and RBSby a factor of 10×, and
surpasses BPPPush∗,MC, and BackwardPush by100×to1000×, in
general. Particularly noteworthy is the significant superiority of
BackMC over SetPush , which previously established the best com-
plexity bound for estimating 𝝅(𝑡). This empirical observation aligns
with our theoretical arguments, not only showcasing the Θlog𝑛
𝑑min
theoretical improvement of BackMC over SetPush but also high-
lighting the clean algorithm structure and ease of implementation.
Additionally, as mentioned in Section 4.2, the presence of a multi-
plicative factor 1/𝛼3in the complexity bound of SetPush hampers
its empirical performance efficiency.
Figure 3 illustrates the tradeoffs between query time and actual
Relative Error for each method, with the target node 𝑡sampled from
the degree distribution. Analogously, BackMC consistently outper-
forms all baseline methods on all datasets in terms of both efficiency
and accuracy. Notably, we omit the BackwardPush method from the
Twitter dataset analysis due to its query time exceeding 12 hours.
This observation aligns with our analysis that considerable time is
required by BackwardPush to perform push operations on nodes
with high degrees, given that the Twitter dataset is dense with a
large average degree, as shown in Table 3.
In Figures 2 and 3, we maintain a fixed teleport probability 𝛼of
0.2. In Figure 4, we present the tradeoffs between query time and
actual Relative Error with 𝛼=0.01. Target nodes 𝑡are uniformly
sampled from 𝑉. Comparing the results from Figure 4 and Figure 2,
we observe a more pronounced superiority of BackMC over SetPush .
This aligns well with our analysis that the SetPush method has a
multiplicative factor of 1/𝛼3in its complexity bound, which will
become significant when 𝛼is small. In contrast, the computationalcomplexity of our BackMC has a multiplicative 1/𝛼2factor, which is
more favorable than that of SetPush . Additionally, a small 𝛼also
makes the query time of RBSunaffordable on large-scale Twitter and
Friendster datasets. We omit them from Figure 4. We also exclude
BackwardPush on Twitter and MCon Friendster from Figure 4, as
their query time both exceed 12h.
6.2 Experiments on Synthetic Graphs
In this subsection, we evaluate BackMC and the competitors on
synthetic Erdős–Rényi (ER) graphs.
Datasets. We generate four ER graphs, each comprising a fixed
number of nodes ( 𝑛=100,000). The first graph, designated as
ER10, features an edge-connection probability of 10/𝑛between
any two nodes. In other words, the probability that any given pair
of nodes in the ER10 graph will be connected is consistently set
to10/𝑛. This connection probability is sequentially increased to
100/𝑛,1000/𝑛, and 10000/𝑛for the subsequent graphs, referred to
as ER100, ER1000, and ER10000, respectively. As a direct outcome,
the average degree of nodes in the ER10 graph is approximately
10, while the corresponding average degrees in the ER100, ER1000,
and ER10000 graphs are roughly 100, 1000, and 10000, respectively.
Notably, we present the minimum degree (i.e., 𝑑min) observed in
these four ER graphs in Table 3, which are around 1,10,102, and 103
for each graph, in ascending order of connection probability. These
variations in ER graphs serve as a basis to demonstrate the superior
performance of BackMC across a spectrum of graphs distinguished
by differing values of 𝑑min.
Results. In Figure 5, we present the trade-off between actual rel-
ative error and query time across the four ER graphs. Our first
observation is that BackMC consistently surpasses all baseline meth-
ods by orders of magnitude in query time for the same level of actual
relative error. Notably, the margin of BackMC ’s superiority over its
competitors increases as 𝑑minrises. Specifically, on the ER10 graph,
BackMC is tenfold faster than both SetPush ,Undir-BiPPR andRBS.
This leading factor escalates from tenfold to a thousandfold. On the
ER10000 graph, BackMC exceeds the performance of all competitors
by at least three orders of magnitude in query time for comparable
actual relative errors. Additionally, it is important to highlight that
while the query time for competitor methods escalates with an
increase in𝑑min(thus attributable to the growing number of edges),
BackMC uniquely exhibits reduced query times as 𝑑minincreases.
This phenomenon underscores BackMC ’s exceptional efficiency and
corroborates our analysis, demonstrating a negative correlation
between the computational complexity of BackMC and𝑑min.
3043Revisiting Local PageRank Estimation on Undirected Graphs: Simple and Optimal KDD ’24, August 25–29, 2024, Barcelona, Spain
7 Conclusion
This paper introduces a simple and optimal algorithm, BackMC , for
estimating a single node’s PageRank score in undirected graphs.
We have demonstrated the optimality of BackMC and assessed its
performance on large-scale graphs. As for future directions, we
aim to adapt BackMC to tackle single-pair PPR queries in undirected
graphs. Given that the computation of PPR scores relates closely to
that of PageRank scores, as shown in Equation (5), we are motivated
to investigate further in this area.
Acknowledgments
I would like to thank Professor Zhewei Wei for his unconditional
support. I would also like to thank the anonymous reviewers for
their insightful comments.
References
[1]Reid Andersen, Christian Borgs, Jennifer Chayes, John Hopcraft, Vahab S Mir-
rokni, and Shang-Hua Teng. Local computation of pagerank contributions. In
International Workshop on Algorithms and Models for the Web-Graph, pages 150–
165. Springer, 2007.
[2]Konstantin Avrachenkov, Nelly Litvak, Danil Nemirovsky, and Natalia Osipova.
Monte carlo methods in pagerank computation: When one iteration is sufficient.
SIAM Journal on Numerical Analysis, 45(2):890–904, 2007.
[3]Ziv Bar-Yossef and Li-Tal Mashiach. Local approximation of pagerank and reverse
pagerank. In Proceedings of the 17th ACM conference on Information and knowledge
management, pages 279–288, 2008.
[4]Aleksandar Bojchevski, Johannes Klicpera, Bryan Perozzi, Amol Kapoor, Martin
Blais, Benedek Rózemberczki, Michal Lukasik, and Stephan Günnemann. Scaling
graph neural networks with approximate pagerank. In Proceedings of the 26th
ACM SIGKDD International Conference on Knowledge Discovery and Data Mining,
New York, NY, USA, 2020. ACM.
[5]Christian Borgs, Michael Brautbar, Jennifer Chayes, and Shang-Hua Teng. A
sublinear time algorithm for pagerank computations. In International Workshop
on Algorithms and Models for the Web-Graph, pages 41–53. Springer, 2012.
[6]Christian Borgs, Michael Brautbar, Jennifer Chayes, and Shang-Hua Teng. Mul-
tiscale matrix sampling and sublinear-time pagerank computation. Internet
Mathematics, 10(1-2):20–48, 2014.
[7]Marco Bressan, Enoch Peserico, and Luca Pretto. Sublinear algorithms for local
graph centrality estimation. In 2018 IEEE 59th Annual Symposium on Foundations
of Computer Science (FOCS), pages 709–718. IEEE, 2018.
[8]Marco Bressan, Enoch Peserico, and Luca Pretto. Sublinear algorithms for local
graph-centrality estimation. SIAM Journal on Computing, 52(4):968–1008, 2023.
[9]Sergey Brin and Lawrence Page. The anatomy of a large-scale hypertextual web
search engine. Computer networks and ISDN systems, 30(1-7):107–117, 1998.
[10] Ming Chen, Zhewei Wei, Bolin Ding, Yaliang Li, Ye Yuan, Xiaoyong Du, and
Ji-Rong Wen. Scalable graph neural networks via bidirectional propagation. arXiv
preprint arXiv:2010.15421, 2020.
[11] Yen-Yu Chen, Qingqing Gan, and Torsten Suel. Local methods for estimating
pagerank values. In Proceedings of the thirteenth ACM international conference on
Information and knowledge management, pages 381–389, 2004.
[12] Paul Dagum, Richard Karp, Michael Luby, and Sheldon Ross. An optimal algo-
rithm for monte carlo estimation. SIAM Journal on computing, 29(5):1484–1496,
2000.[13] Dániel Fogaras, Balázs Rácz, Károly Csalogány, and Tamás Sarlós. Towards
scaling fully personalized pagerank: Algorithms, lower bounds, and experiments.
Internet Mathematics, 2(3):333–358, 2005.
[14] David F Gleich. Pagerank beyond the web. siam REVIEW, 57(3):321–363, 2015.
[15] Goldreich and Ron. Property testing in bounded degree graphs. Algorithmica,
32(2):302–343, 2002.
[16] Oded Goldreich, Shari Goldwasser, and Dana Ron. Property testing and its
connection to learning and approximation. Journal of the ACM (JACM), 45(4):653–
750, 1998.
[17] Marco Gori, Augusto Pucci, Via Roma, and I Siena. Itemrank: A random-walk
based scoring algorithm for recommender engines. In IJCAI, volume 7, pages
2766–2771, 2007.
[18] Vince Grolmusz. A note on the pagerank of undirected graphs. Information
Processing Letters, 115(6-8):633–634, 2015.
[19] Pankaj Gupta, Ashish Goel, Jimmy Lin, Aneesh Sharma, Dong Wang, and Reza
Zadeh. Wtf: The who to follow service at twitter. In Proceedings of the 22nd
international conference on World Wide Web, pages 505–514, 2013.
[20] Zoltán Gyöngyi, Hector Garcia-Molina, and Jan Pedersen. Combating web spam
with trustrank. In Proceedings of the Thirtieth international conference on Very
large data bases-Volume 30, pages 576–587, 2004.
[21] Johannes Klicpera, Aleksandar Bojchevski, and Stephan Günnemann. Predict
then propagate: Graph neural networks meet personalized pagerank. In ICLR,
2019.
[22] Peter Lofgren, Siddhartha Banerjee, and Ashish Goel. Bidirectional pagerank
estimation: From average-case to worst-case. In Algorithms and Models for the
Web Graph: 12th International Workshop, WAW 2015, Eindhoven, The Netherlands,
December 10-11, 2015, Proceedings 12, pages 164–176. Springer, 2015.
[23] Peter Lofgren, Siddhartha Banerjee, and Ashish Goel. Personalized pagerank
estimation and search: A bidirectional approach. In Proceedings of the Ninth ACM
International Conference on Web Search and Data Mining, pages 163–172, 2016.
[24] Peter Lofgren and Ashish Goel. Personalized pagerank to a target node. arXiv
preprint arXiv:1304.4658, 2013.
[25] Peter A Lofgren, Siddhartha Banerjee, Ashish Goel, and C Seshadhri. Fast-ppr:
Scaling personalized pagerank estimation for large graphs. In Proceedings of
the 20th ACM SIGKDD international conference on Knowledge discovery and data
mining, pages 1436–1445, 2014.
[26] Barbara Logan Mooney, L René Corrales, and Aurora E Clark. Molecularnetworks:
An integrated graph theoretic and data mining tool to explore solvent organiza-
tion in molecular simulation. Journal of computational chemistry, 33(8):853–860,
2012.
[27] Julie L Morrison, Rainer Breitling, Desmond J Higham, and David R Gilbert. Gen-
erank: using search engine technology for the analysis of microarray experiments.
BMC bioinformatics, 6(1):1–14, 2005.
[28] Lawrence Page, Sergey Brin, Rajeev Motwani, and Terry Winograd. The pagerank
citation ranking: bringing order to the web. 1999.
[29] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. Deepwalk: Online learning
of social representations. In Proceedings of the 20th ACM SIGKDD international
conference on Knowledge discovery and data mining, pages 701–710, 2014.
[30] Hanzhi Wang, Mingguo He, Zhewei Wei, Sibo Wang, Ye Yuan, Xiaoyong Du, and
Ji-Rong Wen. Approximate graph propagation. In Proceedings of the 27th ACM
SIGKDD Conference on Knowledge Discovery & Data Mining, pages 1686–1696,
2021.
[31] Hanzhi Wang and Zhewei Wei. Estimating single-node pagerank in
e𝑂(min
𝑑𝑡,√𝑚	
time. Proc. VLDB Endow., 16(11):2949–2961, 2023.
[32] Hanzhi Wang, Zhewei Wei, Junhao Gan, Sibo Wang, and Zengfeng Huang. Per-
sonalized pagerank to a target node, revisited. In Proceedings of the 26th ACM
SIGKDD International Conference on Knowledge Discovery & Data Mining, pages
657–667, 2020.
[33] Hanqing Zeng, Hongkuan Zhou, Ajitesh Srivastava, Rajgopal Kannan, and Viktor
Prasanna. GraphSAINT: Graph sampling based inductive learning method. In
ICLR, 2020.
3044