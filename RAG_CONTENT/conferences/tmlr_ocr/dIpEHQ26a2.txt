Under review as submission to TMLR
Autoencoding Reduced Order Models for Control through
the Lens of Dynamic Mode Decomposition
Anonymous authors
Paper under double-blind review
Abstract
Modeling and control of high-dimensional dynamical systems often involve some dimension-
ality reduction techniques to construct a lower-order model that makes the associated task
computationally feasible or less demanding. In recent years, two techniques have become
widely popular for analysis and reduced order modeling of high-dimensional dynamical sys-
tems: (1) dynamic mode decomposition and (2) deep autoencoding learning. This paper
establishes a connection between dynamic mode decomposition and autoencoding learning
for controlled dynamical systems. Specifically, we first show that an optimization objec-
tive for learning a linear autoencoding reduced order model can be formulated such that
its solution closely resembles the solution obtained by the dynamic mode decomposition
with control algorithm. The linear autoencoding architecture is then extended to a deep
autoencoding architecture to learn a nonlinear reduced order model. Finally, the learned
reduced order model is used to design a controller utilizing stability-constrained deep neural
networks. The studied framework does not require knowledge of the governing equations
of the underlying system and learns the model and controller solely from time series data
of observations and actuations. We provide empirical analysis on modeling and control of
spatiotemporal high-dimensional systems, including fluid flow control.
1 Introduction
Designingcontrollersforhigh-dimensionaldynamicalsystemsremainsachallengeasmanycontrolalgorithms
become computationally prohibitive in high dimensions. Typically, a reduce-then-design approach (Atwell
et al. (2001)) is used in practice, which involves two steps: (1) develop a reduced order model (ROM) using
dimensionality reduction techniques and (2) design a controller for that reduced order model (Figure 1a). For
controlled dynamical systems, the reduced order modeling approaches either combine analytical techniques
with empirical approximation (Willcox & Peraire (2002)) or are purely data-driven (Juang & Pappa (1985);
Juang et al. (1993); Proctor et al. (2016)). Among these, the dynamic mode decomposition (DMD) based
methods have become widely popular in recent years due to a strong connection between DMD and Koopman
operator theory (Rowley et al. (2009)). Another recent research trend involves utilizing deep neural networks
(DNNs), particularly autoencoders, for modeling and control of high-dimensional dynamical systems (Lusch
et al. (2018); Erichson et al. (2019); Eivazi et al. (2020); Morton et al. (2018); Bounou et al. (2021); Chen
et al. (2021); Ping et al. (2021)).
In this paper, we provide a perspective connecting DMD and autoencoding reduced order models for con-
trolled dynamical systems and present a framework to learn control policies for such systems by means of
the DNN-based reduced order models. We first formulate an objective function for data-driven learning of
controlled dynamical systems in a linear autoencoding configuration. We analytically show that the asso-
ciated objective function encourages a linear ROM that closely resembles the lower-order model obtained
using the dynamic mode decomposition with control (DMDc) algorithm (Proctor et al. (2016)). The linear
autoencoding architecture is designed in such a way that its components can be replaced with DNNs and
the corresponding objective function can be optimized by gradient descent to obtain a nonlinear ROM. The
architecture with DNN components, DeepROM, closely resembles the aforementioned deep autoencoding
architectures used in recent literature for the prediction and control of dynamical systems. The learned
1Under review as submission to TMLR
Physical SystemReduced order 
ModelingLinear Reduced -order 
Model (ROM)High -dimensional
state dataConventional Control 
Design (e.g., LQR)
Linear Autoencoding 
ROM (LAROM)Reduced order Modeling
Dynamic Mode 
Decomposition
Autoencoding
Learning
Control Learning
(DeepROC )Nonlinear ROM
(DeepROM)Stability Analysis(a)
(b)Linear
option
Nonlinear
optionController
Figure 1: (a) Reduce-then-design paradigm for designing control for high-dimensional systems, (b): our
work in the context. The rounded-corner rectangles denote the actual physical system (red outlined) or
its models (green outlined) or a controller (yellow outlined). The sharp-corner rectangles indicate the tech-
niques/proceduretoobtainthemodelsorcontrollers. Amongthosesharp-cornerrectangles, theonesoutlined
in orange are associated with modeling, while the ones outlined in blue are associated with control. This
work proposes an autoencoding learning framework that establishes a linkwith dynamic mode decomposi-
tion. The similarity with dynamic mode decomposition for control is shown through a linear autoencoding
reduced order model while the prediction and control performance is evaluated using a deep autoencoding
reduced order model. The dashed arrow in the figure represents the potential control methods that can be
applied to the linear ROM.
DNN-based reduced order model is then used in a control learning framework, deep reduced order control
(DeepROC), to design a controller for the underlying system. The control policy is learned by jointly training
two DNNs: one stability-constrained DNN predicts a target closed-loop dynamics for the learned ROM while
the other DNN serves as a controller to achieve that target dynamics. We analytically show that keeping the
joint learning objective within a sufficiently small value implies stability for the closed-loop ROM in terms
ofultimate boundededness , i.e., trajectories starting close to the desired state stay close to the desired state.
The overall workflow of this paper is shown in Figure 1(b). We provide empirical analysis using examples
of spatiotemporal physical processes such as reaction–diffusion and fluid flow systems. In summary, our
contributions are as follows:
•For controlled dynamical systems, we show that an objective function can be formulated in a linear
autoencoding configuration and optimized by gradient descent such that the corresponding linear
ROM closely resembles the ROM obtained using the DMDc algorithm.
•We extend the linear autoencoding configuration to a deep autoencoding configuration to learn a
DNN-based nonlinear ROM.
•We analytically show that a DNN controller can be trained such that the closed-loop trajectories of
the learned ROM remain ultimately bounded.
•We empirically show the similarity of the linear autoencoding reduced order model (LAROM) with
DMDc and evaluate the prediction performance of DeepROM and control performance of DeepROC
in experiments with high-dimensional systems, including suppressing vortex shedding in fluid flow.
2Under review as submission to TMLR
2 Related Work
In recent years, deep learning has seen widespread application in scientific and engineering problems, in-
cluding understanding complex dynamics of large-scale or high-dimensional systems and solving associated
computational tasks. The majority of the research in this area focuses on the modeling and prediction of
such complex dynamics using deep neural networks (DNNs) (Xingjian et al. (2015); Long et al. (2018); Raissi
(2018); Seo et al. (2019); Ayed et al. (2019); Donà et al. (2020)) and has found application in several fields
including fluid flow (Erichson et al. (2019); Eivazi et al. (2020); Srinivasan et al. (2019)), biochemical and
electric power systems (Yeung et al. (2019)), climate and ocean systems (Scher (2018); Ren et al. (2021);
Yang et al. (2017); De Bézenac et al. (2019)), and structural analysis Zhang et al. (2020), just to name a
few.
A second line of research, though relatively less prevalent than modeling and prediction, is utilizing deep
learning for controlling high-dimensional systems and aligns closely with our work. Most of these works focus
on fluid flow control tasks. Rabault et al. (2019); Tang et al. (2020) applied deep reinforcement learning in
active flow control for vortex shedding suppression and used a system-specific reward function involving lift
and drag. Ma et al. (2018) used an autoencoder for encoding high-dimensional fluid state to low-dimensional
features and trained RL agents with those features to control rigid bodies in a coupled 2D system involving
both fluid and rigid bodies. Garnier et al. (2021) also used an autoencoder for feature extraction to train an
RL agent for controlling the position of a small cylinder in a two-cylinder fluid system to reduce the total
drag. Beintema et al. (2020) used deep reinforcement learning with system-specific rewards to control a
Rayleigh–Bénard system with the aim of reducing convective effects. Model-free deep reinforcement learning
methods have high sample complexity necessitating a large number of interactions with the environment
and often require system-specific reward construction. In contrast, we consider learning the control policies
offline with limited pre-collected data. Moreover, we utilize standard distance-based metrics with respect to a
hypothesized target dynamics instead of relying on any system-specific rewards or loss functions. Model-free
RL methods require running numerical solvers in every iteration to provide feedback to the agents, which
is computationally expensive. The same concern arises for the methods involving differentiable simulators.
For example, Holl et al. (2020) used a differentiable partial differential equation (PDE) solver to generate
gradient-based feedback for a predictor-corrector scheme to control PDE-driven high-dimensional systems.
Takahashi et al. (2021) too integrated a differentiable simulator with DNNs to learn control in coupled solid-
fluid systems. In comparison, our method avoids the need for computationally intensive simulators during
the learning process as it learns from pre-collected data in an offline manner.
The alternative to model-free methods takes the traditional approach: develop a model first and then use
that to design controllers. Deep learning is now being used in this process by developing frameworks like
DeepMPC (Lenz et al. (2015)) which incorporates DNN features in model predictive control (MPC). Bieker
et al. (2020) and Morton et al. (2018) utilized the DeepMPC framework for fluid flow control. Bieker et al.
(2020) used a recurrent neural network to model the dynamics of only control-relevant quantities (i.e. lift
and drag) of the system, which is then employed in an MPC framework for the flow control tasks. Morton
et al. (2018) followed the method proposed by Takeishi et al. (2017) and used DNN-based embedding to
first learn a linear reduced order model in Koopman invariant subspace and then incorporate it in the
MPC framework. Similar approaches have been applied to other high-dimensional control tasks like control
from video input (Bounou et al. (2021)), automatic generation control in wind farms in the presence of
dynamic wake effect (Chen et al. (2021)), and transient stabilization in power grids (Ping et al. (2021)).
These model-based methods constrain the latent dynamic models to be linear that work well within a
short time window. Khodkar et al. (2019) showed that the linear combination of a finite number of dynamic
modes may not accurately represent the long-term nonlinear characteristics of complex dynamics and adding
nonlinear forcing terms yields better prediction accuracy (Eivazi et al. (2020)). The linear ROMs are needed
to be updated with online observations during operation for better prediction accuracy. Accordingly, the
aforementioned model-based approaches utilize the MPC framework to optimize the control policy online
using the updated dynamic model. Running online optimization at every step may not be computationally
feasibleinmanyscenarios. Conversely, weinvestigateifanonlinearROMprovidesamoreaccurateprediction
over a longer time window so that an offline control learning method can be used.
3Under review as submission to TMLR
3 Problem and Preliminaries
3.1 Problem statement
Consider a time-invariant controlled dynamical system
dx
dt=f(x,u), (1)
wherex(t)∈X⊂Rdx,dx>>1andu(t)∈U⊂Rduare the system state and the actuation (or control
input), respectively, at time t. Our objective is to learn a feedback controller u=π(x)for this high-
dimensional ( dx>>1) system of (1) to stabilize it at a desired state in a data-driven reduce-then-design
approach when the nonlinear function f:X×U→Rdxis unknown. We assume that we have observations
from the system consisting of time series data x(ti),i= 0,1,···,nsubjected to random values of actuations
u(ti),i= 0,1,···,(n−1).
Note, we use v(in place of v(t)for brevity) as notation for any continuous-time variable (e.g., system state,
control input), whereas v(ti)is used to denote their discrete sample at time instance ti.
3.2 Stabilization of controlled systems
We assume that the system we are aiming to stabilize at an equilibrium point is locally stabilizable . Suppose
the function fin (1) is locally Lipschitz and (x=0,u=0)is an equilibrium pair of the system, i.e.,
f(0,0) =0. The system (1) is said to be locally stabilizable with respect to the equilibrium pair if there
exists a locally Lipschitz function
π:X0→U, π(0) =0,
defined on some neighborhood X0⊂Xof the origin x=0for which the closed-loop system
dx
dt=f(x,π(x)) (2)
is locally asymptotically stable , i.e.∥x(t0)∥< δimplies limt→∞x(t) =0(Sontag (2013)). We discuss the
criteria for stability and asymptotic stability in the following paragraph.
Stability of the closed-loop systemdx
dt=f(x,π(x)) =h(x)at equilibrium points can be analyzed using the
method of Lyapunov. Let V:X→Rbe a continuously differentiable function such that
V(0) = 0,andV(x)>0∀x∈X\{0}, (3)
and the time derivative of Valong the trajectories
dV
dt=∇V(x)⊤dx
dt=∇V(x)⊤h(x)≤0∀x∈X. (4)
Then, the equilibrium point x=0isstable, i.e., for each ϵ >0, there exists a δ=δ(ϵ)>0such that
∥x(t0)∥< δimplies∥x(t)∥< ϵ,∀t > t 0. The functionVwith the above properties is called a Lyapunov
function. IfdV
dt<0in some subset Xs⊂X\{0}, thenx=0islocally asymptotically stable . Moreover, if
there exist positive constants c1,c2,c3andc4such that
c1∥x∥2≤V(x)≤c2∥x∥2, (5)
and
∇V(x)⊤h(x)≤−c3∥x∥2,∀x∈Xs, (6)
thenx=0isexponentially stable , i.e., there exist positive constants δ,λandγsuch that∥x(t)∥ ≤
λ∥x(t0)∥e−γ(t−t0),∀∥x(t0)∥<δ(Khalil (2002)).
In this paper, we assume that the system we are aiming to stabilize at an equilibrium point is stabilizable in
the sense of the aforementioned definition and criteria, i.e., there exists a continuously differentiable function
4Under review as submission to TMLR
Vand a Lipschitz continuous control law πsuch that criteria (3) and (4) are conformed. To ensure the
stability of the closed-loop reduced order model at equilibrium, we utilize a target dynamics hypothesis that
is exponentially stable at the origin, i.e., (5) and (6) are satisfied as well for this target dynamics. Detail on
the target dynamics hypothesis is discussed in subsection 4.2.
Though the above formulation is for stabilization at an equilibrium point x=0, the same can be used to
stabilize the system at any arbitrary point xss. In that case, a steady-state control input ussis required that
can maintain the equilibrium at xss, i.e.,f(xss,uss) =0. The change of variables xe=x−xss,ue=u−uss
leads to a transformed system where we can apply the aforementioned formulation of stabilization. The
overall control, in this case, u=ue+usscomprises a feedback component ueand a feedforward component
uss(Khalil (2002)).
3.3 Dynamic mode decomposition with control
DMD (Schmid (2010)) is a data-driven method that reconstructs the underlying dynamics using only a time
series of snapshots from the system. DMD computes a modal decomposition where each mode is associated
with an oscillation frequency and decay/growth rate. DMD has become a widely used technique for spectral
analysis of dynamical systems. DMDc (Proctor et al. (2016)) is an extension of DMD for dynamical systems
with control. DMDc seeks best-fit linear operators AandBbetween successive observed states and the
actuations:
ˆx(ti+1) =Ax(ti) +Bu(ti), i= 0,1,···,n−1, (7)
where ˆx(t)denotes an approximation of x(t),A∈Rdx×dx, andB∈Rdx×du. Direct analysis of (7) could
be computationally prohibitive for dx>>1. DMDc leverages dimensionality reduction to compute a ROM
xR,DMDc (ti) =EDMDcx(ti), (8a)
xR,DMDc (ti+1) =AR,DMDcxR,DMDc (ti) +BR,DMDcu(ti), i= 0,1,···,n−1, (8b)
which retains the dominant dynamic modes of (7). Here, xR,DMDc (ti)∈Rrxis the reduced state,
whererx<< d x, andEDMDc∈Rrx×dx,AR,DMDc∈Rrx×rx,BR,DMDc∈Rrx×du. The full state
is reconstructed from the reduced state using the transformation ˆx(ti) =DDMDcxR,DMDc (ti), where
DDMDc∈Rdx×rx. DMDc computes truncated singular value decomposition (SVD) of the data matri-
cesY= [x(t1),x(t2),···,x(tn)]∈Rdx×nandΩ= [ω(t0),ω(t1),···,ω(tn−1)]∈R(dx+du)×n,ω(ti) =
[x(ti)⊤,u(ti)⊤]⊤∈Rdx+duas follows:
Y=/hatwideUY/hatwideΣY/hatwideV⊤
Y,Ω=/hatwideUΩ/hatwideΣΩ/hatwideV⊤
Ω, (9)
where/hatwideUY∈Rdx×rx,/hatwideΣY∈Rrx×rx,/hatwideVY∈Rn×rx,/hatwideUΩ∈R(dx+du)×rxu,/hatwideΣΩ∈Rrxu×rxu, and/hatwideVΩ∈Rn×rxu.
rx<min(dx,n)andrx<rxu<min(dx+du,n)denote the truncation dimensions of SVDs. Utilizing the
SVDs of (9) the parameters of the ROM (8) is obtained as
EDMDc =/hatwideU⊤
Y,DDMDc =/hatwideUY, (10a)
AR,DMDc =/hatwideU⊤
YY/hatwideVΩ/hatwideΣ−1
Ω/hatwideU⊤
Ω,1/hatwideUY,BR,DMDc =/hatwideU⊤
YY/hatwideVΩ/hatwideΣ−1
Ω/hatwideU⊤
Ω,2, (10b)
where/hatwideUΩ,1∈Rdx×rxu,/hatwideUΩ,2∈Rdu×rxu, and/hatwideU⊤
Ω= [/hatwideU⊤
Ω,1/hatwideU⊤
Ω,2].
4 Method
As mentioned earlier, in the reduce-then-design approach, we first need to develop a ROM and then design a
controller using that ROM. A controller designed for the ROM is expected to perform well in the full system
only if the ROM effectively captures the dynamic characteristics of the underlying system. In this section,
we first describe how to design a ROM that effectively captures the relation between successive observations
and actuation. Next, we delineate the process for learning controllers utilizing the learned ROM.
5Under review as submission to TMLR
4.1 Learning a reduced order model
DMDc can extract the dominant modes of underlying dynamics in a reduced order model (Proctor et al.
(2016)). In order to develop a nonlinear ROM utilizing DNNs that effectively capture the underlying dynam-
ics, we first investigate if we can obtain a linear ROM similar to DMDc, in a gradient descent arrangement.
Specifically, we analyze optimization objectives that encourage a DMDc-like solution for a reduced order
modeling problem using linear networks (single layer without nonlinear activation). Consider the following
reduced order modeling problem
xR(ti) =Exx(ti),xR(ti+1) =ARxR(ti) +BRu(ti),ˆx(ti) =DxxR(ti), i= 0,1,···,n−1,(11)
where the linear operators Ex∈Rrx×dxandDx∈Rdx×rxprojects and reconstructs back, respectively,
the high-dimensional system state to and from a low-dimensional feature xR∈Rrx. The linear operators
AR∈Rrx×rxandBR∈Rrx×dudescribe the relations between successive reduced states and actuations.
We refer to this reduced order model with linear networks as linear autoencoding ROM or LAROM. In the
following, we first analyze the solution of the optimization objective of LAROM for a fixed encoderEx.
Then we establish a connection between the solution of LAROM and the solution of DMDc, and further
discuss the choice of the encoder to promote similarity between the two. Finally, we extend the linear model
to a DNN-based model, which we refer to as DeepROM.
4.1.1 Analysis of the linear reduced order model for a fixed encoder
The DMDc algorithm essentially solves for /tildewideG∈Rrx×(dx+du)to minimize1
n/summationtextn−1
i=0/vextenddouble/vextenddoubleExx(ti+1)−/tildewideGω(ti)/vextenddouble/vextenddouble2
for a fixed projection matrix Ex=EDMDc =/hatwideU⊤
Y. Here,ω(ti)is the concatenated vector of state and
actuation as defined in section 3.3. The optimal solution /tildewideGoptis then partitioned as [/tildewideA/tildewideB]such that
/tildewideA∈Rrx×dx,/tildewideB∈Rrx×du. Finally,/tildewideAis post-multiplied with the reconstruction operator DDMDc =/hatwideUYto
get the ROM components AR,DMDcandBR,DMDc. Details of this process along with the proofs are given in
appendix A.5. Note, the final step of this process offers dimensionality reduction only for the linear case, not
in the case when the projection and reconstruction operators are nonlinear (e.g. DNNs). Therefore, we use
an alternative formulation with the following results to design a loss function that encourages a DMDc-like
solution for (11) and also offers dimensionality reduction when nonlinear components are used.
Theorem 4.1.1. Consider the following objective function
Lpred(Ex,G) =1
nn−1/summationdisplay
i=0/vextenddouble/vextenddoubleExx(ti+1)−GExuω(ti)/vextenddouble/vextenddouble2, (12)
whereG= [ARBR]∈Rrx×(rx+du),Exu=/bracketleftbiggEx0
0Idu/bracketrightbigg
∈R(rx+du)×(dx+du),Idubeing the identity matrix
of orderdu. For any fixed matrix Ex, the objective function Lpredis convex in the coefficients of Gand
attains its minimum for any Gsatisfying
GExuΩΩ⊤E⊤
xu=ExYΩ⊤E⊤
xu, (13)
whereYandΩare the data matrices as defined in section (3.3). If Exhas full rank rx, andΩΩ⊤is
non-singular, then Lpredis strictly convex and has a unique minimum for
G= [ARBR] =ExYΩ⊤E⊤
xu(ExuΩΩ⊤E⊤
xu)−1. (14)
Proof sketch . This can be proved by a method similar to the one used for deriving the solution of linear
autoencoder in (Baldi & Hornik (1989)). For any fixed Ex, the objective function of (12) can be written as
Lpred(Ex,G) =/vextenddouble/vextenddoublevec(ExY)−(Ω⊤E⊤
xu⊗Irx)vec(G)/vextenddouble/vextenddouble2, where⊗denotes the Kronecker product and vec (·)
denotes vectorization of a matrix. Optimizing this linear least-square problem, we get (13) and (14), given
the stated conditions are satisfied. The complete proof is given in appendix A.1.
6Under review as submission to TMLR
Remark. For a unique solution, we assume that Exhas full rank. The other scenario, i.e., Exis rank-
deficient suggests poor utilization of the hidden units of the model. In that case, the number of hidden
units (which represents the dimension of the reduced state) should be decreased. The assumption that the
covariance matrix ΩΩ⊤is invertible can be ensured when n≥dx+du, by removing any linearly dependent
features in system state and actuation. When n < d x+du, the covariance matrix ΩΩ⊤is not invertible.
However, similar results can be obtained by adding ℓ2regularization (for the coefficients/entries of G) to
the objective function. Proof of this is given in appendix A.4.
4.1.2 The connection between the solutions of the linear autoencoding model and DMDc
The connection between the ROM obtained by minimizing Lpred(for a fixedEx), i.e., (14) and the DMDc
ROMof(10b)isnotreadilyapparent. Tointerprettheconnection, weformulateanalternativerepresentation
of (14) utilizing the SVD and the Moore-Penrose inverse of matrices. This alternative representation leads
to the following result.
Corollary 4.1.1.1. Consider the (full) SVD of the data matrix Ωgiven by Ω=UΩΣΩV⊤
Ω, whereUΩ∈
R(dx+du)×(dx+du),ΣΩ∈R(dx+du)×n, andVΩ∈Rn×n. IfEx=/hatwideU⊤
YandΩΩ⊤is non-singular, then the
solution forG= [ARBR]corresponding to the unique minimum of Lpredcan be expressed as
AR=/hatwideU⊤
YYVΩΣ∗U⊤
Ω,1/hatwideUY,andBR=/hatwideU⊤
YYVΩΣ∗U⊤
Ω,2, (15)
where [U⊤
Ω,1U⊤
Ω,2] =U⊤
ΩwithUΩ,1∈Rdx×(dx+du),UΩ,2∈Rdu×(dx+du), and
Σ∗= limε→0(Σ⊤
ΩU⊤
Ω,1/hatwideUY/hatwideU⊤
YUΩ,1ΣΩ+Σ⊤
ΩU⊤
Ω,2UΩ,2ΣΩ+ε2In)−1Σ⊤
Ω.
Proof sketch . This can be derived by plugging Ex=/hatwideU⊤
Yinto (14), and using the SVD definition and the
limit definition (Albert (1972)) of the Moore-Penrose inverse. The complete proof is given in appendix A.3
that uses some preliminary results presented in appendix A.2.
Remark. It can be verified easily that if we use the truncated SVD (as defined by 9), instead of the full
SVD, for Ωin corollary 4.1.1.1, we get an approximation of (15):
/hatwideAR=/hatwideU⊤
YY/hatwideVΩ/hatwideΣ∗/hatwideU⊤
Ω,1/hatwideUY,and/hatwideBR=/hatwideU⊤
YY/hatwideVΩ/hatwideΣ∗/hatwideU⊤
Ω,2, (16)
where/hatwideΣ∗= limε→0(/hatwideΣ⊤
Ω/hatwideU⊤
Ω,1/hatwideUY/hatwideU⊤
Y/hatwideUΩ,1/hatwideΣΩ+/hatwideΣ⊤
Ω/hatwideU⊤
Ω,2/hatwideUΩ,2/hatwideΣΩ+ε2Irxu)−1/hatwideΣ⊤
Ω. We can see that (16) has
the same form as (10b), except /hatwideΣ−1
Ωis replaced with /hatwideΣ∗.
All the aforementioned results are derived for a fixed Exand the relation to the DMDc is specific to the
caseEx=/hatwideU⊤
Y. Note that the columns of the /hatwideUYare the left singular vectors, corresponding to the leading
singular values, of Y. Equivalently, those are also the eigenvectors, corresponding to the leading eigenvalues,
of the covariance matrix YY⊤.Lpredalone does not constrain Exto take a similar form and we need
another loss term to encourage such form for the encoder. To this end, we follow the work of Baldi & Hornik
(1989) on the similarity between principle component analysis and linear autoencoders, optimized with the
following objective function:
Lrecon(Ex,Dx) =1
nn/summationdisplay
i=1/vextenddouble/vextenddoublex(ti)−DxExx(ti)/vextenddouble/vextenddouble2. (17)
They showed that all the critical points of Lreconcorrespond to projections onto subspaces associated with
subsets of eigenvectors of the covariance matrix YY⊤. Moreover, Lreconhas a unique global minimum
corresponding to the first rx(i.e., the desired dimension of the reduced state) number of eigenvectors of
YY⊤, associated with the leading rxeigenvalues. In other words, for any invertible matrix C∈Rrx×rx,
Dx=UrxCandEx=C−1U⊤
rxglobally minimizes Lrecon, whereUrxdenotes the matrix containing
leadingrxeigenvectors of YY⊤. Since the left singular vectors of Yare the eigenvectors of YY⊤, we have
Urx=/hatwideUY. Hence, we consider to utilize Lreconto promote learning an encoder Exin the form of C−1/hatwideU⊤
Y.
7Under review as submission to TMLR
ℰ𝒙
ℰ𝒖ℱState 
EncoderState 
Decoder
Control 
EncoderROM𝒙(𝑡𝑖) 𝒙R(𝑡𝑖)
𝒖(𝑡𝑖)ෝ𝒙R(𝑡𝑖+1)
𝒖R(𝑡𝑖) 𝒙(𝑡𝑖+1)𝒟𝒙ෝ𝒙(𝑡𝑖) ℒrecon
ℒpred
ℰ𝒙
𝒙R(𝑡𝑖+1)
Figure 2: Autoencoding architecture for reduced order modeling. The state encoder Exand control encoder
Eureduce the dimension of the state and actuation, respectively. The ROM Ftakes the current reduced
state and actuation to predict the next reduced state, which is then uplifted to the full state by the state
decoderDx. All modules are trained together using a combined loss involving LpredandLrecon. The dashed
arrow indicates that the Euis used only when du>>1; otherwise, the actuation is used as a direct input to
ROM.
Accordingly, we propose to minimize the following objective function to encourage a DMDc-like solution for
LAROM:
L(Ex,Dx,G) =Lpred(Ex,G) +β1Lrecon(Ex,Dx), (18)
whereβ1>0is a tunable hyperparameter.
It is important to note that Lreconis minimized for any invertible matrix C,Dx=/hatwideUYC, andEx=C−1/hatwideU⊤
Y.
When optimized using gradient descent, it is highly unlikely to get Cas the identity matrix like DMDc.
Rather, we expect a random C. Therefore, we need additional constraints to promote similarity with
DMDc. For this purpose, we tie the matrices ExandDxto be the transpose of each other and add a
semi-orthogonality constraint β4∥ExE⊤
x−Irx∥,β4>0to the optimization objective of (18).
4.1.3 Extending the linear model to a deep model
Here, we discuss the process of extending LAROM to a nonlinear reduced order modeling framework. We
replace all the trainable components of LAROM, i.e., Ex,Dx, andG, with DNNs. Specifically, we use an
encoding function or encoderEx:X→Rrxand a decoding function or decoderDx:Rrx→Xto transform
the high-dimensional system state to low-dimensional features and reconstruct it back, respectively, i.e.,
xR=Ex(x),ˆx=Dx(xR), (19)
wherexR∈Rrxdenotes the reduced state, and ˆxis the reconstruction of x. Unlike the linear case, we
use an encoderEu:U→Rru,ru<< d ufor the actuation as well, in cases where the control space is also
high-dimensional (for example, distributed control of spatiotemporal PDEs). The control encoder Eumaps
the high-dimensional actuation to a low-dimensional representation: uR=Eu(u), whereuR∈Rrudenotes
the encoded actuation. The encoded state and control are then fed to another DNN that represents the
reduced order dynamics
dxR
dt=F(xR,uR), (20)
8Under review as submission to TMLR
whereF:Rrx×Rru→Rrx. Given the current reduced state xR(ti)and control input uR(ti), the next
reduced state xR(ti+1)can be computed by integrating Fusing standard numerical integrator or neural
ODE (Chen et al. (2018)):
xR(ti+1) =xR(ti) +/integraldisplayti+1
tiF/parenleftbig
xR(ti),uR(ti)/parenrightbig
dt∆=G/parenleftbig
xR(ti),uR(ti)/parenrightbig
. (21)
We can say thatGis the nonlinear counterpart of G.
Note, here the ROM is represented as a continuous-time dynamics, unlike the linear case where we used a
discrete-time model. We use a discrete-time formulation for LAROM to establish its similarity with DMDc,
which is formulated in discrete time. DeepROM can be formulated in a similar fashion as well. However, the
specific control learning algorithm we used, which will be discussed in the next subsection, requires vector
fields of the learned ROM for training. Therefore, we formulate the ROM in continuous time so that it
provides the vector field F(xR,uR)of the dynamics. In cases where only the prediction model is of interest
and control learning is not required, a discrete-time formulation should be used for faster training of the
ROM.
We trainEx,Eu,Dx, andFby minimizing the following loss function, analogous to (18),
L(Ex,Eu,Dx,F) =Lpred(Ex,Eu,F) +β2Lrecon(Ex,Dx), (22)
whereβ2>0is a tunable hyperparameter and Lpred,Lreconare defined as follows,
Lpred(Ex,Eu,F) =1
nn−1/summationdisplay
i=0/vextenddouble/vextenddouble/vextenddoubleEx/parenleftbig
x(ti+1)/parenrightbig
−G/parenleftig
Ex/parenleftbig
x(ti)/parenrightbig
,Eu/parenleftbig
u(ti)/parenrightbig/parenrightig/vextenddouble/vextenddouble/vextenddouble2
,
Lrecon(Ex,Dx) =1
nn/summationdisplay
i=1/vextenddouble/vextenddoublex(ti)−Dx◦Ex/parenleftbig
x(ti)/parenrightbig/vextenddouble/vextenddouble2. (23)
Here, the operator ◦denotes the composition of two functions. In experiments, Lreconalso includes the
reconstruction loss of the desired state where we want to stabilize the system. Figure 2 shows the overall
framework for training DeepROM.
4.2 Learning control
Once we get a trained ROM of the form (20) using the method proposed in section 4.1, the next goal is
to design a controller for the system utilizing that ROM. Since our ROM is represented by DNNs, we need
a data-driven method to develop the controller. We adopt the approach presented by Saha et al. (2021)
for learning control law for nonlinear systems, represented by DNNs. The core idea of the method is to
hypothesize a target dynamics that is exponentially stable at the desired state and simultaneously learn a
control policy to realize that target dynamics in closed loop. A DNN is used to represent the vector field
Fs:Rrx→Rrxof the target dynamicsdxR
dt=Fs(xR). We use another DNN to represent a controller
Π :Rrx→Rduthat provides the necessary actuation for a given reduced state xR:
u= Π(xR). (24)
This controluis then encoded by (trained) Euto its low-dimensional representation uR. Finally, the reduced
statexRand actuation uRare fed to the (trained) ROM of (20) to get F(xR,uR). The overall framework
for learning control is shown in Figure 3.
Our training objective is to minimize the difference between F(xR,uR)andFs(xR), i.e.,
Lctrl(Fs,Π) =1
nn/summationdisplay
i=1/vextenddouble/vextenddoubleF/parenleftbig
Ex(x(ti)),Eu◦Π◦Ex(x(ti))/parenrightbig
−Fs◦Ex/parenleftbig
x(ti)/parenrightbig/vextenddouble/vextenddouble2. (25)
To minimize the control effort, we add a regularization loss with (25), and the overall training objective for
learning control is given by
Lctrl,reg (Fs,Π) =Lctrl(Fs,Π) +β31
nn/summationdisplay
i=1/vextenddouble/vextenddoubleΠ(xR(ti))/vextenddouble/vextenddouble2, (26)
9Under review as submission to TMLR
ℰ𝒙
ℰ𝒖ℱState 
Encoder
Control 
EncoderROM
Π
ℱ𝑠
𝒱R𝒙Rℱ(𝒙R,𝒖R)
Controller
Target 
Dynamics𝒙 𝒙R
𝒖
𝒖R
ℱ𝑠(𝒙R)
Lyapunov Functionℒctrl
Figure 3: The control learning process. Given a reduced state, Fspredicts a target dynamics for the closed-
loop system, and the controller Πpredicts an actuation to achieve that target. Both the modules are trained
jointly using the loss function Lctrl. Parameters of the dark-shaded modules are kept fixed during this
process.
whereβ3>0is a tunable hyperparameter. Here we jointly train the DNNs representing ΠandFsonly,
whereas the previously-trained DNNs for Ex,Eu, andFare kept frozen. Once all the DNNs are trained,
we only needExandΠduring evaluation to generate actuation for the actual system, given a full-state
observation:
u= Π◦Ex(x) =π(x). (27)
As we mentioned earlier, we require the target dynamics, hypothesized by a DNN, to be exponentially stable
at the desired state. Without loss of generality, we consider stability at xR=0. As we mentioned earlier, the
system can be stabilized at any desired state by adding a feedforward component to the control. Dynamics
represented by a standard neural network is not stable at any equilibrium point, in general. Kolter & Manek
(2019) showed that it is possible to design a DNN, by means of Lyapunov functions, to represent a dynamics
thatisexponentiallystableatanequilibriumpoint. Accordingly, werepresentourtargetdynamicsasfollows:
dxR
dt=Fs(xR) =P(xR)−ReLU/parenleftbig
∇VR(xR)⊤P(xR) +αVR(xR)/parenrightbig
∥∇V R(xR)∥2∇VR(xR), (28)
whereαis a positive constant, ReLU (z) = max(0,z), z∈R, andVR:Rrx→Ris a candidate Lyapunov
function, i.e., satisfies the criteria similar to (3) and (5). We use
VR(xR) =x⊤
RKx R, (29)
whereK∈Rrx×rxis a positive definite matrix.
Though the efficacy of learning control by minimizing the difference with respect to a target dynamics is
experimentally demonstrated by Saha et al. (2021), the stability of the closed-loop system subjected to
the learned control law has not been studied analytically. Here, we present a result that shows that if we
can minimizeLctrlsuch that the difference between the target dynamics and the closed-loop dynamics is
sufficiently small for all xR∈XR⊂Rrx, then the trajectories of the closed-loop ROM starting sufficiently
close to the origin remains close to the origin, i.e., ultimately bounded (Khalil (2002)). Boundedness of the
closed-loop ROM trajectories under the proposed control policy is a necessary but not sufficient requirement
for the stability of the original system.
10Under review as submission to TMLR
Theorem 4.2.1. Consider the target dynamics defined by (28)and the candidate Lyapunov function defined
by (29). Suppose the difference between the target dynamics and the closed-loop dynamics satisfies
∥F(xR,Eu◦Π(xR))−Fs(xR)∥≤δ<αθλ min(K)
2λmax(K)/radicaligg
λmin(K)
λmax(K)η, (30)
for allxR∈XR={xR∈Rrx| ∥xR∥< η}and 0< θ < 1. Then, for all initial points satisfying
∥xR(t0)∥</radicalig
λmin(K)
λmax(K)η, the solution of the closed-loop ROMdxR
dt=F(xR,Eu◦Π(xR))satisfies
∥xR(t)∥≤λe−γ(t−t0)∥xR(t0)∥,∀t0≤t<tc+t0 (31)
and
∥xR(t)∥≤2δ
αθλ3,∀t≥tc+t0 (32)
for some finite tc>0, where
γ=α(1−θ)λmin(K)
2λmax(K)andλ=/radicaligg
λmax(K)
λmin(K)(33)
Proof Sketch. This can be proved by first deriving the Lyapunov conditions for the target dynamics (28)
(Theorem 1, Kolter & Manek (2019)) and then applying the stability analysis of perturbed systems (Lemma
9.2, Khalil (2002)) and ultimate boundedness (Theorem 4.18, Khalil (2002)) on the closed-loop ROM. A
unified proof is provided in appendix A.6.
5 Empirical Results
For empirical analysis, we consider modeling and controlling spatiotemporal PDE-driven systems with high-
dimensional measurements over discretized space. One of the primary applications of reduced order modeling
liesincomprehendingthebehaviorofcomplexphysicalprocesseswhicharetypicallycharacterizedbysystems
of PDEs. Since spatiotemporal PDE-driven systems are infinite-dimensional in their continuous form and
high-dimensional when discretized, they are a fitting choice for evaluating our method. The first example
investigates a single variable actuation, whereas distributed actuation is considered for the second example.
5.1 Baselines
ThesimilaritybetweenDMDcandLAROMisdemonstratedusingthedynamicmodesestimatedinrespective
methods. The prediction performance of DeepROM is compared against DMDc and the Deep Koopman
model(Mortonetal.(2018)). TheDeepKoopmanmodelsharesasimilarDNN-basedautoencodingstructure
as ours, with the distinction that its (reduced order) dynamic model is linear. The method proposed by
Morton et al. (2018) considers a model predictive scenario, where the state/system matrix of the linear
reduced order model is updated with online observations during operation while the input/control matrix
is kept fixed. However, in contrast to the original method, we keep both matrices fixed during operation
(once those are trained) as we consider offline control design in this paper. For the same reason, we apply
linear quadratic regulator (LQR) on the ROM obtained from the Deep Koopman method, instead of model
predictivecontrol, tocomparethecontrolperformancewithourmethod: DeepROC.Thecontrolperformance
is also compared against the reduced order controller obtained by applying LQR on the ROM derived from
DMDc.
Details on the neural network architectures and training settings for the Deep Koopman model are given in
appendix D.
11Under review as submission to TMLR
5.2 Reaction–diffusion system stabilization
For the first experiment, we consider the Newell–Whitehead–Segel reaction-diffusion equation with the Neu-
mann boundary condition
∂q
∂t=σ∇2q+q(1−q2) +1WwinI×R+,
∇q(ζl,t) =∇q(ζr,t) = 0, t∈R+, (34)
which is used to describe various nonlinear physical systems including Rayleigh–Bénard convection. This
example is used by Kalise & Kunisch (2018) to evaluate nonlinear controllers designed from reduced order
state space representation. Similar systems are used for modeling problems as well in 1D (Raissi et al. (2019))
and 2D (Li et al. (2020)). In (34), q(ζ,t)∈Rdenotes the measurement variable such as concentration or
temperature at location ζ∈I⊂Rand timet;σdenotes the diffusion coefficient; w(t)∈Ris the actuation
at timetand1W(ζ)is the indicator function with W⊂I;ζlandζrdenote the boundary points of I.
(34) is a bistable system with ±1as stable and 0as unstable equilibria. For the control task, we consider
feedback stabilization of (34) at the unstable equilibrium 0, as studied by Kalise & Kunisch (2018). We use
I= (−1,1),W= (−0.2,0.2), andσ= 0.2. Details on dataset generation, neural network architectures, and
training settings are given in appendix B.
5.2.1 Similarity with DMDc
To investigate the similarity DMDc, we first train the LAROM using gradient descent to minimize the
objective (18) with the semi-orthogonality regularization and enforcing Dx=E⊤
x, as discussed in 4.1.2.
The dynamic modes for LAROM are computed as φi=Dxzi, whereziis theitheigenvector of AR.
Similarly, the dynamic modes for DMDc are computed as φi,DMDc =DDMDczi,DMDc, wherezi,DMDcis
theitheigenvector of AR,DMDc. Note, these dynamic modes are similar to the ones used in the original
DMD algorithm Schmid (2010), not the exact modes obtained in Proctor et al. (2016). Exact modes cannot
be computed for LAROM since it does not involve SVD. Modes defined by φi,DMDc =DDMDczi,DMDc =
/hatwideUYzi,DMDcare the orthogonal projection of the exact modes onto the range of Y(Theorem 3, Tu et al.
(2014)). Figure 4 compares the dynamic modes obtained using DMDc and LAROM for the case when the
dimension of the ROMs is 3. It is important to note that the numbering of the modes is arbitrary as the
optimal ranking of DMDc modes is not trivial. The correspondence between the DMDc modes and LAROM
modes are determined by comparing the eigenvalues of AR,DMDcandAR. Dynamic modes of both methods
are similar except for the different signs of the first two modes.
DMDc dynamic modes LAROM dynamic modes
Figure 4: The first three dynamic modes of the reaction–diffusion system, obtained using DMDc and
LAROM.
5.2.2 Prediction performance of DeepROM
We now compare the performance of DeepROM, Deep Koopman model, and DMDc in the prediction task.
Note, this example uses low-dimensional actuation (just a single variable). Accordingly, the control encoder
12Under review as submission to TMLR
Prediction error
DMDc prediction
(Proctor et al. (2016))
DeepROM prediction
PDE solution
Deep Koopman prediction
(Morton et al. (2018))
Figure 5: Prediction performance of DMDc, Deep Koopman, and DeepROM in the reaction–diffusion exam-
ple. The prediction error plot shows the mean error and 95%confidence interval from 100test sequences and
for Deep Koopman and DeepROM, 3different training instances. One example sequence is used to visually
compare the predictions with the solution from a PDE solver.
Euis not used here. Figure 5 shows the quantitative and qualitative comparison of the recursive multi-step
predictions obtained using DMDc, Deep Koopman model, and DeepROM. The prediction error is computed
asnormalized mean squared error (NMSE) with respect to the solution obtained using the PDE solver. The
prediction error plot shows the mean error and 95%confidence interval from 100test sequences and for
Deep Koopman and DeepROM, 3different training instances. The color maps are shown for one example
sequence with one training instance. Prediction error increases more quickly for DMDc and Deep Koopman
than DeepROM as the linear ROMs become less accurate in the long term.
5.2.3 Control performance of DeepROC
Figure 6 shows the control performance of DeepROC, Deep Koopman + LQR, and DMDc + LQR in the
task of stabilizing the system at the unstable equilibrium 0 from an initial state 2 + cos(2πζ) cos(πζ). We
use the following metrics for comparison:
(i) mean squared error over time between the controlled solutions and the desired profile
(ii) differential magnitude that measures the differential changes between the profiles at consecutive time
steps. In the steady state, the differential magnitude should be close to zero.
(iii) the amount of actuation applied
For Deep Koopman and DeepROC, the plots show the mean values with 1-standard deviation interval from
3training instances. All methods show similar closed-loop error profiles. However, DeepROC requires
significantly less amount of actuation in comparison with DMDc + LQR and Deep Koopman + LQR to
reach a similar steady-state error. DeepROC can account for the decaying nonlinear term −q3present in
the system (34) and therefore learns to apply less actuation. Figure 7 visually compares the uncontrolled
solution and the controlled solutions obtained using the three methods. When uncontrolled, the system
reaches the stable equilibrium at 1, whereas the feedback-controlled system is stabilized at the desired state
0in both cases.
13Under review as submission to TMLR
Error with respect to desired profile Differential magnitude Actuation
Figure 6: Control performance of DMDc + LQR, Deep Koopman + LQR, and DeepROC in the reac-
tion–diffusion example. For Deep Koopman and DeepROC, the plots show the mean values with 1-standard
deviation interval from 3training instances.
Uncontrolled solutionDeepROC
controlled solution
DMDc + LQR
(Proctor et al. (2016))
controlled solution
Deep Koopman + LQR
(Morton et al. (2018))
controlled solution 
Figure 7: Visual comparison of the uncontrolled solution and the controlled solutions using DeepROC, Deep
Koopman + LQR, and DMDc + LQR.
5.3 Vortex shedding suppression in fluid
In this experiment, we consider modeling and suppressing vortex shedding in two-dimensional incompressible
flow past a circular cylinder. This is a well-known problem (Schäfer et al. (1996)) and is of great importance
for many engineering applications (Williamson (1996)). Several previous studies on deep learning-based
modeling and control have used this system for evaluation (Eivazi et al. (2020); Erichson et al. (2019);
Rabault et al. (2019); Tang et al. (2020); Bieker et al. (2020); Morton et al. (2018)). The dynamics is
governed by the incompressible Navier-Stokes equations given by
∂v
∂t−ν∇2v+ (v·∇)v=−1
ρ∇p+1Ww,∇·v=0inI×R+, (35)
14Under review as submission to TMLR
wherev(ζ,t)∈R2denotes the flow velocity at location ζ∈I⊂R2and timet,p(ζ,t)∈Rdenotes the pres-
sure,νdenotes the kinematic viscosity and ρdenotes the density of the fluid. w(ζ,t)is the actuation/force
applied to the system and 1W(ζ)is the indicator function with W⊂I. We use I= (0,2.2)×(0,0.41)and
W= (0.11,0.77)×(0,0.41). Density and kinematic viscosity are chosen such that the Reynolds number is
Re= 50, which is just above the cutoff for the onset of the vortex shedding (Williamson (1996)). In this
case, vortices are created at the back of the cylinder and are shed periodically from the upper and lower
surfaces of the cylinder forming a von Kármán vortex street (Morton et al. (2018)). We use the domain W
for observation and distributed actuation. The Stokes flow is used as the desired state for the control task.
More details on the problem setup, dataset generation, neural network architectures, and training settings
are given in appendix C.
5.3.1 Similarity with DMDc
To analyze the dynamic modes, we train the LAROM by enforcing Dx=E⊤
xand adding the semi-
orthogonality constraint to the learning objective, as mentioned in 4.1.2. Figure 8 compares the first two
oscillatory dynamic modes obtained using DMDc and LAROM. Only the streamwise components are shown
for brevity. Also, complex modes occur in conjugate pairs and only one from each pair is shown. The cor-
respondence between the DMDc modes and LAROM modes are determined by comparing the eigenvalues
ofAR,DMDcandAR. Dynamic modes identified by LAROM are similar to the ones obtained from DMDc,
except the real and imaginary components of the first mode are swapped.
DMDc mode 1 LAROM mode 1 DMDc mode 2 LAROM mode 2Real Imaginary
Figure 8: The first two dynamic modes obtained using DMDc and LAROM for the flow past a cylinder
system.
5.3.2 Prediction performance of DeepROM
Figure 9 shows the quantitative and qualitative comparison of the recursive multi-step predictions, starting
fromt= 0.1, obtained using DMDc, Deep Koopman model, and DeepROM. The initial state is chosen at
t= 0.1because the fluid does not reach the observation region Wbefore that time. The prediction error is
computed as the mean squared error (MSE) with respect to the solution obtained using a PDE solver. For
Deep Koopman and DeepROM, the prediction error plot shows the mean error and 1-standard deviation
interval from 3training instances. DeepROM shows lower prediction error in comparison with DMDc. The
Deep Koopman model shows better prediction performance than DeepROM and DMDc during the initial
few steps. However, its accuracy deteriorates rapidly and eventually becomes comparable to that of DMDc.
Moreover, unlike DeepROM, DMDc and Deep Koopman model are unable to capture the shedding pattern
in multi-step prediction as shown in the contour plots of the velocity magnitude.
5.3.3 Control performance of DeepROC
Figure 10 shows the control performance of DeepROC, Deep Koopman + LQR, and DMDc+LQR in the task
of suppressing vortex shedding. The controllers of DeepROC and DMDc + LQR directly estimate the high-
15Under review as submission to TMLR
Prediction error
PDE solution at step 2500
DMDc (Proctor et al. (2016)) 
prediction at step 2500DeepROM prediction at step 2500
Deep Koopman (Morton et al. (2018))
prediction at step 2500
Figure 9: Prediction performance of DMDc, Deep Koopman, and DeepROM in the fluid flow example. For
Deep Koopman and DeepROM, the prediction error plot shows the mean error and 1-standard deviation
interval from 3training instances. Predictions at time step 2500for the test sequence are visually compared
with the solution from a PDE solver. vmdenotes the velocity magnitude.
dimensional actuation distributed over space. However, the same technique proved ineffective in suppressing
the shedding for Deep Koopman + LQR. Therefore, instead of directly estimating the distributed actuation,
we utilize a low-dimensional representation of the actuation for Deep Koopman + LQR. We represent the
distributed actuation as a linear combination of some space-dependent sinusoidal basis functions. The
controller is designed to estimate the coefficients of those basis functions in the linear combination. Details
are provided in appendix D.
We use the same metrics as the previous example for comparison except for actuation. Since distributed
control is applied in this case, we use the magnitude of the actuation here. For DeepROC and Deep Koopman
+ LQR, the plots show the mean values with 1-standard deviation interval from 3training instances. To
reach a similar steady-state error, DeepROC takes a longer time compared to DMDc and Deep Koopman
+ LQR. DeepROM uses the least amount of actuation during the initial few steps, whereas Deep Koopman
+ LQR has the least steady-state actuation magnitude. Figure 11 shows the velocity magnitude of the
controlled flow for DeepROC, Deep Koopman + LQR, and DMDc+LQR at different times, starting from a
von Kármán vortex street pattern. All methods accomplish a similar steady-state flow pattern where vortex
shedding has been suppressed.
6 Conclusion
We presented a framework for autoencoder-based modeling and control learning for high-dimensional dy-
namical systems. We showed that autoencoding ROMs are capable of capturing the dominant modes that
are essential in analyzing and designing control for the underlying systems. As we showed in experiments,
DeepROM offers better prediction accuracy than a linear ROM over a relatively longer prediction horizon
when applied to nonlinear systems. However, this advantage does not always translate to significant im-
provement in control performance. Though the used control learning method theoretically ensures ultimate
boundedness for the closed-loop ROM solution, data-driven optimization of the learning objective often
makes the models susceptible to distribution shift which can impact the control performance. The control
learning process in the DeepROC framework can easily be replaced with other methods like model-based RL
or model predictive control. It would be interesting for future work to investigate whether updating both
the reduced model and the controller in the MPC framework ensures robustness under distribution shift and
16Under review as submission to TMLR
Error with respect to desired profile Differential magnitude Actuation magnitude
Figure 10: Control performance of DMDc + LQR, Deep Koopman + LQR, and DeepROC in the vortex
shedding suppression task. For Deep Koopman + LQR and DeepROC, the plots show the mean values with
1-standard deviation interval from 3training instances.
𝑡=0.5 𝑡=1.0 𝑡=6.0
𝑡=0.0
DeepROCDMDc + LQR
(Proctor et al. (2016 ))
Deep Koopman + LQR
(Morton et al. (2018))
Figure 11: Visual comparison of the velocity magnitude of the flow over time subjected to the controllers
obtained using DeepROC, Deep Koopman + LQR, and DMDc + LQR.
offers better control performance. Designing controllers for DNN-based models is a challenging task due to
the standard difficulties associated with non-convex optimization. Nevertheless, we envision great prospects
in solving many problems of control design for high-dimensional systems utilizing autoencoder-based models
as they continue to demonstrate their effectiveness in the analysis and prediction of such systems.
17Under review as submission to TMLR
References
Arthur Albert. Regression and the Moore-Penrose Pseudoinverse . Academic Press, 1972.
Jeanne A Atwell, Jeffrey T Borggaard, and Belinda B King. Reduced order controllers for burgers’ equation
with a nonlinear observer. International Journal of Applied Mathematics and Computer Science , 11(6):
1311–1330, 2001.
Ibrahim Ayed, Emmanuel de Bézenac, Arthur Pajot, Julien Brajard, and Patrick Gallinari. Learning dy-
namical systems from partial observations. arXiv preprint arXiv:1902.11136 , 2019.
Pierre Baldi and Kurt Hornik. Neural networks and principal component analysis: Learning from examples
without local minima. Neural networks , 2(1):53–58, 1989.
Gerben Beintema, Alessandro Corbetta, Luca Biferale, and Federico Toschi. Controlling rayleigh–bénard
convection via reinforcement learning. Journal of Turbulence , 21(9-10):585–605, 2020.
Katharina Bieker, Sebastian Peitz, Steven L Brunton, J Nathan Kutz, and Michael Dellnitz. Deep model
predictive flow control with limited sensor data and online learning. Theoretical and computational fluid
dynamics , 34:577–591, 2020.
Oumayma Bounou, Jean Ponce, and Justin Carpentier. Online learning and control of dynamical systems
from sensory input. In NeurIPS 2021-Thirty-fifth Conference on Neural Information Processing Systems
Year, 2021.
Kaixuan Chen, Jin Lin, Yiwei Qiu, Feng Liu, and Yonghua Song. Deep learning-aided model predictive
control of wind farms for agc considering the dynamic wake effect. Control Engineering Practice , 116:
104925, 2021.
Ricky TQ Chen, Yulia Rubanova, Jesse Bettencourt, and David K Duvenaud. Neural ordinary differential
equations. Advances in neural information processing systems , 31, 2018.
Emmanuel De Bézenac, Arthur Pajot, and Patrick Gallinari. Deep learning for physical processes: Incor-
porating prior scientific knowledge. Journal of Statistical Mechanics: Theory and Experiment , 2019(12):
124009, 2019.
Jérémie Donà, Jean-Yves Franceschi, Sylvain Lamprier, and Patrick Gallinari. Pde-driven spatiotemporal
disentanglement. arXiv preprint arXiv:2008.01352 , 2020.
Hamidreza Eivazi, Hadi Veisi, Mohammad Hossein Naderi, and Vahid Esfahanian. Deep neural networks for
nonlinear model order reduction of unsteady flows. Physics of Fluids , 32(10):105104, 2020.
N Benjamin Erichson, Michael Muehlebach, and Michael W Mahoney. Physics-informed autoencoders for
lyapunov-stable fluid flow prediction. arXiv preprint arXiv:1905.10866 , 2019.
Paul Garnier, Jonathan Viquerat, Jean Rabault, Aurélien Larcher, Alexander Kuhnle, and Elie Hachem. A
review on deep reinforcement learning for fluid mechanics. Computers & Fluids , 225:104973, 2021.
Philipp Holl, Nils Thuerey, and Vladlen Koltun. Learning to control pdes with differentiable physics. In
International Conference on Learning Representations , 2020.
Jer-Nan Juang and Richard S Pappa. An eigensystem realization algorithm for modal parameter identifica-
tion and model reduction. Journal of guidance, control, and dynamics , 8(5):620–627, 1985.
Jer-Nan Juang, Minh Phan, Lucas G Horta, and Richard W Longman. Identification of observer/kalman
filter markov parameters-theory and experiments. Journal of Guidance, Control, and Dynamics , 16(2):
320–329, 1993.
Dante Kalise and Karl Kunisch. Polynomial approximation of high-dimensional hamilton–jacobi–bellman
equations and applications to feedback control of semilinear parabolic pdes. SIAM Journal on Scientific
Computing , 40(2):A629–A652, 2018.
18Under review as submission to TMLR
Hassan K. Khalil. Nonlinear systems . Prentice Hall, third edition, 2002.
Mohammad Amin Khodkar, Pedram Hassanzadeh, and Athanasios Antoulas. A koopman-based framework
for forecasting the spatiotemporal evolution of chaotic dynamics with nonlinearities modeled as exogenous
forcings. arXiv preprint arXiv:1909.00076 , 2019.
J Zico Kolter and Gaurav Manek. Learning stable deep dynamics models. Advances in neural information
processing systems , 32, 2019.
Ian Lenz, Ross A Knepper, and Ashutosh Saxena. Deepmpc: Learning deep latent features for model
predictive control. In Robotics: Science and Systems , volume 10. Rome, Italy, 2015.
Angran Li, Ruijia Chen, Amir Barati Farimani, and Yongjie Jessica Zhang. Reaction diffusion system
prediction based on convolutional neural network. Scientific reports , 10(1):3894, 2020.
Anders Logg, Kent-Andre Mardal, and Garth Wells. Automated solution of differential equations by the
finite element method: The FEniCS book , volume 84. Springer Science & Business Media, 2012.
Zichao Long, Yiping Lu, Xianzhong Ma, and Bin Dong. Pde-net: Learning pdes from data. In International
Conference on Machine Learning , pp. 3208–3216. PMLR, 2018.
Bethany Lusch, J Nathan Kutz, and Steven L Brunton. Deep learning for universal linear embeddings of
nonlinear dynamics. Nature communications , 9(1):4950, 2018.
Pingchuan Ma, Yunsheng Tian, Zherong Pan, Bo Ren, and Dinesh Manocha. Fluid directed rigid body
control using deep reinforcement learning. ACM Transactions on Graphics (TOG) , 37(4):1–11, 2018.
Jan R Magnus and Heinz Neudecker. Symmetry, 0-1 matrices and jacobians: A review. Econometric Theory ,
2(2):157–190, 1986.
George Matsaglia and George PH Styan. Equalities and inequalities for ranks of matrices. Linear and
multilinear Algebra , 2(3):269–292, 1974.
Jeremy Morton, Antony Jameson, Mykel J Kochenderfer, and Freddie Witherden. Deep dynamical modeling
and control of unsteady fluid flows. Advances in Neural Information Processing Systems , 31, 2018.
Zuowei Ping, Zhun Yin, Xiuting Li, Yefeng Liu, and Tao Yang. Deep koopman model predictive control for
enhancing transient stability in power grids. International Journal of Robust and Nonlinear Control , 31
(6):1964–1978, 2021.
Joshua L Proctor, Steven L Brunton, and J Nathan Kutz. Dynamic mode decomposition with control. SIAM
Journal on Applied Dynamical Systems , 15(1):142–161, 2016.
Jean Rabault, Miroslav Kuchta, Atle Jensen, Ulysse Réglade, and Nicolas Cerardi. Artificial neural networks
trained through deep reinforcement learning discover control strategies for active flow control. Journal of
fluid mechanics , 865:281–302, 2019.
Maziar Raissi. Deep hidden physics models: Deep learning of nonlinear partial differential equations. The
Journal of Machine Learning Research , 19(1):932–955, 2018.
Maziar Raissi, Paris Perdikaris, and George E Karniadakis. Physics-informed neural networks: A deep learn-
ing framework for solving forward and inverse problems involving nonlinear partial differential equations.
Journal of Computational physics , 378:686–707, 2019.
Xiaoli Ren, Xiaoyong Li, Kaijun Ren, Junqiang Song, Zichen Xu, Kefeng Deng, and Xiang Wang. Deep
learning-based weather prediction: a survey. Big Data Research , 23:100178, 2021.
ClarenceWRowley, IgorMezić, ShervinBagheri, PhilippSchlatter, andDanSHenningson. Spectralanalysis
of nonlinear flows. Journal of fluid mechanics , 641:115–127, 2009.
19Under review as submission to TMLR
Priyabrata Saha, Magnus Egerstedt, and Saibal Mukhopadhyay. Neural identification for control. IEEE
Robotics and Automation Letters , 6(3):4648–4655, 2021.
Michael Schäfer, Stefan Turek, Franz Durst, Egon Krause, and Rolf Rannacher. Benchmark computations
of laminar flow around a cylinder . Springer, 1996.
Sebastian Scher. Toward data-driven weather and climate forecasting: Approximating a simple general
circulation model with deep learning. Geophysical Research Letters , 45(22):12–616, 2018.
Peter J Schmid. Dynamic mode decomposition of numerical and experimental data. Journal of fluid me-
chanics, 656:5–28, 2010.
Sungyong Seo, Chuizheng Meng, and Yan Liu. Physics-aware difference graph networks for sparsely-observed
dynamics. In International Conference on Learning Representations , 2019.
EduardoDSontag. Mathematical control theory: deterministic finite dimensional systems ,volume6. Springer
Science & Business Media, 2013.
Prem A Srinivasan, L Guastoni, Hossein Azizpour, PHILIPP Schlatter, and Ricardo Vinuesa. Predictions
of turbulent shear flows using deep neural networks. Physical Review Fluids , 4(5):054603, 2019.
Tetsuya Takahashi, Junbang Liang, Yi-Ling Qiao, and Ming C Lin. Differentiable fluids with solid coupling
for learning and control. In Proceedings of the AAAI Conference on Artificial Intelligence , volume 35(7),
pp. 6138–6146, 2021.
Naoya Takeishi, Yoshinobu Kawahara, and Takehisa Yairi. Learning koopman invariant subspaces for dy-
namic mode decomposition. Advances in neural information processing systems , 30, 2017.
Hongwei Tang, Jean Rabault, Alexander Kuhnle, Yan Wang, and Tongguang Wang. Robust active flow con-
trol over a range of reynolds numbers using an artificial neural network trained through deep reinforcement
learning. Physics of Fluids , 32(5):053605, 2020.
Jonathan H. Tu, , Clarence W. Rowley, Dirk M. Luchtenburg, Steven L. Brunton, and J. Nathan Kutz and.
On dynamic mode decomposition: Theory and applications. Journal of Computational Dynamics , 1(2):
391–421, 2014. doi: 10.3934/jcd.2014.1.391.
KarenWillcoxandJaimePeraire. Balancedmodelreductionviatheproperorthogonaldecomposition. AIAA
journal, 40(11):2323–2330, 2002.
Charles HK Williamson. Vortex dynamics in the cylinder wake. Annual review of fluid mechanics , 28(1):
477–539, 1996.
SHI Xingjian, Zhourong Chen, Hao Wang, Dit-Yan Yeung, Wai-Kin Wong, and Wang-chun Woo. Convo-
lutional lstm network: A machine learning approach for precipitation nowcasting. In Advances in neural
information processing systems , pp. 802–810, 2015.
Yuting Yang, Junyu Dong, Xin Sun, Estanislau Lima, Quanquan Mu, and Xinhua Wang. A cfcc-lstm model
for sea surface temperature prediction. IEEE Geoscience and Remote Sensing Letters , 15(2):207–211,
2017.
Enoch Yeung, Soumya Kundu, and Nathan Hodas. Learning deep neural network representations for koop-
man operators of nonlinear dynamical systems. In 2019 American Control Conference (ACC) , pp. 4832–
4839. IEEE, 2019.
RuiyangZhang, YangLiu, andHaoSun. Physics-informedmulti-lstmnetworksformetamodelingofnonlinear
structures. Computer Methods in Applied Mechanics and Engineering , 369:113226, 2020.
20Under review as submission to TMLR
Appendices
A Proofs
This section details the proofs for the results presented in section 4. The proof of theorem 4.1.1 uses the
followingpropertiesoftherank(denotedbyrank (·)),theKroneckerproduct(denotedby ⊗)andvectorization
of matrices (denoted by vec (·)). All the definitions and properties are presented in the context of matrices
over real numbers.
For any conformable matrices DandEsuch thatEhas full row-rank,
rank(DE) =rank(D). (36a)
For any real matrix D,
rank(D⊤D) =rank(DD⊤) =rank(D⊤) =rank(D). (36b)
For any matrices (of compatible dimensions) D,E,F,andH,
vec(DEF⊤) = (F⊗D)vec(E), (37a)
(D⊗E)⊤=D⊤⊗E⊤, (37b)
(D⊗E)(F⊗H) = (DF⊗EH), (37c)
whenever these quantities are defined. Furthermore, if DandEare symmetric and positive semidefinite
(resp. positive definite), then D⊗Eis symmetric and positive semidefinite (resp. positive definite), i.e.,
D⪰0,E⪰0 =⇒(D⊗E)⪰0;D≻0,E≻0 =⇒(D⊗E)≻0. (37d)
Proofs of (36) and (37) can be found in (Matsaglia & PH Styan (1974)) and (Magnus & Neudecker (1986)),
respectively.
To derive the results presented in corollary (4.1.1.1), we use the following definitions of the Moore-Penrose
inverse of a matrix (denoted by (·)+). For any matrix Dand its (full) SVD, i.e., D=UDΣDV⊤
D,
D+= (D⊤D)−1D⊤,when (D⊤D)−1exists, (38a)
D+=D⊤(DD⊤)−1,when (DD⊤)−1exists, (38b)
D+=VDΣ+
DU⊤
D, (38c)
D+= lim
ε→0(D⊤D+ε2I)−1D⊤= lim
ε→0D⊤(DD⊤+ε2I)−1, (38d)
whereIis the identity matrix of compatible dimension. The proof of (38d) can be found in (Albert (1972)).
To prove Theorem 4.1.1, we use some well-known results, summarized as the following lemma in (Baldi &
Hornik (1989)), for linear least-squares optimization.
Lemma A.0.1. The quadratic function L(z) =∥y−Mz∥2=y⊤y−2y⊤Mz+z⊤M⊤Mzis convex, and
a pointzglobally minimizes Lif and only if∇L(z) = 0, or equivalently, M⊤Mz =M⊤y. Furthermore,
ifM⊤M≻0, i.e., positive definite, then Lis strictly convex and reaches its unique minimum for z=
(M⊤M)−1M⊤y.
A.1 Proof of theorem 4.1.1
Theorem 4.1.1. Consider the following objective function
Lpred(Ex,G) =1
nn−1/summationdisplay
i=0/vextenddouble/vextenddoubleExx(ti+1)−GExuω(ti)/vextenddouble/vextenddouble2, (12)
21Under review as submission to TMLR
whereG= [ARBR]∈Rrx×(rx+du),Exu=/bracketleftbiggEx0
0Idu/bracketrightbigg
∈R(rx+du)×(dx+du),Idubeing the identity matrix
of orderdu. For any fixed matrix Ex, the objective function Lpredis convex in the coefficients of Gand
attains its minimum for any Gsatisfying
GExuΩΩ⊤E⊤
xu=ExYΩ⊤E⊤
xu, (13)
whereYandΩare the data matrices as defined in section (3.3). If Exhas full rank rx, andΩΩ⊤is
non-singular, then Lpredis strictly convex and has a unique minimum for
G= [ARBR] =ExYΩ⊤E⊤
xu(ExuΩΩ⊤E⊤
xu)−1. (14)
Proof. We can write Lpred(Ex,G)as follows,
Lpred(Ex,G) =1
nn−1/summationdisplay
i=0/vextenddouble/vextenddoubleExx(ti+1)−GExuω(ti)/vextenddouble/vextenddouble2
=/vextenddouble/vextenddoublevec(ExY)−vec(GExuΩ)/vextenddouble/vextenddouble2
=/vextenddouble/vextenddoublevec(ExY)−(Ω⊤E⊤
xu⊗Irx)vec(G)/vextenddouble/vextenddouble2. (39)
The third equality is obtained using (37a). For fixed Ex, we can apply Lemma A.0.1 to (39): (39) is convex
in coefficient of G, andGcorresponds to a global minimum of Lpredif and only if
(Ω⊤E⊤
xu⊗Irx)⊤(Ω⊤E⊤
xu⊗Irx)vec(G) = (Ω⊤E⊤
xu⊗Irx)⊤vec(ExY). (40)
Using (37b) and (37c), we can write (40) as
(ExuΩΩ⊤E⊤
xu⊗Irx)vec(G) = (ExuΩ⊗Irx)vec(ExY). (41)
Applying (37a) on (41), we get GExuΩΩ⊤E⊤
xu=ExYΩ⊤E⊤
xu, i.e., (13).
IfExhas full rank rx, thenExu=/bracketleftbiggEx0
0Idu/bracketrightbigg
∈R(rx+du)×(dx+du)has full rank (rx+du). IfΩΩ⊤∈
R(dx+du)×(dx+du)is non-singular, then Ωhas full row-rank (dx+du). Consequently, using (36a) and (36b),
we have
rank(ExuΩΩ⊤E⊤
xu) =rank(ExuΩ) =rank(Exu) =rx+du. (42)
Hence the symmetric positive semidefinite matrix ExuΩΩ⊤E⊤
xuhas full rank and therefore positive definite.
Using (37b), (37c), and (37d), we can see that (Ω⊤E⊤
xu⊗Irx)⊤(Ω⊤E⊤
xu⊗Irx) = (ExuΩΩ⊤E⊤
xu⊗Irx)is
positive definite as well. Therefore, by Lemma A.0.1, (39) is strictly convex in the coefficients of Gand has
a unique minimum. Since ExuΩΩ⊤E⊤
xu≻0, it is invertible. Hence, from (13), we can say that the unique
minimum of (39) is reached at G=ExYΩ⊤E⊤
xu(ExuΩΩ⊤E⊤
xu)−1, i.e., (14). ■
A.2 An alternative representation of (14)
Here we provide a possible alternative representation of (14) required to prove corollary 4.1.1.1.
Lemma A.2.1. Consider the (full) SVD of the data matrix Ωgiven by Ω=UΩΣΩV⊤
Ω, whereUΩ∈
R(dx+du)×(dx+du),ΣΩ∈R(dx+du)×n, andVΩ∈Rn×n. (14) can be expressed as
G= lim
ε→0ExYVΩ(Σ⊤
ΩU⊤
ΩE⊤
xuExuUΩΣΩ+ε2In)−1Σ⊤
ΩU⊤
ΩE⊤
xu. (43)
Proof. Replacing Ωwith its SVD in (14) we get,
G=ExYVΩΣ⊤
ΩU⊤
ΩE⊤
xu(ExuUΩΣΩV⊤
ΩVΩΣ⊤
ΩU⊤
ΩE⊤
xu)−1
=ExYVΩΣ⊤
ΩU⊤
ΩE⊤
xu(ExuUΩΣΩΣ⊤
ΩU⊤
ΩE⊤
xu)−1
=ExYVΩ(ExuUΩΣΩ)+(44)
22Under review as submission to TMLR
The second equality is due to the orthogonality of VΩ. The third equality is obtained using (38b). Substi-
tuting (ExuUΩΣΩ)+with the limit definition (38d) of the Moore-Penrose inverse, we get
G= lim
ε→0ExYVΩ(Σ⊤
ΩU⊤
ΩE⊤
xuExuUΩΣΩ+ε2In)−1Σ⊤
ΩU⊤
ΩE⊤
xu. (45)
■
A.3 Proof of Corollary 4.1.1.1
Corollary 4.1.1.1. Consider the (full) SVD of the data matrix Ωgiven by Ω=UΩΣΩV⊤
Ω, whereUΩ∈
R(dx+du)×(dx+du),ΣΩ∈R(dx+du)×n, andVΩ∈Rn×n. IfEx=/hatwideU⊤
YandΩΩ⊤is non-singular, then the
solution forG= [ARBR]corresponding to the unique minimum of Lpredcan be expressed as
AR=/hatwideU⊤
YYVΩΣ∗U⊤
Ω,1/hatwideUY,andBR=/hatwideU⊤
YYVΩΣ∗U⊤
Ω,2, (15)
where [U⊤
Ω,1U⊤
Ω,2] =U⊤
ΩwithUΩ,1∈Rdx×(dx+du),UΩ,2∈Rdu×(dx+du), and
Σ∗= limε→0(Σ⊤
ΩU⊤
Ω,1/hatwideUY/hatwideU⊤
YUΩ,1ΣΩ+Σ⊤
ΩU⊤
Ω,2UΩ,2ΣΩ+ε2In)−1Σ⊤
Ω.
Proof. By the definition of truncated SVD, the columns of /hatwideUYare orthonormal. Therefore, /hatwideU⊤
Yhas full
row-rankrx. Hence, by theorem 4.1.1 and lemma A.2.1, if Ex=/hatwideU⊤
Y, andΩΩ⊤is non-singular, then the
unique minimum of Lpred, is reached when
G=/hatwideU⊤
YYVΩ(ExuUΩΣΩ)+= lim
ε→0/hatwideU⊤
YYVΩ(Σ⊤
ΩU⊤
ΩE⊤
xuExuUΩΣΩ+ε2In)−1Σ⊤
ΩU⊤
ΩE⊤
xu.(46)
Now, substituting Ex=/hatwideU⊤
YinExu, and using the partition U⊤
Ω= [U⊤
Ω,1U⊤
Ω,2], whereUΩ,1∈
Rdx×(dx+du),UΩ,2∈Rdu×(dx+du), we get
ExuUΩ=/bracketleftbigg/hatwideU⊤
Y 0
0Idu/bracketrightbigg/bracketleftbiggUΩ,1
UΩ,2/bracketrightbigg
=/bracketleftbigg/hatwideU⊤
YUΩ,1
UΩ,2/bracketrightbigg
, (47)
and
U⊤
ΩE⊤
xuExuUΩ=/bracketleftig
U⊤
Ω,1/hatwideUYU⊤
Ω,2/bracketrightig/bracketleftbigg/hatwideU⊤
YUΩ,1
UΩ,2/bracketrightbigg
=U⊤
Ω,1/hatwideUY/hatwideU⊤
YUΩ,1+U⊤
Ω,2UΩ,2. (48)
Plugging (47) and (48) into (46) leads to
G= lim
ε→0/hatwideU⊤
YYVΩ(Σ⊤
ΩU⊤
Ω,1/hatwideUY/hatwideU⊤
YUΩ,1ΣΩ+Σ⊤
ΩU⊤
Ω,2UΩ,2ΣΩ+ε2In)−1Σ⊤
Ω/bracketleftig
U⊤
Ω,1/hatwideUYU⊤
Ω,2/bracketrightig
.(49)
Defining Σ∗∆= limε→0(Σ⊤
ΩU⊤
Ω,1/hatwideUY/hatwideU⊤
YUΩ,1ΣΩ+Σ⊤
ΩU⊤
Ω,2UΩ,2ΣΩ+ε2In)−1Σ⊤
Ω, we can split (49) into
AR=/hatwideU⊤
YYVΩΣ∗U⊤
Ω,1/hatwideUY,andBR=/hatwideU⊤
YYVΩΣ∗U⊤
Ω,2,
which is (15). ■
A.4 The case when ΩΩ⊤not invertible
When the covariance matrix ΩΩ⊤is not invertible, which is always true if n < d x+du, the matrix
ExuΩΩ⊤E⊤
xuisnotguaranteedtobeinvertible. Inthatcase, theminimumof Lpredcorrespondstoinfinitely
many solutions for G. However, minimizing Lpredwith added ℓ2regularization, i.e., Lpred,reg (Ex,G) =
Lpred(Ex,G) +β∥vec(G)∥2provides a unique solution for G, for a fixedEx. We have the following result.
Theorem A.4.1. For any fixed matrix Exandβ > 0, the objective function Lpred,reg (Ex,G) =
Lpred(Ex,G) +β∥vec(G)∥2is strictly convex in the coefficients of G, and the global minimum of Lpred,reg
corresponds to the unique solution for G, given by
G=ExYΩ⊤E⊤
xu(ExuΩΩ⊤E⊤
xu+βIrx+du)−1. (50)
23Under review as submission to TMLR
Proof.Lpred,reg (Ex,G)can be written as, using (37a-c),
Lpred,reg (Ex,G) =/vextenddouble/vextenddoublevec(ExY)−(Ω⊤E⊤
xu⊗Irx)vec(G)/vextenddouble/vextenddouble2+β∥vec(G)∥2
=vec(ExY)⊤vec(ExY)−2vec(ExY)⊤(Ω⊤E⊤
xu⊗Irx)vec(G)
+vec(G)⊤(ExuΩΩ⊤E⊤
xu⊗Irx+βIrx(rx+du))vec(G)
ExuΩΩ⊤E⊤
xuis a symmetric positive semidefinite matrix, irrespective of whether it has full rank or not.
Hence, by (37d), ExuΩΩ⊤E⊤
xu⊗Irxis symmetric positive semidefinite. Consequently, for any β > 0,
ExuΩΩ⊤E⊤
xu⊗Irx+βIrx(rx+du)is positive definite. According to lemma A.0.1, Lpred,regis therefore
strictly convex in the coefficients of Gand globally minimized when ∇Lpred,reg = 0. The unique solution of
(50) can be derived in the same manner as theorem 4.1.1. ■
Remark. Replacing Ωwith its SVD in (50) we get,
G=ExYVΩΣ⊤
ΩU⊤
ΩE⊤
xu(ExuUΩΣΩΣ⊤
ΩU⊤
ΩE⊤
xu+βIrx+du)−1. (51)
In the limit β→0+, (51) converges to (44).
A.5 DMDc through a linear autoencoding structure
Here we present a linear autoencoding structure that leads to a linear ROM exactly resembling the DMDc so-
lution whenEx=/hatwideU⊤
Y. However, its DNN-based nonlinear counterpart does not actually offer dimensionality
reduction.
Theorem A.5.1. Consider the following objective function
Lpred,alt (Ex,/tildewideG) =1
nn−1/summationdisplay
i=0/vextenddouble/vextenddoubleExx(ti+1)−/tildewideGω(ti)/vextenddouble/vextenddouble2, (52)
where/tildewideG∈Rrx×(dx+du). For any fixed matrix Ex, the objective function Lpred,altis convex in the coefficients
of/tildewideGand attains its minimum for any /tildewideGsatisfying
/tildewideGΩΩ⊤=ExYΩ⊤, (53)
whereYandΩare the data matrices as defined in section (3.3). If ΩΩ⊤is non-singular, then Lpred,altis
strictly convex and has a unique minimum for
/tildewideG=ExYΩ⊤(ΩΩ⊤)−1. (54)
Proof.The proof is very similar to the proof of theorem 4.1.1. Using (37a), we can write Lpred,alt (Ex,/tildewideG)as
follows,
Lpred,alt (Ex,/tildewideG) =1
nn−1/summationdisplay
i=0/vextenddouble/vextenddoubleExx(ti+1)−/tildewideGω(ti)/vextenddouble/vextenddouble2
=/vextenddouble/vextenddoublevec(ExY)−vec(/tildewideGΩ)/vextenddouble/vextenddouble2
=/vextenddouble/vextenddoublevec(ExY)−(Ω⊤⊗Irx)vec(/tildewideG)/vextenddouble/vextenddouble2. (55)
For fixedEx, applying Lemma A.0.1 to (55), we can say Lpred,altis convex in the coefficients of /tildewideG, and/tildewideG
corresponds to a global minimum of Lpred,altif and only if
(Ω⊤⊗Irx)⊤(Ω⊤⊗Irx)vec(/tildewideG) = (Ω⊤⊗Irx)⊤vec(ExY). (56)
Using (37a-c), we can write (56) as /tildewideGΩΩ⊤=ExYΩ⊤, which is (53).
24Under review as submission to TMLR
IfΩΩ⊤is non-singular, then it is symmetric positive definite. Using (37b-d), we can see that
(Ω⊤⊗Irx)⊤(Ω⊤⊗Irx) = (ΩΩ⊤⊗Irx)is positive definite as well. Therefore, by Lemma A.0.1,
(55) is strictly convex in coefficient in /tildewideGand has a unique minimum. In that case, from (53), we can say
that the unique minimum of (55) is reached at /tildewideG=ExYΩ⊤(ΩΩ⊤)−1, i.e., (54). ■
Corollary A.5.1.1. Consider the (full) SVD of the data matrix Ωgiven by Ω=UΩΣΩV⊤
Ω, whereUΩ∈
R(dx+du)×(dx+du),ΣΩ∈R(dx+du)×n, andVΩ∈Rn×n. IfEx=/hatwideU⊤
YandΩΩ⊤is non-singular, then the
solution for/tildewideGcorresponding to the unique minimum of Lpred,altcan be expressed as
/tildewideG=/hatwideU⊤
YYVΩΣ+
ΩU⊤
Ω. (57)
Proof.By theorem A.5.1, if Ex=/hatwideU⊤
Y, andΩΩ⊤is non-singular, then the unique minimum of Lpred,altis
reached when
/tildewideG=/hatwideU⊤
YYΩ⊤(ΩΩ⊤)−1=/hatwideU⊤
YYΩ+(58)
The second equality is due to (38b). Substituting Ω+with its SVD definition (38c) into (58), we get
/hatwideU⊤
YYVΩΣ+
ΩU⊤
Ω, which is (57). ■
Remark. From (52), it can be seen that /tildewideGmaps the concatenated vector, ω(ti), of full state and actuation
to the next reduce state xR(ti+1). We can partition (57) as /tildewideG=/hatwideU⊤
YYVΩΣ+
Ω[U⊤
Ω,1U⊤
Ω,2] = [/tildewideA/tildewideB]to
separate out the blocks corresponding to state and actuation. Here, UΩ,1,UΩ,2are the same as defined in
corollary 4.1.1.1, and /tildewideA∈Rrx×dx,/tildewideB∈Rrx×du. Now, if we post-multiply /tildewideAwithE⊤
x=/hatwideUY∈Rdx×rx, we
get a ROM
/tildewideAR=/tildewideA/hatwideUY=/hatwideU⊤
YYVΩΣ+
ΩU⊤
Ω,1/hatwideUY,/tildewideBR=/tildewideB=/hatwideU⊤
YYVΩΣ+
ΩU⊤
Ω,2, (59)
which maps the current reduced state xR(ti)and actuation u(ti)to the next reduced state xR(ti+1). It can
be verified easily that if we use the truncated SVD (as defined by 9), instead of the full SVD, for Ωin (58)
and follow the similar steps afterward, we get an approximation of (59):
/hatwideAR=/hatwideU⊤
YY/hatwideVΩ/hatwideΣ−1
Ω/hatwideU⊤
Ω,1/hatwideUY=AR,DMDc ;/hatwideBR=/hatwideU⊤
YY/hatwideVΩ/hatwideΣ−1
Ω/hatwideU⊤
Ω,2=BR,DMDc.
In summary, the aforementioned method can be carried out using gradient descent-based optimization and
leads to the same ROM as DMDc, when Ex=/hatwideU⊤
Y. However, in this method, the benefit of dimensionality
reduction is realized only when linear networks are used. A nonlinear counterpart (a DNN in the context
of this paper) of /tildewideAR, i.e., a nonlinear mapping from RrxtoRrx, cannot be pre-computed from a nonlinear
counterpart of /tildewideG, unlike the linear case (59). Consequently, we lose the benefit of dimensionality reduction
when nonlinear networks are used.
A.6 Proof of theorem 4.2.1
Theorem 4.2.1. Consider the target dynamics defined by (28)and the candidate Lyapunov function defined
by (29). Suppose the difference between the target dynamics and the closed-loop dynamics satisfies
∥F(xR,Eu◦Π(xR))−Fs(xR)∥≤δ<αθλ min(K)
2λmax(K)/radicaligg
λmin(K)
λmax(K)η, (30)
for allxR∈XR={xR∈Rrx| ∥xR∥< η}and 0< θ < 1. Then, for all initial points satisfying
∥xR(t0)∥</radicalig
λmin(K)
λmax(K)η, the solution of the closed-loop ROMdxR
dt=F(xR,Eu◦Π(xR))satisfies
∥xR(t)∥≤λe−γ(t−t0)∥xR(t0)∥,∀t0≤t<tc+t0 (31)
and
∥xR(t)∥≤2δ
αθλ3,∀t≥tc+t0 (32)
25Under review as submission to TMLR
for some finite tc>0, where
γ=α(1−θ)λmin(K)
2λmax(K)andλ=/radicaligg
λmax(K)
λmin(K)(33)
Proof.From the definition of VR, we have
λmin(K)∥xR∥2≤VR(xR)≤λmax(K)∥xR∥2,∀xR∈Rrx, (60)
whereλmin(K)andλmax(K)denotethesmallestandlargesteigenvalues, respectively, of Kandhavepositive
values since the matrix Kis positive definite. Moreover, the definition of the target dynamics (28) implies
∇VR(xR)⊤Fs(xR) =/braceleftigg
∇VR(xR)⊤P(xR),if∇VR(xR)⊤P(xR)≤−αVR(xR)
∇VR(xR)⊤P(xR)−∇V R(xR)⊤∇VR(xR)⊤P(xR)+αVR(xR)
∥∇VR(xR)∥2∇VR(xR),otherwise
=/braceleftigg
∇VR(xR)⊤P(xR),if∇VR(xR)⊤P(xR)≤−αVR(xR)
−αVR(xR),otherwise
≤−αVR(xR)
≤−αλmin(K)∥xR∥2,∀xR∈Rrx. (61)
The last inequality is due to (60).
Now, assumeF(xR,Eu◦Π(xR)) =H(xR) =Fs(xR)+J(xR)for some function J:Rrx→Rrxand consider
VR(xR) =x⊤
RKx Ras a candidate Lyapunov function for
dxR
dt=H(xR) =Fs(xR) +J(xR). (62)
We have∥∇V R(xR)∥=∥2Kx R∥≤2λmax(K)∥xR∥. The time-derivative of VRalong the trajectories of (62)
satisfies
dVR
dt=∇VR(xR)⊤Fs(xR) +∇VR(xR)⊤J(xR)
≤−αλmin(K)∥xR∥2+∥∇V R(xR)∥∥J(xR)∥
≤−αλmin(K)∥xR∥2+ 2λmax(K)∥xR∥δ,∀∥xR∥<η
=−α(1−θ)λmin(K)∥xR∥2−αθλ min(K)∥xR∥2+ 2λmax(K)∥xR∥δ,0<θ< 1,∀∥xR∥<η
≤−α(1−θ)λmin(K)∥xR∥2<0,whenη>∥xR∥≥2δλmax(K)
αθλ min(K)∆=µ. (63)
The second inequality is obtained using (61) and the third inequality is obtained using (30). Clearly, we
have a non-empty region wheredVR
dt<0only when
δ<αθλ min(K)
2λmax(K)η. (64)
Letb=λmin(K)η2andc=λmax(K)µ2. Consider the sublevel sets χb={xR∈Rrx|VR(xR)< b}and
χc={xR∈Rrx|VR(xR)≤c}. It can be easily verified that if δ<αθλ min(K)
2λmax(K)/radicalig
λmin(K)
λmax(K)η, thenc<b, which
impliesχc⊂χb. Note, this condition satisfies the necessary condition (64) for the non-empty region since
λmin(K)≤λmax(K).
For anyxRinsideχb, using (60), we have
λmin(K)∥xR∥2≤VR(xR)<b=λmin(K)η2, (65)
26Under review as submission to TMLR
implying∥xR∥<η. Similarly, for any xRon the boundary or outside of χc, we have
λmax(K)µ2=c≤VR(xR)≤λmax(K)∥xR∥2, (66)
which implies∥xR∥≥µ.
Combining (65) and (66) we can say for any xRoutside (including the boundary) of χc, but inside χb, (63)
holds true. For such xR(i.e.xR∈χb\χc) we have
dVR
dt≤−α(1−θ)λmin(K)
λmax(K)VR(xR)∆=−2γVR(xR), (67)
using (60) and (63).
If the initial point (at time t0) satisfies∥xR(t0)∥</radicalig
λmin(K)
λmax(K)η, then by (60),
b=λmin(K)η2>λmax(K)∥xR(t0)∥2≥VR(xR(t0)),
which implies the initial point xR(t0)is insideχb. Assuming an initial point in χb\χc, and integrating (67)
in time interval [t0,t], we get
VR(xR(t))≤VR(xR(t0))e−2γ(t−t0). (68)
Hence,λmin(K)∥xR(t)∥2≤V R(xR(t))≤V R(xR(t0))e−2γ(t−t0)≤λmax(K)∥xR(t0)∥2e−2γ(t−t0)as long as
xR(t)remains outside of χc. SincedVR
dtis always negative outside of χc, any trajectory starting outside of it,
must enter χcin finite time. Let the trajectory starting at xR(t0)entersχcfor the first time at time tc+t0.
Then, we have
∥xR(t)∥≤/radicaligg
λmax(K)
λmin(K)e−γ(t−t0)∥xR(t0)∥=λe−γ(t−t0)∥xR(t0)∥,∀t0≤t<tc+t0.(69)
Once a trajectory enters χc, it cannot escape χcbecausedVR
dtis negative on the boundary. Therefore, all
points of a trajectory after t≥tc+t0satisfiesλmin(K)∥xR(t)∥2≤VR(xR(t))≤c, equivalently,
∥xR(t)∥≤/radicaligg
λmax(K)
λmin(K)µ=2δ
αθ/parenleftigg
λmax(K)
λmin(K)/parenrightigg3/2
=2δ
αθλ3,∀t≥tc+t0. (70)
From (67), (69) and (70), we have γ=α(1−θ)λmin(K)
2λmax(K)andλ=/radicalig
λmax(K)
λmin(K). ■
B Details on reaction–diffusion system experiment
B.1 Dataset
We use FEniCS (Logg et al. (2012)), an open-source computing platform for solving PDEs using the finite
element method, with Python interface to generate the dataset. For the reaction-diffusion system of (34),
we generate 100training sequences of length 50with time step size 0.01and256nodes in I. The initial
conditions and actuations of these sequences are given by
q(ζ,0) =|a|4/summationdisplay
k=0bkTk(ζ), ζ∈I, (71)
and
w(ti) = 10gimax
ζ|q(ζ,ti−1)|, i= 1,2,···,49, (72)
whereTkdenotes the kthChebyshev polynomial of the first kind, and a∼ N (0,1),bk,gi∼ U(−1,1)
are chosen randomly. Similarly, 100sequences are generated for the test set to evaluate the prediction
performance.
27Under review as submission to TMLR
Conv -1D, k:3, n:32, s:2
ReLU
Conv -1D, k:3, n:2, s:2
FC, n:64
ReLU
FC, n:rx, no bias
FC, n:64
ConvT -1D, k:3, n:32, s:2
ConvT -1D, k:3, n:1, s:2FC, n:128
ReLUReLUFC, n:100
ReLU
FC, n:100
ReLU
FC, n:rx, no biasFC, n:100
ReLU
FC, n:100
ReLU
FC, n:rxConcatConcat
Copy+
+
+
−zeros
actuationfull state
reduced 
state
State Encoder State Decoder
ROMℰ𝒙 𝒟𝒙
ℱFC, n:100
ReLU
FC, n:100
ReLU
FC, n:rx, no biasreduced state
FC, n:100
ReLU
FC, n:100
ReLU
FC, n:1reduced statetarget time derivative
actuation
Controller ΠStability Criterion
Target Dynamics ℱ𝑠 
Integrator
Conv -1D : 1D convolution
ConvT -1D : 1D transposed convolution
FC: fully connected
k : kernel size
n : # features (for FC) or feature maps (for Conv)
s : stride1×𝑟𝑥1×𝑟𝑥
1×𝑟𝑥
1×11×1
1×11×256
1×256 next full state1×𝑟𝑥ℱforced
ℱforcedℱauto
Figure 12: Architectures for all the DNN modules used in the reaction–diffusion experiment. The ‘Copy’
operation denotes the reuse of the same DNN block for zero and nonzero actuation. The ‘Concat’ operator
concatenates the input features along the last dimension. Zeros are concatenated to the reduced state to
evaluate the component Fforced/parenleftbig
xR,0/parenrightbig
. The ‘Integrator’ performs the numerical integration for (21). The
‘Stability Criterion’ block implements (28).
B.2 DNN architectures
Figure 12 shows the DNN architectures used for different modules in the reaction–diffusion experiment. The
stateencodercomprises1Dconvolutionallayers, followedbyfullyconnectedlayers. Thestatedecoderhasthe
reversed order with convolutional layers replaced by transposed convolutional layers. The ROM is designed
bybreakingthefunction Fintotwocomponents: F/parenleftbig
xR,uR/parenrightbig
=Fauto/parenleftbig
xR/parenrightbig
+Fforced/parenleftbig
xR,uR/parenrightbig
−Fforced/parenleftbig
xR,0/parenrightbig
.
Fautorepresents the autonomous dynamics that does not depend on the actuation, whereas Fforcedis respon-
sible for the impact of actuation on dynamics. The composition Fforced/parenleftbig
xR,uR/parenrightbig
−Fforced/parenleftbig
xR,0/parenrightbig
ensures that
the component responsible for learning the impact of actuation on the dynamics provides nonzero output
only when the actuation is nonzero. Two multilayer perceptions (MLPs) are used to implement Fautoand
Fforced. This specific structure of the ROM is not crucial and a single neural network representing F/parenleftbig
xR,uR/parenrightbig
works as well. However, we observe better performance in experiments when the aforementioned structure
is used. The output of the ROM is integrated using a numerical integrator to get the next state. The
controller is implemented using an MLP. The target dynamics is implemented using another MLP, followed
by a stability criterion in the form of (28).
B.3 Training settings
We userx= 5in the prediction task and rx= 2in the control task for all the methods. All modules are
implemented in PyTorch. In both of the learning phases, learning ROM and learning controller, we use the
Adam optimizer with an initial learning rate of 0.001and apply an exponential scheduler with a decay of
28Under review as submission to TMLR
0.99. Modules are trained for 100epochs in mini-batches of size 32.10%of the training data is used for
validation to choose the best set of models. For DeepROM training, we use β2= 1in (22). For learning
control, we use β3= 0.2in (26),α= 0.2in (28), andK= 0.5Irxin (29). Since the learned ROMs from one
training instance to another can vary, the hyperparameter pair ( α,β3) may require re-tuning accordingly.
C Details on vortex shedding suppression experiment
C.1 Dataset
For the flow past a circular cylinder problem, the geometry and physical parameters of the system are taken
from the DFG 2D-2 benchmark (Schäfer et al. (1996)). The geometry is shown in Figure 13. We use the
blue-shaded region for observation and actuation. Following the DFG 2D-2 benchmark, we use the no-slip
boundary condition of zero velocity for the walls and the cylinder boundary, zero outlet pressure, and the
inflow velocity profile (at the inlet) as
v(ζ,t) =/parenleftbigg
1.54ζ2(0.41−ζ2)
0.412,0/parenrightbigg
, (73)
whereζ1andζ2denote the horizontal and vertical coordinates, respectively, of ζ. We use kinematic viscosity
ν= 0.002and density ρ= 1leading to the Reynolds number Re= 50. The training sequence of length 5000
is generated in FEniCS with a time step size 0.001and applying actuations
w(ζ,t) =a4/summationdisplay
k=0/bracketleftbigsin(kπ(ζ1−0.11)/0.66) sin(kπζ2/0.41)/bracketrightbig/bracketleftbiggbk,1,1bk,2,1
bk,1,2bk,2,2/bracketrightbigg
,ζ∈W, (74)
wherea∼ U(0,1)andbk,i,j∼ U(−1,1),i,j = 1,2are chosen randomly. Similarly, a test sequence is
generated to evaluate the prediction performance. For learning control, we use the Stokes flow or creeping
flow as the desired state, which can be obtained by solving the Stokes equations
ν∇2v−1
ρ∇p=0,∇·v=0inI×R+. (75)
For training, the flow velocity data from the observation region (blue shaded in Figure 13) are interpolated
onto a rectangular uniform grid of size 32×48so that it can be used in standard CNNs.
2.20.41
0.20.20.11 0.66
0.1inlet
outletwall
wall
Figure 13: Geometry of the flow past a circular cylinder set-up.
C.2 DNN architectures
Figure 14 shows the DNN architectures used for different modules in the vortex shedding control experiment.
The architectures for the ROM and target dynamics are the same as in the previous example. Moreover, the
state encoder and decoder have similar architectures as the previous example except for the 1D convolutions
and transposed convolutions are replaced by their 2D counterparts. Here, an additional module is used:
the control encoder for encoding the distributed control/actuation. It has the same architecture as the
29Under review as submission to TMLR
Conv -2D, k:3, n:32, s:2
ReLU
Conv -2D, k:3, n:2, s:1
FC, n:64
ReLU
FC, n:rx, no bias
FC, n:64
ConvT -2D, k:3, n:32, s:2
ConvT -2D, k:3, n:2, s:2FC, n:192
ReLUReLUFC, n:100
ReLU
FC, n:100
ReLU
FC, n:rx, no biasFC, n:100
ReLU
FC, n:100
ReLU
FC, n:rxConcat
Copy+
+
+
−reduced 
state
State Encoder State Decoder ℰ𝒙 𝒟𝒙FC, n:100
ReLU
FC, n:100
ReLU
FC, n:rx, no biasreduced state
FC, n:100
ReLU
FC, n:100
ReLU
FC, n:rureduced statetarget time derivative
coefs
Controller ΠStability Criterion
Target Dynamics ℱ𝑠 
IntegratorConv -2D, k:3, n:32, s:2
ReLU
ConvT -2D, k:3, n:32, s:1
ReLUConv -2D, k:3, n:32, s:2
ReLU
Conv -2D, k:3, n:2, s:1
FC, n:64
ReLU
FC, n:ru, no biasfull actuation
Control Encoder ℰ𝒖Conv -2D, k:3, n:32, s:2
ReLU
reduced 
actuation
Concatzeros
reduced 
state
ROMℱ
FC, n:64
ReLU
FC, n:64
ReLU
FC, n:2ru
Split⊙
⊙
full actuationcoefs
Concatactuation nodes
Conv -2D : 2D convolution
ConvT -2D : 2D transposed convolution
FC: fully connected
k : kernel size
n : # features (for FC) or feature maps (for Conv)
s : stride
N : # actuation nodes
: dot product⊙2×32×48 full state 2×32×48
2×32×48 2×32×48 next full state1×𝑟𝑥1×𝑟𝑥
1×𝑟𝑥1×𝑟𝑢
1×𝑟𝑥1×𝑟𝑢
𝑁×21×𝑟𝑥ℱforcedℱauto
ℱforced
Figure 14: Architectures for all the DNN modules used in the fluid flow experiment. The ‘Split’ operator
splits the input features into two vectors, along the last dimension. These split vectors represent the space-
dependent polynomial basis associated with the horizontal and vertical components of the actuation.
state encoder. To learn the distributed actuation, we design the controller as a linear combination of space-
dependent polynomial basis functions. One MLP is used to learn these space-dependent polynomial basis
functions given the locations of the actuation nodes and another MLP is used to learn the corresponding
coefficients. The actuation is computed as the dot product of the polynomial basis terms and the coefficient
vector. We use this architecture instead of a standard convolutional one because the PDE solver takes the
actuation input in a triangular mesh, not in a uniform rectangular grid. The polynomial basis architecture
can be used to compute actuation in both uniform rectangular grid during training and triangular mesh
during evaluation.
C.3 Training settings
We userx= 5in both the prediction task and control task for all the methods. All modules are implemented
inPyTorch. Inbothofthelearningphases, learningROMandlearningcontroller, weusetheAdamoptimizer
with an initial learning rate of 0.001and apply an exponential scheduler with a decay of 0.99. Modules are
trained for 100epochs in mini-batches of size 32.10%of the training data is used for validation to choose
the best set of models. For DeepROM training, we use β2= 1in (22). For learning control, we use β3= 2
in (26),α= 0.1in (28), and K= 0.5Irxin (29). Since the learned ROMs from one training instance to
another can vary, the hyperparameter pair ( α,β3) may require re-tuning accordingly.
30Under review as submission to TMLR
D Architecture and training details for the Deep Koopman model
For the encoder and decoder of the Deep Koopman model, we use the same architectures as our state encoder
and state decoder. As mentioned in section 5.1, we consider both the system and input matrices of the ROM
to be fixed during operation, in contrast to the original method proposed by Morton et al. (2018). Therefore,
during training, these matrices are treated as trainable global parameters. Similar to Morton et al. (2018),
theinputmatrixisoptimizedbygradientdescentduringtrainingalongwiththeencoder-decoderparameters,
whereas the system matrix is obtained using linear least-squares regression. The datasets are divided into
staggered 32-step sequences for training, and the model is trained by generating recursive predictions over 32
steps following Morton et al. (2018). We train the model using the Adam optimizer with an initial learning
rate of 0.001and an exponential decay of 0.99for200epochs in mini-batches of size 8.10%of the training
data is used for validation to choose the best set of models.
As mentioned in 5.3.3, we utilize a low-dimensional representation of the distributed actuation for Deep
Koopman + LQR, instead of directly estimating the high-dimensional actuation. The distributed actuation
is represented as a linear combination of the same space-dependent sinusoidal basis functions used for dataset
generation, whicharegivenby(74). Thecontrollerisdesignedtoestimatethecoefficients bk,i,j;i,j= 1,2; 0≤
k≤4.
31