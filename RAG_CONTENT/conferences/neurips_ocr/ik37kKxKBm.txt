In-Context Learning with Representations:
Contextual Generalization of Trained Transformers
Tong Yang∗
CMUYu Huang†
UPennYingbin Liang‡
OSUYuejie Chi§
CMU
Abstract
In-context learning (ICL) refers to a remarkable capability of pretrained large
language models, which can learn a new task given a few examples during inference.
However, theoretical understanding of ICL is largely under-explored, particularly
whether transformers can be trained to generalize to unseen examples in a prompt,
which will require the model to acquire contextual knowledge of the prompt for
generalization. This paper investigates the training dynamics of transformers by
gradient descent through the lens of non-linear regression tasks. The contextual
generalization here can be attained via learning the template function for each
task in-context, where all template functions lie in a linear space with mbasis
functions. We analyze the training dynamics of one-layer multi-head transformers
to in-contextly predict unlabeled inputs given partially labeled prompts, where
the labels contain Gaussian noise and the number of examples in each prompt
are not sufficient to determine the template. Under mild assumptions, we show
that the training loss for a one-layer multi-head transformer converges linearly
to a global minimum. Moreover, the transformer effectively learns to perform
ridge regression over the basis functions. To our knowledge, this study is the
first provable demonstration that transformers can learn contextual (i.e., template)
information to generalize to both unseen examples and tasks when prompts contain
only a small number of query-answer pairs.
1 Introduction
Transformers [Vaswani et al., 2017] have achieved tremendous successes in machine learning,
particularly in natural language processing, by introducing self-attention mechanisms that enable
models to capture long-range dependencies and contextualized representations. In particular, these
self-attention mechanisms endow transformers with remarkable in-context learning (ICL) capabilities,
allowing them to adapt to new tasks or domains by simply being prompted with a few examples
that demonstrate the desired behavior, without any explicit fine-tuning or updating of the model’s
parameters [Brown et al., 2020].
A series of papers have empirically studied the underlying mechanisms behind in-context learning in
transformer models [Garg et al., 2022, V on Oswald et al., 2023, Wei et al., 2023, Olsson et al., 2022,
Xie et al., 2021, Chen and Zou, 2024, Agarwal et al., 2024], which have shown that transformers
can predict unseen examples after being prompted on a few examples. The pioneering work of
∗Department of Electrical and Computer Engineering, Carnegie Mellon University; email:
tongyang@andrew.cmu.edu .
†Department of Statistics and Data Science, Wharton School, University of Pennsylvania; email:
yuh42@wharton.upenn.edu .
‡Department of Electrical and Computer Engineering, The Ohio State University; email:
liang.889@osu.edu .
§Department of Electrical and Computer Engineering, Carnegie Mellon University; email:
yuejiechi@cmu.edu .
38th Conference on Neural Information Processing Systems (NeurIPS 2024).Garg et al. [2022] showed empirically that transformers can be trained from scratch to perform
in-context learning of simple function classes, providing a theoretically tractable in-context learning
framework. Following this well-established framework, several works have investigated various
properties of in-context learning in transformers. For instance, studies have explored generalization
and stability [Li et al., 2023], expressive power [Bai et al., 2024, Akyürek et al., 2022, Giannou et al.,
2023], causal structures [Nichani et al., 2024, Edelman et al., 2024], statistical properties [Xie et al.,
2021, Jeon et al., 2024], to name a few.
In particular, analysis from an optimization perspective can provide valuable insights into how these
models acquire and apply knowledge that enable in-context learning. A few works [Huang et al.,
2023, Chen et al., 2024, Li et al., 2024, Nichani et al., 2024] thus studied the training dynamics of
shallow transformers with softmax attention in order to in-context learn simple tasks such as linear
regression [Huang et al., 2023, Chen et al., 2024], binary classification tasks [Li et al., 2024], and
causal graphs [Nichani et al., 2024]. Their theoretical analyses illuminated how transformers, given
an arbitrary query token, learn to directly apply the answer corresponding to it from the query-answer
pairs that appear in each prompt. Therefore, they all require the sequence length of each prompt
to be large enough so that all query-answer pairs have been seen in each prompt with sufficiently
high probability, whereas practical prompts are often too short to contain many query examples.
This suggests that in-context learning can exploit inherent contextual information of the prompt to
generalize to unseen examples, which further raise the following intriguing theoretical question:
How do transformers learn contextual information from more general function classes to predict
unseen examples given prompts that contain only partial examples?
Since our paper studies ICL of non-linear function regression, the function mapping (which we
also term as “template”) naturally serves as the “contextual information” that can be learned for
generalization to unseen examples. When each prompt contains only a small number of (noisy)
examples, the template that generates the labels may be underdetermined , i.e., multiple templates
could generate the same labels in the prompt. Such an issue of underdetermination further raises a
series of intriguing questions, such as:
When the template that generates a prompt is underdetermined, what is the transformer’s preference
for choosing the template and how good is such a choice?
1.1 Our contributions
In this paper, we answer the above questions by analyzing the training dynamics of a one-layer
transformer with multi-head softmax attention through the lens of non-linear regression tasks. In
our setting, the template function for each task lies in the linear space formed by mnearly-arbitrary
basis functions that capture representation (i.e., features) of data. Our goal is to provide insights on
how transformers trained by gradient descent (GD) acquire template information from more general
function classes to generalize to unseen examples and tasks when each prompt contains only a small
number of query-answer pairs. We summarize our contributions are as follows.
•We first establish the convergence guarantee of a one-layer transformer with multi-head
softmax attention trained with gradient descent on general non-linear regression in-context
learning tasks. We assume each prompt contains only a few (i.e., partial) examples with
their Gaussian noisy labels, which are not sufficient to determine the template. Under mild
assumptions, we establish that the training loss of the transformer converges at a linear
rate. Moreover, by analyzing the limit point of the transformer parameters, we are able to
uncover what information about the basic tasks the transformer extracts and memorizes
during training in order to perform in-context prediction.
•We then analyze the transformer’s behavior at inference time after training, and show that
the transformer chooses its generating template by performing ridge regression over the
basis functions. We also provide the iteration complexity for pretraining the transformer
to reach ε-precision with respect to its choice of the template given an arbitrary prompt
at inference time. We further compare the choice of the transformer and the best possible
choice over the template class and characterize how the sequence length of each prompt
influences the inference time performance of the model.
2•Under more realistic assumptions, our analysis framework allows us to overcome a handful
of assumptions made in previous works such as large prompt length [Huang et al., 2023,
Chen et al., 2024, Li et al., 2024, Nichani et al., 2024], orthogonality of data [Huang et al.,
2023, Chen et al., 2024, Li et al., 2024, Nichani et al., 2024], restrictive initialization
conditions [Chen et al., 2024], special structure of the transformer [Nichani et al., 2024],
and mean-field models [Kim and Suzuki, 2024]. Further, the function classes we consider
are a generalization of those considered in most theoretical works [Huang et al., 2023, Chen
et al., 2024, Li et al., 2024, Wu et al., 2023, Zhang et al., 2023a]. We also highlight the
importance of multi-head attention mechanism in this process.
To our best knowledge, this is the firstwork that analyzes how transformers learn contextual (i.e.,
template) information to generalize to unseen examples and tasks when prompts contain only a small
number of query-answer pairs. Table 1 provides a detailed comparison with existing theoretical works
in terms of settings, training analysis and generalization of in-context learning.
Referencenonlinear
attentionmulti
headtask
shiftGD
convergencenoisy
datarepresentation
learning
Wu et al. [2023] ✗ ✗ ✓ ✓ ✓ ✗
Zhang et al. [2023a] ✗ ✗ ✓ ✓ ✓ ✗
Huang et al. [2023] ✓ ✗ ✓ ✓ ✗ ✗
Li et al. [2024] ✓ ✗ ✓ ✓ ✓ ✗
Chen et al. [2024] ✓ ✓ ✗ ✗ ✓ ✗
Kim and Suzuki [2024] ✗ ✗ ✓ ✗ ✗ ✓
Ours ✓ ✓ ✓ ✓ ✓ ✓
Table 1: Comparisons with existing theoretical works that study the learning dynamics of transformers
in ICL. Here, the last column refers to the fact that the response in the regression task is generated by
a linearly weighted unknown representation (feature) model.
1.2 Related work
In-context learning. Recent research has investigated the theoretical underpinnings of transformers’
ICL capabilities from diverse angles. For example, several works focus on explaining the in-context
learning of transformers from a Bayesian perspective [Xie et al., 2021, Ahuja et al., 2023, Han et al.,
2023, Jiang, 2023, Wang et al., 2023, Wies et al., 2024, Zhang et al., 2023b, Jeon et al., 2024, Hahn
and Goyal, 2023]. Li et al. [2023] analyzed the generalization and stability of transformers’ in-context
learning. Focusing on the representation theory, Akyürek et al. [2022], Bai et al. [2024] studied
the expressive power of transformers on the linear regression task. Akyürek et al. [2022] showed
by construction that transformers can represent GD of ridge regression or the closed-form ridge
regression solution. Bai et al. [2024] extended Akyürek et al. [2022] and showed that transformers
can implement a broad class of standard machine learning algorithms in-context. Dai et al. [2022],
V on Oswald et al. [2023] showed transformers could in-context learn to perform GD.
More pertinent to our work, Guo et al. [2023] considered an ICL setting very similar to ours, where
the label depends on the input through a basis of possibly complex but fixed template functions,
composed with a linear function that differs in each prompt. By construction, the optimal ICL
algorithm first transforms the inputs by the representation function, and then performs linear ICL
on top of the transformed dataset. Guo et al. [2023] showed the existence of transformers that
approximately implement such algorithms, whereas our work is from a different perspective, showing
that (pre)training the transformer loss by GD will naturally yield a solution with the aforementioned
desirable property characterized in Guo et al. [2023].
Training dynamics of transformers performing ICL. A line of work initiated by Garg et al.
[2022] aims to understand the ICL ability of transformers from an optimization perspective. [Zhang
et al., 2023a, Kim and Suzuki, 2024] analyzed the training dynamics of transformers with linear
attention. Huang et al. [2023], Chen et al. [2024], Li et al. [2024] studied the optimization dynamics
of one-layer softmax attention transformers performing simple in-context learning tasks, such as
linear regression [Huang et al., 2023, Chen et al., 2024] and binary classification [Li et al., 2024].
3Among them, Huang et al. [2023] was the first to study the training dynamics of softmax attention,
where they gave the convergence results of a one-layer transformer with single-head attention on
linear regression tasks, assuming context features come from an orthogonal dictionary and each
token in the prompts is drawn from a multinomial distribution. In order to leverage the concentration
property inherent to multinomial distributions, they require the sequence length to be much larger
than the size of dictionary. Their analysis indicates that the prompt tokens that are the same as the
query will have dominating attention weights, which allows the transformer to copy-paste the correct
answer from those prompt tokens.
Li et al. [2024] studied the training of a one-layer single-head transformer in ICL on binary classifica-
tion tasks. Same as Huang et al. [2023], they required the data to be pairwise orthogonal, and shared
the same copy-paste mechanism as in Huang et al. [2023]. To be precise, a fraction of their context
inputs needs to contain the same pattern as the query to guarantee that the total attention weights on
contexts matching the query pattern outweigh those on other contexts.
Chen et al. [2024] studied the dynamics of gradient flow for training a one-layer multi-head softmax
attention model for ICL of multi-task linear regression, where the coefficient matrix has certain
spectral properties. They required the sequence length to be sufficiently large [Chen et al., 2024,
Assumption 2.1], together with restrictive initialization conditions [Chen et al., 2024, Definition
3.1]. While using the copy-paste analysis framework as in Huang et al. [2023], Li et al. [2024], the
attention probability vector in their work is delocalized, so that the attention is spread out to capture
the information from similar tokens in regression tasks. Kim and Suzuki [2024] studied the dynamics
of Wasserstein gradient flow for training a one-layer transformer with an infinite-dimensional fully-
connected layer followed by a linear attention layer for ICL of linear regression, assuming infinite
prompt length. Nichani et al. [2024] analyzed the optimization dynamics of a simplified two-layer
transformer with gradient descent on in-context learning a latent causal graph.
Notation. Boldface small and capital letters denote vectors and matrices, respectively. Sets are
denoted with curly capital letters, e.g., W. We let (Rd,∥·∥)denote the d-dimensional real coordinate
space equipped with norm ∥·∥.Idis the identity matrix of dimension d. The ℓp-norm of vis denoted
by∥v∥p, where 1≤p≤ ∞ , and the spectral norm and the Frobenius norm of a matrix Mare
denoted by ∥M∥2and∥M∥F, respectively. M†stands for the Moore-Penrose pseudoinverse of
matrix M, andM:,istands for its i-th column vector. We let [N]denote {1, . . . , N }, and denote 1N
to represent the all-one vector of length N, and by 0a vector or a matrix consisting of all 0’s. We
allow the application of functions such as exp(·)to vectors or matrices, with the understanding that
they are applied in an element-wise manner. We use eito denote the one-hot vector whose i-th entry
is 1 and the other entries are all 0.
2 Problem Setup
In-context learning with representation. We consider ICL of regression with unknown represen-
tation, similar to the setup introduced in Guo et al. [2023]. To begin, let f:Rd→Rmbe a fixed
representation map that f(x) = ( f1(x),···, fm(x))⊤for any x∈Rd. The map fcan be quite
general, which can be regarded as a feature extractor that will be learned by the transformer. We
assume that each ICL task corresponds to a map λ⊤f(·)that lies in the linear span of those mbasis
functions in f(·), where λis generated according to the distribution Dλ. Thus, for each ICL instance,
the (noisy) label of an input vk(∀k∈[K]) is given as
yk=λ⊤(f(vk) +ϵk),λ∼ Dλ,ϵki.i.d.∼ N (0, τIm) (1)
where τ >0is the noise level.
The goal of ICL is to form predictions on query xquery given in-context labels of the form (1)on
a few inputs, known as prompts . In this paper, we use Vto denote the dictionary set that contains
allKunit-norm distinct tokens, i.e., V:={v1,···,vK} ⊂Rdwith each token ∥vk∥2= 1. We
assume that each prompt P=Pλprovides the first Ntokens (with N≪K) and their labels, and is
embedded in the following matrix
EP:=
v1v2···vN
y1y2··· yN
:=V
y⊤
∈R(d+1)×N, (2)
where
V:= (v1,···,vN)∈Rd×N(3)
4headH
head1
…………
softmax                                    × ×
Value Key QueryT
Figure 1: The structure of a one-layer transformer with multi-head softmax attention.
is the collection of prompt tokens, and y:= (y1,···, yN)⊤is the prompt label. Given the prompt as
the input, the transformer predicts the labels for all the Ktokens y1,···, yKin the dictionary set.
Transformer architecture. We adopt a one-layer transformer with multi-head softmax attention
[Chen et al., 2024] — illustrated in Figure 1 — to predict the labels of all the tokens in the dictionary
V, where His the number of heads. Denote the query embedding as
EQ:=
vN+1vN+2···vK
0 0 ··· 0
∈R(d+1)×(K−N), (4)
and denote the embedding of both the prompt and the query as E:= (EP,EQ)∈R(d+1)×K. We
define the output of each transformer head as
head h(E):=WV
hEP·softmax
(EP)⊤(WK
h)⊤WQ
hE
, h∈[H], (5)
where WQ
h∈Rde×(d+1),WK
h∈Rde×(d+1), andWV
h∈RK×(d+1)are the query, key, and value
matrices, respectively, and the softmax is applied column-wisely, i.e., given a vector input x, thei-th
entry of softmax (x)is given by exi/P
jexj. The attention map of the transformer T(E)is defined
as
T(E):=WO
head 1(E)
...
head H(E)
∈RK×K, (6)
where WOis the output matrix. Following recent theoretical literature to streamline analysis [Huang
et al., 2023, Nichani et al., 2024, Deora et al., 2023, Chen et al., 2024], we assume that the embedding
matrices take the following forms:
WO:= (IK,···,IK)∈RK×HK,WV
h:= (0,wh)∈RK×(d+1), (7a)
(WK
h)⊤WQ
h=
Qh0
00
∈R(d+1)×(d+1),∀h∈[H], (7b)
where wh= (wh,1,···, wh,K)⊤∈RKandQh∈Rd×dare trainable parameters for all h∈[H].
The prediction of the labels is provided by the diagonal entries of T(E), which we denote by
by= (by1,···,byK)∈RK. Note that byktakes the following form under our parameter specification:
∀k∈[K] : byk=D
y,HX
h=1wh,ksoftmax (V⊤Qhvk)E
. (8)
Training via GD. Letθ={Qh,wh}H
h=1denote all trainable parameters of T. Let ϵ:=
(ϵ1,···,ϵK)∈Rm×Kdenote the noise matrix. Given training data over ICL instances, the goal of
training is to predict labels ykfor all vk∈ V. Specifically, we train the transformer using gradient
descent (GD) by optimizing the following mean-squared population loss:
L(θ):=1
2Eλ,ϵ"
1
KKX
k=1(byk−yk)2#
. (9)
5We apply different learning rates ηQ, ηw>0for updating {Qh}H
h=1and{wh}H
h=1, respectively, i.e.,
at the t-th (t≥1) step, we have
∀h∈[H] :Q(t)
h=Q(t−1)
h−ηQ∇QhL(θ(t−1)),w(t)
h=w(t−1)
h−ηw∇whL(θ(t−1)),(10)
where θ(t)={Q(t)
h,w(t)
h}H
h=1is the parameter at the t-th step.
Inference time. At inference time, given a prompt P=PλwithNexamples, where λmay not be
in the support of the generation distribution Dλ, the transformer applies the pretrained parameters
and predicts the labels of all Ktokens without further parameter updating.
3 Theoretical Analysis
3.1 Training time convergence
In this section, we show that the training loss Lconverges to its minimum value at a linear rate during
training, i.e., the function gap
∆(t):=L(θ(t))−inf
θL → 0, t→ ∞ (11)
at a linear rate, under some appropriate assumptions.
Key assumptions. We first state our technical assumptions. The first assumption is on the distribu-
tionDλfor generating the coefficient vector λof the representation maps.
Assumption 1 (Assumption on distribution Dλ).We assume that in (1)each entry λiis drawn
independently and satisfies E[λi] = 0 andE[λ2
i] = 1 for all i∈[m].
To proceed, we introduce the following notation:
Z:= (f(v1)···f(vN))∈Rm×N,¯Z:= 
Z⊤Z+mτIN1/2∈RN×N,¯fmax:= max
i∈[N]∥¯zi∥2,
(12)
where ¯ziis the i-th column vector of ¯Zfori∈[N]. We further define C(t)
k(k∈[K],t∈N+) and
B(t)
kas follows:
C(t)
k:=softmax (V⊤Q(t)
1vk,···,V⊤Q(t)
Hvk)∈RN×H,B(t)
k=¯ZC(t)
k∈RN×H.(13)
To guarantee the convergence, we require the initialization of the parameters θ(0)satisfies the
following condition.
Assumption 2 (Assumption on initialization) .For all k∈[K],B(0)
khas full row rank.
Before stating our main theorem, let us examine when the initialization condition in Assumption 2
is met. Fortunately, we only require the following mild assumption on Vto ensure our parameter
initialization has good properties.
Assumption 3 (Assumption on V).There exists one row vector x= (x1,···, xN)⊤of the prompt
token matrix V(cf.(3)) such that xi̸=xj,∀i̸=j.
Assumption 3 implies that Vhas distinct tokens, i.e., vj̸=vkwhen j̸=k. It is worth noting
that Assumption 3 is the only assumption we have on the dictionary V. In comparison, all other
theoretical works in Table 1 impose somewhat unrealistic assumptions on V. For example, Huang
et al. [2023], Li et al. [2023], Nichani et al. [2024] assume that the tokens are pairwise orthogonal,
which is restrictive since it implies that the dictionary size Kshould be no larger than the token
dimension d, whereas in practice it is often the case that K≫d[Reid et al., 2024, Touvron et al.,
2023]. In addition, Chen et al. [2024], Zhang et al. [2023a], Wu et al. [2023] assume that each token
is independently sampled from some Gaussian distribution, which also does not align with practical
scenarios where tokens are from a fixed dictionary and there often exist (strong) correlations between
different tokens.
The following proposition states that when the number of heads exceeds the number of prompts,
i.e.H≥N, we can guarantee that Assumption 2 holds with probability 1 by simply initializing
{Qh}H
h=1using Gaussian distribution.
6Proposition 1 (Initialization of {Qh}H
h=1).Suppose Assumptions 1, 3 hold and H≥N. For any
fixedβ >0, letQ(0)
h(i, j)i.i.d.∼ N (0, β2), then Assumption 2 holds almost surely.
Proof. See Appendix E.1.
Choice of learning rates. Define
ζ0:= min
k∈[K]n
λmin
B(0)
kB(0)⊤
ko
, (14)
where ∆(0)is the initial function gap (c.f. (11)). Assumption 2 indicates that ζ0>0. Letγbe any
positive constant that satisfies
γ≥ζ−5/4
0 
128√
2√
2−1¯Z2
2√
H¯fmaxK3/2∆(0)!1/2
. (15)
We set the learning rates as
ηQ≤1/L and ηw=γ2ηQ, (16)
where5
L2=
8√
2H√
K∥¯Z∥2
2
ζ0√
∆(0)+ 1 +∥Z⊤bZ∥2
mτ2¯Z4
2·
8
Kγ2+4096
γζ2
0K2N∆(0)
+ 2H2¯Z4
2
γ4
K2+16384
γζ4
0K3¯Z2
2 
∆(0)2
. (17)
Theoretical guarantee. Now we are ready to state our first main result, regarding the training
dynamic of the transformer.
Theorem 1 (Training time convergence) .Suppose Assumptions 1, 2 hold. We let w(0)
k=0and set
the learning rates as in (16). Then we have
L(θ(t))−inf
θL(θ)≤
1−ηwζ0
2Kt
L(θ(0))−inf
θL(θ)
,∀t∈N. (18)
Proof. See Appendix C.
Theorem 1, together with Proposition 1, shows that the training loss converges to its minimum value
at a linear rate, under mild assumptions of the task coefficients and token dictionary. This gives
thefirstconvergence result for transformers with multi-head softmax attention trained using GD to
perform ICL tasks (see Table 1). Our convergence guarantee (18) also indicates that the convergence
speed decreases as the size Kof the dictionary or the number Hof attention heads increases, which is
intuitive because training with a larger vocabulary size or number of parameters is more challenging.
However, a small Hwill limit the expressive power of the model (see Section 3.3 for detailed
discussion), and we require H≥Nto guarantee Assumption 2 holds, as stated in Proposition 1.
3.2 Inference time performance
We now move to examine the inference time performance, where the coefficient vector λcorrespond-
ing to the inference task may not drawn from Dλ. In fact, we only assume that the coefficient vector
λat inference time is bounded as in the following assumption.
Assumption 4 (Boundedness of λat inference time) .We assume that at inference time ∥λ∥2≤B
for some B >0.
For notational simplicity, let ZQ∈Rm×(K−N)denote
ZQ:= (f(vN+1),···, f(vK))∈Rm×(K−N). (19)
The following theorem characterizes the performance guarantee of the transformer’s output by(after
sufficient training) at the inference time.
5We leave a tighter, but more complicated, expression of Lin the appendix (cf. (61)) in the appendix and
present a simplified form in the main paper for readability.
7Theorem 2 (Inference time performance) .Letbλbe the solution to the following ridge regression
problem:
bλ:= arg minλn
1
2NPN
i=1(yi−λ⊤f(vi))2+mτ
2N∥λ∥2
2o
. (20)
Under the assumptions in Theorem 1, for any ε >0andδ∈(0,1), if the number of training iterates
Tsatisfies
T≥log
B2∆(0)
∥Z∥2+√τ
2√
Nlog(1/δ)+2 log(1 /δ)+N1/22.
(mτε)
log(1/(1−ηwζ0
2K)), (21)
then given any prompt Pthat satisfies Assumption 4 at the inference time, with probability at least
1−δ, the output of the transformer bysatisfies
1
2K∥by−by⋆∥2
2≤ε, withby⋆:=y 
ZQ⊤bλ
. (22)
Proof. See Appendix D.
In Theorem 2, (22) shows that after training, the transformer learns to output the given labels of
the first Ntokens in each prompt, and more importantly, predicts the labels of the rest K−N
tokens by implementing the ridge regression given in (20). Note that Akyürek et al. [2022] studied
the expressive power of transformers on the linear regression task and showed by construction that
transformers can represent the closed-form ridge regression solution. Interestingly, here we show
from an optimization perspective that transformers can in fact be trained to do so.
Generalization capabilities of the pretrained transformer. Theorem 2 captures two generaliza-
tion capabilities that the pretrained transformer can have.
i)Contextual generalization to unseen examples: Theorem 2 suggests that the transformer
exploits the inherent contextual information (to be further discussed in Section 3.3) of the
function template in the given prompt, and can further use such information to predict the
unseen tokens.
ii)Generalization to unseen tasks: Theorem 2 also suggests that the pretrained transformer
can generalize to a function map corresponding to any λ∈Rmat the inference time (albeit
satisfying Assumption 4), which is not necessarily sampled from the support of its training
distribution Dλ.
We note that the contextual generalization that the transformer has here is different in nature from the
prediction ability shown in previous works on ICL [Huang et al., 2023, Chen et al., 2024, Li et al.,
2024, Nichani et al., 2024]. Those work focuses on a setting where each prompt contains a good
portion of tokens similar to the query token, allowing the transformer to directly use the label of the
corresponding answers from the prompt as the prediction. However, in practical scenarios, prompts
often contain only partial information, and our analysis sheds lights on explaining how transformers
generalize to unseen examples by leveraging ridge regression to infer the underlying template.
How does the representation dimension affect the performance? Beyond the above discovery,
several questions are yet to be explored. For instance, while we demonstrate that transformers can be
trained to implement ridge regression, how good is the performance of the ridge regression itself?
What is the best choice of ridge regression we could expect? How close is the transformer’s choice to
the best possible choice? We address these questions as follows.
Given any prompt Pat inference time, since there is no label information about the rest K−N
tokens, the best prediction we could hope for from the transformer shall be
bybest:=y 
ZQ⊤bλτ
, (23)
where ZQis defined in (19), and bλτsatisfies:
bλτ:= arg minλE˜ϵh
1
2NPN
i=1(yi−λ⊤(f(vi) +ϵi))2i
. (24)
8In other words, we hope the transformer outputs the given Nlabels as they are. For the rest K−N
labels, the best we could hope for is that the transformer estimates the coefficient vector λby
solving the above regression problem to obtain bλτ, and predict the k-th label by bλ⊤
τf(vk)for
k=N+ 1,···, K. Note that (24) is equivalent to the following ridge regression problem (see
Lemma 4 in the appendix for its derivation):
bλτ= arg minλn
1
2NPN
i=1(yi−λ⊤f(vi))2+τ
2∥λ∥2
2o
. (25)
The only difference between the two ridge regression problems (20) and(25) is the coefficient of the
regularization term. This indicates that at the training time, the transformer learns to implement ridge
regression to predict the labels of the rest K−Ntokens, assuming the noise level is given bym
Nτ.
This observation also reflects how the sequence length Naffects the transformer’s preference for
choosing templates and its performance at inference time:
•The closer mis toN, the closer the transformer’s choice of templates is to the best possible
choice, and the better the transformer’s prediction will be;
• When N < m , the transformer tends to underfit by choosing a λwith small ℓ2-norm;
•When N > m , the transformer tends to overfit since it underestimates the noise level and in
turn captures noise in the prediction.
3.3 Further interpretation
We provide more interpretation on our results, which may lead to useful insights into the ICL ability
of the transformer.
How does the transformer gain ICL ability with representations? Intuitively speaking, our
pretrained transformer gains in-context ability by extracting and memorizing some “inherent in-
formation” of all basic function maps fi(i∈[m]) during the training. Such information allows
it to infer the coefficient vector λfrom the provided labels in each prompt and calculate the inner
product ⟨λ, f(vk)⟩to compute ykgiven any token vk∈ V at inference time. To be more specific,
the “inherent information” of all basic tasks could be described by the N-by-Kmatrix Adefined as
follows (see also (34)):
A:= 
Z⊤Z+mτIN−1
Z⊤bZ+ (mτIN,0)
∈RN×K,
where bZ:= (f(v1),···, f(vK)) = (Z,ZQ)∈Rm×K. During training, the transformer learns to
approximate A:,kbyPH
h=1wh,ksoftmax (V⊤Qhvk)for each k∈[K].
To further elaborate, we take a closer look at the special case when the labels do not contain any
noise, i.e., τ= 0, and N≥m. In this case, Abecomes Z†bZ, and given any prompt P=Pλ, the
coefficient vector λcould be uniquely determined from the provided token-label pairs in the prompt.
It is straightforward to verify that the label of each token vkcould be represented by the inner product
of the given label vector yand the k-th column of Z†bZ, i.e.,
yk=D
y,Z†bZ:,kE
. (26)
Comparing the above equation with (8), it can be seen that in order to gain the in-context ability, the
transformer needs to learn an approximation of Z†bZ:,kbyPH
h=1wh,ksoftmax (V⊤Qhvk)for each
k∈[K].
More generally, in the proof of Theorem 2, we show that
by⋆
k=⟨y,A:,k⟩, (27)
comparing which with (8) suggests that a small training error implies thatPH
h=1wh,ksoftmax (V⊤Qhvk)is close to A:,k. In fact, this is the necessary and sufficient
condition for the training loss to be small. A rigorous argument is provided in Lemma 5.
9The necessity and trade-offs of multi-head attention mechanism. Multi-head attention mech-
anism is essential in our setting. In fact, it is generally impossible to train a shallow trans-
former with only one attention head to succeed in the ICL task considered in our paper. This
is because, as we have discussed above, the key for the transformer is to approximate A:,kbyPH
h=1wh,ksoftmax (V⊤Qhvk)for each k∈[K]. IfH= 1, the transformer could not approximate
eachA:,kbyw1,ksoftmax (V⊤Q1vk)in general since the entries of the latter vector are either all
positive or all negative. In addition, Proposition 1 indicates that when H≥N, the weights of the
transformer with a simple initialization method satisfy our desired property that is crucial to guarantee
the fast linear convergence. However, (18) implies that we should not set Hto be too large, since
larger Hyields slower convergence rate.
4 Conclusion
We analyze the training dynamics of a one-layer transformer with multi-head softmax attention
trained by gradient descent to solve complex non-linear regression tasks using partially labeled
prompts. In this setting, the labels contain Gaussian noise, and each prompt may include only a few
examples, which are insufficient to determine the underlying template. Our work overcomes several
restrictive assumptions made in previous studies and proves that the training loss converges linearly
to its minimum value. Furthermore, we analyze the transformer’s strategy for addressing the issue
of underdetermination during inference and evaluate its performance by comparing it with the best
possible strategy. Our study provides the first analysis of how transformers can acquire contextual
(template) information to generalize to unseen examples when prompts contain a limited number of
query-answer pairs.
Acknowledgments and Disclosure of Funding
The work of T. Yang and Y . Chi is supported in part by the grants NSF CCF-2007911, DMS-2134080
and ONR N00014-19-1-2404. The work of Y . Liang was supported in part by the U.S. National
Science Foundation under the grants ECCS-2113860, DMS-2134145 and CNS-2112471.
References
R. Agarwal, A. Singh, L. M. Zhang, B. Bohnet, S. Chan, A. Anand, Z. Abbas, A. Nova, J. D.
Co-Reyes, E. Chu, et al. Many-shot in-context learning. arXiv preprint arXiv:2404.11018 , 2024.
K. Ahuja, M. Panwar, and N. Goyal. In-context learning through the bayesian prism. arXiv preprint
arXiv:2306.04891 , 2023.
E. Akyürek, D. Schuurmans, J. Andreas, T. Ma, and D. Zhou. What learning algorithm is in-context
learning? investigations with linear models. arXiv preprint arXiv:2211.15661 , 2022.
Y . Bai, F. Chen, H. Wang, C. Xiong, and S. Mei. Transformers as statisticians: Provable in-context
learning with in-context algorithm selection. Advances in neural information processing systems ,
36, 2024.
T. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam,
G. Sastry, A. Askell, et al. Language models are few-shot learners. Advances in neural information
processing systems , 33:1877–1901, 2020.
S. Chen, H. Sheen, T. Wang, and Z. Yang. Training dynamics of multi-head softmax attention for
in-context learning: Emergence, convergence, and optimality. arXiv preprint arXiv:2402.19442 ,
2024.
X. Chen and D. Zou. What can transformer learn with varying depth? case studies on sequence
learning tasks. arXiv preprint arXiv:2404.01601 , 2024.
D. Dai, Y . Sun, L. Dong, Y . Hao, S. Ma, Z. Sui, and F. Wei. Why can gpt learn in-context? language
models implicitly perform gradient descent as meta-optimizers. arXiv preprint arXiv:2212.10559 ,
2022.
10P. Deora, R. Ghaderi, H. Taheri, and C. Thrampoulidis. On the optimization and generalization of
multi-head attention. arXiv preprint arXiv:2310.12680 , 2023.
B. L. Edelman, S. Goel, S. Kakade, and C. Zhang. Inductive biases and variable creation in self-
attention mechanisms. In International Conference on Machine Learning , pages 5793–5831.
PMLR, 2022.
B. L. Edelman, E. Edelman, S. Goel, E. Malach, and N. Tsilivis. The evolution of statistical induction
heads: In-context learning markov chains. arXiv preprint arXiv:2402.11004 , 2024.
S. Garg, D. Tsipras, P. S. Liang, and G. Valiant. What can transformers learn in-context? a case study
of simple function classes. Advances in Neural Information Processing Systems , 35:30583–30598,
2022.
A. Giannou, S. Rajput, J.-y. Sohn, K. Lee, J. D. Lee, and D. Papailiopoulos. Looped transformers as
programmable computers. In International Conference on Machine Learning , pages 11398–11442.
PMLR, 2023.
T. Guo, W. Hu, S. Mei, H. Wang, C. Xiong, S. Savarese, and Y . Bai. How do transformers learn
in-context beyond simple functions? a case study on learning with representations. arXiv preprint
arXiv:2310.10616 , 2023.
M. Hahn and N. Goyal. A theory of emergent in-context learning as implicit structure induction.
arXiv preprint arXiv:2303.07971 , 2023.
C. Han, Z. Wang, H. Zhao, and H. Ji. In-context learning of large language models explained as
kernel regression. arXiv preprint arXiv:2305.12766 , 2023.
Y . Huang, Y . Cheng, and Y . Liang. In-context convergence of transformers. arXiv preprint
arXiv:2310.05249 , 2023.
H. J. Jeon, J. D. Lee, Q. Lei, and B. Van Roy. An information-theoretic analysis of in-context learning.
arXiv preprint arXiv:2401.15530 , 2024.
H. Jiang. A latent space theory for emergent abilities in large language models. arXiv preprint
arXiv:2304.09960 , 2023.
H. Karimi, J. Nutini, and M. Schmidt. Linear convergence of gradient and proximal-gradient methods
under the Polyak-Łojasiewicz condition. In European Conference on Machine Learning and
Knowledge Discovery in Databases , pages 795–811, 2016.
J. Kim and T. Suzuki. Transformers learn nonlinear features in context. In ICLR 2024 Workshop on
Mathematical and Empirical Understanding of Foundation Models , 2024.
B. Laurent and P. Massart. Adaptive estimation of a quadratic functional by model selection. Annals
of statistics , pages 1302–1338, 2000.
H. Li, M. Wang, S. Lu, X. Cui, and P.-Y . Chen. Training nonlinear transformers for efficient in-context
learning: A theoretical learning and generalization analysis. arXiv preprint arXiv:2402.15607 ,
2024.
Y . Li, M. E. Ildiz, D. Papailiopoulos, and S. Oymak. Transformers as algorithms: Generalization
and stability in in-context learning. In International Conference on Machine Learning , pages
19565–19594. PMLR, 2023.
Q. N. Nguyen and M. Mondelli. Global convergence of deep networks with one wide layer followed
by pyramidal topology. Advances in Neural Information Processing Systems , 33:11961–11972,
2020.
E. Nichani, A. Damian, and J. D. Lee. How transformers learn causal structure with gradient descent.
arXiv preprint arXiv:2402.14735 , 2024.
C. Olsson, N. Elhage, N. Nanda, N. Joseph, N. DasSarma, T. Henighan, B. Mann, A. Askell, Y . Bai,
A. Chen, et al. In-context learning and induction heads. arXiv preprint arXiv:2209.11895 , 2022.
11M. Reid, N. Savinov, D. Teplyashin, D. Lepikhin, T. Lillicrap, J.-b. Alayrac, R. Soricut, A. Lazaridou,
O. Firat, J. Schrittwieser, et al. Gemini 1.5: Unlocking multimodal understanding across millions
of tokens of context. arXiv preprint arXiv:2403.05530 , 2024.
H. Touvron, L. Martin, K. Stone, P. Albert, A. Almahairi, Y . Babaei, N. Bashlykov, S. Batra,
P. Bhargava, S. Bhosale, et al. Llama 2: Open foundation and fine-tuned chat models. arXiv
preprint arXiv:2307.09288 , 2023.
A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, Ł. Kaiser, and I. Polosukhin.
Attention is all you need. Advances in neural information processing systems , 30, 2017.
J. V on Oswald, E. Niklasson, E. Randazzo, J. Sacramento, A. Mordvintsev, A. Zhmoginov, and
M. Vladymyrov. Transformers learn in-context by gradient descent. In International Conference
on Machine Learning , pages 35151–35174. PMLR, 2023.
X. Wang, W. Zhu, M. Saxon, M. Steyvers, and W. Y . Wang. Large language models are implicitly
topic models: Explaining and finding good demonstrations for in-context learning. In Workshop
on Efficient Systems for Foundation Models@ ICML2023 , 2023.
J. Wei, J. Wei, Y . Tay, D. Tran, A. Webson, Y . Lu, X. Chen, H. Liu, D. Huang, D. Zhou, et al. Larger
language models do in-context learning differently. arXiv preprint arXiv:2303.03846 , 2023.
N. Wies, Y . Levine, and A. Shashua. The learnability of in-context learning. Advances in Neural
Information Processing Systems , 36, 2024.
J. Wu, D. Zou, Z. Chen, V . Braverman, Q. Gu, and P. L. Bartlett. How many pretraining tasks are
needed for in-context learning of linear regression? arXiv preprint arXiv:2310.08391 , 2023.
S. M. Xie, A. Raghunathan, P. Liang, and T. Ma. An explanation of in-context learning as implicit
bayesian inference. arXiv preprint arXiv:2111.02080 , 2021.
R. Zhang, S. Frei, and P. L. Bartlett. Trained transformers learn linear models in-context. arXiv
preprint arXiv:2306.09927 , 2023a.
Y . Zhang, F. Zhang, Z. Yang, and Z. Wang. What and how does in-context learning learn? bayesian
model averaging, parameterization, and generalization. arXiv preprint arXiv:2305.19420 , 2023b.
120 25 50 75 100 125 150 175 200
Iteration number101
100101LossTraining Loss
Inference Loss (in-domain)
Inference Loss (ood)(a) 1-layer transformer
0 25 50 75 100 125 150 175 200
Iteration number101
100101LossTraining Loss
Inference Loss (in-domain)
Inference Loss (ood) (b) 4-layer transformer
Figure 2: Training and inference losses of (a) 1-layer and (b) 4-layer transformers, which validate
Theorem 2, as well as the transformer’s contextual generalization to unseen examples and to unseen
tasks.
A Experiments
This section aims to provide some empirical validation to our theoretical findings and verify that
some of our results could be generalized to deeper transformers.
Setup. We conduct experiments on a synthetic dataset, where we randomly generate each token
vkand their representation f(vk)from standard Gaussian distribution. We employ both the 1-layer
transformer described in Section 2 and a standard 4-layer transformer in Vaswani et al. [2017] with
dmodel= 256 anddff= 512 . We set the training loss to be the population loss defined in (9), and
initialize {Q(0)
h}h∈[H]using standard Gaussian and set {w(0)
h}h∈[H]to be 0, identical to what is
specified in Section 3. We generate λfrom standard Gaussian distribution to create the training set
with10000 samples and in-domain test set with 200samples; we also create an out-of-domain (ood)
test set with 200samples by sampling λfromN(1m,4Im). Given λ, we generate the label ykof
token vkusing (1), fork∈[K]. We train with a batch size 256. All experiments use the Adam
optimizer with a learning rate 1×10−4.
Training and inference performance. We set N= 30 ,K= 200 ,d= 100 ,m= 20 , and set H
to be 64and8for 1-layer and 4-layer transformers, respectively. Figure 2 shows the training and
inference losses of both 1-layer and 4-layer transformers, where we measure the inference loss by
1
K∥by−by⋆∥2
2to validate (22): after sufficient training, the output of the transformer byconverges to
by⋆. From Figure 2 we can see that for both 1-layer and 4-layer transformers, the three curves have
the same descending trend, despite the inference loss on the ood dataset is higher than that on the
in-domain dataset. This experiment also shows the transformer’s contextual generalization to unseen
examples and to unseen tasks, validating our claim in Section 3.2.
Figure 3 plots the performance gap1
Kby⋆−bybest2
2of the one-layer transformer with respect to
different Nranging from 50to150, when we fix m= 100 andτ= 0.01. This verifies that the ridge
regression implemented by the pretrained transformer has a better performance when mis close to
N, again verifying our claim at the end of Section 2.
Impact of the number of attention heads. We now turn to examine the impact of the number of
attention heads. In this experiment, we use the population loss (9), and set the other configurations
same as those in Figure 2. Figure 4 shows the training loss curves for different Hwith respect the
iteration number, which validates our claims. From Figure 4, we can see that we need to set Hlarge
enough to guarantee the convergence of the training loss. However, setting Htoo large ( H= 400 )
leads to instability and divergence of the loss. Recall that in Proposition 1, we require H≥Nto
guarantee our convergence results hold. Although this condition may not be necessary, Figure 4
shows that when H < N = 30 , the loss stopped descending even when it is far from the minimal
value. On the other side, the loss keeps descending when H= 30 (though slowly).
1360 80 100 120 140
N (Number of examples in prompt)104
103
102
1
K||y ybest||2
2
m = 100Figure 3: The performance gap1
Kby⋆−bybest2
2with different Nwhen m= 100 , which validates
that the closer Nis tom, the better the transformer’s prediction is.
0 100 200 300 400 500 600
Iteration number103
102
101
100101Population LossH=1
H=5
H=10
H=20
H=30
H=40
H=50
H=150
H=400
Figure 4: Training losses of the 1-layer transformer with different number of attention heads H,
where Hshould be large enough to guarantee the convergence of the training loss, but setting Htoo
large leads to instability and slower divergence.
We also explore how Haffects the training of the 4-layer transformer, as displayed in Figure 5,
where we set K= 200 and the configurations other than Hare the same as in Figure 3. We fix the
wall-clock time to be 100 seconds and plot the training loss curves with different H. Figure 5 (a)
shows the final training and inference losses with respect to H. It reflects that the losses converge
faster with smaller H(here the final training loss is the smallest when H= 4). The training curves
in Figure 5 (b) corresponding to different Hwithin 100s may provide some explanation to this
phenomenon: (i) transformers with larger Hcould complete less iterations within a fixed amount of
time (the curves corresponding to larger Hare shorter); (ii) the training loss curves corresponding to
large H(H= 32,64) descend more slowly. This suggests our claim that larger Hmay yield slower
convergence rate is still valid on deeper transformers. Note that unlike the 1-layer transformer, deeper
transformers don’t require a large Hto guarantee convergence. This is because deeper transformers
have better expressive power even when His small.
B Proof Preparation
B.1 Summary of key notation
We summarize the frequently used notation in Table 2 for ease of reference.
B.2 Auxiliary lemmas
We provide some useful facts that will be repeatedly used later on. Let
zk:=f(vk) = (f1(vk), f2(vk),···, fm(vk))⊤∈Rm,∀k∈[K].
Recalling (12), we can rewrite
Z:= (z1,···,zN)∈Rm×N.
We further define sh
k∈RNas follows:
sh
k:=softmax (V⊤Qhvk) = (sh
1k,···, sh
Nk)⊤,∀k∈[K], h∈[H]. (28)
140 10 20 30 40 50 60
Number of Attention Heads (H)101
100101Final Loss
Training Loss
Inference Loss (in-domain)
Inference Loss (ood)(a) final losses vs H
0 5 10 15 20 25 30 35
Iteration100101Training LossH=1
H=2
H=4
H=8
H=16
H=32
H=64 (b) training loss curves for different H
Figure 5: Training losses of a 4-layer transformer with different H, fixing wall-clock time to be 100s.
This experiment shows that unlike 1-layer transformers, deeper transformers don’t require Hto be
large to guarantee convergence of the loss.
notation meaning
K∈N+ total number of tokens
d∈N+ token dimension
m∈N+ number of basic tasks
H∈N+ number of attention heads
N∈N+ number of examples in each prompt
vk∈Rd,k∈[K] thek-th token
fi:Rd→R,i∈[m] thei-th basic task
λ∈Rmcoefficient vector
yk=λ⊤(f(vk) +ϵk), k∈[K] thek-th label
Table 2: Notation for key parameters.
Lemma 1 (Softmax gradient) .For all j∈[N], k∈[K]andh∈[H], we have
∂sh
jk
∂Qh=sh
jkNX
i=1sh
ik(vj−vi)v⊤
k, (29)
where sh
jkis defined in (28).
Proof. See the proof of Lemma A.1 in Huang et al. [2023].
Lemma 2 (Smoothness of softmax) .For vectors ξ1,ξ2∈Rl, we have
∥softmax (ξ1)−softmax (ξ2)∥1≤2∥ξ1−ξ2∥∞. (30)
Proof. See Corollary A.7 in Edelman et al. [2022].
We also need to make use of the following form of Young’s inequality.
Lemma 3. For any x1,···,xl∈Rp, we have
lX
i=1xi2
2≤llX
i=1∥xi∥2
2. (31)
The following lemma shows the equivalence between (24) and (25).
Lemma 4 (Equivalence of the regression problems) .Given any prompt Pλ:= (v1, y1,···,vN, yN),
we have the following equivalence:
Eϵ"
1
2NNX
i=1(yi−λ⊤(f(vi) +ϵi))2#
=1
2NNX
i=1(yi−λ⊤f(vi))2+τ
2∥λ∥2
2. (32)
15Proof. See Appendix E.2.
C Proof of Theorem 1
We first outline the proof. To prove Theorem 1, we first remove the expectation in the expression
of the loss function Lin(9)by reformulating it to a deterministic form (see Lemma 5). With this
new form, we show by induction that the loss function Lis smooth (Lemma 10) and satisfies the
Polyak-Łojasiewicz (PL) condition (c.f. (49)). Provided with both smoothness and PL conditions, we
are able to give the desired linear convergence rate [Karimi et al., 2016].
We define
δθ
k:=(PH
h=1wh,ksh
k− 
Z⊤Z+mτI−1(zk+mτek),ifk∈[N],PH
h=1wh,ksh
k− 
Z⊤Z+mτI−1zk, ifk∈[K]\[N].(33)
We also define the following matrices:
A:= 
Z⊤Z+mτIN−1
Z⊤bZ+ (mτIN,0)
∈RN×K, (34)
bA(θ):= HX
h=1wh,1sh
1,···,HX
h=1wh,Ksh
K!
∈RN×K, (35)
wherebZ:= (z1,···,zK)∈Rm×K.
We first reformulate the loss function to remove the expectation in the population loss.
Lemma 5 (Reformulation of the loss function) .Under Assumption 1, the loss function L(θ)could
be rewritten into the following equivalent form:
L(θ) =1
2KKX
k=1 
Z⊤Z+mτI1/2δθ
k2
2+L⋆=1
2KKX
k=1¯Zδθ
k2
2+L⋆, (36)
where
L⋆=1
2KNX
k=1
− 
Z⊤zk+mτek⊤ 
Z⊤Z+mτI−1 
Z⊤zk+mτek
+∥zk∥2
2+mτ
+1
2KKX
k=N+1
− 
Z⊤zk⊤ 
Z⊤Z+mτI−1 
Z⊤zk
+∥zk∥2
2
is a constant that does not depend on θ, and ¯Zis defined in (12).
Proof. See Appendix E.3.
Lemma 5 indicates that L⋆is a lower bound of L. We’ll later show that L⋆is actually the infimum of
L, i.e.,L⋆= inf θL(θ).
Lemma 5 also indicates that, the necessary and sufficient condition for L(θ(t))to converge to L⋆
during training is
∀k∈[K] :δθt
k→0, t→ ∞ , (37)
which folllows immediately that (37) is equivalent to
bA(θ(t))−A→0, t→ ∞ . (38)
To simplify the analysis, we introduce the following reparameterization to unify the learning rates of
all parameters, and we’ll consider the losses after reparameterization in the subsequent proofs.
Lemma 6 (Reparameterization) .Define
γ:=q
ηw/ηQ,αh:=wh/γ,∀h∈[H], (39)
16and let
ξ:={Qh,αh}H
h=1, ℓ(ξ):=L(θ). (40)
Then (10) is equivalent to
ξ(t)=ξ(t−1)−ηQ∇ξℓ(ξ(t−1)),∀t∈[T]. (41)
Proof. See Appendix E.4.
We denote αasα:= (αh,k)h∈[H],k∈[K]∈RH×K.
The following lemma bounds the gradient norms by the loss function, which is crucial to the proof of
Theorem 1.
Lemma 7 (Upper bound of the gradient norms) .Suppose Assumption 1 holds and |α(t)
h,k| ≤α. Then
for all h∈[H], we have∂ℓ(ξ(t))
∂Q(t)
h
F≤2√
2γα¯fmaxq
ℓ(ξ(t))− L⋆. (42)
Proof. See Appendix E.5.
Now we are ready to give the main proof.
Proof of Theorem 1. To prove Theorem 1, it suffices to prove that under our assumptions, we have
(Upper bound of the parameters:)α(t)
h
2≤α, (43a)
(Lower bound of eigenvalues:) λmin
B(t)
kB(t)⊤
k
≥ζ0
2, (43b)
(Linear decay of the loss:) L(θ(t))− L⋆≤
1−ηQσ
2t
L(θ(0))− L⋆
,(43c)
where
σ:=ζ0γ2
K, α :=√
2K4¯Z
2
γζ0q
L(θ(0))− L⋆, (44)
andγ,αhis defined in (39),ζ0is defined in (14). We shall prove (43a) ,(43b) and(43c) by induction.
Base case. It is apparent that (43a),(43b) and (43c) all hold when t= 0.
Induction. We make the following inductive hypothesis, i.e., when s∈[t−1],(43a) ,(43b) and
(43c) hold. Below we prove that (43a),(43b) and (43c) hold when s=tby the following steps.
Step 1: verify (43b) and the Polyak-Łojasiewicz condition. We first compute the gradient of the
loss w.r.t. α:
∀k∈[K] :∂ℓ(ξ)
∂αk=1
2K∂
∂αk¯Zδθ
k2
2=1
2K∂
∂αk¯Z(γCkαk−A:k)2
2
=γ
K ¯ZCk⊤¯Zδθ
k=γ
KB⊤
k¯Zδθ
k, (45)
where the first equality follows from Lemma 5, Ck,Bkis defined in (13).
Letbh
kdenote the h-th column vector of Bk,h∈[H], i.e.,Bk:= (b1
k,···,bH
k), then for any
k∈[K]andt∈N+, we have(bh
k)(t)−(bh
k)(0)
2≤¯Z
2(sh
k)(t)−(sh
k)(0)
2
≤¯Z
2(sh
k)(t)−(sh
k)(0)
1
≤2¯Z
2V⊤(Q(t)
h−Q(0)
h)vk
∞
≤2¯Z
2max
j∈[N]|v⊤
j(Q(t)
h−Q(0)
h)vk|
≤2¯Z
2Q(t)
h−Q(0)
h
F, (46)
17where the third line uses Lemma 2, and that
∀h∈[H] :Q(t)
h−Q(0)
h
F≤t−1X
s=0η∂ℓ(ξ(s))
∂Q(s)
h
F
≤t−1X
s=02√
2ηγα¯fmaxq
ℓ(ξ(s))− L⋆
≤2√
2ηγα¯fmaxq
L(θ(0))− L⋆t−1X
s=0r
1−ησ
2s
≤8√
2γα¯fmax
σq
L(θ(0))− L⋆, (47)
where the second inequality follows from Lemma 7 (cf. (42)) and the third inequality follows from
the inductive hypothesis and the fact that ℓ(ξ(s)) =L(θ(s)),∀s. Combining (47) with (46), we have
B(t)
k−B(0)
k
F≤2¯Z
2vuutHX
h=1Q(t)
h−Q(0)
h2
F
≤¯Z
2√
H16√
2γα¯fmax
σq
L(θ(0))− L⋆
≤
1−1/√
2p
ζ0, (48)
where the last inequality follows from (15). The above inequality (48) indicates that
∀x∈RK:x⊤B(t)
k
2≥x⊤B(0)
k
2−x⊤(B(t)
k−B(0)
k)
2≥p
ζ0/2,
which gives (43b).
Therefore, we obtain the following PL condition:
∇θℓ(ξ(t))2
F≥KX
k=1HX
h=1∂ℓ(ξ)
∂αh,k2
=γ2
K2KX
k=1
¯Zδ(t)
k⊤
B(t)
kB(t)⊤
k¯Zδ(t)
k
≥ζ0γ2
2K2KX
k=1¯Zδ(t)
k2
2=σ
ℓ(ξ(t))− L⋆
, (49)
where the equality comes from (45), and the last equality follows from (36).
Step 2: verify the smoothness of the loss function. We first give the following lemma that bounds
the Lipschitzness of bh
kandδθ
k, which will be used later on. For notation simplicity, we let B,Q,α
denote B(θ),Q(θ),α(θ), respectively, and let B′,Q′,α′denote B(θ′),Q(θ′),α(θ′), respectively.
Lemma 8 (Lipschitzness of bh
kandδθ
k).For all k∈[K]andh∈[H], and all transformer parameters
θ,θ′, ifmax{|αh,k|,|α′
h,k|} ≤α, then we have
bh
k(θ)−bh
k(θ′)
2≤2¯Z
2∥Qh−Q′
h∥F, (50)
δθ
k−δθ′
k
2≤2γ√
HαvuutHX
h=1∥Qh−Q′
h∥2
F+γ√
H∥αk−α′
k∥2. (51)
Proof. (50) follows from a similar argument in (46). Regarding the Lipschitzness of δθ
k, we have
δθ
k−δθ′
k
2=γHX
h=1αh,k(sh
k(θ)−sh
k(θ′)) +HX
h=1(αh,k−α′
h,k)sh
k(θ′)
2
≤γHX
h=1|αh,k|sh
k(θ)−sh
k(θ′)
2+γHX
h=1|αh,k−α′
h,k|sh
k(θ′)
2
≤2γ√
HαvuutHX
h=1∥Qh−Q′
h∥2
F+γ√
H∥αk−α′
k∥2,
18where we use (46) again to bound the first term in the second line, and use the fact thatsh
k(θ′)
2≤1
and Cauchy-Schwarz inequality to bound the second term in the second line.
We also need the following lemma which bounds the norm of Bkandδθ
k.
Lemma 9 (Upper bounds of bh
kandδθ
k).For all k∈[K]andh∈[H], ifmax{|αh,k|,|α′
h,k|} ≤α,
then we have
bh
k
2≤¯Z
2, (52)δθ
k
2≤γHα +∥A∥2, (53)
where Ais defined in (34).
Proof. (52) follows frombh
k
2≤¯Z
2sh
k
2≤¯Z
2.
(53) follows from
δθ
k
2≤γHX
h=1|αh,k|sh
k
2+∥Aek∥2≤γHα +∥A∥2.
As a consequence of Lemma 8 and Lemma 9, For all k∈[K], and all transformer parameters θ,θ′,
ifmax{|αh,k|,|α′
h,k|} ≤α, we have
∥∇αkℓ(ξ)− ∇αkℓ(ξ′)∥2
(45)=γ
K(Bk−B′
k)⊤¯Zδθ
k+B′
k⊤¯Z(δθ
k−δθ′
k)
2
≤γ
K¯Z
2∥Bk−B′
k∥Fδθ
k
2+γ
K¯Z
2∥B′
k∥Fδθ
k−δθ′
k
2
≤γ
K·2¯Z2
2(2γHα +∥A∥2)vuutHX
h=1∥Qh−Q′
h∥2
F+γ2
KH¯Z2
2∥αk−α′
k∥2, (54)
from which we obtain the smoothness of the ℓw.r.t.αas follows:
∥∇αℓ(ξ)− ∇αℓ(ξ′)∥2
F
=KX
k=1∥∇αkℓ(ξ)− ∇αkℓ(ξ′)∥2
2
≤2Kγ
K·2¯Z2
2(2γHα +∥A∥2)2HX
h=1∥Qh−Q′
h∥2
F+ 2γ4
K2H2¯Z4
2∥α−α′∥2
F
≤21
K
2γ¯Z2
2(2γHα +∥A∥2)2
+γ4
K2H2¯Z4
2
∥ξ−ξ′∥2
2, (55)
where the first inequality uses Young’s inequality (c.f. Lemma 3).
To obtain the smoothness of the loss function w.r.t. Qh, we first note that by (82) we have
∂ℓ(ξ)
∂Qh=γ
KKX
k=1NX
j=1 ¯Zδθ
k⊤zj·αh,ksh
jkNX
i=1sh
ik(vj−vi)v⊤
k. (56)
19Therefore, if max{|αh,k|,|α′
h,k|} ≤α, we have
∂ℓ(ξ)
∂Qh−∂ℓ(ξ′)
∂Qh
F≤2γ¯fmax
KKX
k=1NX
j=1¯Z
2δθ
k−δθ′
k
2·αsh
jk(θ)NX
i=1sh
ik(θ)
+NX
j=1¯Z
2δθ′
k
2|αh,k−α′
h,k|sh
jk(θ)NX
i=1sh
ik(θ)
+NX
j=1¯Z
2δθ′
k
2α|sh
jk(θ)−sh
jk(θ′)|NX
i=1sh
ik(θ)
+NX
j=1¯Z
2δθ′
k
2αsh
jk(θ′)NX
i=1|sh
ik(θ)−sh
ik(θ′)|
≤2γ¯fmax¯Z
2
KKX
k=1δθ
k−δθ′
k
2α+δθ′
k
2|αh,k−α′
h,k|
+δθ′
k
2αNX
j=1|sh
jk(θ)−sh
jk(θ′)|+δθ′
k
2αNX
i=1|sh
ik(θ)−sh
ik(θ′)|
≤2γ¯fmax¯Z
2
KKX
k=1δθ
k−δθ′
k
2α+δθ′
k
2|αh,k−α′
h,k|
+ 2δθ′
k
2α√
Nsh
k(θ)−sh
k(θ′)
2
, (57)
where the third inequality uses Cauchy-Schwarz inequality. Combining the above inequality (57)
with Lemma 8 and Lemma 9, we have
∂ℓ(ξ)
∂Qh−∂ℓ(ξ′)
∂Qh
F≤2γ¯fmax¯Z
2
K
αγ√
H
2KαvuutHX
h=1∥Qh−Q′
h∥2
F+√
K∥α−α′∥F

+ (γHα +∥A∥2)√
Kαh,:−α′
h,:
2
+ (γHα +∥A∥2)·2α√
N·2K∥Q′
h−Qh∥F
, (58)
where the last line uses (46) to boundsh
k(θ)−sh
k(θ′)
2. The above inequality (58) further gives
HX
h=1∥∇Qhℓ(ξ)− ∇Qhℓ(ξ′)∥2
F
≤8·γ¯fmax¯Z
2
K
(2Kα)2h
(αγH)2+ 4N(αγH +∥A∥2)2iHX
h=1∥Qh−Q′
h∥2
F
+Kh
(αγH)2+ (αγH +∥A∥2)2i
∥α−α′∥2
F
≤8γ¯fmax¯Z
2·maxn
1,(2√
Kα)2oh
(αγH)2+ 4N(αγH +∥A∥2)2i
∥ξ′−ξ∥2
2,(59)
where the first inequality makes use of Young’s inequality (c.f. Lemma 3).
Combining the above two relations (55) and (59), we obtain the smoothness of ℓw.r.t.ξas follows:
Lemma 10 (Smoothness of the loss function) .Letγ:=p
ηw/ηQ. For all transformer parameters
ξ,ξ′, ifmax{|αh,k|,|α′
h,k|} ≤α, then we have
∥∇ξℓ(ξ)− ∇ξℓ(ξ′)∥2≤L∥ξ−ξ′∥2, (60)
where
L2= 21
K
2γ¯Z2
2(2γHα +∥A∥2)2
+γ4
K2H2¯Z4
2
+ 8γ¯fmax¯Z
2·maxn
1,(2√
Kα)2oh
(αγH)2+ 4N(αγH +∥A∥2)2i
.(61)
20Step 3: verify (43a) .(45) implies
∂ℓ(ξ)
∂αh,k=γ
K(bh
k)⊤¯Zδθ
k,
which, combining with (52), gives
∀k∈[K], h∈[H] :∂ℓ(ξ)
∂αh,k2
≤γ2
K2¯Z2
2¯Zδθ
k2
2.
Combining this with (36) we obtain
ℓ(ξ)
∂αh2
2≤¯Z2
22γ2
K(ℓ(ξ)− L⋆),
which indicates∂ℓ(ξ)
∂αh
2≤¯Z
2γr
2
K(ℓ(ξ)− L⋆). (62)
Therefore, we have
α(t)
h
2=α(0)
h−ηQt−1X
i=0∂ℓ(ξ(i))
∂αh
2
≤α(0)
h
2+ηQt−1X
i=0∂ℓ(ξ(i))
∂αh
2
≤α(0)
h
2+ηQ¯Z
2r
2γ2
Kt−1X
i=0q
ℓ(ξ(i))− L⋆
≤α(0)
h
2+ηQ¯Z
2s
2γ2 
L(θ(0))− L⋆
Kt−1X
i=0r
1−ηQσ
2i
≤α(0)
h
2+ηQ¯Z
2s
2γ2 
L(θ(0))− L⋆
K·4
ηQσ,
where the second inequality follows from (62) and the third inequality follows from the induction
hypothesis (43c) .(43a) follows from plugging σdefined in (44) into the above inequality and using
the initializtion condition that α(0)=1
γw(0)=0.
Step 4: verify the linear convergence rate (43c) .Combining (43a) ,(60) and Lemma 4.3 in
Nguyen and Mondelli [2020], we have
ℓ(ξ(t))− L⋆≤ℓ(ξ(t−1))− L⋆+⟨∇ξℓ(ξ(t−1)),ξ(t)−ξ(t−1)⟩+L
2ξ(t)−ξ(t−1)2
2, (63)
which indicates when ηQ≤1/L, we have
ℓ(ξ(t))− L⋆≤ℓ(ξ(t−1))− L⋆−ηQ
2∇ξℓ(ξ(t−1))2
F(49)
≤
1−ηQσ
2
ℓ(ξ(t−1))− L⋆
,(64)
which, combined with the fact that L(θ(s)) =ℓ(ξ(s))for all s(see Lemma 6), verifies (43c).
Note that (36) implies that L⋆≤ L(θ)holds for all θ. And from (43c) we know that L(θ(t))→ L⋆
ast→ ∞ . Therefore, it follows that
L⋆= inf
θL(θ).
Consequently, (43c) is equivalent to (18).
21D Proof of Theorem 2
By (43c) we know that L(θ(t))→ L⋆ast→ ∞ . Thus from (36) we know that (37) and (38) hold.
By Sherman-Morrison-Woodbury formula, we have
 
mτIN+Z⊤Z−1=1
mτIN−1
mτZ⊤ 
mτIm+ZZ⊤−1Z. (65)
Thus we have
A(34)= 
Z⊤Z+mτIN−1
Z⊤bZ+ (mτIN,0)
(65)=1
mτ
IN−Z⊤ 
mτIm+ZZ⊤−1Z
Z⊤bZ+ (mτIN,0)
=1
mτ
Z⊤eZ+ (mτIN,0)−Z⊤ 
mτIm+ZZ⊤−1 
mτIm+ZZ⊤eZ
+mτZ⊤ 
mτIm+ZZ⊤−1eZ−mτZ⊤ 
mτIm+ZZ⊤−1(Z,0)
= (IN,0) +Z⊤ 
mτIm+ZZ⊤−1(0,ZQ)
=
IN,Z⊤ 
mτIm+ZZ⊤−1ZQ
, (66)
where ZQis defined in (19).
On the other hand, it’s straightforward to verify that bλdefined in (20) admits the following closed
form:
bλ= 
mτIm+ZZ⊤−1Zy. (67)
Combining the above two equations, we obtain
A⊤y=y 
ZQ⊤ 
mτIm+ZZ⊤−1Zy
=y 
ZQ⊤bλ
=by⋆,
where the last equality follows from (22).
Now we give the iteration complexity for the mean-squared error between the prediction byand the
limit point by⋆to be less than ε. Given any prompt P=Pλ, where λsatisfies Assumption 4, we have
yi=λ⊤(zi+ϵi)∼ N(λ⊤zi,∥λ∥2
2τ).
Letting xi=yi−λ⊤zi
∥λ∥2√τ, we have xi∼ N(0,1). Define
Z=NX
i=1∥λ∥2
2τ(x2
i−1) =y−Z⊤λ2
2−Nτ∥λ∥2
2.
By Laurent and Massart [2000, Lemma 1], we have
∀s >0 :P
Z≥2√
N∥λ∥2
2τ√s+ 2∥λ∥2
2τs
≤exp (−s).
By letting s= log(1 /δ)and using the definition of Z, we have
Py−Z⊤λ2
2≥Nτ∥λ∥2
2+ 2p
Nlog(1/δ)∥λ∥2
2τ+ 2∥λ∥2
2τlog(1/δ)
≤δ. (68)
Thus with probability at least 1−δ, we have
∥y∥2≤Z⊤λ
2+y−Z⊤λ
2
≤Z⊤λ
2+∥λ∥2√τ
N+ 2p
Nlog(1/δ) + 2 log(1 /δ)1/2
≤B
∥Z∥2+√τ
N+ 2p
Nlog(1/δ) + 2 log(1 /δ)1/2
. (69)
22where we use (68) in the second inequality, and the third inequality follows from Assumption 4.
On the other hand, by (36) we have
L(θ(t)) =1
2K¯Z(bA−A)2
2+L⋆≥mτ
2KbA−A2
2+L⋆,
which gives
bA−A
2≤r
2K
mτ 
L(θ(T))− L⋆
≤r
2K
mτ 
L(θ(0))− L⋆
1−γ2ηQζ0
2KT/2
. (70)
Thus we know that w.p. at least 1−δ, we have
1
2K∥by−by⋆∥2
2=1
2K
bA−A⊤
y2
2≤1
2KbA−A2
2∥y∥2
2≤ε,
where the last relation follows from (69), (70) and (21).
E Proof of Key Lemmas
E.1 Proof of Proposition 1
For notation simplicity we drop the superscript (0)in the subsequent proof.
LetDk:= 
V⊤Q1vk,···,V⊤QHvk
∈RN×H. Note that
Dk=V⊤Q=V⊤(q1,···,qH),where Q(i, j)i.i.d.∼ N (0, β2∥vk∥2
2),∀i∈[d], j∈[H].
(71)
This suggests the column vectors of Dkare i.i.d. and the density of each column vector is positive at
any point x∈ R(V), where R(V)⊂RNis the row space of V.
Since ¯Zhas full rank, to prove Bkhas full rank a.s., we only need to argue that Ck(:,1 :N)has full
rank w.p. 1. Below we prove this by contradiction (recall that by definition Ck=softmax (Dk), and
we assume H≥N).
Suppose w.p. larger than 0, there exists one of Ck(:,1 :N)’s column vector that could be linearly
represented by its other N−1column vectors. Without loss of generality, we assume this colomn
vector is Ck(:,1) = softmax (Dk(:,1)). Letx=x(q1):= exp( Dk(:,1)) = exp( V⊤q1). Then x
could be linearly represented by exp(Dk(:, i)),i= 2,···, N.
Let˜A:= exp( Dk(:,2 :N)), then w.p. larger than 0,x∈ C(˜A), where C(˜A)is the column vector
space of ˜A. i.e., we haveZ
RN×(m−1)P(x∈ C(˜A)|˜A)dµ(˜A)>0,
which further indicates that there exists ˜A∈RN×(N−1)such that P(x∈ C(˜A))>0. Since the
dimension of C(˜A)is at most N−1, there exists y∈RN,y̸=0such that y⊥C(˜A). Therefore, we
have
P(y⊤x= 0) >0. (72)
By Assumption 3, without loss of generality, we assume that u1= (v11, v12,···, v1N)⊤has different
entries. For any vector w= (w1,···, wd)⊤∈Rd, we let ˜w= (w2,···, wd)⊤∈Rd−1denote the
vector formed by deleting the first entry of w. Letq1= (q,˜q⊤
1)⊤. For any fixed ˜q1∈Rd−1, the
function g(·|˜q1) :R→Rdefined by
g(q|˜q1):=NX
i=1yieqv1i+˜q⊤
1˜vi=NX
i=1yie˜q⊤
1˜vieqv1i=
y,exp(V⊤q1)
=⟨y,x(q1)⟩
has finite zero points and thus {q∈R|g(q|˜q1) = 0}is a zero-measure set. Therefore, we have
P(⟨y,x⟩= 0) =Z
Rd−1P(g(q|˜q1) = 0|˜q1)dµ(˜q1) = 0 ,
which contradicts (72). Therefore, Ck(:,1 :N)has full rank with probability 1.
23E.2 Proof of Lemma 4
Lemma 4 can be verified by the following direct computation (recall that the noise in each label
satisfies ϵii.i.d∼ N (0, τIm),∀i∈[N]):
Eϵ"
1
2NNX
i=1(yi−λ⊤(f(vi) +ϵi))2#
=Eϵ"
1
2NNX
i=1 
(yi−λ⊤f(vi))2−2λ⊤ϵi(yi−λ⊤f(vi)) +λ⊤ϵiϵ⊤
iλ#
=1
2NNX
i=1
(yi−λ⊤f(vi))2+τ∥λ∥2
2
=1
2NNX
i=1(yi−λ⊤f(vi))2+τ
2∥λ∥2
2.
E.3 Proof of Lemma 5
We let ϵP:= (ϵ1,···,ϵN)∈Rm×N,ϵ:= (ϵ1,···,ϵK)∈Rm×K. Recall that y=
(y1,···, yN)⊤∈RN. Then we have
y= (Z+ϵP)⊤λ, (73)
and
L(θ) =1
KKX
k=1Lk(θ) =1
2Eλ,ϵ"
1
KKX
k=1(byk−yk)2#
(74)
=1
2KKX
k=1Eλ,ϵy⊤bak−λ⊤(zk+ϵk)2
2
=1
2KKX
k=1Eλ,ϵλ⊤(Z+ϵP)bak−λ⊤(zk+ϵk)2
2
=1
2KKX
k=1Eλ,ϵ
(Z+ϵP)bak−(zk+ϵk)⊤λλ⊤
(Z+ϵP)bak−(zk+ϵk)
=1
2KKX
k=1Eϵ
(Z+ϵP)bak−(zk+ϵk)⊤
(Z+ϵP)bak−(zk+ϵk)
=1
2KKX
k=1Eϵh
∥Zbak−zk∥2
2+ 2(Zbak−zk)⊤(ϵPbak−ϵk) +ϵPbak−ϵk2
2i
,(75)
wherebakdenote the k-th column vector of matrix bA(θ)defined in (35), and the fifth line uses
Assumption 1.
Note that for all k∈[K], we have
Eϵ(Zbak−zk)⊤(ϵPbak−ϵk) = 0 , (76)
and that
EϵϵPbak−ϵk2
2=mτ
∥bak∥2
2+ 1
−2mτbakk 1{k∈[N]}, (77)
where 1{k∈[N]}is the indicator function that equals 1 if k∈[N]and 0 otherwise, and we have
made use of the assumption that ϵki.i.d.∼ N (0, τ2Im).
Combining the above two equations with (75), we know that for k∈[N], it holds that
Lk(θ) =1
2
∥Zbak−zk∥2
2+mτ∥bak−ek∥2
2
.
24Reorganizing the terms in the RHS of the above equation, we obtain that
Lk(θ) =1
2 
Z⊤Z+mτI1/2
bak− 
Z⊤Z+mτI−1 
Z⊤zk+mτek2
2+1
2ck,(78)
where ck=− 
Z⊤zk+mτek⊤ 
Z⊤Z+mτI−1 
Z⊤zk+mτek
+∥zk∥2
2+mτ.
By a similar argument, we can show that for k∈[K]\[N], it holds thet
Lk(θ) =1
2 
Z⊤Z+mτI1/2
bak− 
Z⊤Z+mτI−1Z⊤zk2
2+1
2c′
k, (79)
where c′
k=− 
Z⊤zk⊤ 
Z⊤Z+mτI−1 
Z⊤zk
+∥zk∥2
2.
(78), (79) together with (33) and the definition of L⋆give (36).
E.4 Proof of Lemma 6
First, it holds that
Q(t)
h=Q(t−1)
h−ηQ∇Qhℓ(ξ(t−1)) =Q(t−1)
h−ηQ∇Qhℓ(ξ(t−1)). (80)
Second, note that
w(t)
h=w(t−1)
h−ηw∇whL(θ(t−1))
=γα(t−1)
h−γ2·1
γηQ∇αhℓ(ξ(t−1))
=γ
α(t−1)
h−ηQ∇αhℓ(ξ(t−1))
.
Dividing both sides of the above equality by γ, we have
α(t)
h=α(t−1)
h−ηQ∇αhℓ(ξ(t−1)). (81)
Hence, (41) follows from combining (80) and (81).
E.5 Proof of Lemma 7
Throughout this proof, we omit the superscript (t)for simplicity. We first compute the gradient of L
w.r.t.Qh. By (36) we know that
ℓ(ξ) =L(θ) =1
2KKX
k=1¯Zδk2
2,
and thus we have
∂ℓ(ξ)
∂Qh=1
KKX
k=1NX
j=1∂
∂δjk
1
2NX
i=1δik¯zi2
2
∂δjk
∂Qh
=γ
KKX
k=1NX
j=1 ¯Zδk⊤¯zj·αh,ksh
jkNX
i=1sh
ik(vj−vi)v⊤
k
| {z }
=:Gh,jk. (82)
Note thatGh,jk
F≤2αsh
jk, (83)
25where we use the fact that(vj−vi)v⊤
k
2≤2(recall that we assume each vkhas unit norm,
k∈[K].) Combining (82) and (83), we have the desired result
∂ℓ(ξ)
∂Qh
F≤γ
KKX
k=1NX
j=1¯Zδk
2∥¯zj∥2Gh,jk
F
≤2γ
KKX
k=1NX
j=1¯Zδk
2¯fmaxαsh
jk
≤2γ¯fmaxα
K√
KvuutKX
k=1¯Zδk2
2
≤2√
2γ¯fmaxαp
ℓ(ξ)− L⋆, (84)
where ¯fmaxis defined in (12) and the third line follows from Cauchy-Schwarz inequality.
26NeurIPS Paper Checklist
1.Claims
Question: Do the main claims made in the abstract and introduction accurately reflect the
paper’s contributions and scope?
Answer: [Yes]
Justification: we clearly state in the abstract and introduction the claims we made, including
the contributions made in the paper and important assumptions and limitations.
Guidelines:
•The answer NA means that the abstract and introduction do not include the claims
made in the paper.
•The abstract and/or introduction should clearly state the claims made, including the
contributions made in the paper and important assumptions and limitations. A No or
NA answer to this question will not be perceived well by the reviewers.
•The claims made should match theoretical and experimental results, and reflect how
much the results can be expected to generalize to other settings.
•It is fine to include aspirational goals as motivation as long as it is clear that these goals
are not attained by the paper.
2.Limitations
Question: Does the paper discuss the limitations of the work performed by the authors?
Answer: [Yes]
Justification: we clearly state our assumptions.
Guidelines:
•The answer NA means that the paper has no limitation while the answer No means that
the paper has limitations, but those are not discussed in the paper.
• The authors are encouraged to create a separate "Limitations" section in their paper.
•The paper should point out any strong assumptions and how robust the results are to
violations of these assumptions (e.g., independence assumptions, noiseless settings,
model well-specification, asymptotic approximations only holding locally). The authors
should reflect on how these assumptions might be violated in practice and what the
implications would be.
•The authors should reflect on the scope of the claims made, e.g., if the approach was
only tested on a few datasets or with a few runs. In general, empirical results often
depend on implicit assumptions, which should be articulated.
•The authors should reflect on the factors that influence the performance of the approach.
For example, a facial recognition algorithm may perform poorly when image resolution
is low or images are taken in low lighting. Or a speech-to-text system might not be
used reliably to provide closed captions for online lectures because it fails to handle
technical jargon.
•The authors should discuss the computational efficiency of the proposed algorithms
and how they scale with dataset size.
•If applicable, the authors should discuss possible limitations of their approach to
address problems of privacy and fairness.
•While the authors might fear that complete honesty about limitations might be used by
reviewers as grounds for rejection, a worse outcome might be that reviewers discover
limitations that aren’t acknowledged in the paper. The authors should use their best
judgment and recognize that individual actions in favor of transparency play an impor-
tant role in developing norms that preserve the integrity of the community. Reviewers
will be specifically instructed to not penalize honesty concerning limitations.
3.Theory Assumptions and Proofs
Question: For each theoretical result, does the paper provide the full set of assumptions and
a complete (and correct) proof?
Answer: [Yes]
27Justification: we provide the full set of assumptions and a complete (and correct) proof.
Guidelines:
• The answer NA means that the paper does not include theoretical results.
•All the theorems, formulas, and proofs in the paper should be numbered and cross-
referenced.
•All assumptions should be clearly stated or referenced in the statement of any theorems.
•The proofs can either appear in the main paper or the supplemental material, but if
they appear in the supplemental material, the authors are encouraged to provide a short
proof sketch to provide intuition.
•Inversely, any informal proof provided in the core of the paper should be complemented
by formal proofs provided in appendix or supplemental material.
• Theorems and Lemmas that the proof relies upon should be properly referenced.
4.Experimental Result Reproducibility
Question: Does the paper fully disclose all the information needed to reproduce the main ex-
perimental results of the paper to the extent that it affects the main claims and/or conclusions
of the paper (regardless of whether the code and data are provided or not)?
Answer: [Yes]
Justification: see Appendix A.
Guidelines:
• The answer NA means that the paper does not include experiments.
•If the paper includes experiments, a No answer to this question will not be perceived
well by the reviewers: Making the paper reproducible is important, regardless of
whether the code and data are provided or not.
•If the contribution is a dataset and/or model, the authors should describe the steps taken
to make their results reproducible or verifiable.
•Depending on the contribution, reproducibility can be accomplished in various ways.
For example, if the contribution is a novel architecture, describing the architecture fully
might suffice, or if the contribution is a specific model and empirical evaluation, it may
be necessary to either make it possible for others to replicate the model with the same
dataset, or provide access to the model. In general. releasing code and data is often
one good way to accomplish this, but reproducibility can also be provided via detailed
instructions for how to replicate the results, access to a hosted model (e.g., in the case
of a large language model), releasing of a model checkpoint, or other means that are
appropriate to the research performed.
•While NeurIPS does not require releasing code, the conference does require all submis-
sions to provide some reasonable avenue for reproducibility, which may depend on the
nature of the contribution. For example
(a)If the contribution is primarily a new algorithm, the paper should make it clear how
to reproduce that algorithm.
(b)If the contribution is primarily a new model architecture, the paper should describe
the architecture clearly and fully.
(c)If the contribution is a new model (e.g., a large language model), then there should
either be a way to access this model for reproducing the results or a way to reproduce
the model (e.g., with an open-source dataset or instructions for how to construct
the dataset).
(d)We recognize that reproducibility may be tricky in some cases, in which case
authors are welcome to describe the particular way they provide for reproducibility.
In the case of closed-source models, it may be that access to the model is limited in
some way (e.g., to registered users), but it should be possible for other researchers
to have some path to reproducing or verifying the results.
5.Open access to data and code
Question: Does the paper provide open access to the data and code, with sufficient instruc-
tions to faithfully reproduce the main experimental results, as described in supplemental
material?
28Answer: [No]
Justification: The experiments are very simple and can be easily reproduced by following
the instructions in the paper.
Guidelines:
• The answer NA means that paper does not include experiments requiring code.
•Please see the NeurIPS code and data submission guidelines ( https://nips.cc/
public/guides/CodeSubmissionPolicy ) for more details.
•While we encourage the release of code and data, we understand that this might not be
possible, so “No” is an acceptable answer. Papers cannot be rejected simply for not
including code, unless this is central to the contribution (e.g., for a new open-source
benchmark).
•The instructions should contain the exact command and environment needed to run to
reproduce the results. See the NeurIPS code and data submission guidelines ( https:
//nips.cc/public/guides/CodeSubmissionPolicy ) for more details.
•The authors should provide instructions on data access and preparation, including how
to access the raw data, preprocessed data, intermediate data, and generated data, etc.
•The authors should provide scripts to reproduce all experimental results for the new
proposed method and baselines. If only a subset of experiments are reproducible, they
should state which ones are omitted from the script and why.
•At submission time, to preserve anonymity, the authors should release anonymized
versions (if applicable).
•Providing as much information as possible in supplemental material (appended to the
paper) is recommended, but including URLs to data and code is permitted.
6.Experimental Setting/Details
Question: Does the paper specify all the training and test details (e.g., data splits, hyper-
parameters, how they were chosen, type of optimizer, etc.) necessary to understand the
results?
Answer: [Yes]
Justification: Experiment details are included in Section A.
Guidelines:
• The answer NA means that the paper does not include experiments.
•The experimental setting should be presented in the core of the paper to a level of detail
that is necessary to appreciate the results and make sense of them.
•The full details can be provided either with the code, in appendix, or as supplemental
material.
7.Experiment Statistical Significance
Question: Does the paper report error bars suitably and correctly defined or other appropriate
information about the statistical significance of the experiments?
Answer: [No]
Justification: stochasticity is not critical in our experiments.
Guidelines:
• The answer NA means that the paper does not include experiments.
•The authors should answer "Yes" if the results are accompanied by error bars, confi-
dence intervals, or statistical significance tests, at least for the experiments that support
the main claims of the paper.
•The factors of variability that the error bars are capturing should be clearly stated (for
example, train/test split, initialization, random drawing of some parameter, or overall
run with given experimental conditions).
•The method for calculating the error bars should be explained (closed form formula,
call to a library function, bootstrap, etc.)
• The assumptions made should be given (e.g., Normally distributed errors).
29•It should be clear whether the error bar is the standard deviation or the standard error
of the mean.
•It is OK to report 1-sigma error bars, but one should state it. The authors should
preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis
of Normality of errors is not verified.
•For asymmetric distributions, the authors should be careful not to show in tables or
figures symmetric error bars that would yield results that are out of range (e.g. negative
error rates).
•If error bars are reported in tables or plots, The authors should explain in the text how
they were calculated and reference the corresponding figures or tables in the text.
8.Experiments Compute Resources
Question: For each experiment, does the paper provide sufficient information on the com-
puter resources (type of compute workers, memory, time of execution) needed to reproduce
the experiments?
Answer: [NA]
Justification: the results are irrelevant to the compute resources.
Guidelines:
• The answer NA means that the paper does not include experiments.
•The paper should indicate the type of compute workers CPU or GPU, internal cluster,
or cloud provider, including relevant memory and storage.
•The paper should provide the amount of compute required for each of the individual
experimental runs as well as estimate the total compute.
•The paper should disclose whether the full research project required more compute
than the experiments reported in the paper (e.g., preliminary or failed experiments that
didn’t make it into the paper).
9.Code Of Ethics
Question: Does the research conducted in the paper conform, in every respect, with the
NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines ?
Answer: [Yes]
Justification: the research conducted in the paper conforms with the NeurIPS Code of Ethics.
Guidelines:
•The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.
•If the authors answer No, they should explain the special circumstances that require a
deviation from the Code of Ethics.
•The authors should make sure to preserve anonymity (e.g., if there is a special consid-
eration due to laws or regulations in their jurisdiction).
10.Broader Impacts
Question: Does the paper discuss both potential positive societal impacts and negative
societal impacts of the work performed?
Answer: [NA]
Justification: this is a theoretical paper and it has no societal impact.
Guidelines:
• The answer NA means that there is no societal impact of the work performed.
•If the authors answer NA or No, they should explain why their work has no societal
impact or why the paper does not address societal impact.
•Examples of negative societal impacts include potential malicious or unintended uses
(e.g., disinformation, generating fake profiles, surveillance), fairness considerations
(e.g., deployment of technologies that could make decisions that unfairly impact specific
groups), privacy considerations, and security considerations.
30•The conference expects that many papers will be foundational research and not tied
to particular applications, let alone deployments. However, if there is a direct path to
any negative applications, the authors should point it out. For example, it is legitimate
to point out that an improvement in the quality of generative models could be used to
generate deepfakes for disinformation. On the other hand, it is not needed to point out
that a generic algorithm for optimizing neural networks could enable people to train
models that generate Deepfakes faster.
•The authors should consider possible harms that could arise when the technology is
being used as intended and functioning correctly, harms that could arise when the
technology is being used as intended but gives incorrect results, and harms following
from (intentional or unintentional) misuse of the technology.
•If there are negative societal impacts, the authors could also discuss possible mitigation
strategies (e.g., gated release of models, providing defenses in addition to attacks,
mechanisms for monitoring misuse, mechanisms to monitor how a system learns from
feedback over time, improving the efficiency and accessibility of ML).
11.Safeguards
Question: Does the paper describe safeguards that have been put in place for responsible
release of data or models that have a high risk for misuse (e.g., pretrained language models,
image generators, or scraped datasets)?
Answer: [NA]
Justification: the paper aims to provide a better understanding on existing algorithms and
thus poses no such risks.
Guidelines:
• The answer NA means that the paper poses no such risks.
•Released models that have a high risk for misuse or dual-use should be released with
necessary safeguards to allow for controlled use of the model, for example by requiring
that users adhere to usage guidelines or restrictions to access the model or implementing
safety filters.
•Datasets that have been scraped from the Internet could pose safety risks. The authors
should describe how they avoided releasing unsafe images.
•We recognize that providing effective safeguards is challenging, and many papers do
not require this, but we encourage authors to take this into account and make a best
faith effort.
12.Licenses for existing assets
Question: Are the creators or original owners of assets (e.g., code, data, models), used in
the paper, properly credited and are the license and terms of use explicitly mentioned and
properly respected?
Answer: [NA]
Justification: the paper does not use existing assets.
Guidelines:
• The answer NA means that the paper does not use existing assets.
• The authors should cite the original paper that produced the code package or dataset.
•The authors should state which version of the asset is used and, if possible, include a
URL.
• The name of the license (e.g., CC-BY 4.0) should be included for each asset.
•For scraped data from a particular source (e.g., website), the copyright and terms of
service of that source should be provided.
•If assets are released, the license, copyright information, and terms of use in the
package should be provided. For popular datasets, paperswithcode.com/datasets
has curated licenses for some datasets. Their licensing guide can help determine the
license of a dataset.
•For existing datasets that are re-packaged, both the original license and the license of
the derived asset (if it has changed) should be provided.
31•If this information is not available online, the authors are encouraged to reach out to
the asset’s creators.
13.New Assets
Question: Are new assets introduced in the paper well documented and is the documentation
provided alongside the assets?
Answer: [NA]
Justification: the paper does not release new assets.
Guidelines:
• The answer NA means that the paper does not release new assets.
•Researchers should communicate the details of the dataset/code/model as part of their
submissions via structured templates. This includes details about training, license,
limitations, etc.
•The paper should discuss whether and how consent was obtained from people whose
asset is used.
•At submission time, remember to anonymize your assets (if applicable). You can either
create an anonymized URL or include an anonymized zip file.
14.Crowdsourcing and Research with Human Subjects
Question: For crowdsourcing experiments and research with human subjects, does the paper
include the full text of instructions given to participants and screenshots, if applicable, as
well as details about compensation (if any)?
Answer: [NA]
Justification: the paper does not involve crowdsourcing nor research with human subjects.
Guidelines:
•The answer NA means that the paper does not involve crowdsourcing nor research with
human subjects.
•Including this information in the supplemental material is fine, but if the main contribu-
tion of the paper involves human subjects, then as much detail as possible should be
included in the main paper.
•According to the NeurIPS Code of Ethics, workers involved in data collection, curation,
or other labor should be paid at least the minimum wage in the country of the data
collector.
15.Institutional Review Board (IRB) Approvals or Equivalent for Research with Human
Subjects
Question: Does the paper describe potential risks incurred by study participants, whether
such risks were disclosed to the subjects, and whether Institutional Review Board (IRB)
approvals (or an equivalent approval/review based on the requirements of your country or
institution) were obtained?
Answer: [NA]
Justification: the paper does not involve crowdsourcing nor research with human subjects.
Guidelines:
•The answer NA means that the paper does not involve crowdsourcing nor research with
human subjects.
•Depending on the country in which research is conducted, IRB approval (or equivalent)
may be required for any human subjects research. If you obtained IRB approval, you
should clearly state this in the paper.
•We recognize that the procedures for this may vary significantly between institutions
and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the
guidelines for their institution.
•For initial submissions, do not include any information that would break anonymity (if
applicable), such as the institution conducting the review.
32