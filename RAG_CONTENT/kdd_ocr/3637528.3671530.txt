Micr
oservice Root Cause Analysis With Limited Observability
Through Intervention Recognition in the Latent Space
Zhe Xie
Tsinghua University, BNRist
China, Beijing
xiez22@mails.tsinghua.edu.cnShenglin Zhang
Nankai University
China, Tianjin
zhangsl@nankai.edu.cnYitong Geng
eBay Inc.
China, Shanghai
eatongeng@163.com
Yao Zhang
eBay Inc.
China, Shanghai
yaozhang@ebay.comMinghua Ma
Microsoft
USA, Redmond
minghuama@microsoft.comXiaohui Nie
Computer Network Information
Center, Chinese Academy of Sciences
China, Beijing
xhnie@cnic.cn
Zhenhe Yao
Tsinghua University, BNRist
China, Beijing
yaozh20@mails.tsinghua.edu.cnLonglong Xu
Tsinghua University, BNRist
China, Beijing
xull23@mails.tsinghua.edu.cnYongqian Sun
Nankai University
China, Tianjin
sunyongqian@nankai.edu.cn
Wentao Li
eBay Inc.
China, Shanghai
wenli@ebay.comDan Pei∗
Tsinghua University, BNRist
China, Beijing
peidan@tsinghua.edu.cn
ABSTRACT
Many failure root cause analysis (RCA) algorithms for microser-
vices have been proposed with the widespread adoption of mi-
croservices systems. Existing algorithms generally focus on RCA
with ranking single-level (e.g. metric-level or service-level) root
cause candidates (RCCs) with comprehensive monitoring metrics.
However,manyheterogeneousRCCsexistwithlimitedobservabil-
ity in real-world microservices systems. Further, we find that the
limited observability may result in inaccurate RCA through real-
world failures in eBay. In this paper, for the first time, we propose
to “model RCCs as latent variables”. The core idea is to infer the
status of RCCs as latent variables with related monitoring met-
rics instead of directly extracting features from only the observ-
able metrics. Based on this, we propose LatentScope, an unsuper-
visedRCAframeworkwithheterogeneousRCCsunderlimitedob-
servability. A dual-space graph is proposed to model both observ-
ableandunobservablevariables,withmany-to-manyrelationships
between spaces. To achieve fast inference of latent variables and
RCA, we propose the LatentRegressor algorithm, which includes
Regression-based Latent-space Intervention Recognition (RLIR) to
achieve intervention recognition-based RCA in latent space. La-
tentScope has been deployed in eBay’s production environment
∗Corr
esponding author.
This
work is licensed under a Creative Commons Attribu-
tion International 4.0 License.
KDD ’24, August 25–29, 2024, Barcelona, Spain
© 2024 Copyright held by the owner/author(s).
ACM ISBN 979-8-4007-0490-1/24/08.
https://doi.org/10.1145/3637528.3671530and evaluated on both eBay’s real-world failures and a testbed
dataset. The evaluation results show that, compared with baseline
algorithms, our model significantly improves the Top-1 recall by
9.7%−57.9%. The source code of LatentScope and the dataset are
available at https://github.com/NetManAIOps/LatentScope.
CCS CONCEPTS
•Computer systems organization →Cloud computing ;•Soft-
ware and its engineering →Maintaining software.
KEYWORDS
Root Cause Analysis, Microservices
ACM Reference Format:
Zhe Xie, Shenglin Zhang, Yitong Geng, Yao Zhang, Minghua Ma, Xiaohui
Nie,ZhenheYao,LonglongXu,YongqianSun,WentaoLi,andDanPei.2024.
Microservice Root Cause Analysis With Limited Observability Through In-
tervention Recognition in the Latent Space. In Proceedings of the 30th ACM
SIGKDD Conference on Knowledge Discovery and Data Mining (KDD ’24),
August 25–29, 2024, Barcelona, Spain. ACM, New York, NY, USA, 12 pages.
https://doi.org/10.1145/3637528.3671530
1 INTRODUCTION
As demands of online applications become more complex and di-
versified, microservice systems are increasingly being used in on-
lineservicesystemsduetotheirscalabilityandflexibility[3].How-
ever, system failures are inevitable due to frequent change and
scaleexpansionofmicroservices[26].Therefore,overtheyears,an
increasing number of root cause analysis (RCA) algorithms [7, 9,
11, 13, 16, 21, 24] have been proposed to localize failure root cause
6049
KDD’24, August 25–29, 2024, Barcelona, Spain Zhe Xie et al.
Pod 1-1Pod 2-1Pod 1-2Pod 2-2Host 1Host 2Service 1Service 2Metric#1Metric#2Metric#3Metric#4Metric CausalRelationshipPhysical RelationshipRCCCall RelationshipThird-PartyService
Figur
e 1: A failure caused by Service 1 in an example mi-
croservice system and their corresponding RCCs. RCCs can
be heterogeneous and multi-layered.
from root cause candidates (RCCs) .Inmicroservicesystems, observ-
abilitytools (such as OpenTelemetry1) are used to monitor the
status of system components by collecting metrics, logs, or traces.
RCA algorithms analyze the root causes based on monitoring data
and output a ranking for RCCs.
An important challenge in applying RCA algorithms is the lim-
itedobservabilityoftheRCCs.Observabilityiscrucialformicroser-
vices systems [8, 19], and RCA algorithms heavily rely on them to
obtain the system status. However, RCCs’ observability is often
limited in real-world microservice systems for multiple reasons.
The first reason comes from the diverse categories of RCCs [5, 11]
(seeSec.2.4).Failuresinmicroservicescanbecausedbyfailuresin
internal components (such as Pods, Services, Hosts in Fig. 1), ex-
ternal components (such as third-party services), external events
(such as software changes), etc. RCCs can be heterogeneous, and
the components they are associated with can be multi-layered (for
example, a Pod is contained within a Host). Different monitoring
tools need to be developed separately for heterogeneous RCCs to
achieve their observability. This means that fully realizing the ob-
servability of RCCs is challenging. Another reason for the lim-
ited observability is the absence of direct monitoring metrics for
non-observable services (such as third-party services, see 2.3). In
such cases, operators attempt to deduce the status of these RCCs
through indirectly related metrics (such as Errors related to third-
party service calls). Moreover, we find that such limitation may
lead to imprecise localizations (Sec. 2.4).
However,existingRCAalgorithmsusuallyrequireRCCstohave
good observability. Most RCA algorithms focus only on single-
layer RCCs (for example, identifying a specific metric or service),
and they are unable to locate heterogeneous RCCs. Some exist-
ing algorithms [5, 11] have studied the problem of heterogeneous
RCCsandmadeattemptstotackleit,buttheystillrequiregoodob-
servabilityforRCCs.Additionally,[5]requiresextraexpertknowl-
edge to model limited categories of RCCs, making it difficult to
extend to other categories of RCCs.
In this paper, for the first time, we propose to model RCCs
as latent variables and perform RCA for heterogeneous RCCs
with the inference of latent variables. The main idea is that latent
variables are not required to be observed. Therefore, using latent
variables transforms extracting observable features of RCCs into
the inference of latent variables. Hence, this modeling approach
can be used to model RCCs with limited observability. Since the
complete observability of RCCs cannot be guaranteed in practical
situations, representing the status of RCCs as latent variables en-
ables accurate modeling of RCCs even under limited observability.
1https://op
entelemetry.io/
Latent SpaceObservable SpaceTrigger & Data InputDual-Space GraphLatent-Space Intervention Recognition
Metric
RCC &Dep.RCC ScoreRCC RankRCC 1Score = 0.5RCC 2Score = 89.1…Figur
e 2: Overall Process of LatentScope
However, there are many challenges in performing RCA with
unobservable latent variables: 1) The graph construction for both
latent variables (RCCs) and the observable variables (metrics). As
shown in Fig. 1, the relationship between RCCs can be heteroge-
neous ( e.g., physical relationship between host and pod, call rela-
tionship between services, and causal relationship between met-
rics). Different relationships imply different causal effects, which
the graph should clearly model. 2) Modeling latent RCC variables
underlimitedobservability.Latentvariablescanbeinferredthrough
relatedobservablevariables.However,theobservabledataforRCCs
can be insufficient under limited observability. 3) Inference the
unobservable latent variables with observable data and rank the
RCCs. In large-scale microservice systems, there are many RCCs
and observable variables. However, the running time of RCA can
affecttherecoverytime.Therefore,efficientalgorithmsarerequired
to implement the inference.
To address the above challenges, we propose LatentScope, an
RCA framework that models RCCs as latent variables with observ-
ablemonitoringmetrics.Toaddresschallenge1,LatentScopebuilds
adual-spacegraphforlatentandobservablevariables,respectively.
Separating latent and observable variables mitigates the ambigu-
ous causal direction that heterogeneous RCCs and relationships
introduce. We introduce indirect metrics in modeling latent RCC
variables to address challenge 2, motivated by the RCA process in
practice (Sec. 2.4). We also build many-to-many links between la-
tent and observable spaces to achieve this. To address challenge
3, inspired by causal inference with hidden confounders, we infer
latent variables in a quantitive approach with causal relationships
in a dual-space graph. Motivated by the intervention recognition
proposed by CIRCA [9], to enable fast and accurate inference in
latent space, we proposed the Regression-based Latent-space In-
tervention Recognition (RLIR) algorithm to perform quantitative
analysis on latent variables of RCCs. Additionally, we introduced
LatentRegressor, an enhancement based on the dual-space graph
for RLIR, to reduce the computational overhead and mitigate the
impact of noises in real-world applications.
We have deployed LatentScope in eBay’s production environ-
ment and evaluated it with both real-world failures in eBay and
a dataset generated using chaos engineering. The main contribu-
tions of this work are as follows:
•For the first time, we propose to model root cause candidates
(RCCs) as latent variables and perform RCA for heterogeneous
RCCs through latent variables.
•WeproposeLatentScope,anunsupervisedRCAframeworkwith
RCCs under limited observability. LatentScope applies a novel
dual-space graph to model both observable and unobservable
variables,usingmany-to-manyrelationshipsbetweenspacesand
6050Microservice Root Cause Analysis With Limited Observability Through Intervention Recognition in the Latent Space KDD ’24, August 25–29, 2024, Barcelona, Spain
solving latent variables in a dual-space graph to realize RCA for
heterogeneous RCCs.
•ToperformfastinferenceonlatentvariablesinRCA,wepropose
Regression-based Latent-space Intervention Recognition algo-
rithm (RLIR). We also propose the RCC graph-based enhance-
ment, LatentRegressor, to adapt RLIR to real-world systems.
•We deploy LatentScope in eBay’s cluster and evaluate it with
both eBay’s real-world failures and a testbed dataset. The eval-
uation results indicate that the proposed algorithm achieves su-
perior performance in both micro and macro evaluation metrics
for different categories of root causes. We have made the source
code and dataset publically available for further research2.
2 PRELIMINARY AND MOTIVATION
2.1 Intervention Recognition
2.1.1 Background. Intervention recognition for root causal anal-
ysis was proposed by CIRCA [9]. The core idea of intervention
recognitionistotreatfaultsasinterventions.Byusingcausalinfer-
ence, CIRCA aims to determine the underlying intervention based
on observations on metrics. CIRCA constructs a structural causal
graph based on meta-variables that contain groups of monitoring
metrics. CIRCA analyzed the propagation of anomalies through
quantitative modeling of Causal Bayesian Network (CBN), which
bringspossibilitiesforfaultanalysisofRCCsusinglatentvariables
in LatentScope.
2.1.2 Regression-Based Hypothesis Testing. CIRCAusesregression-
based hypothesis testing (RHT) among the parents and child met-
rics in the structural causal graph to realize intervention recog-
nition of the metrics. RHT involves training a regression model
for each metric and testing whether a metric follows its expected
distributionundernormalconditions.However,RHTrequiresvari-
ablestobeobservable,whichcannotbeusedforinterventionrecog-
nition in latent space.
2.2 Definitions
This section briefly describes the commonly used conceptions in
this paper. A root cause candidate (RCC) refers to a potential loca-
tion or event that can be identified as the root cause in microser-
vicessystems.Theobjectiveof root cause analysis (RCA) algorithms
is to rank the RCCs to identify the root cause of the failure. If two
RCCs share the same type of location or event, they belong to the
same category of RCCs. Heterogeneous RCCs means a set of RCCs
not all belonging to the same category. Note that the categories of
RCCs are different from the “types of failures” that occur on the
RCCs, and the classification of failure types is out of the scope of
this paper. Direct metrics of an RCC refers to the metrics monitor-
ingthelocationoreventoftheRCC.Ifalltheabnormalstatusesof
an RCC can be reflected by at least one of its direct metrics, then
wesaytheRCChas complete observability .Otherwise,theRCChas
limited observability. Indirect metrics of an RCC refers to those di-
rect metrics of other RCCs that may be used to infer its status. We
uselatent variables tomodelRCCsandtreatmonitoringmetricsas
observable variables in this paper.
2https://github
.com/NetManAIOps/LatentScope2.3 Empirical Study of Heterogeneous RCCs
Table 1: Some Common Categories of Root Causes in eBay
Categor
y Percentage Typical Related Metrics
Thir
d-Party Services 63.59% Third-Party API Error*
Internal Services 8.76% Runtime Error
Software Change 7.83% Change Process, Runtime Error*
Database 5.53% Markdown Error*
T
o analyze the categories of RCCs in real-world microservice
systems, we conducted an empirical study of common categories
ofrootcausesineBay’sdataset.Tab.1listsfourtypesofrootcauses
andtheproportionoffaultsassociatedwitheachover6months.It
can be found that the RCCs in eBay’s microservice system are het-
erogeneous, and each category of root causes has a different pro-
portionofthetotalnumberoffaults.ForsomeRCCs(suchasThird-
PartyServices), itis unable toobtain theirmonitoring metrics. Un-
der such conditions of limited observability, operators usually use
metrics in internal services related to Third-Party Services to mon-
itor their status. Thus, these metrics are indirect metrics. Through
Tab. 1, it can be found that many categories of RCCs are associ-
ated with indirect metrics (marked with *). However, we found
that these indirect metrics may not accurately reflect the current
status of the components (Sec. 2.3).
2.4 Limitation of Indirect Metrics
Service 3DB Markdown ErrorAPI Call ErrorDB-11Third-Party ServiceService 1Service 2Service 3DB ErrorAPI Error
RCCMetric#1Metric#2Metric#3Metric#4
Markdown of DB-11API CallAErrorMarkdownofDB-11API Call AErrorDB-11Third-Party Service AService 1
Service 2
DirectMetricMetricMetricMetricMetricIndirect Metric
Figur
e 3: An example showing the inaccuracy of using indi-
rect metrics
To illustrate the inaccuracy with indirect metrics, we analyzed
a typical failure case at eBay, as shown in Fig. 3. In this failure,
some service metrics (direct metrics of Service 1, 2, 3) exhibited
fluctuations, related to Database DB-11 and Third-Party Service A,
respectively.However,therootcauseofthefailurewasDB-11.The
related metrics in Service 2 are affected by fault propagation, lead-
ing to fluctuations in indirect metrics associated with Third-Party
Service A. Given the lack of a clear dependency relationship be-
tween the DB-11 and Third-Party Service A, it may be difficult for
algorithms to identify whether the failure occurs in the database,
the third-party service, or Internal Service 2 without additional in-
formation. So, the indirect metrics may bring ambiguous informa-
tion to RCA in real-world applications, resulting in inaccurate lo-
calization.
2.5 Motivation of Latent-Space RCC Modeling
To address the challenges brought by the limitation of observabil-
ity of heterogeneous RCCs, we propose to model heterogeneous
RCCs as latent variables. In RCA, metrics are crucial in reflecting
the status of RCCs. However, as identified in Sec. 2.3, the observ-
ability of RCCs is limited. Furthermore, as observed in Sec. 2.4, the
6051KDD’24, August 25–29, 2024, Barcelona, Spain Zhe Xie et al.
information from indirect metrics is ambiguous and cannot accu-
ratelyreflectthestateofRCCs.Basedonthis,wepropose modeling
RCCs as latent variables,andthevalueofthelatentvariablereflects
thestateoftheRCC.Theutilizationoflatentvariablesbypassesthe
needforcompleteobservabilityofRCCsandtransformsthetaskof
extracting observable RCC features into inferring latent variables,
enabling effective RCC modeling even when complete observabil-
ity is not feasible.
However, conducting RCA on these latent variables is challeng-
ing. In practice, operators might use additional information to as-
sist in RCA. In Fig. 3, the indirect metrics with DB-11 exhibited
significant fluctuations, while only one of the indirect metrics (in
Service 2) of Third-Party Service A fluctuated. Thus, the related
metrics of different RCCs exhibited different ranges. Motivated by
the practice of operators, we can perform RCA by inferring the as-
sociatedlatentRCCvariablesbyanalyzingtheanomaliesinrelated
observable variables (metrics). Through quantitative analysis of la-
tent variables, we can also mitigate the ambiguous information in
indirect metrics and achieve more accurate RCA.
3 METHODOLOGY
Based on the idea of “modeling RCCs as latent variables”, we pro-
posetheLatentScopeframework(Fig.2).Firstly,weproposetouse
a dual-space graph (latent and observable) to uniformly represent
heterogeneous RCCs in the latent-space graph and establish asso-
ciations between the latent space and observable space. On this
basis, we introduce the regression-based latent-space intervention
recognition (RLIR) algorithm and its enhancement to achieve fast
inference and RCA for latent variables.
3.1 Dual-Space Graph
Latent Space (RCCs)Observable Space(Metrics)
Pod 1-1Pod 2-1Pod 2-2Metric-RCCLinkPod 1-2SVC 1Host 1Host 2M#1M#2M#3M#4SVC 2
(
a) Dual-Space Graph
<latexit sha1_base64="+XdUf8ZcC5phcD1vYPlPiM5Kqv0=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRLxtSy4cVnBPqCVkkyndWheJBOhlu7ErT/gVn9J/AP9C++MKahFdEJmzpx7z5m5c73YF6m07deCMTe/sLhUXC6trK6tb5ibW400yhLG6yzyo6TluSn3RcjrUkift+KEu4Hn86Y3PFPx5g1PUhGFl3IU86vAHYSiL5grieqaZseL/F46CmgZ3066Ttcs2xVbD2sWODkoIx+1yHxBBz1EYMgQgCOEJOzDRUpfGw5sxMRdYUxcQkjoOMcEJdJmlMUpwyV2SPOAdu2cDWmvPFOtZnSKT39CSgt7pIkoLyGsTrN0PNPOiv3Ne6w91d1GtHq5V0CsxDWxf+mmmf/VqVok+jjVNQiqKdaMqo7lLpl+FXVz60tVkhxi4hTuUTwhzLRy+s6W1qS6dvW2ro6/6UzFqj3LczO8q1tSg52f7ZwFjYOKc1w5ujgsV0/zVhexg13sUz9PUMU5aqiT9w0e8YRno2lMjDvj/jPVKOSabXwbxsMH7MCWYQ==</latexit>z1<latexit sha1_base64="jL4OG92q32yVBhaRQRu8G5AjTyo=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVZLio8uCG5cV7APaUpJ0WofmRTIp1NKduPUH3OoviX+gf+GdMQW1iE7IzJlz7zkzd64TeTwRpvma05aWV1bX8uuFjc2t7R19d6+RhGnssrobemHccuyEeTxgdcGFx1pRzGzf8VjTGV3IeHPM4oSHwbWYRKzr28OAD7hrC6J6ut5xQq+fTHxaprezXrmnF82SqYaxCKwMFJGNWqi/oIM+QrhI4YMhgCDswUZCXxsWTETEdTElLibEVZxhhgJpU8pilGETO6J5SLt2xga0l56JUrt0ikd/TEoDR6QJKS8mLE8zVDxVzpL9zXuqPOXdJrQ6mZdPrMANsX/p5pn/1claBAaoqBo41RQpRlbnZi6pehV5c+NLVYIcIuIk7lM8Juwq5fydDaVJVO3ybW0Vf1OZkpV7N8tN8S5vSQ22frZzETTKJeusdHp1UqxWslbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquUyzT6+De3hA+8glmI=</latexit>z2
<latexit sha1_base64="zgNNEPY+fLt40jy30H+sPTXNj/I=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRKfXRbcuKxgH9CWkqTTGpoXk0mhlu7ErT/gVn9J/AP9C++MKahFdEJmzpx7z5m5c53Y9xJhmq85bWFxaXklv1pYW9/Y3NK3d+pJlHKX1dzIj3jTsRPmeyGrCU/4rBlzZgeOzxrO8ELGGyPGEy8Kr8U4Zp3AHoRe33NtQVRX19tO5PeScUDL5HbaPe7qRbNkqmHMAysDRWSjGukvaKOHCC5SBGAIIQj7sJHQ14IFEzFxHUyI44Q8FWeYokDalLIYZdjEDmke0K6VsSHtpWei1C6d4tPPSWnggDQR5XHC8jRDxVPlLNnfvCfKU95tTKuTeQXECtwQ+5dulvlfnaxFoI+yqsGjmmLFyOrczCVVryJvbnypSpBDTJzEPYpzwq5Szt7ZUJpE1S7f1lbxN5UpWbl3s9wU7/KW1GDrZzvnQf2oZJ2VTq9OipVy1uo89rCPQ+rnOSq4RBU18h7hEU941hraVLvT7j9TtVym2cW3oT18APGAlmM=</latexit>z3
<latexit sha1_base64="fwR29GvtQwCyuvBNqshB6NzmJqI=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRLxtRTcuKxgH9CWkqTTGjp5kEzEUroTt/6AW/0l8Q/0L7wzTkEtohMyc+bce87MneslPMiEbb8WjLn5hcWl4nJpZXVtfcPc3KpncZ76rObHPE6bnpsxHkSsJgLBWTNJmRt6nDW84bmMN25YmgVxdCVGCeuE7iAK+oHvCqK6ptn2Yt7LRiEt49tJ1+maZbtiq2HNAkeDMvSoxuYL2ughho8cIRgiCMIcLjL6WnBgIyGugzFxKaFAxRkmKJE2pyxGGS6xQ5oHtGtpNqK99MyU2qdTOP0pKS3skSamvJSwPM1S8Vw5S/Y377HylHcb0eppr5BYgWti/9JNM/+rk7UI9HGqagiopkQxsjpfu+TqVeTNrS9VCXJIiJO4R/GUsK+U03e2lCZTtcu3dVX8TWVKVu59nZvjXd6SGuz8bOcsqB9UnOPK0eVh+czWrS5iB7vYp36e4AwXqKJG3jd4xBOejYYxMe6M+89Uo6A12/g2jIcP5ZKWVw==</latexit>x1
<latexit sha1_base64="fTuoMFZ1EHl+eoiWJTIH5hLBULo=">AAAC1XicjVHLSsNAFD3GV62vqEs3wSK4KmnxtSy4cVnBPqAtJUmnNXTyIJkUS+lO3PoDbvWXxD/Qv/DOOAW1iE7IzJlz7zkzd64bcz8Vtv26YCwuLa+s5tby6xubW9vmzm49jbLEYzUv4lHSdJ2UcT9kNeELzppxwpzA5azhDi9kvDFiSepH4bUYx6wTOIPQ7/ueI4jqmmbbjXgvHQe0TG6n3XLXLNhFWw1rHpQ0KECPamS+oI0eInjIEIAhhCDM4SClr4USbMTEdTAhLiHkqzjDFHnSZpTFKMMhdkjzgHYtzYa0l56pUnt0Cqc/IaWFQ9JElJcQlqdZKp4pZ8n+5j1RnvJuY1pd7RUQK3BD7F+6WeZ/dbIWgT7OVQ0+1RQrRlbnaZdMvYq8ufWlKkEOMXES9yieEPaUcvbOltKkqnb5to6Kv6lMycq9p3MzvMtbUoNLP9s5D+rlYum0eHJ1XKjYutU57OMAR9TPM1RwiSpq5D3CI57wbDSMqXFn3H+mGgtas4dvw3j4AOfyllg=</latexit>x2<latexit sha1_base64="hBN4nRMNalBDjJSe/1OkMdE53bo=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRKp2mXBjcsK9gFtKUk6raF5kUwKtXQnbv0Bt/pL4h/oX3hnnIJaRCdk5sy595yZO9eJfS/lpvma05aWV1bX8uuFjc2t7R19d6+RRlnisrob+VHScuyU+V7I6tzjPmvFCbMDx2dNZ3Qh4s0xS1IvCq/5JGbdwB6G3sBzbU5UT9c7TuT300lAy/R21iv39KJZMuUwFoGlQBFq1CL9BR30EcFFhgAMIThhHzZS+tqwYCImrospcQkhT8YZZiiQNqMsRhk2sSOah7RrKzakvfBMpdqlU3z6E1IaOCJNRHkJYXGaIeOZdBbsb95T6SnuNqHVUV4BsRw3xP6lm2f+Vydq4RigImvwqKZYMqI6V7lk8lXEzY0vVXFyiIkTuE/xhLArlfN3NqQmlbWLt7Vl/E1mClbsXZWb4V3ckhps/WznImiclKyz0ulVuVitqFbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquWUZh/fhvbwAfPglmQ=</latexit>z4
<latexit sha1_base64="VH58L18N1lKJgWlW1tjRP0jToCY=">AAAC1XicjVHLSsNAFD3GV62vqEs3wSK4KqnvZcGNywr2AW0pSTqtoUkmJJNiKd2JW3/Arf6S+Af6F94Zp6AW0QmZOXPuPWfmznXjwE+Fbb/OGfMLi0vLuZX86tr6xqa5tV1LeZZ4rOrxgCcN10lZ4EesKnwRsEacMCd0A1Z3BxcyXh+yJPV5dC1GMWuHTj/ye77nCKI6ptlyedBNRyEt49tJ56hjFuyirYY1C0oaFKBHhZsvaKELDg8ZQjBEEIQDOEjpa6IEGzFxbYyJSwj5Ks4wQZ60GWUxynCIHdDcp11TsxHtpWeq1B6dEtCfkNLCPmk45SWE5WmWimfKWbK/eY+Vp7zbiFZXe4XECtwQ+5dumvlfnaxFoIdzVYNPNcWKkdV52iVTryJvbn2pSpBDTJzEXYonhD2lnL6zpTSpql2+raPibypTsnLv6dwM7/KW1ODSz3bOgtphsXRaPLk6LpRt3eocdrGHA+rnGcq4RAVV8h7iEU94NurGxLgz7j9TjTmt2cG3YTx8AOpSllk=</latexit>x3
<latexit sha1_base64="9RkK+oepLg+xr1wW5OjSDUzaSMk=">AAAC1XicjVHLSsNAFD3GV62vqEs3wSK4KqnUx7LgxmUF+4C2lCSd1tDJg2RSLKU7cesPuNVfEv9A/8I74xTUIjohM2fOvefM3LluzP1U2PbrgrG4tLyymlvLr29sbm2bO7v1NMoSj9W8iEdJ03VSxv2Q1YQvOGvGCXMCl7OGO7yQ8caIJakfhddiHLNO4AxCv+97jiCqa5ptN+K9dBzQMrmddstds2AXbTWseVDSoAA9qpH5gjZ6iOAhQwCGEIIwh4OUvhZKsBET18GEuISQr+IMU+RJm1EWowyH2CHNA9q1NBvSXnqmSu3RKZz+hJQWDkkTUV5CWJ5mqXimnCX7m/dEecq7jWl1tVdArMANsX/pZpn/1claBPo4VzX4VFOsGFmdp10y9Sry5taXqgQ5xMRJ3KN4QthTytk7W0qTqtrl2zoq/qYyJSv3ns7N8C5vSQ0u/WznPKgfF0unxZOrcqFi61bnsI8DHFE/z1DBJaqokfcIj3jCs9Ewpsadcf+ZaixozR6+DePhA+yyllo=</latexit>x4……Latent(RCC)Observable(Metric) (
b) Symbols
Figure 4: Dual-space graph and its symbolic representation
3.1.1 Overview. Toaccuratelymodelthecomplexrelationshipamong
heterogeneousRCCs,weproposetousea dual-space graph,which
separatesthelatentRCCvariablesfromtheobservablemetricvari-
ables (Fig. 4a). In the dual-space graph, RCCs are located in the la-
tent layer, and metrics are located in the observable layer. There
aredifferentrelationshipsbothwithinthesamelayerandbetween
different layers. Fig. 4b shows the symbolic representation of the
dual-spacegraph,where 𝒙𝒊representsthenodesintheobservable
layer, and 𝒛𝒂represents the nodes in the latent layer.3.1.2 Latent Space and Observable Space. ExistingRCAalgorithms
usually model RCCs within a single-layer graph. However, the re-
lationships among heterogeneous RCCs are distinct ( e.g., the re-
lationships between microservices differ from those between con-
tainers and hosts), resulting in different fault propagation behav-
iors. To address this, we model invocation relationships between
RCCs with the causal relationships between their related metrics.
Firstly, the causal relationships among metrics avoid the ambigu-
ityofcausaldirectionsbetweenRCCs[9].Moreover,modelinghet-
erogeneous RCCs in a unified manner reduces the dependence on
expert knowledge [5] about heterogeneous RCCs in algorithm ap-
plications.
3.1.3 RCC-Metric Link. The RCC-Metric links are the edges con-
necting the observable space variables and latent space variables
in the dual-space graph. As discussed in Sec.2.3, RCA for RCCs
with limited observability relies on indirect metrics. However, in-
directmetricsarelikelytointroduceambiguityinlocalization,due
to each indirect metric being associated with multiple RCCs (Root
Cause Candidates). Existing approaches typically model the rela-
tionship between RCCs and metrics as one-to-many [5, 11], where
one metric can be related to only one RCC. Therefore, to achieve
accurate modeling of both direct and indirect metrics for RCCs,
we propose to use many-to-many relationships to model the link
between observable and latent space.
3.1.4 Graph Construction. Theconstructionofthedual-spacegraph
is divided into three steps: establishing causal relationships for
metrics in the observable space, establishing many-to-many rela-
tionships between spaces, and establishing physical relationships
for RCCs in the latent space. To build the causal graph for met-
rics, we follow the structural graph in CIRCA [9], and build the
causal graph for the corresponding metrics based on the call rela-
tionship among RCCs. We also apply a Pearson correlation filter
to remove redundant edges in the structural graph. Research on
the construction of the metric-level graph is outside the scope of
this paper. The many-to-many relationships (both direct and indi-
rect) between metrics and RCCs and the physical relationships be-
tween RCCs are usually predefined according to the architecture
of microservice systems or can be extracted through monitoring
tools or microservice traces. At eBay, we retrieve the RCC-metric
links and the physical relationship between RCCs from a graph
database maintained by operators. One of the main challenges in
constructing a dual-space graph for large microservice systems is
theneedforexpertknowledge.Expertsneedtodeeplyunderstand
the microservice system to construct the graph accurately. For ex-
ample, when determining the edges of a database, experts need to
identify the potential connections between the database and the
internal services. However, since the research on different graph
constructionmethodsisoutofthescopeofthispaper,weconsider
it as future work.
3.2 Regression-based Latent-Space
Intervention Recognition
3.2.1 Modeling of Variables in the Dual-Space Graph. We denote
eachmetricintheobservablespaceas 𝒙𝑖andthelatentvariablefor
RCC 𝑎as𝒛𝑎. If there is an RCC-metric link between 𝒙𝑖and𝒛𝑎, we
6052Microservice Root Cause Analysis With Limited Observability Through Intervention Recognition in the Latent Space KDD ’24, August 25–29, 2024, Barcelona, Spain
denote this relationship as 𝑎∈𝒓𝒄𝒄(𝒙𝑖), where 𝒓𝒄𝒄(𝒙𝑖)represents
the set of the related RCCs for 𝒙𝑖(both direct and indirect).
Based on the intervention recognition in CIRCA [9], we further
proposethattheinterventionofmetric 𝒙𝑖canbedecomposedinto
the intervention of parent metrics in the observable layer 𝒑𝒂(𝒙𝑖)
andtherelatedRCCsinthelatentlayer 𝒓𝒄𝒄(𝒙𝑖).Thus,thevalueof
𝒙𝑖at timestamp 𝑡can be represented by 𝑓𝑖:
𝒙(𝑡)
𝑖=𝑓𝑖(𝒑𝒂(𝒙𝑖)(𝑡),𝒓𝒄𝒄(𝒙𝑖)(𝑡)) (1)
which implements unified modeling of both latent and observable
variables in the dual-space graph.
3.2.2 Latent-Space Intervention Recognition. Eq.1modelsacausal
inference problem with hidden confounders. However, regression-
basedhypothesistesting(RHT)cannotbeappliedtocausalgraphs
with hidden confounders and thus cannot be used in our task. In
existing methods, although there are approaches like CGNN [4],
thesemethodsgenerallytakealongtimeandrequirealargeamount
oftrainingdata,makingthemunsuitableforRCAinlarge-scalemi-
croservice systems.
However,duetothenatureofRCAtasks,themodelingofstruc-
turalgraphscanbesimplified,allowingforfastersolutionmethods.
The choice of 𝑓𝑖significantly determines the complexity of compu-
tation. As found in [9], choosing a simple linear function as 𝑓𝑖is
effective and shows promising results in RCA tasks. Therefore, fol-
lowing the settings in [9], we apply the same assumption to 𝑓𝑖in
this paper. If we divide 𝑓𝑖into the observable layer 𝑓𝑖,𝑚and the
latent layer 𝑓𝑖,𝑟, we can derive that:
ˆ𝒙𝑖(𝑡)=𝑓𝑖,𝑟(𝒓𝒄𝒄(𝒙𝑖))(𝑡)(2)
where ˆ𝒙𝑖(𝑡)=𝒙(𝑡)
𝑖−𝑓𝑖,𝑚(𝒑𝒂(𝒙𝑖))(𝑡)is the residual value for 𝒙(𝑡)
𝑖,
which is equivalent to the error value of metric 𝒙𝑖in regression-
based hypothesis test (RHT) in CIRCA. In this way, we construct
therelationshipbetween ˆ𝒙𝑖andthesumofrelatedlatentRCCvari-
ables,whichenablesustomodelthemwithregression-basedmod-
eling.
3.2.3 RCC-Solvable Condition. Having assumed the linearity of
function 𝑓𝑖, the RCC part of it 𝑓𝑖,𝑟can be represented by:
𝑓𝑖,𝑟(𝒓𝒄𝒄(𝒙𝑖))(𝑡)=∑
𝑧𝑎∈𝒓𝒄𝒄(𝑥𝑖)𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛(𝑡)
𝑎 (3)
where 𝑘𝑎,𝑖istheparameterand 𝛼𝑎,𝑖istherootcausemetric,where
𝛼𝑎,𝑖=1indicates that RCC 𝒛𝑎is anomalous and affects the moni-
toring metric 𝒙𝑖in the current failure case. Since the RHT calcula-
tion in the 𝑓𝑖,𝑚(𝒓𝒄𝒄(𝒙𝑖))term already includes the constant term,
it is no longer included in Eq. 3.
To simplify the solution of Eq. 3, we can introduce some con-
ditions for simplification. As mentioned earlier, the RCA task in-
volves certain constraints compared to general causal inference
tasks. Specifically, for 𝛼𝑎,𝑖in Eq. 3, it should satisfy the following
two conditions:
∑
𝑎max
𝑖(𝛼𝑎,𝑖)=1, 𝛼𝑎,𝑖∈{0,1} (4)
∀𝑎, 𝑏(𝑏≠𝑎),max
𝑖(𝛼𝑎,𝑖)=1=⇒ ∃ 𝑗(𝛼𝑎,𝑗=1∧𝒛𝑏∉𝒓𝒄𝒄(𝒙𝑗))
(5)The first condition (Eq. 4) is the root cause uniqueness, which rep-
resents that in the current failure, there is only one root cause that
causesthefluctuationofmetrics.Thesecondcondition(Eq.5)isthe
common cause uniqueness, meaning that for the metrics affected
by the root cause, no other RCCs are linked with these metrics
simultaneously. We call this the RCC-Solvable (RCC-S) condition.
3.2.4 RLIR Algorithm. RCC-S provides simplified conditions for
solvingEq.3.UndertheRCC-Sconditions,weproposetheRegression-
Based Latent-Space Intervention Recognition (RLIR) algorithm to
achievefastinterventionrecognitionforlatentRCCvariables.The
general process of RLIR contains a two-step calculation:
Step 1: Perform linear regression on each 𝒙𝑖and𝒙𝑗if∃𝒛𝑎∈
𝒓𝒄𝒄(𝒙𝑖)∩𝒓𝒄𝒄(𝒙𝑗):
𝐿𝑖,𝑗=max𝑡𝑳(ˆ𝒙𝑖,ˆ𝒙𝑗)(𝑡)
ˆ𝒙(𝑡)
𝑖(6)
wher
e𝑳(𝒙,𝒚)denotes performing the prediction of 𝒙within the
linear regression on 𝒙with 𝒚and 𝐿𝑖,𝑗can be seen as the “propor-
tion” of the regression on 𝒙𝑖with 𝒙𝑗.
Step 2: For each 𝒙𝑖and𝒛𝒂∈𝒓𝒄𝒄(𝒙𝑖):
𝑴𝑎,𝑖=ˆ𝒙𝑖·(
1− max
𝑗,∃𝒛𝑏∈𝒓𝒄𝒄 𝑗−𝒓𝒄𝒄 𝑖𝐿𝑖,𝑗)
(7)
where 𝑴𝑎,𝑖will serve as a proxy for calculating the root cause
score for 𝒛𝑎and𝒓𝒄𝒄𝑖is the abbreviation for 𝒓𝒄𝒄(𝒙𝑖). Even though
we have not precisely solved the exact values of 𝑘𝑎,𝑖and𝒛𝑎,𝑖, the
root cause score 𝑠𝑐𝑜𝑟𝑒 𝑟𝑐𝑐(𝒛𝑎)can be calculated with Theorem 3.1:
TheoRem 3.1. If the RCC-S condition holds, the score for RCC 𝒛𝑎
can be calculated with Eq. 8:
𝑠𝑐𝑜𝑟𝑒 𝑟𝑐𝑐(𝒛𝑎)= max
𝑖,𝒛𝑎∈𝒓𝒄𝒄 𝑖max𝑡𝑴(𝑡)
𝑎,𝑖
= max
𝑖,𝒛𝑎∈𝒓𝒄𝒄 𝑖(
𝑠𝑐𝑜𝑟𝑒 𝑚(𝒙𝑖)·(1− max
𝑗,∃𝒛𝑏∈𝒓𝒄𝒄 𝑗−𝒓𝒄𝒄 𝑖𝐿𝑖,𝑗))
(8)
where 𝑟𝑐𝑐𝑖,𝑗={𝒛𝑎|𝒛𝑎∈𝒓𝒄𝒄(𝒙𝑖)∩𝒓𝒄𝒄(𝑥𝑗)}.
PRoof. Refer to Appendix A. □
Therefore,wecanobtaintheresultsoflatent-spaceintervention
recognition with Eq. 8.
3.3 Enhance RLIR with LatentRegressor
3.3.1 Motivation. Although RLIR is already capable of solving la-
tent RCC variables, it still has two problems: 1) The current algo-
rithm’s computational overhead is still too high. According to Eq.
6 and Eq. 12, the overall time complexity for RLIR is 𝑂(#𝑚×(#𝑚+
#𝑟𝑐𝑐)), where #𝑚denotes the number of metrics and #𝑟𝑐𝑐denotes
thenumberofRCCs.Alargenumberofcalculationsisstillneeded
in microservices systems with many metrics. 2) RLIR requires lin-
ear regression, which might be sensitive to noise in real-world ap-
plications.
6053KDD’24, August 25–29, 2024, Barcelona, Spain Zhe Xie et al.
Algorithm
1:LatentRegressor
Data:RCC
Relationship
𝐺𝑅𝐶𝐶=(𝑉𝑟, 𝐸𝑟(𝑎, 𝑏,{𝒙𝑖|𝑎, 𝑏∈𝒓𝒄𝒄(ˆ𝒙𝑖)}), Metric
Relationship 𝐺𝑚𝑒𝑡𝑟𝑖𝑐 =(𝑉𝑚, 𝐸𝑚(𝒙𝑖,𝒙𝑗))
Result: Root Cause Score for RCCs
1𝑎_𝑠𝑐𝑜𝑟𝑒𝑠←{},𝑏_𝑠𝑐𝑜𝑟𝑒𝑠←{},𝑟𝑒𝑠𝑢𝑙𝑡𝑠←{};
2foreach 𝑏∈𝑉𝑟do
3 ˆ𝒙𝑚←arg
max ˆ𝒙𝑖,𝑏∈𝒓𝒄𝒄(𝒙𝑖),∀𝑐∈𝑛𝑒𝑥𝑡(𝑏)−𝒓𝒄𝒄(𝒙𝑖)𝑠𝑐𝑜𝑟𝑒 𝑚(ˆ𝒙𝑖);
4 𝑏_𝑠𝑐𝑜𝑟𝑒𝑠[𝑏][𝒙𝑚𝑎𝑥]← 𝑠𝑐𝑜𝑟𝑒 𝑚(𝒙𝑚);
5end
6foreach 𝑎∈𝑉𝑟do
7 for
each 𝑏∈𝑛𝑒𝑥𝑡(𝑎)do
8 //Up
Step
9 ˆ𝒙𝑎←arg max ˆ𝒙𝑖,𝑎∈𝒓𝒄𝒄(𝒙𝑖),𝑏∉𝒓𝒄𝒄(𝒙𝑖)𝑠𝑐𝑜𝑟𝑒 𝑚(ˆ𝒙𝑖);
10 ˆ𝒙𝑏←arg max ˆ𝒙𝑖,𝑎∈𝒓𝒄𝒄(𝒙𝑖),𝑏∈𝒓𝒄𝒄(𝒙𝑖)𝑠𝑐𝑜𝑟𝑒 𝑚(ˆ𝒙𝑖);
11 𝑠𝑐𝑜𝑟𝑒 𝑎←𝑠𝑐𝑜𝑟𝑒 𝑚(𝒙𝑏)·𝑅𝑎,𝑏;
12 𝑠𝑐𝑜𝑟𝑒 𝑏←𝑠𝑐𝑜𝑟𝑒 𝑚(𝒙𝑏)·(1−𝑅𝑎,𝑏);
13 //Down Step
14 foreach 𝑐∈𝑝𝑟𝑒𝑣(𝑏)−{ 𝑎}do
15 ˆ𝒙𝑐←arg
max ˆ𝒙𝑖,𝑏∈𝒓𝒄𝒄(𝒙𝑖),𝑐∈𝒓𝒄𝒄(𝒙𝑖)𝑠𝑐𝑜𝑟𝑒 𝑚(ˆ𝒙𝑖);
16 𝑠𝑐𝑜𝑟𝑒 𝑎←𝑠𝑐𝑜𝑟𝑒 𝑎·(1−𝑅𝑏,𝑐);
17 end
18 𝑎_𝑠𝑐𝑜𝑟𝑒𝑠[𝑎]← max(𝑎_𝑠𝑐𝑜𝑟𝑒𝑠[𝑎], 𝑠𝑐𝑜𝑟𝑒 𝑎);
19 if𝒙𝑏∈𝑏_𝑠𝑐𝑜𝑟𝑒𝑠[𝑏]then
20 𝑏_𝑠
𝑐𝑜𝑟𝑒𝑠[𝑏][𝒙𝑏]←
min(𝑏_𝑠𝑐𝑜𝑟𝑒𝑠[𝑏][𝒙𝑏], 𝑠𝑐𝑜𝑟𝑒 𝑏);
21 end
22 end
23end
24foreach 𝑟𝑐𝑐∈𝑉𝑟do
25 r
esults[𝑟𝑐𝑐]← max(𝑎_𝑠𝑐𝑜𝑟𝑒𝑠[𝑟𝑐𝑐],max(𝑏_𝑠𝑐𝑜𝑟𝑒𝑠[𝑟𝑐𝑐]));
26end
27return results;
<latexit sha1_base64="fwR29GvtQwCyuvBNqshB6NzmJqI=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRLxtRTcuKxgH9CWkqTTGjp5kEzEUroTt/6AW/0l8Q/0L7wzTkEtohMyc+bce87MneslPMiEbb8WjLn5hcWl4nJpZXVtfcPc3KpncZ76rObHPE6bnpsxHkSsJgLBWTNJmRt6nDW84bmMN25YmgVxdCVGCeuE7iAK+oHvCqK6ptn2Yt7LRiEt49tJ1+maZbtiq2HNAkeDMvSoxuYL2ughho8cIRgiCMIcLjL6WnBgIyGugzFxKaFAxRkmKJE2pyxGGS6xQ5oHtGtpNqK99MyU2qdTOP0pKS3skSamvJSwPM1S8Vw5S/Y377HylHcb0eppr5BYgWti/9JNM/+rk7UI9HGqagiopkQxsjpfu+TqVeTNrS9VCXJIiJO4R/GUsK+U03e2lCZTtcu3dVX8TWVKVu59nZvjXd6SGuz8bOcsqB9UnOPK0eVh+czWrS5iB7vYp36e4AwXqKJG3jd4xBOejYYxMe6M+89Uo6A12/g2jIcP5ZKWVw==</latexit>x1<latexit sha1_base64="fTuoMFZ1EHl+eoiWJTIH5hLBULo=">AAAC1XicjVHLSsNAFD3GV62vqEs3wSK4KmnxtSy4cVnBPqAtJUmnNXTyIJkUS+lO3PoDbvWXxD/Qv/DOOAW1iE7IzJlz7zkzd64bcz8Vtv26YCwuLa+s5tby6xubW9vmzm49jbLEYzUv4lHSdJ2UcT9kNeELzppxwpzA5azhDi9kvDFiSepH4bUYx6wTOIPQ7/ueI4jqmmbbjXgvHQe0TG6n3XLXLNhFWw1rHpQ0KECPamS+oI0eInjIEIAhhCDM4SClr4USbMTEdTAhLiHkqzjDFHnSZpTFKMMhdkjzgHYtzYa0l56pUnt0Cqc/IaWFQ9JElJcQlqdZKp4pZ8n+5j1RnvJuY1pd7RUQK3BD7F+6WeZ/dbIWgT7OVQ0+1RQrRlbnaZdMvYq8ufWlKkEOMXES9yieEPaUcvbOltKkqnb5to6Kv6lMycq9p3MzvMtbUoNLP9s5D+rlYum0eHJ1XKjYutU57OMAR9TPM1RwiSpq5D3CI57wbDSMqXFn3H+mGgtas4dvw3j4AOfyllg=</latexit>x2<latexit sha1_base64="VH58L18N1lKJgWlW1tjRP0jToCY=">AAAC1XicjVHLSsNAFD3GV62vqEs3wSK4KqnvZcGNywr2AW0pSTqtoUkmJJNiKd2JW3/Arf6S+Af6F94Zp6AW0QmZOXPuPWfmznXjwE+Fbb/OGfMLi0vLuZX86tr6xqa5tV1LeZZ4rOrxgCcN10lZ4EesKnwRsEacMCd0A1Z3BxcyXh+yJPV5dC1GMWuHTj/ye77nCKI6ptlyedBNRyEt49tJ56hjFuyirYY1C0oaFKBHhZsvaKELDg8ZQjBEEIQDOEjpa6IEGzFxbYyJSwj5Ks4wQZ60GWUxynCIHdDcp11TsxHtpWeq1B6dEtCfkNLCPmk45SWE5WmWimfKWbK/eY+Vp7zbiFZXe4XECtwQ+5dumvlfnaxFoIdzVYNPNcWKkdV52iVTryJvbn2pSpBDTJzEXYonhD2lnL6zpTSpql2+raPibypTsnLv6dwM7/KW1ODSz3bOgtphsXRaPLk6LpRt3eocdrGHA+rnGcq4RAVV8h7iEU94NurGxLgz7j9TjTmt2cG3YTx8AOpSllk=</latexit>x3<latexit sha1_base64="9RkK+oepLg+xr1wW5OjSDUzaSMk=">AAAC1XicjVHLSsNAFD3GV62vqEs3wSK4KqnUx7LgxmUF+4C2lCSd1tDJg2RSLKU7cesPuNVfEv9A/8I74xTUIjohM2fOvefM3LluzP1U2PbrgrG4tLyymlvLr29sbm2bO7v1NMoSj9W8iEdJ03VSxv2Q1YQvOGvGCXMCl7OGO7yQ8caIJakfhddiHLNO4AxCv+97jiCqa5ptN+K9dBzQMrmddstds2AXbTWseVDSoAA9qpH5gjZ6iOAhQwCGEIIwh4OUvhZKsBET18GEuISQr+IMU+RJm1EWowyH2CHNA9q1NBvSXnqmSu3RKZz+hJQWDkkTUV5CWJ5mqXimnCX7m/dEecq7jWl1tVdArMANsX/pZpn/1claBPo4VzX4VFOsGFmdp10y9Sry5taXqgQ5xMRJ3KN4QthTytk7W0qTqtrl2zoq/qYyJSv3ns7N8C5vSQ0u/WznPKgfF0unxZOrcqFi61bnsI8DHFE/z1DBJaqokfcIj3jCs9Ewpsadcf+ZaixozR6+DePhA+yyllo=</latexit>x4<latexit sha1_base64="sgkFvsXP3PIbMFagKfQaT85fMWE=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRLR2mXBjcsK9gFtKUk6raF5kUwKtXQnbv0Bt/pL4h/oX3hnnIJaRCdk5sy595yZO9eJfS/lpvma05aWV1bX8uuFjc2t7R19d6+RRlnisrob+VHScuyU+V7I6tzjPmvFCbMDx2dNZ3Qh4s0xS1IvCq/5JGbdwB6G3sBzbU5UT9c7TuT300lAy/R21iv39KJZMuUwFoGlQBFq1CL9BR30EcFFhgAMIThhHzZS+tqwYCImrospcQkhT8YZZiiQNqMsRhk2sSOah7RrKzakvfBMpdqlU3z6E1IaOCJNRHkJYXGaIeOZdBbsb95T6SnuNqHVUV4BsRw3xP6lm2f+Vydq4RigImvwqKZYMqI6V7lk8lXEzY0vVXFyiIkTuE/xhLArlfN3NqQmlbWLt7Vl/E1mClbsXZWb4V3ckhps/WznImiclKxy6ezqtFitqFbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquWUZh/fhvbwAfiglmY=</latexit>z6
<latexit sha1_base64="TFlEzY9bCkApkWs+0OYxe/Ffocg=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRKx2mXBjcsK9gFtKUk6raF5kUwKtXQnbv0Bt/pL4h/oX3hnnIJaRCdk5sy595yZO9eJfS/lpvma05aWV1bX8uuFjc2t7R19d6+RRlnisrob+VHScuyU+V7I6tzjPmvFCbMDx2dNZ3Qh4s0xS1IvCq/5JGbdwB6G3sBzbU5UT9c7TuT300lAy/R21iv39KJZMuUwFoGlQBFq1CL9BR30EcFFhgAMIThhHzZS+tqwYCImrospcQkhT8YZZiiQNqMsRhk2sSOah7RrKzakvfBMpdqlU3z6E1IaOCJNRHkJYXGaIeOZdBbsb95T6SnuNqHVUV4BsRw3xP6lm2f+Vydq4RigImvwqKZYMqI6V7lk8lXEzY0vVXFyiIkTuE/xhLArlfN3NqQmlbWLt7Vl/E1mClbsXZWb4V3ckhps/WznImiclKyzUvnqtFitqFbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquWUZh/fhvbwAfZAlmU=</latexit>z5
<latexit sha1_base64="hBN4nRMNalBDjJSe/1OkMdE53bo=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRKp2mXBjcsK9gFtKUk6raF5kUwKtXQnbv0Bt/pL4h/oX3hnnIJaRCdk5sy595yZO9eJfS/lpvma05aWV1bX8uuFjc2t7R19d6+RRlnisrob+VHScuyU+V7I6tzjPmvFCbMDx2dNZ3Qh4s0xS1IvCq/5JGbdwB6G3sBzbU5UT9c7TuT300lAy/R21iv39KJZMuUwFoGlQBFq1CL9BR30EcFFhgAMIThhHzZS+tqwYCImrospcQkhT8YZZiiQNqMsRhk2sSOah7RrKzakvfBMpdqlU3z6E1IaOCJNRHkJYXGaIeOZdBbsb95T6SnuNqHVUV4BsRw3xP6lm2f+Vydq4RigImvwqKZYMqI6V7lk8lXEzY0vVXFyiIkTuE/xhLArlfN3NqQmlbWLt7Vl/E1mClbsXZWb4V3ckhps/WznImiclKyz0ulVuVitqFbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquWUZh/fhvbwAfPglmQ=</latexit>z4
<latexit sha1_base64="zgNNEPY+fLt40jy30H+sPTXNj/I=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRKfXRbcuKxgH9CWkqTTGpoXk0mhlu7ErT/gVn9J/AP9C++MKahFdEJmzpx7z5m5c53Y9xJhmq85bWFxaXklv1pYW9/Y3NK3d+pJlHKX1dzIj3jTsRPmeyGrCU/4rBlzZgeOzxrO8ELGGyPGEy8Kr8U4Zp3AHoRe33NtQVRX19tO5PeScUDL5HbaPe7qRbNkqmHMAysDRWSjGukvaKOHCC5SBGAIIQj7sJHQ14IFEzFxHUyI44Q8FWeYokDalLIYZdjEDmke0K6VsSHtpWei1C6d4tPPSWnggDQR5XHC8jRDxVPlLNnfvCfKU95tTKuTeQXECtwQ+5dulvlfnaxFoI+yqsGjmmLFyOrczCVVryJvbnypSpBDTJzEPYpzwq5Szt7ZUJpE1S7f1lbxN5UpWbl3s9wU7/KW1GDrZzvnQf2oZJ2VTq9OipVy1uo89rCPQ+rnOSq4RBU18h7hEU941hraVLvT7j9TtVym2cW3oT18APGAlmM=</latexit>z3
<latexit sha1_base64="+XdUf8ZcC5phcD1vYPlPiM5Kqv0=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRLxtSy4cVnBPqCVkkyndWheJBOhlu7ErT/gVn9J/AP9C++MKahFdEJmzpx7z5m5c73YF6m07deCMTe/sLhUXC6trK6tb5ibW400yhLG6yzyo6TluSn3RcjrUkift+KEu4Hn86Y3PFPx5g1PUhGFl3IU86vAHYSiL5grieqaZseL/F46CmgZ3066Ttcs2xVbD2sWODkoIx+1yHxBBz1EYMgQgCOEJOzDRUpfGw5sxMRdYUxcQkjoOMcEJdJmlMUpwyV2SPOAdu2cDWmvPFOtZnSKT39CSgt7pIkoLyGsTrN0PNPOiv3Ne6w91d1GtHq5V0CsxDWxf+mmmf/VqVok+jjVNQiqKdaMqo7lLpl+FXVz60tVkhxi4hTuUTwhzLRy+s6W1qS6dvW2ro6/6UzFqj3LczO8q1tSg52f7ZwFjYOKc1w5ujgsV0/zVhexg13sUz9PUMU5aqiT9w0e8YRno2lMjDvj/jPVKOSabXwbxsMH7MCWYQ==</latexit>z1<latexit sha1_base64="jL4OG92q32yVBhaRQRu8G5AjTyo=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVZLio8uCG5cV7APaUpJ0WofmRTIp1NKduPUH3OoviX+gf+GdMQW1iE7IzJlz7zkzd64TeTwRpvma05aWV1bX8uuFjc2t7R19d6+RhGnssrobemHccuyEeTxgdcGFx1pRzGzf8VjTGV3IeHPM4oSHwbWYRKzr28OAD7hrC6J6ut5xQq+fTHxaprezXrmnF82SqYaxCKwMFJGNWqi/oIM+QrhI4YMhgCDswUZCXxsWTETEdTElLibEVZxhhgJpU8pilGETO6J5SLt2xga0l56JUrt0ikd/TEoDR6QJKS8mLE8zVDxVzpL9zXuqPOXdJrQ6mZdPrMANsX/p5pn/1claBAaoqBo41RQpRlbnZi6pehV5c+NLVYIcIuIk7lM8Juwq5fydDaVJVO3ybW0Vf1OZkpV7N8tN8S5vSQ22frZzETTKJeusdHp1UqxWslbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquUyzT6+De3hA+8glmI=</latexit>z2LayeredGraphUpStepDownStepResidual Value of MetricsLatentRegressorResultsRidge Regression<latexit sha1_base64="sgkFvsXP3PIbMFagKfQaT85fMWE=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRLR2mXBjcsK9gFtKUk6raF5kUwKtXQnbv0Bt/pL4h/oX3hnnIJaRCdk5sy595yZO9eJfS/lpvma05aWV1bX8uuFjc2t7R19d6+RRlnisrob+VHScuyU+V7I6tzjPmvFCbMDx2dNZ3Qh4s0xS1IvCq/5JGbdwB6G3sBzbU5UT9c7TuT300lAy/R21iv39KJZMuUwFoGlQBFq1CL9BR30EcFFhgAMIThhHzZS+tqwYCImrospcQkhT8YZZiiQNqMsRhk2sSOah7RrKzakvfBMpdqlU3z6E1IaOCJNRHkJYXGaIeOZdBbsb95T6SnuNqHVUV4BsRw3xP6lm2f+Vydq4RigImvwqKZYMqI6V7lk8lXEzY0vVXFyiIkTuE/xhLArlfN3NqQmlbWLt7Vl/E1mClbsXZWb4V3ckhps/WznImiclKxy6ezqtFitqFbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquWUZh/fhvbwAfiglmY=</latexit>z6
<latexit sha1_base64="TFlEzY9bCkApkWs+0OYxe/Ffocg=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRKx2mXBjcsK9gFtKUk6raF5kUwKtXQnbv0Bt/pL4h/oX3hnnIJaRCdk5sy595yZO9eJfS/lpvma05aWV1bX8uuFjc2t7R19d6+RRlnisrob+VHScuyU+V7I6tzjPmvFCbMDx2dNZ3Qh4s0xS1IvCq/5JGbdwB6G3sBzbU5UT9c7TuT300lAy/R21iv39KJZMuUwFoGlQBFq1CL9BR30EcFFhgAMIThhHzZS+tqwYCImrospcQkhT8YZZiiQNqMsRhk2sSOah7RrKzakvfBMpdqlU3z6E1IaOCJNRHkJYXGaIeOZdBbsb95T6SnuNqHVUV4BsRw3xP6lm2f+Vydq4RigImvwqKZYMqI6V7lk8lXEzY0vVXFyiIkTuE/xhLArlfN3NqQmlbWLt7Vl/E1mClbsXZWb4V3ckhps/WznImiclKyzUvnqtFitqFbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquWUZh/fhvbwAfZAlmU=</latexit>z5
<latexit sha1_base64="hBN4nRMNalBDjJSe/1OkMdE53bo=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRKp2mXBjcsK9gFtKUk6raF5kUwKtXQnbv0Bt/pL4h/oX3hnnIJaRCdk5sy595yZO9eJfS/lpvma05aWV1bX8uuFjc2t7R19d6+RRlnisrob+VHScuyU+V7I6tzjPmvFCbMDx2dNZ3Qh4s0xS1IvCq/5JGbdwB6G3sBzbU5UT9c7TuT300lAy/R21iv39KJZMuUwFoGlQBFq1CL9BR30EcFFhgAMIThhHzZS+tqwYCImrospcQkhT8YZZiiQNqMsRhk2sSOah7RrKzakvfBMpdqlU3z6E1IaOCJNRHkJYXGaIeOZdBbsb95T6SnuNqHVUV4BsRw3xP6lm2f+Vydq4RigImvwqKZYMqI6V7lk8lXEzY0vVXFyiIkTuE/xhLArlfN3NqQmlbWLt7Vl/E1mClbsXZWb4V3ckhps/WznImiclKyz0ulVuVitqFbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquWUZh/fhvbwAfPglmQ=</latexit>z4
<latexit sha1_base64="zgNNEPY+fLt40jy30H+sPTXNj/I=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRKfXRbcuKxgH9CWkqTTGpoXk0mhlu7ErT/gVn9J/AP9C++MKahFdEJmzpx7z5m5c53Y9xJhmq85bWFxaXklv1pYW9/Y3NK3d+pJlHKX1dzIj3jTsRPmeyGrCU/4rBlzZgeOzxrO8ELGGyPGEy8Kr8U4Zp3AHoRe33NtQVRX19tO5PeScUDL5HbaPe7qRbNkqmHMAysDRWSjGukvaKOHCC5SBGAIIQj7sJHQ14IFEzFxHUyI44Q8FWeYokDalLIYZdjEDmke0K6VsSHtpWei1C6d4tPPSWnggDQR5XHC8jRDxVPlLNnfvCfKU95tTKuTeQXECtwQ+5dulvlfnaxFoI+yqsGjmmLFyOrczCVVryJvbnypSpBDTJzEPYpzwq5Szt7ZUJpE1S7f1lbxN5UpWbl3s9wU7/KW1GDrZzvnQf2oZJ2VTq9OipVy1uo89rCPQ+rnOSq4RBU18h7hEU941hraVLvT7j9TtVym2cW3oT18APGAlmM=</latexit>z3
<latexit sha1_base64="+XdUf8ZcC5phcD1vYPlPiM5Kqv0=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRLxtSy4cVnBPqCVkkyndWheJBOhlu7ErT/gVn9J/AP9C++MKahFdEJmzpx7z5m5c73YF6m07deCMTe/sLhUXC6trK6tb5ibW400yhLG6yzyo6TluSn3RcjrUkift+KEu4Hn86Y3PFPx5g1PUhGFl3IU86vAHYSiL5grieqaZseL/F46CmgZ3066Ttcs2xVbD2sWODkoIx+1yHxBBz1EYMgQgCOEJOzDRUpfGw5sxMRdYUxcQkjoOMcEJdJmlMUpwyV2SPOAdu2cDWmvPFOtZnSKT39CSgt7pIkoLyGsTrN0PNPOiv3Ne6w91d1GtHq5V0CsxDWxf+mmmf/VqVok+jjVNQiqKdaMqo7lLpl+FXVz60tVkhxi4hTuUTwhzLRy+s6W1qS6dvW2ro6/6UzFqj3LczO8q1tSg52f7ZwFjYOKc1w5ujgsV0/zVhexg13sUz9PUMU5aqiT9w0e8YRno2lMjDvj/jPVKOSabXwbxsMH7MCWYQ==</latexit>z1<latexit sha1_base64="jL4OG92q32yVBhaRQRu8G5AjTyo=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVZLio8uCG5cV7APaUpJ0WofmRTIp1NKduPUH3OoviX+gf+GdMQW1iE7IzJlz7zkzd64TeTwRpvma05aWV1bX8uuFjc2t7R19d6+RhGnssrobemHccuyEeTxgdcGFx1pRzGzf8VjTGV3IeHPM4oSHwbWYRKzr28OAD7hrC6J6ut5xQq+fTHxaprezXrmnF82SqYaxCKwMFJGNWqi/oIM+QrhI4YMhgCDswUZCXxsWTETEdTElLibEVZxhhgJpU8pilGETO6J5SLt2xga0l56JUrt0ikd/TEoDR6QJKS8mLE8zVDxVzpL9zXuqPOXdJrQ6mZdPrMANsX/p5pn/1claBAaoqBo41RQpRlbnZi6pehV5c+NLVYIcIuIk7lM8Juwq5fydDaVJVO3ybW0Vf1OZkpV7N8tN8S5vSQ22frZzETTKJeusdHp1UqxWslbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquUyzT6+De3hA+8glmI=</latexit>z2
<latexit sha1_base64="sgkFvsXP3PIbMFagKfQaT85fMWE=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRLR2mXBjcsK9gFtKUk6raF5kUwKtXQnbv0Bt/pL4h/oX3hnnIJaRCdk5sy595yZO9eJfS/lpvma05aWV1bX8uuFjc2t7R19d6+RRlnisrob+VHScuyU+V7I6tzjPmvFCbMDx2dNZ3Qh4s0xS1IvCq/5JGbdwB6G3sBzbU5UT9c7TuT300lAy/R21iv39KJZMuUwFoGlQBFq1CL9BR30EcFFhgAMIThhHzZS+tqwYCImrospcQkhT8YZZiiQNqMsRhk2sSOah7RrKzakvfBMpdqlU3z6E1IaOCJNRHkJYXGaIeOZdBbsb95T6SnuNqHVUV4BsRw3xP6lm2f+Vydq4RigImvwqKZYMqI6V7lk8lXEzY0vVXFyiIkTuE/xhLArlfN3NqQmlbWLt7Vl/E1mClbsXZWb4V3ckhps/WznImiclKxy6ezqtFitqFbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquWUZh/fhvbwAfiglmY=</latexit>z6
<latexit sha1_base64="TFlEzY9bCkApkWs+0OYxe/Ffocg=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRKx2mXBjcsK9gFtKUk6raF5kUwKtXQnbv0Bt/pL4h/oX3hnnIJaRCdk5sy595yZO9eJfS/lpvma05aWV1bX8uuFjc2t7R19d6+RRlnisrob+VHScuyU+V7I6tzjPmvFCbMDx2dNZ3Qh4s0xS1IvCq/5JGbdwB6G3sBzbU5UT9c7TuT300lAy/R21iv39KJZMuUwFoGlQBFq1CL9BR30EcFFhgAMIThhHzZS+tqwYCImrospcQkhT8YZZiiQNqMsRhk2sSOah7RrKzakvfBMpdqlU3z6E1IaOCJNRHkJYXGaIeOZdBbsb95T6SnuNqHVUV4BsRw3xP6lm2f+Vydq4RigImvwqKZYMqI6V7lk8lXEzY0vVXFyiIkTuE/xhLArlfN3NqQmlbWLt7Vl/E1mClbsXZWb4V3ckhps/WznImiclKyzUvnqtFitqFbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquWUZh/fhvbwAfZAlmU=</latexit>z5
<latexit sha1_base64="hBN4nRMNalBDjJSe/1OkMdE53bo=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRKp2mXBjcsK9gFtKUk6raF5kUwKtXQnbv0Bt/pL4h/oX3hnnIJaRCdk5sy595yZO9eJfS/lpvma05aWV1bX8uuFjc2t7R19d6+RRlnisrob+VHScuyU+V7I6tzjPmvFCbMDx2dNZ3Qh4s0xS1IvCq/5JGbdwB6G3sBzbU5UT9c7TuT300lAy/R21iv39KJZMuUwFoGlQBFq1CL9BR30EcFFhgAMIThhHzZS+tqwYCImrospcQkhT8YZZiiQNqMsRhk2sSOah7RrKzakvfBMpdqlU3z6E1IaOCJNRHkJYXGaIeOZdBbsb95T6SnuNqHVUV4BsRw3xP6lm2f+Vydq4RigImvwqKZYMqI6V7lk8lXEzY0vVXFyiIkTuE/xhLArlfN3NqQmlbWLt7Vl/E1mClbsXZWb4V3ckhps/WznImiclKyz0ulVuVitqFbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquWUZh/fhvbwAfPglmQ=</latexit>z4
<latexit sha1_base64="zgNNEPY+fLt40jy30H+sPTXNj/I=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRKfXRbcuKxgH9CWkqTTGpoXk0mhlu7ErT/gVn9J/AP9C++MKahFdEJmzpx7z5m5c53Y9xJhmq85bWFxaXklv1pYW9/Y3NK3d+pJlHKX1dzIj3jTsRPmeyGrCU/4rBlzZgeOzxrO8ELGGyPGEy8Kr8U4Zp3AHoRe33NtQVRX19tO5PeScUDL5HbaPe7qRbNkqmHMAysDRWSjGukvaKOHCC5SBGAIIQj7sJHQ14IFEzFxHUyI44Q8FWeYokDalLIYZdjEDmke0K6VsSHtpWei1C6d4tPPSWnggDQR5XHC8jRDxVPlLNnfvCfKU95tTKuTeQXECtwQ+5dulvlfnaxFoI+yqsGjmmLFyOrczCVVryJvbnypSpBDTJzEPYpzwq5Szt7ZUJpE1S7f1lbxN5UpWbl3s9wU7/KW1GDrZzvnQf2oZJ2VTq9OipVy1uo89rCPQ+rnOSq4RBU18h7hEU941hraVLvT7j9TtVym2cW3oT18APGAlmM=</latexit>z3
<latexit sha1_base64="+XdUf8ZcC5phcD1vYPlPiM5Kqv0=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVRLxtSy4cVnBPqCVkkyndWheJBOhlu7ErT/gVn9J/AP9C++MKahFdEJmzpx7z5m5c73YF6m07deCMTe/sLhUXC6trK6tb5ibW400yhLG6yzyo6TluSn3RcjrUkift+KEu4Hn86Y3PFPx5g1PUhGFl3IU86vAHYSiL5grieqaZseL/F46CmgZ3066Ttcs2xVbD2sWODkoIx+1yHxBBz1EYMgQgCOEJOzDRUpfGw5sxMRdYUxcQkjoOMcEJdJmlMUpwyV2SPOAdu2cDWmvPFOtZnSKT39CSgt7pIkoLyGsTrN0PNPOiv3Ne6w91d1GtHq5V0CsxDWxf+mmmf/VqVok+jjVNQiqKdaMqo7lLpl+FXVz60tVkhxi4hTuUTwhzLRy+s6W1qS6dvW2ro6/6UzFqj3LczO8q1tSg52f7ZwFjYOKc1w5ujgsV0/zVhexg13sUz9PUMU5aqiT9w0e8YRno2lMjDvj/jPVKOSabXwbxsMH7MCWYQ==</latexit>z1<latexit sha1_base64="jL4OG92q32yVBhaRQRu8G5AjTyo=">AAAC1XicjVHLSsNAFD2Nr1pfUZdugkVwVZLio8uCG5cV7APaUpJ0WofmRTIp1NKduPUH3OoviX+gf+GdMQW1iE7IzJlz7zkzd64TeTwRpvma05aWV1bX8uuFjc2t7R19d6+RhGnssrobemHccuyEeTxgdcGFx1pRzGzf8VjTGV3IeHPM4oSHwbWYRKzr28OAD7hrC6J6ut5xQq+fTHxaprezXrmnF82SqYaxCKwMFJGNWqi/oIM+QrhI4YMhgCDswUZCXxsWTETEdTElLibEVZxhhgJpU8pilGETO6J5SLt2xga0l56JUrt0ikd/TEoDR6QJKS8mLE8zVDxVzpL9zXuqPOXdJrQ6mZdPrMANsX/p5pn/1claBAaoqBo41RQpRlbnZi6pehV5c+NLVYIcIuIk7lM8Juwq5fydDaVJVO3ybW0Vf1OZkpV7N8tN8S5vSQ22frZzETTKJeusdHp1UqxWslbncYBDHFM/z1HFJWqok/cYj3jCs9bUZtqddv+ZquUyzT6+De3hA+8glmI=</latexit>z2
Figur
e 5: An Example of Process in LatentRegressor
3.3.2 LatentRegressor. To address the challenges, we propose the
enhancement algorithm for RLIR, LatentRegressor (Alg. 1). In 1,
the calculation of Eq. 12 is simplified. For each edge ( 𝐸𝑟) in the
RCC layer, we perform a two-step calculation (Up Step and Down
Step in 1) between the connected nodes ( 𝑎and 𝑏). After the calcu-
lation, we store their scores in 𝑎_𝑠𝑐𝑜𝑟𝑒𝑠and 𝑏_𝑠𝑐𝑜𝑟𝑒𝑠respectively
and finally take the maximum score for each RCC to obtain the
final root cause scores. In this way, LatentRegressor reduces re-
dundant calculations in RLIR (for instance, it’s unnecessary to re-
peatedly perform regressions with multiple metrics belonging to
the same RCC). Additionally, we employ ridge regression ( 𝑅𝑖,𝑗) in
LatentRegressor instead of using linear regression for 𝐿𝑖,𝑗, making
itmorerobusttothenoiseinEq.6.Foreaseofunderstanding,eachiteration of the LatentRegressor can be viewed as comprising two
steps.
Thefirststepiscalled“UpStep”,whichcanbeviewedas“identi-
fyingall the possible parentconfounders forthe child nodes” in la-
tentspace. Asshownin Fig. 5,after Step 1, the parentconfounders
𝒛1and𝒛2are identified as possible root causes (with fluctuations),
while others are eliminated. The second step is the “Down Step”,
which “removes the redundant confounders” produced in the Up
Step. In Fig. 5, the fluctuation in 𝒛2is removed. Therefore, only 𝒛1
is identified as the only root cause in the latent space. With Laten-
tRegressor, we only need to perform a regression calculation on
the metrics once, significantly reducing computational overhead.
4 EVALUATION
Inthissection,wefocusontheevaluationtoanswerthefollowing
research questions:
RQ1:How does LatentScope perform compared with baselines?
RQ2:Is “modeling RCCs as latent variables” effective in localizing
heterogeneous root causes with limited observability?
RQ3:Is the enhancement in LatentRegressor effective in terms of
time efficiency and accuracy?
4.1 Evaluation Details
4.1.1 Datasets. We use two datasets for evaluation. Both datasets
contain heterogeneous RCCs with limited observability for evalu-
ation.
•Dataset A. CollectedfromeBay’smicroservicessystemcontain-
ing 66 real-world failure cases over 6 months, labeled by expe-
rienced engineers. Dataset A contains over 300 microservices,
dozens of databases, hundreds of software changes, more than
tenthird-partyserviceproviderinterfaces,andhundredsofthou-
sands of monitoring metrics. In this dataset, most categories of
failures exhibit incomplete observability (Sec. 2.3).
•Dataset B. Collectedfromtestbed(OnlineBoutique3)withfault
injection containing 88 failure cases. Dataset B is comprised of
11 microservices. RCCs can be Pods, Hosts, or Services. Weonly
usemetricsdatafromcontainersandservicesandtheRCCshave
limited observability.
4.1.2 Evaluation Metrics. FollowingexistingRCAresearch,weuse
Top-k and MRR for evaluation [13]. We also use macro metrics to
balance the weight of different categories of root causes. More de-
tails are in Appendix B.
4.1.3 Baselines. We employed the following root cause analysis
algorithms as baselines. Most of the baselines cannot perform lo-
calization with heterogeneous RCCs. We use metric-level results
and take the maximum score of related metrics as the RCC score.
RandomWalk. Weuseamodifiedversionofrandomwalk[22].It
first performs a random walk on the metric graph, followed by a
second random walk in the RCC graph.
MonitorRank. MonitorRank [7] utilizes PageRank for root cause
ranking in a causal graph.
MicroScope. MicroScope [12] builds a causal graph with PC algo-
rithm and ranks RCC by similarity after a DFS search.
3https://github
.com/GoogleCloudPlatform/microservices-demo
6054Microservice Root Cause Analysis With Limited Observability Through Intervention Recognition in the Latent Space KDD ’24, August 25–29, 2024, Barcelona, Spain
Table 2: Comparison with Baselines and Ablation Study
Micr
o Macro
Dataset Categor
y Model Top@1 Top@5 MRR MRR@5 Top@1 Top@5 MRR MRR@5 Avg. Time (s)
ABaselinesRandomW
alk 0.5606 0.5606 0.5683 0.5606 0.1888 0.1888 0.2117 0.1888 7.1
MonitorRank 0.5000 0.6970 0.5993 0.5745 0.2415 0.3443 0.3228 0.2666 5.9
MicroScope 0.3030 0.5303 0.4030 0.3851 0.2168 0.2934 0.2759 0.2445 5.4
CloudRanger 0.2632 0.5802 0.4045 0.3813 0.0939 0.2094 0.1564 0.1358 603.3
MicroCause 0.2391 0.8478 0.5163 0.5116 0.1433 0.8158 0.3841 0.3707 302.5
TrinityRCL 0.0303 0.1212 0.0607 0.0494 0.1250 0.3486 0.1858 0.1788 14.6
Study
of Latent VariablesCIRCA-Avg 0.5152 0.8333 0.6512 0.6288 0.2832 0.8335 0.4952 0.4869 11.3
CIRCA-Max 0.4697 0.8923 0.6473 0.6402 0.4243 0.9118 0.6228 0.6167 11.3
OursLatentScop
e (RLIR Only) 0.5606 0.8615 0.6828 0.6641 0.4133 0.8699 0.5789 0.5729 136.4
LatentScope 0.6154 0.8923 0.7324 0.7205 0.6302 0.9118 0.7430 0.7372 11.6
BBaselinesRandomW
alk 0.1379 0.4912 0.2902 0.2498 0.1273 0.5795 0.3210 0.2841 3.0
MonitorRank 0.1724 0.5632 0.3146 0.2816 0.1923 0.4313 0.2983 0.2587 5.1
MicroScope 0.0920 0.5977 0.3123 0.2739 0.1026 0.6404 0.3495 0.3118 0.2
CloudRanger 0.1707 0.6849 0.3906 0.3703 0.1740 0.7452 0.3936 0.3786 3.2
MicroCause 0.1724 0.7241 0.4101 0.3771 0.1862 0.7908 0.4151 0.3851 71.9
TrinityRCL 0.0517 0.1264 0.1169 0.0795 0.1189 0.2809 0.2185 0.1775 6.1
Study
of Latent VariablesCIRCA-Avg 0.2045 0.8295 0.4589 0.4186 0.2246 0.7698 0.4332 0.3841 10.7
CIRCA-Max 0.2159 0.8636 0.4633 0.4393 0.2804 0.8847 0.4537 0.4344 10.7
OursLatentScop
e (RLIR Only) 0.3258 0.9299 0.4882 0.4706 0.3063 0.9353 0.4745 0.4586 586.3
LatentScope 0.3750 0.9205 0.6064 0.5953 0.4337 0.9287 0.6491 0.6394 10.9
Micr
oCause. MicroCause [16] proposes Path Condition Time Se-
ries(PCTS)algorithmforcausaldiscoveryandutilizessecond-order
random walk to address delay in failure propagation.
CloudRanger. CloudRanger [21] constructs a causal graph with
PC and employs a second-order random walk for root cause rank-
ing.
TrinityRCL. TrinityRCL [5] proposes a multi-granular RCA algo-
rithm based on a random walk, but limited in services, hosts, met-
rics, and codes levels. We modified TrinityRCL by creating virtual
hosts and services to adapt it to more RCCs in our datasets.
CIRCA. CIRCA[9]proposesintervention-recognitionRCAatmet-
ric level. It is equivalent to a variation of LatentScope without a
latent layer. Thus, we detail the comparison of CIRCA in RQ2.
4.2 RQ1: Comparison with Baselines
Service
ChangeDatabase
Internal
Service
Third-Party Service0.20.40.60.8
Ours
RandomWalk
MicroScope
MicroCause
MonitorRank
CloudRanger
TrinityRCL
(
a) Dataset A
ServicePod
Node0.20.40.60.8
Ours
RandomWalk
MicroScope
MicroCause
MonitorRank
CloudRanger
TrinityRCL (
b) Dataset B
Figure 6: Micro MRR for Different Categories of Root Cause
The comparison with baselines is shown in Tab. 2. The experi-
mental results demonstrate that our LatentScope outperforms the
baselinealgorithminbothMicroandMacrometrics.Thisindicates
that our algorithm, compared to existing ones, can effectively im-
prove performance in heterogeneous root cause localization tasks.It is noteworthy that our algorithm has achieved a significant im-
provement in the Macro metrics. In algorithms like MonitorRank,
MicroCause, and MicroScope, root cause localization is conducted
solely at the metric-level causal graphs. Due to the complexity
brought by heterogeneous RCCs and the limitation of observabil-
ity, even though they might accurately locate causes at the metric
level,theymaynotperformwellinheterogeneousrootcauselocal-
izationtasks.AsforRandomWalk,despiteemployingadual-space
graph, the complex relationships between RCCs make it challeng-
ing to accurately quantify the transition matrix. LatentScope uses
latent-spaceinterventionrecognitiontoperformprecisemodeling
of latent RCC variables and achieves accurate RCA in most cases.
Additionally,Tab.2showstheruntimeofLatentScope.Itcanbe
observed that the average running time of LatentScope is accept-
able compared to the baseline algorithms. Due to the significant
reductionincomputationalcomplexitybyLatentRegressor(which
will be further discussed in Sec. 4.4), LatentScope is more suitable
for large-scale microservice systems compared to algorithms like
CloudRange and MicroCause which require causal discovery.
To further explore why our algorithm outperforms the baseline
algorithm, Fig. 6 demonstrates the micro MRR in different cate-
goriesofrootcauses.InDatasetA,mostalgorithmscanaccurately
locate faults in third-party services but perform poorly in other
cases. In Dataset B, LatentScope also shows an advantage in locat-
ingrootcausesinnodeandservicecases.Thisindicatesthatthede-
sign of LatentScope framework effectively models heterogeneous
RCCs in different datasets.
We can also find that there is a significant difference in Mi-
cro Top@1 between Dataset A and B. The main reason for this is
that Dataset B has more limitations in observability compared to
Dataset A. Dataset A is collected from a real microservices system
and includes more comprehensive observability metrics. Despite
the limited observability in Dataset B, LatentScope demonstrated
robust performance and significantly outperformed the baselines.
6055KDD’24, August 25–29, 2024, Barcelona, Spain Zhe Xie et al.
This indicates that our algorithm is well-suited to work with lim-
ited observability in the microservices systems.
4.3 RQ2: Ablation Study of Latent Layer
Service
ChangeDatabase
Internal
Service
Third-Party Service0.20.40.60.8
Ours
CIRCA-Max
CIRCA-Avg
(
a) Dataset A
ServicePod
Host0.20.40.60.8
Ours
CIRCA-Max
CIRCA-Avg (
b) Dataset B
Figure 7: Ablation Study of Latent Layer
We conduct an ablation study to investigatethe effectiveness of
“modeling RCCs as latent variables”. To achieve this, we replaced
the latent layer and LatentRegressor by applying two types of ag-
gregation directly on the metric layer: the maximum value of re-
lated metrics (CIRCA-Max) and the average value of related met-
rics (CIRCA-Avg). As mentioned earlier, CIRCA is equivalent to
the variation of LatentScope without the latent layer. The removal
oflatentvariablesleavesonlythemetriclayer,soitisequivalentto
CIRCA with different aggregation methods. The results of the ex-
periment are shown in Tab. 2 and Fig. 7. We can find that our algo-
rithmsignificantlyoutperformsthecomparedalgorithmsinevalu-
ationmetrics.Moreover,Fig.7indicatesthatLatentScopeachieves
good results in almost all categories of cases, while the compared
methods typically achieve good results in cases with only certain
categories of root causes. This might be due to their difficulty dis-
tinguishingthespecificleveloftheheterogeneousRCCs( e.g.,host
and pod) under limited observability. Refer to the case studies in
Sec. 5.2 for details to further understand the process and effective-
ness of the latent variables under limited observability.
4.4 RQ3: Ablation Study of LatentRegressor
Table 3: Avg. Running Time (s) of RLIR and LatentRegressor
Dataset
LatentRegressor RLIR Dataset
LatentRegressor RLIR
A 0.7 124.7 B 0.2 579.1
In
order to investigate whether LatentRegressor can effectively
improve accuracy and reduce running time, we conducted an abla-
tionstudy.WecomparetherunningtimeofRLIR(LatentRegressor
without enhancement) and the LatentRegressor in Tab. 3 and their
accuracy in Tab. 2. The comparison results indicate that the pro-
posed enhancement in LatentRegressor not only achieves much
faster speed but also achieves higher accuracy in most evaluation
metrics,demonstratingtheeffectivenessofLatentRegressorinterms
of both accuracy and time efficiency with the reduced regression
calculations and the use of Ridge regression.5 DEPLOYMENT AND CASE STUDY
5.1 Deployment Details
Metric(Prometheus)
Trigger
KubernetesClusterLatentScope
GraphDB(JanusGraph)
RCAReportOfflineUpdateOnlineFetchDetectTrigger
Figur
e 8: Study of Deployment of LatentScope
To investigate the effectiveness of LatentScope in real-world
applications, we deploy LatentScope in eBay’s production cluster.
TheoverallprocessofthedeployedalgorithmisillustratedinFig.8.
Refer to Appendix D for detailed system information. LatentScope
is deployed as a microservice application in eBay’s Kubernetes
cluster with the limitation of 2 CPU cores. Upon the occurrence
of a failure, LatentScope is triggered and fetches the metrics. After
performingLatentRegressor,therankingisoutputtotheoperators.
During the deployment on eBay’s cluster, due to the slow speed of
metric queries and retrieval, we made some trade-offs in the im-
plementation. When an anomalous SLI (service level indicator) is
detected, we determine the failing domain based on the triggered
SLI (such as the user experience of buying/selling in eBay) and
only extract metrics related to services in that domain to reduce
data retrieval time.
5.2 Case Studies
The quantitative evaluation of the deployed algorithm has been
discussed in Sec. 4. In this section, we perform 2 case studies to
further demonstrate the working process of LatentScope.
SVCBDB 21SVCASVC ASVC BSVC CDB 21RLEA Resultsscore=0score=0score=0score=3883Metric ScoresSVCCM#1M#2
M#3
score=3646score=3883score=3642
score=3score=24
score=4score=3646score=3883score=3642
SVC-ASVC-BSVC-CDB-1score=0score=0score=0score=3883SVC-AMarkdownSVC-BMarkdownSVC-CMarkdownRCCRCCRCCRCCObservableSpace(Metric RHT scorem)LatentSpace (RCC scorer)SVC-EErrSVC-FErrSVC-GErrMetricsRLIR ResultsLatentRegressor
Figur
e 9: Case study of a database failure case
5.2.1 Case Study 1: Online Database Failure in eBay. In this case,
weperform a casestudy (Fig. 9)on a real-worlddatabase failurein
eBay with the result of the deployed algorithm. As shown in Fig.
9, the database failure in DB-1 led to anomalies in the metrics of
several services through metric-RCC links (grey lines) and failure
propagation in the metrics (blue lines). However, there are direct
metrics for internal services, but only indirect metrics for DB-1,
which has limited observability. In most existing RCA algorithms,
therelationshipbetweenRCCsandmetricsisusuallyone-to-many.
In such scenarios, the fault could be incorrectly located in one of
theinternalservicesbasedonthedirectmetrics,whichareanoma-
lous, rather than in the actual root cause DB-1. With LatentScope,
boththefailurepropagationinobservablemetricsandlatentRCCs
can be modeled through the dual-space graph and latent-space in-
tervention recognition. The latent variables for RCCs A, B, and C
6056Microservice Root Cause Analysis With Limited Observability Through Intervention Recognition in the Latent Space KDD ’24, August 25–29, 2024, Barcelona, Spain
are considered to be normal (red lines), while the root cause DB-1
shown in a spike, is more likely to be considered as the root cause.
ThiscasedemonstratesthatLatentScopecanbeeffectivelyapplied
to accurately infer fault root causes under limited observability.
Ad-0Ad-1Ad-2AdService
Host-6
score=280score=210score=32810score=6score=98score=11126score=2score=21694score=12275
Payment-2Ad-0Ad-1Ad-2PodServiceHostPaymentAdServiceHost-6Host-5Latent-RegressorMetricadservice-0adservice-1adservice-2Payment-2Payment
AdServiceHost-5Host-6RLEA Results
Figur
e 10: Case study of a service failure case
5.2.2 Case Study 2: Service Failure. To understand the working
processofLatentScopeinacomplexcasewithmulti-layeredRCCs,
we perform another case study (Fig. 10) with a service failure case
in Dataset B. This case demonstrates a complex many-to-many re-
lationshipbetweenmetricsandRCCs,whereeachmetricisrelated
to RCCs of three types: Pod, Service, and Host. RCA in such a sce-
narioistypicallycomplex.Inexistingmetric-levelRCAalgorithms,
evenifwecanaccuratelylocatetherootcausemetric,itisdifficult
to directly determine which corresponding RCC is the root cause
due to the multi-granularity of RCCs. Service-level root cause lo-
calization (such as trace-based RCA) may also fail to judge faults
occurring in a specific Pod and may incorrectly locate a fault af-
fecting an individual Service when a Host is entirely failing. The
redlinesinthefigureillustratethecomputationalresultsoftheLa-
tentRegressor algorithm. It can be observed that the RLIR process
in LatentRegressor “corrects” the original metrics (grey) through
the many-to-many relationship between RCCs and metrics, elim-
inating the influence in non-root cause RCCs. For the root cause
(AdService),the“corrected”resultsshowahigherrootcausescore,
making it the most likely fault root cause. This demonstrates that
the quantitative solution of latent variables for the root cause by
RLIR is feasible and effective. It also demonstrates the importance
of using quantitative modeling in RCA.
6 THREATS TO VALIDITY
The threat to the internal validity of this paper is the implementa-
tionofthebaselines.WeimplementedRandomWalk,MonitorRank,
MicroScope, CloudRanger, and MicroCause by ourselves, as there
are no publicly available implementations.
The threat to external validity mainly lies in this paper in the
evaluationdatasets.ThefailuresineBaymaynotrepresenttheper-
formance in other systems. To reduce this threat, we also collect
Dataset B from the testbed and use it for evaluation.
7 RELATED WORKS
Unsupervised Root Cause Analysis. Currentunsupervisedroot
causeanalysisapproachescanbedividedintometric-based,event-
based, log-based, and trace-based [17]. The widely adopted work-
flowinmetric-basedapproaches[2,9,12,15,16,18,21–23]isbuild-
ing a causal graph on the metrics and ranking the metrics to local-
ize the failure root cause. Event-based approaches like Groot [20]and Nezha [25] construct event graphs according to rules or fea-
tures extracted from events and rank the events with the event
graph. Compared with metric-based and event-based approaches,
log-based [1] and trace-based [6, 10, 13, 14] use additional fea-
turesinlogsandtracestoachievemoreaccurateranking.However,
these methods typically focus only on root cause identification at
a single level with a high requirement for observability, making it
difficult to address the RCA of heterogeneous RCCs with limited
observability.
Heterogeneos Root Cause Localization. Recently, some RCA
algorithms have focused on addressing RCA with heterogeneous
RCCs. Dejavu [11] proposed the concept of actionable root cause
analysis,whichdefinesRCCwiththefailuretypeasa“failureunit”
and localizes heterogeneous RCCs with graph neural networks.
However, Dejavu is a supervised algorithm that requires manual
labeling and end-to-end training, making it difficult to adapt to
the frequent dynamic changes of the microservices system. Trin-
ityRCL [5] introduces a ”multi-granularity” RCA algorithm. Trin-
ityRCL uses random walks to locate RCCs at four levels: service,
host, metric, and code. However, TrinityRCL relies on strong ex-
pert knowledge to set transition probabilities between different
types of RCCs, limiting its scalability. Additionally, these methods
require RCCs to have complete observability.
8 CONCLUSION
In this paper, we focus on the challenges of RCA with heteroge-
neous RCCs with limited observability in real-world microservice
systems.Toaddressthechallenges,weconductanempiricalstudy
of eBay’s failure and propose the idea of “modeling RCCs with la-
tent variables”. Based on the idea, we propose LatentScope, an un-
supervised RCA framework for heterogeneous RCCs. LatentScope
introduceadual-spacegraphtomodelbothobservablemetricsand
latent RCC variables, with a many-to-many relationship between
the spaces. To infer the latent variables and achieve RCA in the
dual-space graph, we propose latent-space intervention recogni-
tion (RLIR) and its enhancement, LatentRegressor. We deployed
LatentScope in eBay’s production cluster and evaluated it with
both eBay’s real-world failure cases and testbed failure cases. Ex-
perimental results show that our algorithm achieves effective im-
provement in unsupervised root cause localization tasks. In partic-
ular,comparedwithbaselinealgorithms,LatentScopesignificantly
improves the accuracy in different categories of root causes, indi-
catingtheeffectivenessofouralgorithminsolvingRCAtaskswith
heterogeneous RCCs.
ACKNOWLEDGMENTS
We thank Huai Jiang and Mingjie Li for their helpful suggestions.
This work is supported by the National Natural Science Founda-
tion of China under Grant 62272249, 62072264, and 62302244, and
the Beijing National Research Center for Information Science and
Technology (BNRist) key projects.
REFERENCES
[1] Pooja Aggarwal, Ajay Gupta, Prateeti Mohapatra, Seema Nagar, Atri Mandal,
Qing Wang, and Amit Paradkar. 2021. Localization of Operational Faults in
Cloud Applications by Mining Causal Dependencies in Logs Using Golden
Signals. In Service-Oriented Computing – ICSOC 2020 Workshops , Hakim
6057KDD’24, August 25–29, 2024, Barcelona, Spain Zhe Xie et al.
Hacid, Fatma Outay, Hye-young Paik, Amira Alloum, Marinella Petrocchi,
Mohamed Reda Bouadjenek, Amin Beheshti, Xumin Liu, and Abderrahmane
Maaradji (Eds.). Vol. 12632. Springer International Publishing, Cham, 137–149.
https://doi.org/10.1007/978-3-030-76352-7_17
[2] Pengfei Chen, Yong Qi, Pengfei Zheng, and Di Hou. 2014. CauseInfer: Au-
tomatic and Distributed Performance Diagnosis with Hierarchical Causality
Graph in Large Distributed Systems. In IEEE INFOCOM 2014 - IEEE Conference
on Computer Communications . IEEE, Toronto, ON, Canada, 1887–1895. https:
//doi.org/10.1109/INFOCOM.2014.6848128
[3] Paolo Di Francesco, Ivano Malavolta, and Patricia Lago. 2017. Research on ar-
chitectingmicroservices:Trends,focus,andpotentialfor industrialadoption.In
2017 IEEE International conference on software architecture (ICSA) . IEEE, 21–30.
[4] Olivier Goudet, Diviyan Kalainathan, Philippe Caillou, Isabelle Guyon, David
Lopez-Paz, and Michele Sebag. 2018. Learning functional causal models with
generative neural networks. Explainable and interpretable models in computer
vision and machine learning (2018), 39–80.
[5] Shenghui Gu, Guoping Rong, Tian Ren, He Zhang, Yongda Yu, Xian Li, Jian
Ouyang, and Chunan Chen. 2023. TrinityRCL: Multi-Granular and Code-Level
RootCauseLocalizationUsingMultipleTypesofTelemetryDatainMicroservice
Systems. IEEE Transactions on Software Engineering 49,5(May2023),3071–3088.
https://doi.org/10.1109/TSE.2023.3241299
[6] Xiaofeng Guo, Xin Peng, Hanzhang Wang, Wanxue Li, Huai Jiang, Dan Ding,
Tao Xie, and Liangfei Su. 2020. Graph-Based Trace Analysis for Microservice
Architecture Understanding and Problem Diagnosis. In Proceedings of the 28th
ACM Joint Meeting on European Software Engineering Conference and Symposium
on the Foundations of Software Engineering .ACM,VirtualEventUSA,1387–1397.
https://doi.org/10.1145/3368089.3417066
[7] Myunghwan Kim, Roshan Sumbaly, and Sam Shah. 2013. Root Cause De-
tection in a Service-Oriented Architecture. In Proceedings of the ACM SIG-
METRICS/International Conference on Measurement and Modeling of Computer
Systems. ACM, Pittsburgh PA USA, 93–104. https://doi.org/10.1145/2465529.
2465753
[8] Bowen Li, Xin Peng, Qilin Xiang, Hanzhang Wang, Tao Xie, Jun Sun, and Xu-
anzhe Liu. 2022. Enjoy your observability: an industrial survey of microservice
tracing and analysis. Empirical Software Engineering 27 (2022), 1–28.
[9] Mingjie Li, Zeyan Li, Kanglin Yin, Xiaohui Nie, Wenchi Zhang, Kaixin Sui, and
Dan Pei. 2022. Causal Inference-Based Root Cause Analysis for Online Service
Systems with Intervention Recognition. In Proceedings of the 28th ACM SIGKDD
Conference on Knowledge Discovery and Data Mining . ACM, Washington DC
USA, 3230–3240. https://doi.org/10.1145/3534678.3539041
[10] Zeyan Li, Junjie Chen, Rui Jiao, Nengwen Zhao, Zhijun Wang, Shuwei Zhang,
Yanjun Wu, Long Jiang, Leiqin Yan, Zikai Wang, Zhekang Chen, Wenchi Zhang,
XiaohuiNie,KaixinSui,andDanPei.2021. PracticalRootCauseLocalizationfor
Microservice Systems via Trace Analysis. In 2021 IEEE/ACM 29th International
Symposium on Quality of Service (IWQOS). IEEE, Tokyo, Japan, 1–10. https:
//doi.org/10.1109/IWQOS52092.2021.9521340
[11] Zeyan Li, Nengwen Zhao, Mingjie Li, Xianglin Lu, Lixin Wang, Dongdong
Chang, Xiaohui Nie, Li Cao, Wenchi Zhang, Kaixin Sui, Yanhua Wang, Xu Du,
Guoqiang Duan, and Dan Pei. 2022. Actionable and Interpretable Fault Local-
ization for Recurring Failures in Online Service Systems. In Proceedings of the
30th ACM Joint European Software Engineering Conference and Symposium on
the Foundations of Software Engineering. ACM, Singapore Singapore, 996–1008.
https://doi.org/10.1145/3540250.3549092
[12] Jinjin Lin, Pengfei Chen, and Zibin Zheng. 2018. Microscope: Pinpoint Perfor-
mance Issues with Causal Graphs in Micro-service Environments. In Service-
Oriented Computing , Claus Pahl, Maja Vukovic, Jianwei Yin, and Qi Yu (Eds.).
Vol. 11236. Springer International Publishing, Cham, 3–20.
[13] DeweiLiu,ChuanHe,XinPeng,FanLin,ChenxiZhang,ShengfangGong,Ziang
Li,JiayuOu,andZheshunWu.2021. MicroHECL:High-EfficientRootCauseLo-
calization in Large-Scale Microservice Systems. In 2021 IEEE/ACM 43rd Interna-
tional Conference on Software Engineering: Software Engineering in Practice (ICSE-
SEIP).IEEE, Madrid, ES, 338–347. https://doi.org/10.1109/ICSE-SEIP52600.2021.
00043
[14] PingLiu,HaowenXu,QianyuOuyang,RuiJiao,ZhekangChen,ShenglinZhang,
Jiahai Yang, Linlin Mo, Jice Zeng, Wenman Xue, and Dan Pei. 2020. Unsuper-
vised Detection of Microservice Trace Anomalies through Service-Level Deep
Bayesian Networks. In 2020 IEEE 31st International Symposium on Software Reli-
ability Engineering (ISSRE). IEEE, Coimbra, Portugal, 48–58. https://doi.org/10.
1109/ISSRE5003.2020.00014
[15] Xianglin Lu, Zhe Xie, Zeyan Li, Mingjie Li, Xiaohui Nie, Nengwen Zhao,
Qingyang Yu, Shenglin Zhang, Kaixin Sui, Lin Zhu, and Dan Pei. 2022. Generic
andRobustPerformanceDiagnosisviaCausalInferenceforOLTPDatabaseSys-
tems. In 2022 22nd IEEE International Symposium on Cluster, Cloud and Internet
Computing (CCGrid) . IEEE, Taormina, Italy, 655–664. https://doi.org/10.1109/
CCGrid54584.2022.00075
[16] Yuan Meng, Shenglin Zhang, Yongqian Sun, Ruru Zhang, Zhilong Hu, Yiyin
Zhang, Chenyang Jia, Zhaogang Wang, and Dan Pei. 2020. Localizing Failure
Root Causes in a Microservice through Causality Inference. In 2020 IEEE/ACM28th International Symposium on Quality of Service (IWQoS). IEEE, Hang Zhou,
China, 1–10. https://doi.org/10.1109/IWQoS49365.2020.9213058
[17] Jacopo Soldani and Antonio Brogi. 2023. Anomaly Detection and Failure Root
CauseAnalysisin(Micro)Service-BasedCloudApplications:ASurvey. Comput.
Surveys 55, 3 (April 2023), 1–39. https://doi.org/10.1145/3501297
[18] Peter Spirtes, Clark N Glymour, and Richard Scheines. 2000. Causation, predic-
tion, and search . MIT press.
[19] Muhammad Usman, Simone Ferlin, Anna Brunstrom, and Javid Taheri. 2022.
A survey on observability of distributed edge & container-based microservices.
IEEE Access (2022).
[20] Hanzhang Wang, Zhengkai Wu, Huai Jiang, Yichao Huang, Jiamu Wang, Selcuk
Kopru,andTaoXie.2021. Groot:Anevent-graph-basedapproachforrootcause
analysis in industrial settings. In 2021 36th IEEE/ACM International Conference
on Automated Software Engineering (ASE) . IEEE, 419–429.
[21] Ping Wang, Jingmin Xu, Meng Ma, Weilan Lin, Disheng Pan, Yuan Wang, and
Pengfei Chen. 2018. CloudRanger: Root Cause Identification for Cloud Native
Systems. In 2018 18th IEEE/ACM International Symposium on Cluster, Cloud and
Grid Computing (CCGRID) . IEEE, Washington, DC, USA, 492–502. https://doi.
org/10.1109/CCGRID.2018.00076
[22] Jianping Weng, Jessie Hui Wang, Jiahai Yang, and Yang Yang. 2018. Root cause
analysis of anomalies of multitier services in public clouds. IEEE/ACM Transac-
tions on Networking 26, 4 (2018), 1646–1659.
[23] Li Wu, Johan Tordsson, Jasmin Bogatinovski, Erik Elmroth, and Odej Kao. 2021.
MicroDiag: Fine-grained Performance Diagnosis for Microservice Systems. In
2021 IEEE/ACM International Workshop on Cloud Intelligence (CloudIntelligence) .
IEEE, Madrid, Spain, 31–36. https://doi.org/10.1109/CloudIntelligence52565.
2021.00015
[24] Li Wu, Johan Tordsson, Erik Elmroth, and Odej Kao. 2020. MicroRCA: Root
Cause Localization of Performance Issues in Microservices. In NOMS 2020 -
2020 IEEE/IFIP Network Operations and Management Symposium.IEEE,Budapest,
Hungary, 1–9. https://doi.org/10.1109/NOMS47738.2020.9110353
[25] Guangba Yu, Pengfei Chen, Yufeng Li, Hongyang Chen, Xiaoyun Li, and Zibin
Zheng. 2023. Nezha: Interpretable Fine-Grained Root Causes Analysis for Mi-
croservices on Multi-modal Observability Data. In Proceedings of the 31st ACM
Joint European Software Engineering Conference and Symposium on the Founda-
tions of Software Engineering. 553–565.
[26] XiangZhou,XinPeng,TaoXie,JunSun,ChaoJi,WenhaiLi,andDanDing.2018.
Fault analysis and debugging of microservice systems: Industrial survey, bench-
marksystem,andempiricalstudy. IEEE Transactions on Software Engineering 47,
2 (2018), 243–260.
6058Microservice Root Cause Analysis With Limited Observability Through Intervention Recognition in the Latent Space KDD ’24, August 25–29, 2024, Barcelona, Spain
A PROOF OF THEOREM 3.1
LemmaA.1. If the RCC-S condition holds, max
𝑗,𝑏∈𝑟𝑐𝑐𝑖−𝑟𝑐𝑐 𝑖,𝑗𝐿𝑖,𝑗·ˆ𝒙𝑖=
𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎if𝛼𝑎,𝑖=1and 𝑎≠𝑏.
PRoof. AccordingtoEq.(5)intheRCC-Scondition,given 𝑎≠𝑏
and 𝛼𝑎,𝑖=1, we can find an 𝒙𝑗satisfying 𝛼𝑎,𝑗=1∧𝒛𝑏∉𝒓𝒄𝒄(𝒙𝑗).
AndaccordingtoEq.(4)intheRCC-Scondition, ∀𝑘, 𝑏≠𝑎, 𝛼𝑏,𝑘=0.
We have ˆ𝒙𝑖=𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎and ˆ𝒙𝑗=𝛼𝑎,𝑗·𝑘𝑎,𝑗·𝒛𝑎, which gives
that:
ˆ𝒙𝑖
𝛼𝑎
,𝑖·𝑘𝑎,𝑖=𝒛𝑎=ˆ𝒙𝑗
𝛼𝑎
,𝑗·𝑘𝑎,𝑗, (9)
indicatingthat ˆ𝒙𝑖and ˆ𝒙𝑗arelinearcorrelated.Thus,wecanderive
that 𝐿𝑖,𝑗·ˆ𝒙𝑖=ˆ𝒙𝑖=𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎. And since the maximum value of
𝐿𝑖,𝑗·ˆ𝒙𝑖isnolargerthan 𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎,thelemmacanbeproved. □
Lemma A.2. If the RCC-S condition holds, 𝑴𝑎,𝑖=𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎,
where 𝑴𝑎,𝑖is defined in Eq. 7.
PRoof. Denote 𝐿𝑖=max
𝑗𝐿𝑖,𝑗and 𝐿𝑖,𝑎= max
𝑗,𝑧𝑎∈𝑟𝑐𝑐𝑖−𝑟𝑐𝑐 𝑖,𝑗𝐿𝑖,𝑗.When
∀𝑧𝑎∈𝑟𝑐𝑐𝑖, 𝛼𝑎,𝑖=0, all 𝐿𝑖, 𝐿𝑖,𝑗,𝑎and 𝛼𝑎,𝑖are zero. In this case, Eq.
(7)clearlyholds.If 𝛼𝑎,𝑖=1,accordingtoEq.(4), ∀𝑏, 𝑖, 𝛼 𝑏,𝑖=0,thus
𝐿𝑖,𝑗,𝑎=0. We can derive that:
(𝐿𝑖−𝐿𝑖,𝑗,𝑎)·ˆ𝒙𝑖=𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎+∑
𝑏≠𝑎𝛼𝑏,𝑖·𝑘𝑏,𝑖·𝒛𝑏−0
=𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎(10)
If𝛼𝑎,𝑖=0but∃𝑏≠𝑎, 𝛼𝑏,𝑖=1, according to Lemma A.1, it can be
derived that:
𝐿𝑖−𝐿𝑖,𝑗,𝑎=∑
𝑧𝑐∈𝑟𝑐𝑐𝑖𝛼𝑐,𝑖·𝑘𝑐,𝑖·𝒛𝑐−𝛼𝑏,𝑖·𝑘𝑏,𝑖·𝒛𝑏
=𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎+∑
𝑐∉{𝑎,𝑏}𝛼𝑐,𝑖·𝑘𝑐,𝑖·𝒛𝑐+0
=𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎+0=𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎(11)
Therefore, Eq. 7 holds under the RCC-S condition, thus the RLIR
algorithm solves the equation. □
TheoRem 3.1. If the RCC-S condition holds, the score for RCC 𝒛𝑎
can be calculated with:
𝑠𝑐𝑜𝑟𝑒 𝑟𝑐𝑐(𝒛𝑎)= max
𝑖,𝒛𝑎∈𝒓𝒄𝒄 𝑖max𝑡𝑴(𝑡)
𝑎,𝑖
= max
𝑖,𝒛𝑎∈𝒓𝒄𝒄 𝑖(
𝑠𝑐𝑜𝑟𝑒 𝑚(𝒙𝑖)·(1− max
𝑗,∃𝒛𝑏∈𝑟𝑐𝑐𝑗−𝑟𝑐𝑐 𝑖𝐿𝑖,𝑗))
(12)
where 𝑟𝑐𝑐𝑖,𝑗={𝒛𝑎|𝒛𝑎∈𝒓𝒄𝒄(𝒙𝑖)∩𝒓𝒄𝒄(𝑥𝑗)}.
PRoof. AccordingtoLemmaA.2,thevalueof 𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝑧(𝑡)
𝑎can
be linear represented by 𝒙(𝑡)
𝑖. Therefore, the score of 𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝑧𝑎
can be calculated with:
𝑠𝑐𝑜𝑟𝑒 𝑟𝑐𝑐(𝒛𝑎,𝑖)=𝑡2max𝑡=𝑡1𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛(𝑡)
𝑎−𝝁(𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎)[𝑡0:𝑡1]
𝜎(𝛼𝑎
,𝑖·𝑘𝑎,𝑖·𝒛𝑎)[𝑡0:𝑡1]
=𝑡2max𝑡=𝑡1(
𝜆𝑖·ˆ𝒙(𝑡)
𝑖−𝝁(𝜆𝑖·ˆ𝒙𝑖)[𝑡0:𝑡1]
𝜎(𝜆𝑖·ˆ𝒙𝑖)[𝑡0:𝑡1])
(13)wher
e𝑠𝑐𝑜𝑟𝑒 𝑟𝑐𝑐(𝒛𝑎,𝑖)denotesthescoreof 𝒛𝑎onthemonitoringmet-
ric𝒙𝑖and 𝜆𝑖=1−1−max 𝑗,𝑎∈𝑟𝑐𝑐𝑗−𝑟𝑐𝑐 𝑖,𝑗.
According to the proof in Lemma A.2, when 𝛼𝑎,𝑖=0, we have
1−max 𝑗,𝑎∈𝑟𝑐𝑐𝑗−𝑟𝑐𝑐 𝑖,𝑗=0,thus 𝜆𝑖=0.Andwhen 𝛼𝑎,𝑖=1,wehave
𝜆𝑖=1. Thus we have:
𝑠𝑐𝑜𝑟𝑒 𝑟𝑐𝑐(𝒛𝑎,𝑖)=𝑡2max𝑡=𝑡1(
𝜆𝑖·𝒙(𝑡)
𝑖−𝝁(𝜆𝑖·𝒙𝑖)[𝑡0:𝑡1]
𝜎(𝜆𝑖·𝒙𝑖)[𝑡0:𝑡1])
=𝑡2max𝑡=𝑡1(
ˆ𝒙(𝑡)
𝑖−𝝁(ˆ𝒙𝑖)[𝑡0:𝑡1]
𝜎(ˆ𝒙𝑖)[𝑡0:𝑡1])
·𝜆𝑖
=𝑠
𝑐𝑜𝑟𝑒 𝑚(𝒙𝑖)·(
1− max
𝑗,𝑎∈𝑟𝑐𝑐𝑗−𝑟𝑐𝑐 𝑖,𝑗)(14)
And since we have:
𝑠𝑐𝑜𝑟𝑒 𝑟𝑐𝑐(𝒛𝑎)=𝑡2max𝑡=𝑡1(
𝒛(𝑡)
𝑎−𝝁(𝒛𝑎)[𝑡0:𝑡1]
𝜎(𝒛𝑎)[𝑡0:𝑡1])
=𝑡2max𝑡=𝑡1(
𝛼𝑎
,𝑖·𝑘𝑎,𝑖·𝒛(𝑡)
𝑎−𝝁(𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎)[𝑡0:𝑡1]
𝜎(𝛼𝑎
,𝑖·𝑘𝑎,𝑖·𝒛𝑎)[𝑡0:𝑡1])
∀𝛼𝑎,𝑖=1
(15)
According to Eq. 4, if 𝒛𝑎is the root cause of the failure, then
we have max(𝛼𝑎,𝑖)=1, which indicates that at least one 𝛼𝑎,𝑖is
non-zero. Thus we have:
𝑠𝑐𝑜𝑟𝑒 𝑟𝑐𝑐(𝒛𝑎)=max
𝑖𝑡2max𝑡=𝑡1(
𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛(𝑡)
𝑎−𝝁(𝛼𝑎,𝑖·𝑘𝑎,𝑖·𝒛𝑎)[𝑡0:𝑡1]
𝜎(𝛼𝑎
,𝑖·𝑘𝑎,𝑖·𝒛𝑎)[𝑡0:𝑡1])
= max
𝑖,𝒛𝑎∈𝒓𝒄𝒄 𝑖(
𝑠𝑐𝑜𝑟𝑒 𝑚(𝒙𝑖)·(1− max
𝑗,𝑎∈𝑟𝑐𝑐𝑗−𝑟𝑐𝑐 𝑖,𝑗𝐿𝑖,𝑗))
(16)
When max(𝛼𝑎,𝑖)=0, then∀𝑖, 𝑠𝑐𝑜𝑟𝑒 𝑟𝑐𝑐(𝒛𝑎)=𝑠𝑐𝑜𝑟𝑒 𝑟𝑐𝑐(𝒛𝑎,𝑖)=0.
Therefore, the original equation holds. □
B EVALUATION METRICS
To comprehensively and accurately evaluate the root cause local-
izationperformanceofouralgorithmandbaselinealgorithmsacross
multi-level RCCs, following existing similar work [13], we choose
two types of metrics: Top-k and MRR. Top-k refers to the ranking
oftherootcauseintheoutputofthelocalizationalgorithm.MRRis
the mean of the reciprocals of all the rankings. Furthermore, since
RCCsrankedtoolowareoftenoverlookedinpracticalapplications,
we incorporated MRR@k, which means considering only the top
k results and calculating their MRR.
Additionally, in our root cause localization task, different algo-
rithms may exhibit significant biases in localizing various types of
root causes (for instance, some algorithms might be more inclined
tolocalizefine-grainedRCCs).However,inourdatasets,duetothe
limitations in the number of failures and data collection, the quan-
tity of failure cases for different types of root causes is imbalanced.
Therefore, to better evaluate the localization performance of algo-
rithmsacrossalltypesofrootcauses,wecalculatetheunweighted
performance (micro) of the algorithm for all failure cases, and the
weighted performance (macro) that balances the algorithm’s per-
formance across different categories.
6059KDD’24, August 25–29, 2024, Barcelona, Spain Zhe Xie et al.
C IMPLEMENTATION DETAILS
We use Python to implement the LatentScope model. In Dataset A,
wepreprocessedthedatabyfilteringoutmonitoringmetricsirrele-
vant by their business domain ( e.g.shipping domain and checkout
domain) according to the triggered metrics. Additionally, we ap-
ply a Pearson correlation filter to remove metrics unrelated to the
specific fault occurrence. The preprocess method and the filter are
applied to all the baselines for fair comparison.
D DEPLOYMENT DETAILS
IneBay,themicroservicessystemisorchestratedwithKubernetes4
and the monitoring metrics are collected with MetricBeat5andstored with Prometheus6. A GraphDB based on JanusGraph7is
utilized for storing the relationships between RCCs and metrics,
from where LatentScope retrieves data offline for constructing the
dual-space graphs. LatentScope is deployed on a host with Intel(R)
Xeon(R) Gold 6138 CPU with the limitation of 2 CPU cores and 4
GB memories.
4https://kub
ernetes.io/
5https://www.elastic.co/beats/metricbeat
6https://prometheus.io/
7https://janusgraph.org/
6060