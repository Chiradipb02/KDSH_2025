DPSW-Sketch: A Differentially Private Sketch Framework for
Frequency Estimation over Sliding Windows
Yiping Wang
East China Normal University
Shanghai, China
yipwang@stu.ecnu.edu.cnYanhao Wang∗
East China Normal University
Shanghai, China
yhwang@dase.ecnu.edu.cnCen Chen†
East China Normal University
Shanghai, China
cenchen@dase.ecnu.edu.cn
ABSTRACT
The sliding window model of computation captures scenarios in
which data are continually arriving in the form of a stream, and
only the most recent 𝑤items are used for analysis. In this setting, an
algorithm needs to accurately track some desired statistics over the
sliding window using a small space. When data streams contain sen-
sitive information about individuals, the algorithm is also urgently
needed to provide a provable guarantee of privacy. In this paper, we
focus on the two fundamental problems of privately (1) estimating
the frequency of an arbitrary item and (2) identifying the most
frequent items (i.e., heavy hitters ), in the sliding window model.
We propose DPSW-Sketch, a sliding window framework based
on the count-min sketch that not only satisfies differential privacy
over the stream but also approximates the results for frequency
and heavy-hitter queries within bounded errors in sublinear time
and space w.r.t. 𝑤. Extensive experiments on five real-world and
synthetic datasets show that DPSW-Sketch provides significantly
better utility-privacy trade-offs than state-of-the-art methods.
CCS CONCEPTS
•Theory of computation →Sketching and sampling.
KEYWORDS
Sliding window, Differential privacy, Frequency estimation, Heavy
hitters, Count-min sketch
ACM Reference Format:
Yiping Wang, Yanhao Wang, and Cen Chen. 2024. DPSW-Sketch: A Differ-
entially Private Sketch Framework for Frequency Estimation over Sliding
Windows. In Proceedings of the 30th ACM SIGKDD Conference on Knowledge
Discovery and Data Mining (KDD ’24), August 25–29, 2024, Barcelona, Spain.
ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/3637528.3671694
1 INTRODUCTION
Many real-world applications, including Internet of Things (IoT),
location-based services, and public health surveillance, generate
∗Corresponding author.
†Cen Chen is also affiliated with The State Key Laboratory of Blockchain and Data
Security, Zhejiang University, Hangzhou, China.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
KDD ’24, August 25–29, 2024, Barcelona, Spain
©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 979-8-4007-0490-1/24/08
https://doi.org/10.1145/3637528.3671694large volumes of time-evolving data. These data are typically col-
lected continuously in the form of streams. Therefore, the design
and analysis of streaming algorithms [ 32], which primarily aim to
provide accurate estimations over the stream in real time using a
small space, has attracted much attention in the literature.
As data streams often contain sensitive information about in-
dividuals, such as browsing history, GPS coordinates, and health
status, releasing the estimates computed on them without adequate
protection can cause harmful privacy leakage. To address this is-
sue, differential privacy [ 15] (DP), the de facto standard for privacy
preservation, has been widely adopted in streaming analytics [ 9,16].
Informally, a randomized algorithm provides (event-level) DP if
the output distribution of the algorithm is approximately the same
when executed on a stream and any of its neighbors that differ from
it by one item. This condition prevents an attacker with access to
the output from inferring the existence of any individual item.
Furthermore, in practice, it is often essential to restrict the com-
putation to recent data. For example, Apple’s DP team claims to
retain the collected data for a maximum of three months [ 38], and
Google’s privacy policy states that browser data can be stored for
up to nine months [ 22]. Such recency requirements are captured
by the sliding window model [ 6,13], where only the latest 𝑤items
in the stream are used for computation. In such scenarios, an algo-
rithm should maintain and release real-time statistics continuously
over the sliding window with differential privacy. Especially, we
focus on two fundamental data statistics with numerous applica-
tions, including anomaly detection [ 43], change detection [ 24], and
autocomplete suggestions [ 44], namely, frequency, i.e., the number
of occurrences of any given item, and heavy hitters, i.e., the set of
items that appear at least a given number of times.
For frequency estimation and heavy-hitter detection problems,
sketches, which are compact probabilistic data structures to sum-
marize streams [ 11], have been widely employed for their high ac-
curacy and efficiency. However, despite several attempts to extend
the sketches to work in the sliding window model while guaran-
teeing differential privacy [ 5,8,38], these approaches have two
main limitations that make them incapable of meeting the need
for real-time stream analysis. First, their theoretical analyses are
specific to heavy hitters and cannot provide any error bound for fre-
quency estimation on the remaining items. Second, even for heavy
hitters, these methods still fail to obtain accurate query results
within reasonable privacy budgets and sketch sizes in practice.
Our Contributions. In this work, we propose a novel sketch frame-
work with event-level differential privacy, called DPSW-Sketch ,
for frequency estimation in the sliding window model. Specifically,
DPSW-Sketch divides the stream into disjoint substreams of equal
length. Within each substream, it creates a series of checkpoints
3255
KDD ’24, August 25–29, 2024, Barcelona, Spain Yiping Wang, Yanhao Wang, and Cen Chen
according to the idea of smooth histograms [6]. Then, it constructs a
Private Count-Min Sketch [ 42] (PCMS) for each checkpoint, which
corresponds to all items either from the beginning of the substream
to the checkpoint or from the checkpoint to the end of the sub-
stream. As such, it does not need to store any item after the item
is processed, and it can maintain each PCMS incrementally with-
out handling implicit item deletion over the sliding window. Fur-
thermore, we design an efficient scheme to allocate the privacy
budget across different PCMSs in each substream such that DPSW-
Sketch provides(𝜀,𝛿)-differential privacy for any given 𝜀>0
and𝛿∈(0,1)throughout the stream, owing to the reduction from
zero-Concentrated Differential Privacy (zCDP) [ 7] to DP and the
adaptive composition of zCDP. For any frequency or heavy-hitter
query on the sliding window 𝑊𝑡at any time𝑡, it selects one PCMS
per substream so that the concatenation of their corresponding
items is closest to 𝑊𝑡and combines the item frequencies obtained
from all selected PCMSs to compute the result. Our theoretical anal-
ysis shows that DPSW-Sketch can estimate the frequency of an
arbitrary item in 𝑊𝑡within a bounded additive error. This approxi-
mation can be naturally extended to the problem of heavy-hitter
identification. Meanwhile, DPSW-Sketch has sublinear time and
space complexities w.r.t. the window size 𝑤. Finally, extensive exper-
imental findings on five real-world and synthetic datasets confirm
the superior performance of DPSW-Sketch compared to several
state-of-the-art differentially private sliding-window sketches for
frequency and heavy-hitter queries. In summary, the main contri-
butions of this paper include:
•We present the DPSW-Sketch framework and thoroughly
analyze its approximation guarantees for frequency and
heavy-hitter queries as well as time and space complexi-
ties. In particular, we indicate that DPSW-Sketch achieves
improved theoretical results over existing methods [ 5,8,38]
with lower error bounds and/or complexities.
•We demonstrate that DPSW-Sketch provides much more
accurate results for frequency and heavy-hitter queries using
a smaller space than the sketches proposed in [ 5,8,38] under
the same privacy budget.
Reproducibility. Our code and data are publicly available at https:
//github.com/wypsz/DP-Sliding-Window.
2 RELATED WORK
Sketching techniques [ 11] have attracted long-standing attention
in the literature. As for frequency estimation and heavy-hitter de-
tection problems, classic sketching methods include Count-Min
Sketch (CMS) [ 12], CountSketch [ 10], CU sketch [ 18], Misra-Gries
(MG) sketch [ 31], etc. On the basis of these sketches, numerous non-
private frameworks were proposed for frequency and heavy-hitter
queries over sliding windows, e.g., [ 2,3,23,34,36,40]. Unfortu-
nately, the above frameworks do not provide any privacy guarantee
and can potentially leak sensitive user data.
Differentially private sketches for frequency and heavy-hitter
queries were proposed in [ 1,19,26,28–30,33,41,42]. These sketches
can provide provable guarantees of both privacy and accuracy while
not reducing efficiency. However, they cannot handle implicit dele-
tions of items and thus cannot work in the sliding window model.
Among the existing literature, the works most related to ours are[5,8,38], which proposed sketching methods for heavy-hitter iden-
tification with event-level differential privacy in the sliding win-
dow model. Chan et al . [8] first proposed a differentially private
algorithm based on MG sketches for heavy-hitter identification in
the (distributed) sliding window model. Upadhyay [38] designed a
sliding-window framework to privately identify heavy hitters and
estimate their frequencies based on CountSketch and CMS. Blocki
et al. [5] proposed an improved method for private heavy-hitter
queries by combining MG sketches with hierarchical counters. Com-
pared to [ 5,8,38], our work achieves better theoretical results by (1)
providing approximations for the frequencies of all items, instead
of only those of heavy hitters, and (2) reducing the error bound
for heavy hitters and complexity (see Section 4.2 for a detailed
comparison). Our proposed method also demonstrates substantial
improvements in practical performance compared to the methods
proposed in [5, 8, 38], as will be shown in Section 5.
Differentially private sketches for other stream statistics, such as
quantiles [ 4,21,27,35], moments [ 17,39], and cardinality [ 20,25,
37], have also received significant attention. The sketches employed
in the above problems differ from those in frequency estimation
and thus are not comparable to our framework in this paper.
3 PRELIMINARIES
For a positive integer 𝑛, we use[𝑛]to denote[1,...,𝑛]. A data
stream is an (ordered) sequence of 𝑛items𝑆=[𝑠1,𝑠2,...,𝑠𝑛], where
𝑠𝑖is the𝑖-th item and is drawn from a domain Eof size𝑚indexed
by[𝑚]. Then,𝑆𝑡=[𝑠1,...,𝑠𝑡]denotes the prefix of 𝑆until the
arrival of𝑠𝑡at any time 𝑡≤𝑛. Acount-based sliding window 𝑊𝑡of
length𝑤∈Z+at time𝑡is the union of the latest 𝑤items in𝑆𝑡, i.e.,
𝑊𝑡={𝑠𝑖∈𝑆𝑡:max(𝑡−𝑤+1,1)≤𝑖≤𝑡}. Note that our framework
can be applied to other types of sliding windows, e.g., time-based
sliding windows that contain all the items in the last 𝑤time units.
For ease of presentation, we focus on count-based sliding windows
in this work. We consider two fundamental statistics over sliding
windows: frequency andheavy hitter. Specifically, the frequency
𝑓𝑒,𝑡of an item𝑒∈Ein𝑊𝑡is the number of occurrences of 𝑒in𝑊𝑡,
i.e.,𝑓𝑒,𝑡=|{𝑠𝑖∈𝑊𝑡:𝑠𝑖=𝑒}|. Items with high frequencies are often
called heavy hitters. Given a threshold 𝛾∈(0,1), an item is a 𝛾-
heavy hitter in 𝑊𝑡if its frequency in 𝑊𝑡is at least𝛾𝑤. Formally, the
set of𝛾-heavy hitters in 𝑊𝑡is defined asH𝛾,𝑡={𝑒∈E:𝑓𝑒,𝑡≥𝛾𝑤}.
Smooth Histogram. The smooth histogram [ 6] is a sublinear
data structure to transform an insert-only streaming algorithm
to work in the sliding window model, based on the concept of
smooth functions. Let 𝐴,𝐵, and𝐶be the substreams of 𝑆such
that𝐵is a suffix of 𝐴and𝐶is adjacent to 𝐴and𝐵. A nonnegative
function𝑔defined on any substream of 𝑆is(𝛼1,𝛼2)-smooth if
(1−𝛼2)𝑔(𝐴)≤𝑔(𝐵)implies(1−𝛼1)𝑔(𝐴∪𝐶)≤𝑔(𝐵∪𝐶)for two
parameters 0<𝛼2≤𝛼1<1and any above-defined 𝐴,𝐵, and𝐶.
Our analysis in Section 4 will use the following theorem on the
approximation and complexity of the smooth histogram.
Theorem 3.1. Given an(𝛼1,𝛼2)-smooth function 𝑔for two pa-
rameters 0<𝛼2≤𝛼1<1, suppose that there is an insert-only
streaming algorithm Athat produces a 𝛾-approximation of 𝑔us-
ing spaceSand update timeT. Then, there exists a sliding-window
algorithm that outputs a (𝛾+𝛼1)-approximation of 𝑔using space
𝑂(log𝑤
𝛼2(S+ log𝑤))and update time 𝑂(1
𝛼2Tlog𝑤).
3256DPSW-Sketch: A Differentially Private Sketch Framework for Frequency Estimation over Sliding Windows KDD ’24, August 25–29, 2024, Barcelona, Spain
Privacy Definition. In this work, we adopt the definition of event-
level differential privacy [15,16], where a server receives the stream
𝑆and builds a data structure to answer specific queries on 𝑆subject
to the constraint that any single event in 𝑆is indistinguishable
from query results. Formally, two streams 𝑆=[𝑠1,...,𝑠𝑛]and
𝑆′=[𝑠′
1,...,𝑠′𝑛]areneighboring if they differ only in the 𝑖-th item,
i.e.,𝑠𝑖≠𝑠′
𝑖for some𝑖∈[𝑛]and𝑠𝑗=𝑠′
𝑗,∀𝑗≠𝑖. For any parameters
𝜀>0and𝛿∈(0,1), a randomized mechanism Mprovides event-
level(𝜀,𝛿)-differential privacy, or (𝜀,𝛿)-DP for short, if for any two
neighboring streams 𝑆,𝑆′and all sets of outputs 𝑂⊆Range(M) ,
Pr[M(𝑆) ∈𝑂] ≤ exp(𝜀)·Pr[M(𝑆′) ∈𝑂]+𝛿. The notion of
(𝜀,𝛿)-DP guarantees that the outputs of Mon𝑆and𝑆′are almost
indistinguishable, as quantified by 𝜀and𝛿: the closer they are to 0,
the lower the distinguishability and the higher the protection level,
and vice versa.
For simplicity of privacy analysis, we also consider an alter-
native notion of(𝜀,𝛿)-DP, namely 𝜌-zero-concentrated differen-
tial privacy ( 𝜌-zCDP) [ 7]. Specifically, a mechanism Msatisfies
𝜌-zCDP if for any two neighboring streams 𝑆,𝑆′and all𝛼∈(1,∞),
𝐷𝛼(M(𝑆)∥M(𝑆′))≤𝜌𝛼, where𝐷𝛼(·∥·) is the𝛼-Rényi divergence
of two distributions. The definition of 𝜌-zCDP satisfies several key
characteristics of differential privacy for analysis: (1) adaptive com-
position : ifMandM′satisfy𝜌-zCDP and𝜌′-zCDP, their composite
mechanismM′′(𝑆)=(M(𝑆),M′(𝑆))will satisfy(𝜌+𝜌′)-zCDP;
(2)parallel composition : for a𝜌-zCDP mechanism Mthat operates
on disjoint substreams 𝑆(1),...,𝑆(𝑙)of𝑆such that𝑆(1)∪···∪𝑆(𝑙)=
𝑆, the union of the outputs of M(𝑆(1)),...,M(𝑆(𝑙))will satisfy
𝜌-zCDP; (3) post-processing immunity : for a𝜌-zCDP mechanism
Mand any function 𝑔taking the output of Mas input, a new
mechanismM′(𝑆)=𝑔(M(𝑆))satisfies𝜌-zCDP. The relationship
between𝜌-zCDP and(𝜀,𝛿)-DP is given below.
Theorem 3.2 (zCDP ⇒DP). IfMprovides𝜌-zCDP,Mwill also
provide(𝜌+2√︁
𝜌ln(1/𝛿),𝛿)-DP for any 𝛿∈(0,1).
A prototypical example of a mechanism satisfying 𝜌-zCDP is
the Gaussian mechanism [ 14]. It perturbs a real-valued result by
injecting Gaussian noise, the scale of which depends on the 𝑙2-
sensitivity of the result. A function 𝑔:N𝑚↦→R𝑑has𝑙2-sensitivity
Δ2if for all neighboring 𝑆,𝑆′,∥𝑔(𝑆)−𝑔(𝑆′)∥2≤Δ2. For a function
𝑔:N𝑚↦→R𝑑with𝑙2-sensitivity Δ2, the Gaussian mechanism
is defined asM𝐺(𝑆)=𝑔(𝑆)+N( 0,𝜎2·I𝑑), whereN(0,𝜎2·I𝑑)
is a𝑑-dimensional Gaussian random variable with mean zero and
covariance matrix 𝜎2·I𝑑andI𝑑is the identity matrix. For any 𝜌>0,
the Gaussian mechanism with 𝜎2=Δ2
2/(2𝜌)satisfies𝜌-zCDP [7].
(Private) Count-Min Sketch. The Count-Min Sketch (CMS) [ 12]
is a common data structure for frequency estimation. It consists
of a two-dimensional array of counters, denoted as C[𝑎,𝑏], where
each counter is initialized to 0, and a set of 𝑎independent hash
functionsℎ1,...,ℎ𝑎, each of which maps the items in Euniformly
to[𝑏]. Upon receiving an item 𝑠𝑖, it increments 𝑎counters by 1, one
per each row, based on the hash values of 𝑠𝑖, i.e.,C[𝑟,ℎ𝑟(𝑠𝑖)]←
C[𝑟,ℎ𝑟(𝑠𝑖)]+1for each𝑟∈[𝑎]. After processing all 𝑛items in𝑆, to
obtain the frequency of 𝑒∈E, a CMS computes the hash value ℎ𝑟(𝑒)
for each𝑟∈[𝑎], retrieves the corresponding counter C[𝑟,ℎ𝑟(𝑒)],
and takes the minimum value, i.e., ˜𝑓𝑒=min𝑟∈[𝑎]C[𝑟,ℎ𝑟(𝑒)]. The-
oretically, when 𝑎=𝑂(log1
𝜂)and𝑏=𝑂(1
𝜁)for the parametersAlgorithm 1 Private Count-Min Sketch [42]
Input: Stream𝑆, sketching parameters 𝜁,𝜂∈(0,1), private budget 𝜌>0
1:⊲PCMS construction ⊳
2:Initialize an array bCof size𝑎×𝑏, where𝑎=𝑂 log1
𝜂and𝑏=𝑂(1
𝜁),
with random variables drawn independently from N(0,𝑎
𝜌)
3:for𝑖=1to𝑛do
4: for𝑟=1to𝑎do
5: bC[𝑟,ℎ𝑟(𝑠𝑖)]←bC[𝑟,ℎ𝑟(𝑠𝑖)]+ 1
6:r
eturn bC
7:⊲Frequency query on item 𝑒∈E using PCMS ⊳
8:for𝑟=1to𝑎do
9: Computeℎ𝑟(𝑒)and
obtain bC[𝑟,ℎ𝑟(𝑒)]
10:return b𝑓𝑒=min𝑟∈[𝑎]bC[𝑟,ℎ𝑟(𝑒)]
𝜁
,𝜂∈ (0,1), a CMS uses 𝑂(1
𝜁log1
𝜂)space, takes 𝑂(log1
𝜂)time
to process each update and frequency query, and guarantees that
0≤˜𝑓𝑒−𝑓𝑒≤𝜁𝑛with probability at least 1−𝜂.
A CMS can be modified to be differentially private [ 42] based on
the notion of 𝜌-zCDP [ 7] and the Gaussian mechanism [ 14]. The
private CMS (PCMS) follows the same structure and procedures
for the construction and frequency queries as the original CMS,
as presented in Algorithm 1. In the construction process, the only
difference is that the PCMS initializes each counter with a random
variable drawn from the Gaussian distribution N(0,𝜎2). Since the
𝑙2-sensitivity of the counters in a CMS is Δ2=√
2𝑎, as each item
leads to at most 2𝑎changes in the counters, the variance of the
Gaussian noise added to each counter is 𝜎2=𝑎/𝜌to ensure𝜌-zCDP.
According to [ 42], with the same 𝑎=𝑂(log1
𝜂)and𝑏=𝑂(1
𝜁), the
computational and space efficiencies of the PCMS remain the same
as the original CMS. The PCMS has higher errors in frequency
estimation than the original CMS due to Gaussian noise, as given
in the following theorem.
Theorem 3.3. [cf. [ 42, Theorem 3.1]] The estimated frequency b𝑓𝑒
of each𝑒∈Ereturned by a PCMS bCsatisfies|b𝑓𝑒−𝑓𝑒|≤𝜁𝑛+𝜉, where
𝜉=√︃
2
𝜌log2
𝜂·√︃
log 4
𝜁
𝜂log2
𝜂,
with probability at least 1−𝜂.
Problem Formulation. We aim to maintain the frequency of any
item inEand the set of 𝛾-heavy hitters at any time over a size-
𝑤sliding window with (𝜀,𝛿)-DP. Due to the randomized nature
of sketches and DP mechanisms, providing exact results for both
queries is infeasible in our setting. Therefore, we consider building
a (sublinear) data structure (i.e., sketch ) to provide approximate
results for frequency and heavy-hitter queries, as defined below.
Definition 3.4 ((𝜉,𝜂)-Approximate Frequency). Given any𝜉>0
and𝜂∈(0,1), ifPr[|b𝑓𝑒,𝑡−𝑓𝑒,𝑡|≤𝜉]≥1−𝜂, we call b𝑓𝑒,𝑡a(𝜉,𝜂)-
approximation for the frequency 𝑓𝑒,𝑡of an item𝑒∈Ein𝑊𝑡.
Definition 3.5 ((𝜉,𝜂)-Approximate 𝛾-Heavy Hitters [ 5,12]).Given
any𝜉>0and𝜂∈(0,1), a set bH𝛾,𝑡⊆E is a(𝜉,𝜂)-approximation
for the setH𝛾,𝑡of𝛾-heavy hitters in 𝑊𝑡if for each item 𝑒∈Ewith
𝑓𝑒,𝑡≥𝛾𝑤+𝜉, we have𝑒∈bH𝛾,𝑡with probability at least 1−𝜂, and
for each item 𝑒∈E with𝑓𝑒,𝑡<𝛾𝑤
2−𝜉, we have𝑒∉bH𝛾,𝑡with
probability at least 1−𝜂.
Before discussing technical details, we summarize the frequently
used notations in Table 1.
3257KDD ’24, August 25–29, 2024, Barcelona, Spain Yiping Wang, Yanhao Wang, and Cen Chen
Table 1: List of Frequently Used Notations
Symbol Definition
𝑆;𝑛 Data stream; size of the stream, i.e., 𝑛=|𝑆|
E;𝑚 Domain of items; domain size, i.e., 𝑚=|E|
𝑆𝑡 Prefix of𝑆until the arrival of 𝑠𝑡at time𝑡
𝑊𝑡;𝑤 Sliding window at time 𝑡; window size
𝑓𝑒,𝑡 Frequency of item 𝑒∈E in𝑊𝑡
H𝛾,𝑡 Set of𝛾-heavy hitters in 𝑊𝑡for a threshold 𝛾∈(0,1)
𝜀,𝛿 Privacy parameters in DP
𝜌 Privacy parameters in zCDP
𝜁,𝜂 Error and confidence parameters in CMS and PCMS
b𝑓𝑒,𝑡;bH𝛾,𝑡 Approximations of 𝑓𝑒,𝑡andH𝛾,𝑡with DP
𝜉 Error parameter in the approximations of 𝑓𝑒,𝑡andH𝛾,𝑡
C;bC (Non-private) CMS; PCMS
Figure 1: Overview of the DPSW-Sketch framework.
4 THE DPSW-SKETCH FRAMEWORK
In this section, we propose the DPSW-Sketch framework to pri-
vately maintain the two approximate sliding-window statistics in
Definitions 3.4 and 3.5. We first describe how DPSW-Sketch is
built and used for query processing in Section 4.1. Next, we analyze
its privacy guarantee, utility bound, and complexity in Section 4.2.
4.1 Algorithm Description
We illustrate the structure of the DPSW-Sketch framework in
Figure 1. Generally, DPSW-Sketch partitions the prefix 𝑆𝑡of the
stream𝑆at any time 𝑡into non-overlapping substreams 𝑆(1),...,
𝑆(𝑙)of equal length. Then, based on the idea of smooth histogram
[6], we establish two lists of checkpoints in each substream and
build a PCMS w.r.t. each checkpoint. For one list (in yellow), a PCMS
is built from the beginning of the substream to each checkpoint. For
the other list (in blue), a PCMS is constructed from each checkpoint
to the end of the substream. To reduce space usage, we only keep
PCMSs built in substreams that overlap with 𝑊𝑡, as expired items
are irrelevant to queries on 𝑊𝑡. Finally, to process any query, we
combine the results obtained from one PCMS per substream (in
green), so that the concatenation of the items on which they are
built is closest to 𝑊𝑡.
Sketch Construction. The detailed procedure to construct DPSW-
Sketch over the sliding window is presented in Algorithm 2. Gen-
erally, DPSW-Sketch uses two factors 𝛼,𝛽∈(0,1)to determine its
structure:𝛼controls the number of checkpoints in each substream
and𝛽specifies the size of each substream as ⌈𝑤𝛽⌉. The first step
in the construction process is to pre-specify a list 𝐼of indices of
checkpoints from⌈𝑤𝛽⌉to1following the maintenance procedure
ofsmooth histogram with the smooth factor 𝛽[6]. The resultant list
𝐼has two properties: (1) 𝐼contains as few checkpoints as possible
(|𝐼|=𝑂(log𝑤
𝛼)according to [ 6]); and (2) it guarantees that for anyAlgorithm 2 DPSW-Sketch Construction
Input: Stream𝑆, window size 𝑤∈Z+, privacy budget 𝜌>0, framework
factors𝛼,𝛽∈(0,1), sketching parameters 𝜁,𝜂∈(0,1)
Output: DPSW-Sketch bC𝑡at time𝑡
1:Initialize𝐼,𝐼′←∅ and𝑙←0
2:⊲Pre-specify the indices of checkpoints in each substream ⊳
3:for𝑖=⌈𝑤𝛽⌉to1do
4: Append a new index 𝑖to the end of 𝐼
5: for𝑗=1to|𝐼|−2do
6: Find the largest 𝑘>𝑗such that𝐼[𝑘]≥( 1−𝛼)·𝐼[𝑗]
7: Delete all indices between 𝑗and𝑘(exclusive) from 𝐼and renum-
ber the remaining indices accordingly
8:for𝑗=1to|𝐼|do
9: App
end an index⌈𝑤𝛽⌉−𝐼[𝑗]+1as𝐼′[𝑗]
10:⊲Sketch update w.r.t. an item 𝑠𝑡∈𝑆 ⊳
11:for𝑡=1to𝑛do
12: if𝑡=1or|𝑆(𝑙)|
≥⌈𝑤𝛽⌉then
13:𝑙←𝑙+1and start a new substream 𝑆(𝑙)
14: Build a PCMS bC(𝑙)
1with𝜁,𝜂, and𝜌1=𝜌(2𝛼−𝛼2)between𝑡
and𝑣(𝑙)
1=𝑡+⌈𝑤𝛽⌉−1
15: for𝑗=2to|𝐼|do
16: Build a PCMS bC(𝑙)
𝑗with𝜁,𝜂and𝜌𝑗=𝜌𝛼𝑗−2(1−𝛼)3/2
between𝑡and𝑣(𝑙)
𝑗=𝑡+𝐼[𝑗]−1
17: Build a PCMS bC′(𝑙)
𝑗with𝜁,𝜂and𝜌𝑗=𝜌𝛼𝑗−2(1−𝛼)3/2
between𝑢(𝑙)
𝑗=𝑡+𝐼′[𝑗]and𝑡+⌈𝑤𝛽⌉−1
18: for𝑗=1to|𝐼|do
19: if𝑣(𝑙)
𝑗≥𝑡thenbC(𝑙)
𝑗.add(𝑠𝑡)
20: if𝑗>1and𝑢(𝑙)
𝑗≤𝑡thenbC′
(𝑙)
𝑗.add(𝑠𝑡)
21: Find the smallest 𝑙′<𝑙with𝑆(𝑙′)∩𝑊𝑡≠∅and delete all PCMSs
built on𝑆(𝑙′−1)and previous substreams
22: Use
the union of PCMSs on 𝑆(𝑙′),...,𝑆(𝑙)asbC𝑡at time𝑡
two neighboring checkpoints 𝐼[𝑘],𝐼[𝑘−1](𝑘=2,...,|𝐼|),𝐼[𝑘]
must be either at least (1−𝛼)·𝐼[𝑘−1]or𝐼[𝑘−1]−1. Then, we
reverse each index in 𝐼to obtain the other set 𝐼′of indices. As such,
we use each checkpoint in 𝐼or𝐼′to indicate the end point of a
PCMS that starts from the beginning of a substream or the start
point of a PCMS that finishes at the end of a substream, respectively,
both relative to the beginning of the substream.
After obtaining 𝐼and𝐼′, the algorithm proceeds to maintain the
sketch framework when receiving a new item 𝑠𝑡in the stream 𝑆at
time𝑡(𝑡=1,...,𝑛 ). When the first item is received or the current
substream is full, we start a new substream 𝑆(𝑙), initialize two sets
bC(𝑙),bC′(𝑙)of PCMSs within 𝑆(𝑙)according to 𝐼and𝐼′, and allocate
the private budget 𝜌among the PCMSs. Since the first indices in 𝐼
and𝐼′both correspond to the entire substream, we build only one
PCMS for them. Additionally, we allocate higher privacy budgets to
PCMSs maintained on more items to reduce total estimation errors.
Subsequently, the framework is updated by adding the current item
𝑠𝑡to all PCMSs in bC(𝑙)andbC′(𝑙)whose corresponding ranges
contain𝑠𝑡, each following Lines 4–5 of Algorithm 1. Finally, we
check whether there is any obsolete substream, where all items
come before the beginning of 𝑊𝑡and are irrelevant to the statistics
on𝑊𝑡and in the future, and remove all PCMSs within them from
the framework. After that, the union of all PCMSs in substreams
that overlap with 𝑊𝑡serves as the sketch bC𝑡at time𝑡.
3258DPSW-Sketch: A Differentially Private Sketch Framework for Frequency Estimation over Sliding Windows KDD ’24, August 25–29, 2024, Barcelona, Spain
Algorithm 3 DPSW-Sketch Query Processing
Input: DPSW-Sketch bC𝑡at time𝑡, window size 𝑤∈Z+, item𝑒∈E (for
frequency query) or threshold 𝛾∈(0,1)(for heavy-hitter query)
Output: (Approximate) frequency b𝑓𝑒,𝑡or set bH𝛾,𝑡of𝛾-heavy hitters
1:⊲Frequency query on item 𝑒∈E using DPSW-Sketch ⊳
2:𝑥←arg max1≤𝑗≤|𝐼|𝑢(𝑙′)
𝑗≤max(𝑡−𝑤+1,1)
3:𝑦←arg max1≤𝑗≤|𝐼|𝑣(𝑙)
𝑗≤𝑡
4:b𝑓(𝑙′)
𝑒←bC′(𝑙)
𝑥.query(𝑒)andb𝑓(𝑙)
𝑒←bC(𝑙)
𝑦.query(𝑒)
5:for𝑘=𝑙′+1to𝑙−1do
6:b𝑓(𝑘)
𝑒←bC(𝑘)
1.query(𝑒)
7:return b𝑓𝑒,𝑡←Í𝑙
𝑘=𝑙′b𝑓(𝑘)
𝑒
8:⊲Heavy-hitter query using DPSW-Sketch ⊳
9:Initialize bH𝛾,𝑡←∅
10:for all𝑒∈Edo
11: Compute b𝑓𝑒,𝑡as Lines 2–7
12: ifb𝑓𝑒,𝑡≥(𝛾−𝜁)𝑤thenbH𝛾,𝑡←bH𝛾,𝑡∪{𝑒}
13:return bH𝛾,𝑡
Query Processing. The methods to compute the results for fre-
quency estimation and heavy-hitter identification on 𝑊𝑡using
DPSW-Sketch are presented in Algorithm 3. To obtain the fre-
quency of a query item 𝑒in𝑊𝑡, the algorithm finds and queries one
PCMS within each substream that overlaps with 𝑊𝑡. For any inter-
mediate substream that is fully covered by 𝑊𝑡, the PCMS w.r.t. the
whole substream is selected. For the first substream that might
contain expired items, it chooses the PCMS that starts before, but is
closest to, the beginning of 𝑊𝑡. Similarly, for the current substream,
it identifies the PCMS that is closest to 𝑡and has already been com-
pleted. Finally, the estimated frequency b𝑓𝑒,𝑡of item𝑒on𝑊𝑡is the
sum of frequencies queried from all selected PCMSs according to
Lines 8–10 of Algorithm 1. The method can also be extended to find
an (approximate) set of 𝛾-heavy hitters for a threshold 𝛾∈(0,1).
It first queries the frequency b𝑓𝑒,𝑡of each item 𝑒∈Eaccording to
Lines 2-7. Then, each item 𝑒∈Eis checked one by one: If b𝑓𝑒,𝑡is
greater than or equal to (𝛾−𝜁)𝑤,𝑒will be added to bH𝛾,𝑡. After
processing all items, bH𝛾,𝑡is returned for the heavy-hitter query.
4.2 Theoretical Analysis
We first provide a formal privacy guarantee for DPSW-Sketch.
Lemma 4.1. DPSW-Sketch bC𝑡at any time𝑡constructed by Algo-
rithm 2 satisfies 𝜌-zCDP.
Proof. According to [42, Theorem 3.1], each PCMS in bC𝑡satis-
fies zCDP w.r.t. the privacy parameter with which it is initialized.
That is, for any 𝑘≥1,bC(𝑘)
1provides𝜌1-zCDP, where 𝜌1=𝜌(2𝛼−
𝛼2);bC(𝑘)
𝑗andbC′(𝑘)
𝑗provide𝜌𝑗-zCDP, where 𝜌𝑗=𝜌𝛼𝑗−2(1−𝛼)3/2,
for each𝑗=2,...,|𝐿|. Since all of these PCMSs are built in the same
substream𝑆(𝑘), their total privacy cost 𝜌𝑎𝑙𝑙is calculated by apply-
ing the adaptive composition of zCDP as:
𝜌𝑎𝑙𝑙=𝜌(2𝛼−𝛼2)+2|𝐿|∑︁
𝑗=2𝜌
2𝛼𝑗−2(1−𝛼)3
=𝜌−𝜌(1−𝛼)2+𝜌(1−𝛼)2(1−𝛼|𝐿|−1)<𝜌.Consequently, the output in each substream consisting of the union
of all PCMSs satisfies 𝜌-zCDP. Finally, since all substreams are mu-
tually disjoint, DPSW-Sketch bC𝑡at any time𝑡built by Algorithm 2
satisfies𝜌-zCDP due to the parallel composition of zCDP. □
According to [ 42], a PCMS can only guarantee zCDP for queries.
That is, it assumes that an adversary has no access to the internal
sketch structure and is allowed to query a PCMS after the PCMS
has been built on all items in the dataset. As such, any query can be
regarded as a post-processing step without additional privacy losses.
DPSW-Sketch follows the same setting as [ 42]: By dividing the
stream into disjoint substreams and using smooth histograms to
pre-specify the range in which each PCMS is built, we ensure that
all PCMSs are queried only after they have been built without up-
dates. Therefore, DPSW-Sketch can answer an unlimited number
of queries at all times with DP. We consider how to convert 𝜌-zCDP
to(𝜀,𝛿)-DP according to Theorem 3.2. Specifically, to guarantee
(𝜀,𝛿)-DP for any 𝜀>0and𝛿∈(0,1), the value of 𝜌is set as:
𝜌=𝜀+2 ln(1/𝛿)−2√︃
𝜀ln(1/𝛿)+ln2(1/𝛿). (1)
Next, we analyze the error of the DPSW-Sketch framework for
frequency estimation.
Lemma 4.2. The frequency b𝑓𝑒,𝑡by Algorithm 3 satisfies Pr
|b𝑓𝑒,𝑡−
𝑓𝑒,𝑡|≤𝜁𝑤+𝜉
≥1−𝑂(√𝑤𝜂), where𝜉=𝑂 √𝑤(𝜁+1√𝜌log1
𝜁𝜂).
Proof. We compute the error bound of b𝑓𝑒,𝑡for estimating 𝑓𝑒,𝑡
by summing the upper bounds of its errors in all substreams. For
each substream 𝑆(𝑘)(𝑙′<𝑘<𝑙) that is fully covered by 𝑊𝑡, we
always obtain b𝑓(𝑘)
𝑒frombC(𝑘)
1. According to Theorem 3.3, we have
Pr
|b𝑓(𝑘)
𝑒−𝑓(𝑘)
𝑒|≤𝜁·⌈𝑤𝛽⌉+𝜉(𝑘)
≥1−𝜂, (2)
where𝜉(𝑘)=√︂
2 log(2/𝜂)
𝜌(2𝛼−𝛼2)·√︂
log 4 log(2/𝜂)
𝜁𝜂. For𝑆(𝑙′)and𝑆(𝑙)that
partially overlap with 𝑊𝑡, the errors come from the estimates of
PCMSs and the misalignments between 𝑊𝑡and the ranges of the
PCMSs used for query processing. Specifically, we have
Pr
|b𝑓(𝑙′)
𝑒−𝑓(𝑙′)
𝑒|≤(𝛼+𝜁)·𝐼[𝑥]+𝜉(𝑙′)
≥1−𝜂; (3)
Pr
|b𝑓(𝑙)
𝑒−𝑓(𝑙)
𝑒|≤(𝛼+𝜁)·𝐼[𝑦]+𝜉(𝑙)
≥1−𝜂, (4)
where𝜉(𝑙′)=√︃
2 log(2/𝜂)
𝜌𝑥·√︂
log 4 log(2/𝜂)
𝜁𝜂and𝜉(𝑙)=√︂
2 log(2/𝜂)
𝜌𝑦·
√︂
log 4 log(2/𝜂)
𝜁𝜂. Since there are at most 𝑙−𝑙′+1≤⌈𝑤1−𝛽⌉+1
active substreams, by combining Eqs. 2–4 and applying the union
bound and the triangle inequality, we obtain with probability at
least 1−(⌈𝑤1−𝛽⌉+1)𝜂,
|b𝑓𝑒,𝑡−𝑓𝑒,𝑡|≤𝑙∑︁
𝑘=𝑙′|b𝑓(𝑘)
𝑒−𝑓(𝑘)
𝑒|≤𝑙−1∑︁
𝑘=𝑙′+1
𝜁⌈𝑤𝛽⌉+𝜉(𝑘)
+(𝛼+𝜁)(𝐼[𝑥]+𝐼[𝑦])+𝜉(𝑙′)+𝜉(𝑙).(5)
Taking𝛽=1
2and𝛼=𝑂(1), Eq. 5 can be simplified as
|b𝑓𝑒,𝑡−𝑓𝑒,𝑡|≤𝜁𝑤+𝑂√𝑤 𝜁+1√𝜌log1
𝜁𝜂
,
3259KDD ’24, August 25–29, 2024, Barcelona, Spain Yiping Wang, Yanhao Wang, and Cen Chen
because𝜉(𝑘)=𝑂 1√𝜌log1
𝜁𝜂for each𝑘∈[𝑙′,...,𝑙]and𝐼[𝑥]=
𝐼[𝑦]=𝑂(√𝑤), and the proof is concluded. □
Then, we extend the error bound to heavy-hitter identification.
Lemma 4.3. The set bH𝛾,𝑡returned by Algorithm 3 satisfies (1) for
any item𝑒∈E with𝑓𝑒,𝑡≥𝛾𝑤+𝑂 √𝑤(𝜁+1√𝜌log1
𝜁𝜂),𝑒∈bH𝛾,𝑡
with probability at least 1−𝑂(𝑚√𝑤𝜂); (2) for any item 𝑒∈Ewith
𝑓𝑒,𝑡<(𝛾−2𝜁)𝑤−𝑂 √𝑤(𝜁+1√𝜌log1
𝜁𝜂),𝑒∉bH𝛾,𝑡with probability
at least 1−𝑂(𝑚√𝑤𝜂).
Proof. According to Lemma 4.2, for any item 𝑒∈Ewith𝑓𝑒,𝑡≥
𝛾𝑤+𝜉, where𝜉=𝑂 √𝑤(𝜁+1√𝜌log1
𝜁𝜂), we have b𝑓𝑒,𝑡≥𝑓𝑒,𝑡−𝜁𝑤−
𝜉≥(𝛾−𝜁)𝑤and𝑒is included in bH𝛾,𝑡with probability 1−𝑂(√𝑤𝜂).
Similarly, for any item 𝑒∈Ewith𝑓𝑒,𝑡<(𝛾−2𝜁)𝑤−𝜉, we have
b𝑓𝑒,𝑡≤𝑓𝑒,𝑡+𝜁𝑤+𝜉<(𝛾−𝜁)𝑤and𝑒is not included in bH𝛾,𝑡with
probability 1−𝑂(√𝑤𝜂). By applying the union bound w.r.t. all the
𝑚items inE, it guarantees that the above results hold for all items
with probability at least 1−𝑂(𝑚√𝑤𝜂). □
Finally, the main theoretical results of the DPSW-Sketch frame-
work are summarized as follows.
Theorem 4.4. For any window size 𝑤, framework factors 𝛽=1
2
and𝛼=𝑂(1), sketching parameters 𝜁,𝜂∈(0,1), privacy parameters
𝜀>0and𝛿∈(0,1), the following results hold:
1.DPSW-Sketch is(𝜀,𝛿)-differentially private.
2.It provides an
𝑂 𝜁𝑤+√
𝑤log(1/𝛿)
𝜀log𝑤𝑚
𝜁𝜂,𝜂
-approximate
frequency b𝑓𝑒,𝑡for each item 𝑒∈E.
3.It gives an
𝑂 𝜁√𝑤+√
𝑤log(1/𝛿)
𝜀log𝑤𝑚
𝜁𝜂,𝜂
-approximate
setbH𝛾,𝑡of𝛾-heavy hitters for any threshold 𝛾≥4𝜁.
4.It uses𝑂(√𝑤log𝑤
𝜁log𝑤𝑚
𝜂)space and𝑂(log𝑤log𝑤𝑚
𝜂)time
per update and processes a frequency query and a heavy-hitter
query in𝑂(√𝑤log𝑤𝑚
𝜂)and𝑂(𝑚√𝑤log𝑤𝑚
𝜂)time.
Proof. First of all, by setting the value of 𝜌according to Eq. 1
for any given 𝜀>0and𝛿∈(0,1),DPSW-Sketch satisfies(𝜀,𝛿)-DP.
Eq. 1 implies1
𝜌=𝜀+2 ln(1/𝛿)+2√
𝜀ln(1/𝛿)+ln2(1/𝛿)
𝜀2 =𝑂 log(1/𝛿)
𝜀2. By
replacing1
𝜌with𝑂 log(1/𝛿)
𝜖2and scaling 𝜂to𝑂(𝜂
𝑚√𝑤)for each
PCMS in Lemmas 4.2 and 4.3, we obtain the approximation bounds
for frequency estimation and heavy-hitter identification.
In terms of space complexity, we can see that there exist 𝑂(√𝑤)
active substreams that overlap with 𝑊𝑡for any𝑡∈Z+, the number
of PCMSs maintained in each active substream is 𝑂(log𝑤), and the
size of each PCMS is 𝑂(1
𝜁log𝑤𝑚
𝜂). In total, the space complexity
ofDPSW-Sketch is𝑂(√𝑤log𝑤
𝜁log𝑤𝑚
𝜂). In terms of time complex-
ity, we can see that Algorithm 2 uses 𝑂(√𝑤)time to decide the
two lists of checkpoints in a smooth histogram, initializes 𝑂(log𝑤)
PCMSs at the beginning of each substream, inserts an item into
at most𝑂(log𝑤)PCMSs, and requires 𝑂(log𝑤𝑚
𝜂)hash computa-
tions and counter updates for each insertion. Since the checkpoints
are computed only once before stream processing, the (amortized)
time complexity per update is 𝑂(log𝑤log𝑤𝑚
𝜂). For a frequencyTable 2: Dataset Information
Dataset 𝑛 𝑚 Description
AOL210.7M 38,411 Web search query logs
MovieLens325M 62,423 Movie ratings
WorldCup41.3B 82,592 Web server logs
Gaussian 10M 25,600 Synthetic Gaussian-distributed items
Zipf 10M 25,600 Synthetic Zipf-distributed items
query, Algorithm 3 selects 𝑂(√𝑤)PCMSs from DPSW-Sketch and
takes𝑂(log𝑤𝑚
𝜂)time to query each PCMS. Thus, the time com-
plexity of each frequency query is 𝑂(√𝑤log𝑤𝑚
𝜂). A heavy-hitter
query requires to perform 𝑚frequency queries and thus has a time
complexity of 𝑂(𝑚√𝑤log𝑤𝑚
𝜂). □
Comparison with Existing Private Sketches in [ 5,8,38].We
show how the theoretical results of DPSW-Sketch improve over
those of the existing private sliding-window sketches [ 5,8,38]. First,
the sketches in [ 5,8,38] are all specific to the identification of heavy
hitters and the estimation of their frequencies with bounded errors,
while DPSW-Sketch can approximate the frequencies of all items.
Second, DPSW-Sketch either provides better approximations for
heavy-hitter identification or has a lower space complexity than
the sketches in [ 5,8,38]. Compared to PCC-MG in [8], which
requires𝑂(𝑤)space for an additive error of 𝑂(√𝑤), and U-Sketch
in [38], which has an additive error of ˜𝑂(𝑤3/4)in˜𝑂(√𝑤)space1,
the additive error and space complexity of DPSW-Sketch are both
˜𝑂(√𝑤).BLMZ-Sketch [5] achieves the same ˜𝑂(√𝑤)additive error
asDPSW-Sketch. However, its update time and space usage, both
of which are 𝑂(√𝑤log4𝑤
𝜀𝛾), are much higher than those of DPSW-
Sketch. Finally, we note that all private sketches have higher errors
and use more space than non-private sketches in the sliding window
model, e.g., [23, 40], due to the noise added to satisfy DP.
5 EXPERIMENTS
In this section, we conducted extensive experiments on five real-
world and synthetic datasets to evaluate the performance of DPSW-
Sketch compared to the state-of-the-art baselines.
Datasets. We employed three real-world and two synthetic datasets
in the experiments. Their statistics are reported in Table 2, where 𝑛
is the dataset size and 𝑚is the domain size. For synthetic datasets,
the skewness parameter for the Zipf distribution is 1; the mean
and standard deviation of the Gaussian distribution are 50and
25, respectively. More detailed information on these datasets is
provided in Appendix A due to space limitations.
Baselines. We adopted U-Sketch [38],PCC-MG [8], and BLMZ-
Sketch [5] as baselines for frequency estimation and heavy-hitter
identification with DP in the sliding window model. We also used a
non-private sliding-window sketch, Microscope-Sketch [40], as a
baseline to measure “the price of privacy. ” More details about these
baselines are also deferred to Appendix B.
1We use ˜𝑂(·)to omit all the factors poly-logarithmic w.r.t. 𝑤and independent of 𝑤.
2https://www.cim.mcgill.ca/~dudek/206/Logs/AOL-user-ct-collection/
3https://grouplens.org/datasets/movielens/latest/
4https://ita.ee.lbl.gov/html/contrib/WorldCup.html
3260DPSW-Sketch: A Differentially Private Sketch Framework for Frequency Estimation over Sliding Windows KDD ’24, August 25–29, 2024, Barcelona, Spain
Figur
e 2: Performance for frequency queries on high-frequency items by varying privacy parameter 𝜀∈{0.1,0.2,0.4,..., 2.0}.
Figur
e 3: Performance for frequency queries on low-frequency items by varying privacy parameter 𝜀∈{0.1,0.2,0.4,..., 2.0}.
Implementation. All the algorithms we compared were imple-
mented in C++ and compiled with the “-O3” flag. We ran each
experiment with a single thread on a server with an Intel Xeon
Gold 6428 processor @2.5GHz and 32GB RAM. For each baseline,
we either used the implementation published by the original au-
thors or followed the idea of the original paper for implementation
and fine-tuned the parameters. We set the window size 𝑤to106by
default. The default parameters in DPSW-Sketch are as follows:
(1) number of checkpoints |𝐼|=3; (2) length of each substream
0.1𝑤; and (3) height 𝑎∈[2,..., 5]and width𝑏∈[500,..., 5000]for
each PCMS. The parameter sensitivity of DPSW-Sketch is further
analyzed in Appendix C.
Metrics. The query workload on each dataset was generated by ran-
domly sampling 1%timestamps from time 𝑡=𝑤to𝑛and perform-
ing a set of 100frequency queries and a heavy-hitter query at each
sampled timestamp. We divided the items into two groups accord-
ing to their ground-truth frequencies as high- and low-frequency
items (top-50 most frequent vs. all remaining items) and each set
Qof queries has an equal number of items from each group. The
following metrics are used for performance evaluation:
•Mean Absolute Error (MAE),1
|
Q|Í
𝑒∈Q|b𝑓𝑒,𝑡−𝑓𝑒,𝑡|, is used
to measure the performance for frequency queries.•Mean Relative Error (MRE),1
|
Q|Í
𝑒∈Q|b𝑓𝑒,𝑡−𝑓𝑒,𝑡|
𝑓𝑒
,𝑡, is also
used to measure the performance for frequency queries.
•F1-score, which is the harmonic mean of the precision score,
i.e., the ratio of|bH𝑒,𝑡∩H𝑒,𝑡|to|bH𝑒,𝑡|, and the recall score,
i.e., the ratio of|bH𝑒,𝑡∩H𝑒,𝑡|to|H𝑒,𝑡|, is used to measure
the performance for heavy-hitter queries.
•Throughput, i.e., the average number of items to insert
per second (in Kops), and Sketch Size (in KB) are used to
measure the time and space efficiency of each method.
5.1 Frequency Estimation
Figures 2 and 3 illustrate the performance of different sketches for
frequency queries on high- and low-frequency items by varying
the privacy parameter 𝜀from 0.1to2. For sketches satisfying (𝜀,𝛿)-
DP and𝜌-zCDP, we fix 𝛿to1/𝑛1.5and compute the value of 𝜌
according to Eq. 1. Here, we restrict the selection of low-frequency
items to those with frequencies of at least 100. This is because PCC-
MGandBLMZ-Sketch , which use Misra-Gries sketches [ 31] as
building blocks, cannot answer queries on low-frequency items.
For the above query workload, PCC-MG andBLMZ-Sketch still
do not report the results for many frequency queries. In such cases,
we treat their results as 0in the calculation of MAE and MRE.
3261KDD ’24, August 25–29, 2024, Barcelona, Spain Yiping Wang, Yanhao Wang, and Cen Chen
Figur
e 4: Performance for heavy-hitter queries by varying privacy parameter 𝜀and threshold 𝛾.
Our results show that the MAEs and MREs of all sketches, ex-
cept (non-private) Microscope-Sketch, generally decrease with
increasing𝜀in all datasets. For both high- and low-frequency items,
DPSW-Sketch achieves significantly lower MAE and MRE than all
other private sketches across different values of 𝜀. Especially, DPSW-
Sketch is the only method among them whose MREs are always
within 10%for high-frequency items and 100% for low-frequency
items when 𝜀≥1. The results confirm that DPSW-Sketch strikes a
better balance between frequency estimation accuracy and privacy
than state-of-the-art private sketches in the sliding-window model.
Furthermore, U-Sketch, PCC-MG, and BLMZ-Sketch generally
exhibit performance similar to each other on high-frequency items,
andPCC-MG is slightly better when 𝜀is smaller, while U-Sketch
becomes better for a larger value of 𝜀. For low-frequency items, U-
Sketch sometimes performs much worse than PCC-MG andBLMZ-
Sketch because its estimation errors are even higher than simply
treating all missing frequencies as 0. In all datasets, the three private
baselines always have at least 4×higher MAE and 2×higher MRE
than those of DPSW-Sketch. Finally, the performance of all private
sketches for frequency estimation is not comparable to that of the
state-of-the-art non-private sketch, Microscope-Sketch, especially
on low-frequency items, because (1) they introduce substantial
noise in the counters to satisfy DP and (2) their sketch structures
are modified for ease of privacy accounting, which further leads
to estimation errors due to the misalignment between the sliding
window and the sketch used for query processing.
5.2 Heavy-Hitter Identification
Figure 4 shows the performance of different sketches for heavy-
hitter identification by varying the privacy parameter 𝜀when the
threshold𝛾=0.005or0.01and the threshold 𝛾when𝜀=1. We
observe that DPSW-Sketch achieves higher F1-scores than other
DP sketches in almost all cases. Its performance is mostly close
to that of (non-private) Microscope-Sketch when𝜀≥1. These
results verify its good trade-off between accuracy for heavy-hitter
identification and privacy. The performance of BLMZ-Sketch and
U-Sketch improves with increasing 𝜀. However, they are inferior
toDPSW-Sketch due to much larger noise. The F1-score of PCC-
MGremains constant for all values of 𝜀. This is because PCC-MGis built directly on MG sketches, which only guarantee to return
heavy hitters but cannot filter out non-heavy hitters. As such, it has
achieved a recall score of 1when𝜀=0.1(i.e., no false negatives)
while inevitably including some false positives in all its results,
regardless of the value of 𝜀. In contrast, BLMZ-Sketch only uses
MG sketches for pre-screening and builds additional counters to
decide whether a candidate item is a heavy hitter, thus achieving
better performance for heavy-hitter queries.
5.3 Performance vs. Window Size
Figure 5 presents the performance of different sketches for fre-
quency and heavy-hitter queries by varying the window size 𝑤
from 105to106. We observe that DPSW-Sketch has better query
accuracies than other private sketches in almost all cases across
different window sizes. The MAEs of DPSW-Sketch for frequency
estimation increase with the window size 𝑤. This can be attributed
to a greater number of distinct elements within a larger window,
which leads to more hash collisions. Note that the MAEs grow
much lower than 𝑤and thus the MREs of DPSW-Sketch drop
with increasing 𝑤. Furthermore, the F1-scores of DPSW-Sketch
for heavy-hitter queries also increase with 𝑤. Therefore, the perfor-
mance of DPSW-Sketch generally degrades in smaller windows.
This is because the variance of Gaussian noise added to PCMSs is
nearly independent of 𝑤. As such, queries in smaller windows are
more severely disturbed by noise than those in larger windows.
5.4 Space and Time Efficiency
Figure 6 illustrates the performance of different sketches for fre-
quency and heavy-hitter queries when their sizes range from 4KB
to 4MB and 𝜀=1. We observe that for CMS-based methods, i.e.,
U-Sketch, DPSW-Sketch, and Microscope-Sketch, their query
performance first decreases with increasing sketch sizes and then
becomes steady when the sketch sizes are sufficiently large because
larger sketches naturally lead to fewer hash collisions and more
accurate counters. On the contrary, MG sketch-based methods, i.e.,
PCC-MG andBLMZ-Sketch, generally perform better when their
sketch sizes are smaller because larger sketches introduce much
more noise while having little benefit.
3262DPSW-Sketch: A Differentially Private Sketch Framework for Frequency Estimation over Sliding Windows KDD ’24, August 25–29, 2024, Barcelona, Spain
Figur
e 5: Performance of different sketches for frequency and heavy-hitter queries by varying window size 𝑤.
Figur
e 6: Performance of different sketches for frequency and heavy-hitter queries by varying sketch size from 4KB to 4MB.
Figur
e 7: Throughput of each sketch in the default setting.
Figure 7 presents the throughputs of different sketches in the
default setting (i.e., for 𝜀=1and𝑤=106with all the sketch parame-
ters fine-tuned). DPSW-Sketch has a throughput of about 100Kops
(i.e., processing 100K items per second) across all datasets, which
satisfies the requirement for real-world stream processing and is
similar to that of U-Sketch. However, Microscope-Sketch, BLMZ-
Sketch, and PCC-MG have higher throughputs (500–1000Kops)
than DPSW-Sketch. For Microscope-Sketch, this is because it
utilizes a more efficient structure without considering privacy. For
BLMZ-Sketch andPCC-MG, this can be attributed to the fact that
MG sketches are much smaller than CMSs.6 CONCLUSION
In this paper, we propose DPSW-Sketch, a novel sketch frame-
work for frequency and heavy-hitter queries with event-level dif-
ferential privacy (DP) in the sliding-window model. Theoretically,
DPSW-Sketch satisfies DP, provides results for both queries within
bounded errors, and has sublinear time and space complexities w.r.t.
the size of the sliding window. These results improve upon those
of existing private sliding-window sketches. Experimental results
also indicate that DPSW-Sketch achieves better trade-offs between
utility and privacy than state-of-the-art baselines.
In future work, we would like to extend DPSW-Sketch to satisfy
more rigorous notions of DP, such as user-level DP and local DP
(LDP). We are also interested in the design of private federated
sketches for distributed data streams.
ACKNOWLEDGMENTS
We thank anonymous reviewers for their constructive comments to
help improve this work. This work was supported by the National
Natural Science Foundation of China (Grant No. 62202169 and
62202170) and the Open Research Fund of The State Key Laboratory
of Blockchain and Data Security, Zhejiang University.
3263KDD ’24, August 25–29, 2024, Barcelona, Spain Yiping Wang, Yanhao Wang, and Cen Chen
REFERENCES
[1]Joel Daniel Andersson and Rasmus Pagh. 2023. A Smooth Binary Mechanism
for Efficient Private Continual Observation. Advances in Neural Information
Processing Systems 36 (2023), 49133–49145.
[2]Arvind Arasu and Gurmeet Singh Manku. 2004. Approximate Counts and Quan-
tiles over Sliding Windows. In Proceedings of the Twenty-Third ACM SIGMOD-
SIGACT-SIGART Symposium on Principles of Database Systems (PODS ’04). Asso-
ciation for Computing Machinery, New York, NY, USA, 286–296.
[3]Ran Ben-Basat, Gil Einziger, Roy Friedman, and Yaron Kassner. 2016. Heavy
hitters in streams and sliding windows. In IEEE INFOCOM 2016 - The 35th Annual
IEEE International Conference on Computer Communications. IEEE, 1–9.
[4]Omri Ben-Eliezer, Dan Mikulincer, and Ilias Zadik. 2022. Archimedes Meets
Privacy: On Privately Estimating Quantiles in High Dimensions Under Minimal
Assumptions. Advances in Neural Information Processing Systems 35 (2022), 32450–
32464.
[5]Jeremiah Blocki, Seunghoon Lee, Tamalika Mukherjee, and Samson Zhou. 2023.
Differentially Private 𝐿2-Heavy Hitters in the Sliding Window Model. In The
Eleventh International Conference on Learning Representations. OpenReview.net.
[6]Vladimir Braverman and Rafail Ostrovsky. 2007. Smooth Histograms for Sliding
Windows. In 48th Annual IEEE Symposium on Foundations of Computer Science.
IEEE, 283–293.
[7]Mark Bun and Thomas Steinke. 2016. Concentrated Differential Privacy: Sim-
plifications, Extensions, and Lower Bounds. In Theory of Cryptography - 14th
International Conference, TCC 2016-B, Beijing, China, October 31-November 3, 2016,
Proceedings, Part I. Springer, Berlin, Heidelberg, 635–658.
[8]T.-H. Hubert Chan, Mingfei Li, Elaine Shi, and Wenchang Xu. 2012. Differentially
Private Continual Monitoring of Heavy Hitters from Distributed Streams. In
Privacy Enhancing Technologies - 12th International Symposium, PETS 2012, Vigo,
Spain, July 11-13, 2012, Proceedings. Springer, Berlin, Heidelberg, 140–159.
[9]T.-H. Hubert Chan, Elaine Shi, and Dawn Song. 2011. Private and Continual
Release of Statistics. ACM Transactions on Information and System Security 14, 3,
Article 26 (2011), 24 pages.
[10] Moses Charikar, Kevin C. Chen, and Martin Farach-Colton. 2004. Finding frequent
items in data streams. Theoretical Computer Science 312, 1 (2004), 3–15.
[11] Graham Cormode, Minos N. Garofalakis, Peter J. Haas, and Chris Jermaine. 2012.
Synopses for Massive Data: Samples, Histograms, Wavelets, Sketches. Foundations
and Trends in Databases 4, 1-3 (2012), 1–294.
[12] Graham Cormode and S. Muthukrishnan. 2005. An improved data stream sum-
mary: the count-min sketch and its applications. Journal of Algorithms 55, 1
(2005), 58–75.
[13] Mayur Datar, Aristides Gionis, Piotr Indyk, and Rajeev Motwani. 2002. Main-
taining Stream Statistics over Sliding Windows. SIAM J. Comput. 31, 6 (2002),
1794–1813.
[14] Cynthia Dwork, Krishnaram Kenthapadi, Frank McSherry, Ilya Mironov, and
Moni Naor. 2006. Our Data, Ourselves: Privacy Via Distributed Noise Generation.
InAdvances in Cryptology – EUROCRYPT 2006. Springer, Berlin, Heidelberg,
486–503.
[15] Cynthia Dwork, Frank McSherry, Kobbi Nissim, and Adam D. Smith. 2006. Cali-
brating Noise to Sensitivity in Private Data Analysis. In Theory of Cryptography.
Springer, Berlin, Heidelberg, 265–284.
[16] Cynthia Dwork, Moni Naor, Toniann Pitassi, and Guy N. Rothblum. 2010. Dif-
ferential privacy under continual observation. In Proceedings of the 42nd ACM
Symposium on Theory of Computing (STOC ’10). Association for Computing
Machinery, New York, NY, USA, 715–724.
[17] Alessandro Epasto, Jieming Mao, Andres Munoz Medina, Vahab Mirrokni, Sergei
Vassilvitskii, and Peilin Zhong. 2023. Differentially Private Continual Releases
of Streaming Frequency Moment Estimations. In 14th Innovations in Theoretical
Computer Science Conference (ITCS 2023). Schloss Dagstuhl – Leibniz-Zentrum
für Informatik, Dagstuhl, Germany, 48:1–48:24.
[18] Cristian Estan and George Varghese. 2002. New directions in traffic measurement
and accounting. In Proceedings of the 2002 Conference on Applications, Technolo-
gies, Architectures, and Protocols for Computer Communications (SIGCOMM ’02).
Association for Computing Machinery, New York, NY, USA, 323–336.
[19] Hendrik Fichtenberger, Monika Henzinger, and Jalaj Upadhyay. 2023. Constant
Matters: Fine-grained Error Bound on Differentially Private Continual Obser-
vation. In Proceedings of the 40th International Conference on Machine Learning.
PMLR, 10072–10092.
[20] Badih Ghazi, Ravi Kumar, Jelani Nelson, and Pasin Manurangsi. 2023. Private
Counting of Distinct and k-Occurring Items in Time Windows. In 14th Innova-
tions in Theoretical Computer Science Conference (ITCS 2023). Schloss Dagstuhl –
Leibniz-Zentrum für Informatik, Dagstuhl, Germany, 55:1–55:24.
[21] Jennifer Gillenwater, Matthew Joseph, and Alex Kulesza. 2021. Differentially
Private Quantiles. In Proceedings of the 38th International Conference on Machine
Learning. PMLR, 3713–3722.
[22] Google. 2024. How Google retains data we collect. https://policies.google.com/
technologies/retention.[23] Xiangyang Gou, Long He, Yinda Zhang, Ke Wang, Xilai Liu, Tong Yang, Yi
Wang, and Bin Cui. 2020. Sliding Sketches: A Framework using Time Zones
for Data Stream Processing in Sliding Windows. In Proceedings of the 26th ACM
SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD
’20). Association for Computing Machinery, New York, NY, USA, 1015–1025.
[24] Johannes Haug, Alexander Braun, Stefan Zürn, and Gjergji Kasneci. 2022. Change
Detection for Local Explainability in Evolving Data Streams. In Proceedings of
the 31st ACM International Conference on Information & Knowledge Management
(CIKM ’22). Association for Computing Machinery, New York, NY, USA, 706–716.
[25] Jonathan Hehir, Daniel Ting, and Graham Cormode. 2023. Sketch-Flip-Merge:
Mergeable Sketches for Private Distinct Counting. In Proceedings of the 40th
International Conference on Machine Learning. PMLR, 12846–12865.
[26] Ziyue Huang, Yuan Qiu, Ke Yi, and Graham Cormode. 2022. Frequency Estimation
Under Multiparty Differential Privacy: One-shot and Streaming. Proceedings of
the VLDB Endowment 15, 10 (2022), 2058–2070.
[27] Haim Kaplan, Shachar Schnapp, and Uri Stemmer. 2022. Differentially Private
Approximate Quantiles. In Proceedings of the 39th International Conference on
Machine Learning. PMLR, 10751–10761.
[28] Christian Janos Lebeda and Jakub Tetek. 2023. Better Differentially Private
Approximate Histograms and Heavy Hitters using the Misra-Gries Sketch. In
Proceedings of the 42nd ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of
Database Systems (PODS ’23). Association for Computing Machinery, New York,
NY, USA, 79–88.
[29] Luca Melis, George Danezis, and Emiliano De Cristofaro. 2016. Efficient Private
Statistics with Succinct Sketches. In 23rd Annual Network and Distributed System
Security Symposium (NDSS ’16). The Internet Society, 15 pages.
[30] Darakhshan J. Mir, S. Muthukrishnan, Aleksandar Nikolov, and Rebecca N.
Wright. 2011. Pan-private algorithms via statistics on sketches. In Proceedings of
the Thirtieth ACM SIGMOD-SIGACT-SIGART Symposium on Principles of Database
Systems (PODS ’11). Association for Computing Machinery, New York, NY, USA,
37–48.
[31] Jayadev Misra and David Gries. 1982. Finding Repeated Elements. Science of
Computer Programming 2, 2 (1982), 143–152.
[32] S. Muthukrishnan. 2005. Data Streams: Algorithms and Applications. Foundations
and Trends in Theoretical Computer Science 1, 2 (2005), 117–236.
[33] Rasmus Pagh and Mikkel Thorup. 2022. Improved Utility Analysis of Private
CountSketch. Advances in Neural Information Processing Systems 35 (2022), 25631–
25643.
[34] Odysseas Papapetrou, Minos N. Garofalakis, and Antonios Deligiannakis. 2012.
Sketch-based Querying of Distributed Sliding-Window Data Streams. Proceedings
of the VLDB Endowment 5, 10 (2012), 992–1003.
[35] Victor Perrier, Hassan Jameel Asghar, and Dali Kaafar. 2019. Private Continual
Release of Real-Valued Data Streams. In 26th Annual Network and Distributed
System Security Symposium (NDSS ’19). The Internet Society, 13 pages.
[36] Nicolo Rivetti, Yann Busnel, and Achour Mostéfaoui. 2015. Efficiently Sum-
marizing Data Streams over Sliding Windows. In 2015 IEEE 14th International
Symposium on Network Computing and Applications. IEEE, 151–158.
[37] Adam D. Smith, Shuang Song, and Abhradeep Thakurta. 2020. The Flajolet-Martin
Sketch Itself Preserves Differential Privacy: Private Counting with Minimal Space.
Advances in Neural Information Processing Systems 33 (2020), 19561–19572.
[38] Jalaj Upadhyay. 2019. Sublinear Space Private Algorithms Under the Sliding
Window Model. In Proceedings of the 36th International Conference on Machine
Learning. PMLR, 6363–6372.
[39] Lun Wang, Iosif Pinelis, and Dawn Song. 2022. Differentially Private Fractional
Frequency Moments Estimation with Polylogarithmic Space. In The Tenth Inter-
national Conference on Learning Representations. OpenReview.net.
[40] Yuhan Wu, Shiqi Jiang, Siyuan Dong, Zheng Zhong, Jiale Chen, Yutong Hu,
Tong Yang, Steve Uhlig, and Bin Cui. 2023. MicroscopeSketch: Accurate Sliding
Estimation Using Adaptive Zooming. In Proceedings of the 29th ACM SIGKDD
Conference on Knowledge Discovery and Data Mining (KDD ’23). Association for
Computing Machinery, New York, NY, USA, 2660–2671.
[41] Sinan Yildirim, Kamer Kaya, Soner Aydin, and Hakan Bugra Erentug. 2020. Dif-
ferentially Private Frequency Sketches for Intermittent Queries on Large Data
Streams. In 2020 IEEE International Conference on Big Data. IEEE, 4083–4092.
[42] Fuheng Zhao, Dan Qiao, Rachel Redberg, Divyakant Agrawal, Amr El Abbadi,
and Yu-Xiang Wang. 2022. Differentially Private Linear Sketches: Efficient Imple-
mentations and Applications. Advances in Neural Information Processing Systems
35 (2022), 12691–12704.
[43] Zheng Zhong, Shen Yan, Zikun Li, Decheng Tan, Tong Yang, and Bin Cui. 2021.
BurstSketch: Finding Bursts in Data Streams. In Proceedings of the 2021 Interna-
tional Conference on Management of Data (SIGMOD ’21). Association for Comput-
ing Machinery, New York, NY, USA, 2375–2383.
[44] Wennan Zhu, Peter Kairouz, Brendan McMahan, Haicheng Sun, and Wei Li. 2020.
Federated Heavy Hitters Discovery with Differential Privacy. In Proceedings of
the Twenty Third International Conference on Artificial Intelligence and Statistics.
PMLR, 3837–3847.
3264DPSW-Sketch: A Differentially Private Sketch Framework for Frequency Estimation over Sliding Windows KDD ’24, August 25–29, 2024, Barcelona, Spain
A DATASET INFORMATION
We describe the datasets used in our experiments and the pre-
processing steps applied to them below.
•AOL5comprises 36,389,567 web queries over three months
on the AOL website. Each record has several fields such as
AnonID ,Query ,QueryTime ,ItemRank , and ClickURL . We
pre-processed the dataset as follows: (1) removing all du-
plicate and incomplete records; (2) sorting the records by
QueryTime ; (3) acquiring keywords from the Query field of
each record after stopword removal and lemmatization; (4)
filtering out typos and meaningless keywords. After all pre-
processing steps, the dataset contains 10,710,880 items with
38,411 unique query keywords. We aim to keep track of
the number of times each keyword is queried and the top
trending keywords in the latest 𝑤queries.
•MovieLens6consists of 25,000,095 ratings on 62,423 movies
contributed by 162,541 users from January 1995 to Novem-
ber 2019. Each record has several fields such as userId ,
movieId ,rating , and timestamp . The original data set has
been sorted chronologically without missing fields. We ex-
tract the movieId field for statistics to track the number of
times each movie is rated and the most popular movies in
the latest𝑤user interactions.
•WorldCup7encompasses all 1,352,804,107 requests made to
the 1998 FIFA World Cup website from April 30, 1998 to July
26, 1998. Each request has the following fields: timestamp ,
clientID ,objectID ,size ,method ,status ,type , as well
asserver . Pre-processing steps include (1) removing incom-
plete and duplicate requests and (2) sorting the requests
bytimestamp . After pre-processing, the dataset contains
1,267,670,951 requests for 82,592 distinct URLs. We aim to
track the number of times each URL is requested and the top
trending URLs in the latest 𝑤requests.
•Gaussian is a synthetic dataset consisting of 10,000,000
items with a domain size of 25,600, in which 95% items are
drawn from a Gaussian distribution with mean 𝜇=50and
standard deviation 𝜎=25(negative numbers are ignored)
and rounded to the nearest positive integers, and the remain-
ing 5% items are drawn from a discrete uniform distribution
in the range[1,25600] .
•Zipf is also a synthetic dataset consisting of 10,000,000 items
with a domain size of 25,600, in which 95% items are drawn
from a Zipf distribution with the skewness parameter 1and
the remaining 5% items are drawn from a discrete uniform
distribution in the range [1,25600] .
We illustrate the distribution of item frequencies in the above five
datasets in Figure 8, where each point (𝑥,𝑦)in a plot denotes that
the ratio of the number of items with a frequency of at least 𝑥and
the total number of items in the domain is 𝑦.
B BASELINE IMPLEMENTATION
In the following, we provide some implementation details of differ-
ent sketches in the experiments.
5https://www.cim.mcgill.ca/~dudek/206/Logs/AOL-user-ct-collection/
6https://grouplens.org/datasets/movielens/latest/
7https://ita.ee.lbl.gov/html/contrib/WorldCup.html•PCC-MG [8]: There is no publicly available implementation
ofPCC-MG. Thus, we follow the specifications in [ 8] to
implement PCC-MG. Given a parameter 𝜆∈(0,1), it builds
a binary tree with 𝑙=⌈ln4
𝜆⌉levels, each of which consists
of equal-length and disjoint blocks. For each block at the
𝑖𝑡ℎlevel, a (private) Misra-Gries sketch is constructed with
the privacy parameter 𝜀𝑖=𝜀
2𝑙−𝑖+1and the sketch parameter
𝜆𝑖=1
2𝑖(𝑙+1). In each experiment, we test different values of
𝜆and report the best result achieved by PCC-MG among all
values of𝜆.
•U-Sketch [38]: To the best of our knowledge, U-Sketch has
not been implemented for experimentation. We first tried
to reproduce U-Sketch following the specifications in [38].
However, this leads to large sketch sizes (typically several
times the size of the sliding window), which is deemed un-
acceptable for stream processing. Therefore, we implement
U-Sketch based on the general idea of [ 38] but modify the
parameter setting. To reduce space usage, we divide the slid-
ing window into 100blocks and limit the number of sketches
built in each block to 2. Other parameters are fine-tuned for
the best performance in each experiment.
•BLMZ-Sketch [5]: To the best of our knowledge, BLMZ-
Sketch has also not been implemented for experimentation.
We found that the specifications in [ 5] imply an excessively
small block size (even less than 1in some cases). Therefore,
similar to U-Sketch, we implement BLMZ-Sketch based
on the general idea of [ 5] but modify the parameter setting.
In particular, we fix the number 𝑙of levels to 4and the
size of each block to𝑤
16. Other parameters are determined
accordingly, and, in each experiment, we also fine-tune them
and report the best result among all tested settings.
•Microscope-Sketch [40]: We use the code published by the
authors on GitHub8. We test the variants of Microscope-
Sketch using CMS, CU-Sketch, and CountSketch and find
that the CMS version shows the best performance in most
cases. Therefore, we only employ its CMS version in our
experiments. Finally, in each experiment, we also report the
best result among all the parameter settings.
C PARAMETER SENSITIVITY
Figure 9 illustrates how the number of checkpoints in each smooth
histogram affects the MAE for frequency estimation of DPSW-
Sketch. By setting the privacy parameter 𝜀to1and the length of
each substream to 0.1𝑤and limiting the total sketch size to at most
100KB, we adjust the value of 𝛼from 0.99to0.1so that|𝐼|is varied
over{2,3,4,5,8,10,15}. Our results indicate a significant growth
in MAE across all datasets as the number of checkpoints increases.
This is because more checkpoints lead to fewer privacy budgets
assigned to all PCMSs. Accordingly, larger Gaussian noise should
be added to each counter, which naturally causes higher MAEs.
Figure 10 illustrates the impact of the number of substreams
in each window on the MAE of frequency estimation of DPSW-
Sketch. We fix 𝜀=1and|𝐼|=3and limit the total sketch size to
at most 100KB. We then vary the value of 𝛽to adjust the length of
8https://github.com/MicroscopeSketch/MicroscopeSketch
3265KDD ’24, August 25–29, 2024, Barcelona, Spain Yiping Wang, Yanhao Wang, and Cen Chen
Figure 8: Distribution of item frequencies in each dataset.
Figure 9: Effect of the number of checkpoints in each smooth histogram on the performance of DPSW-Sketch.
Figure 10: Effect of the number of substreams in each window on the performance of DPSW-Sketch.
Figure 11: Effect of the number of hash functions in each PCMS on the performance of DPSW-Sketch.
each substream from 0.02𝑤to0.5𝑤. Consequently, the number of
substreams in each window is set to {2,5,10,15,20,30,50}. We find
that, as the number of substreams increases, the MAE first decreases,
reaching its lowest point around 10substreams per window, and
then increases. On the one hand, the misalignment between the
current window and the sketch used for query processing increases
the MAE when the length of a substream is too large. On the other
hand, the restriction on the total sketch size makes the size of each
PCMS smaller when the length of a substream is too small, thus
leading to more hash collisions and a higher MAE.Figure 11 shows how the values of 𝑎and𝑏for each PCMS affect
the MAE for frequency estimation of DPSW-Sketch. We also fix
𝜀=1,|𝐼|=3, and the length of each substream to 0.1𝑤. Then,
by limiting the total sketch size to 100KB, we vary the number
𝑎of hash functions in each PCMS from 2to10and, accordingly,
the range of each hash function from 5,000to1,000. The results
show that no single value of 𝑎guarantees good performance in all
datasets because each dataset has a different frequency distribution
of items and domain size. Since the MAE does not decrease when
𝑎>5in most cases, we only use 𝑎=2,3,4,5in the experiments.
3266